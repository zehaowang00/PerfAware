Method Signature,Method Body
.MavenWrapperDownloader.main,"    public static void main(String args[]) {
        System.out.println(""- Downloader started"");
        File baseDirectory = new File(args[0]);
        System.out.println(""- Using base directory: "" + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if(mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println(""- ERROR loading '"" + MAVEN_WRAPPER_PROPERTIES_PATH + ""'"");
            } finally {
                try {
                    if(mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println(""- Downloading from: "" + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if(!outputFile.getParentFile().exists()) {
            if(!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        ""- ERROR creating output directory '"" + outputFile.getParentFile().getAbsolutePath() + ""'"");
            }
        }
        System.out.println(""- Downloading to: "" + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println(""Done"");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println(""- Error downloading"");
            e.printStackTrace();
            System.exit(1);
        }
    }"
.MavenWrapperDownloader.downloadFileFromURL,"    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        if (System.getenv(""MVNW_USERNAME"") != null && System.getenv(""MVNW_PASSWORD"") != null) {
            String username = System.getenv(""MVNW_USERNAME"");
            char[] password = System.getenv(""MVNW_PASSWORD"").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

"
.MavenWrapperDownloader.getPasswordAuthentication,"                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            "
at.favre.tools.dconvert.test.WorkerHandlerTest.setUp,"    public void setUp() throws Exception {
        super.setUp();
        random = new Random(12363012L);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.testZeroFilesInput,"    public void testZeroFilesInput() throws Exception {
        TestCallback callback = new TestCallback(0, Collections.emptyList(), false, latch);
        new WorkerHandler<>(Collections.singletonList(new MockProcessor()), arguments, callback).start(Collections.emptyList());
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.test66FilesInput,"    public void test66FilesInput() throws Exception {
        List<File> files = createFiles(66);
        TestCallback callback = new TestCallback(files.size(), Collections.emptyList(), false, latch);
        new WorkerHandler<>(Collections.singletonList(new MockProcessor()), arguments, callback).start(files);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.test33With3ProcessorsFilesInput,"    public void test33With3ProcessorsFilesInput() throws Exception {
        List<File> files = createFiles(33);
        List<IPostProcessor> postProcessors = createProcessors(3);
        TestCallback callback = new TestCallback(files.size() * postProcessors.size(), Collections.emptyList(), false, latch);
        new WorkerHandler<>(postProcessors, arguments, callback).start(files);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.test5With33ProcessorsFilesInput,"    public void test5With33ProcessorsFilesInput() throws Exception {
        List<File> files = createFiles(5);
        List<IPostProcessor> postProcessors = createProcessors(33);
        TestCallback callback = new TestCallback(files.size() * postProcessors.size(), Collections.emptyList(), false, latch);
        new WorkerHandler<>(postProcessors, arguments, callback).start(files);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.testShouldHaveException,"    public void testShouldHaveException() throws Exception {
        List<File> files = createFiles(1);
        Exception exception = new MockException();
        TestCallback callback = new TestCallback(files.size(), Collections.singletonList(exception), false, latch);
        new WorkerHandler<>(Collections.singletonList(new MockProcessor(exception)), arguments, callback).start(files);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.testShouldHave5Exception,"    public void testShouldHave5Exception() throws Exception {
        List<Exception> exception = Arrays.asList(new MockException(), new MockException(), new MockException(), new MockException(), new MockException());
        List<File> files = createFiles(exception.size());
        TestCallback callback = new TestCallback(files.size(), exception, false, latch);
        new WorkerHandler<>(Collections.singletonList(new MockProcessor(new MockException())), arguments, callback).start(files);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.testShouldHaltOnException,"    public void testShouldHaltOnException() throws Exception {
        List<Exception> exception = Arrays.asList(new MockException());
        List<File> files = createFiles(exception.size());
        TestCallback callback = new TestCallback(files.size(), exception, true, latch);
        new WorkerHandler<>(Collections.singletonList(new MockProcessor(new MockException())),
                new Arguments.Builder(null, Arguments.DEFAULT_SCALE).threadCount(4).haltOnError(true).skipParamValidation(true).build(), callback).start(files);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.testAndroidConverterInHandler,"    public void testAndroidConverterInHandler() throws Exception {
        List<File> files = AConverterTest.copyToTestPath(src, ""png_example2_alpha_144.png"", ""gif_example_640.gif"", ""jpg_example_1920.jpg"");
        Arguments arg = new Arguments.Builder(src, Arguments.DEFAULT_SCALE).dstFolder(dst).platform(Collections.singleton(EPlatform.ANDROID)).threadCount(4).build();
        TestCallback callback = new TestCallback(files.size(), Collections.emptyList(), false, latch);
        new WorkerHandler<>(Collections.singletonList(new AndroidConverter()), arg, callback).start(files);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
        AndroidConverterTest.checkOutDirAndroid(dst, arg, files);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.testAllPlatformConverterInHandler,"    public void testAllPlatformConverterInHandler() throws Exception {
        List<File> files = AConverterTest.copyToTestPath(src, ""png_example3_alpha_128.png"", ""png_example1_alpha_144.png"", ""jpg_example2_512.jpg"");
        List<IPlatformConverter> converters = EPlatform.getAllConverters();
        Arguments arg = new Arguments.Builder(src, Arguments.DEFAULT_SCALE).platform(EPlatform.getAll()).dstFolder(dst).threadCount(4).build();
        TestCallback callback = new TestCallback(files.size() * converters.size(), Collections.emptyList(), false, latch);
        new WorkerHandler<>(converters, arg, callback).start(files);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
        AConverterTest.checkMultiPlatformConvert(dst, arg, files);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.checkResult,"    private void checkResult(TestCallback callback) {
        assertEquals(callback.expectedJobs, callback.actualJobs);
        assertEquals(callback.expectedExceptions, callback.actualExceptions);
        assertEquals(callback.expectedHaltDuringProcess, callback.actualHaltDuringProcess);
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.createFiles,"    private List<File> createFiles(int count) {
        List<File> files = new ArrayList<>(count);
        for (int i = 0; i < count; i++) {
            files.add(new File(""mock"" + i));
        }
        return files;
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.createProcessors,"    private List<IPostProcessor> createProcessors(int count) {
        List<IPostProcessor> processors = new ArrayList<>(count);
        for (int i = 0; i < count; i++) {
            processors.add(new MockProcessor(22 + random.nextInt(50)));
        }
        return processors;
    }"
at.favre.tools.dconvert.test.WorkerHandlerTest.onProgress,"        public void onProgress(float percent) {
        }"
at.favre.tools.dconvert.test.WorkerHandlerTest.onFinished,"        public void onFinished(int finishedJobs, List<File> outFiles, StringBuilder log, List<Exception> exceptions, boolean haltedDuringProcess) {
            actualJobs = finishedJobs;
            actualExceptions = exceptions;
            actualHaltDuringProcess = haltedDuringProcess;
            latch.countDown();
        }
    "
at.favre.tools.dconvert.test.AndroidConverterTest.testMipmapFolder,"    public void testMipmapFolder() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example1_alpha_144.png"");
        test(new Arguments.Builder(defaultSrc, DEFAULT_SCALE).dstFolder(defaultDst).createMipMapInsteadOfDrawableDir(true).includeAndroidLdpiTvdpi(true).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AndroidConverterTest.testLdpiAndTvdpi,"    public void testLdpiAndTvdpi() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example1_alpha_144.png"");
        test(new Arguments.Builder(defaultSrc, DEFAULT_SCALE).dstFolder(defaultDst).includeAndroidLdpiTvdpi(true).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AndroidConverterTest.testSingleNinePatch,"    public void testSingleNinePatch() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""ninepatch_bubble.9.png"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AndroidConverterTest.getType,"    protected EPlatform getType() {
        return EPlatform.ANDROID;
    }"
at.favre.tools.dconvert.test.AndroidConverterTest.checkOutDir,"    protected void checkOutDir(File dstDir, Arguments arguments, List<File> files, EPlatform type) throws IOException {
        checkOutDirAndroid(dstDir, arguments, files);
    }"
at.favre.tools.dconvert.test.AndroidConverterTest.checkOutDirAndroid,"    public static void checkOutDirAndroid(File dstDir, Arguments arguments, List<File> files) throws IOException {
        Map<File, Dimension> dimensionMap = createDimensionMap(files);

        List<DensityFolder> expectedDirs = new ArrayList<>();

        expectedDirs.addAll(AndroidConverter.getAndroidDensityDescriptors(arguments)
                .stream()
                .map(androidDensityDescriptor -> new DensityFolder(androidDensityDescriptor.folderName, androidDensityDescriptor.scale)).collect(Collectors.toList()));

        assertFalse(""expected dirs should not be empty"", expectedDirs.isEmpty());
        if (!files.isEmpty()) {
            assertFalse(""output dir should not be empty"", dstDir.list() == null && dstDir.list().length == 0);

            System.out.println(""Android-convert "" + files);

            for (String path : dstDir.list()) {
                expectedDirs.stream().filter(expectedDir -> expectedDir.folderName.equals(path)).forEach(expectedDir -> {
                    try {
                        expectedDir.found = true;

                        List<ImageCheck> expectedFiles = createExpectedFilesMap(arguments, new File(dstDir, path), files);

                        assertTrue(""files count should match input"", files.isEmpty() == expectedFiles.isEmpty());

                        for (ImageCheck expectedFile : expectedFiles) {
                            for (File imageFile : new File(dstDir, path).listFiles()) {
                                if (expectedFile.targetFile.equals(imageFile)) {
                                    expectedFile.found = true;
                                    Dimension expectedDimension = getScaledDimension(expectedFile.srcFile, arguments, dimensionMap.get(expectedFile.srcFile), expectedDir.scaleFactor, expectedFile.isNinepatch);
                                    Dimension actualDimensions = ImageUtil.getImageDimension(imageFile);
                                    assertEquals(""height should match"", expectedDimension.getHeight(), actualDimensions.getHeight(), expectedFile.isNinepatch ? 15 : 0.1);
                                    assertEquals(""width should match"", expectedDimension.getWidth(), actualDimensions.getWidth(), expectedFile.isNinepatch ? 15 : 0.1);
                                }
                            }
                        }

                        for (ImageCheck expectedFile : expectedFiles) {
                            assertTrue(expectedFile.targetFile + "" file should be generated in path"", expectedFile.found);
                        }
                        System.out.print(""found "" + expectedFiles.size() + "" files in "" + expectedDir.folderName + "", "");
                    } catch (Exception e) {
                        fail();
                        e.printStackTrace();
                    }
                });

            }

            for (DensityFolder expectedDir : expectedDirs) {
                assertTrue(expectedDir.folderName + "" should be generated in path"", expectedDir.found);
            }

            System.out.println();
        } else {
            assertTrue(dstDir.list() == null || dstDir.list().length == 0);
        }
    }"
at.favre.tools.dconvert.test.AndroidConverterTest.createExpectedFilesMap,"    private static List<ImageCheck> createExpectedFilesMap(Arguments arguments, File file, List<File> files) throws IOException {
        List<ImageCheck> expectedFiles = new ArrayList<>();

        for (File srcImageFile : files) {
            for (ImageType.ECompression compression : Arguments.getOutCompressionForType(arguments.outputCompressionMode, Arguments.getImageType(srcImageFile))) {
                expectedFiles.add(new ImageCheck(srcImageFile, new File(file, MiscUtil.getFileNameWithoutExtension(srcImageFile) + ""."" + compression.extension)));
            }
        }

        return expectedFiles;
    }"
at.favre.tools.dconvert.test.AIntegrationTest.setUp,"    public void setUp() throws Exception {
        arguments = new Arguments.Builder(null, Arguments.DEFAULT_SCALE).threadCount(4).skipParamValidation(true).build();
        latch = new CountDownLatch(1);
        src = temporaryFolder.newFolder(""convert-test"", ""src"");
        dst = temporaryFolder.newFolder(""convert-test"", ""out"");
    }
"
at.favre.tools.dconvert.test.DConvertTest.testZeroFilesInput,"    public void testZeroFilesInput() throws Exception {
        TestCallback callback = new TestCallback(0, Collections.emptyList(), false, latch);
        new DConvert().execute(new Arguments.Builder(null, Arguments.DEFAULT_SCALE).threadCount(4).skipParamValidation(true).build(), false, callback);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
    }"
at.favre.tools.dconvert.test.DConvertTest.testSingleFileIosPlatformConverter,"    public void testSingleFileIosPlatformConverter() throws Exception {
        List<File> files = AConverterTest.copyToTestPath(src, ""png_example1_alpha_144.png"");
        Arguments arg = new Arguments.Builder(src, Arguments.DEFAULT_SCALE).platform(Collections.singleton(EPlatform.IOS)).dstFolder(dst).threadCount(4).build();
        TestCallback callback = new TestCallback(files.size(), Collections.emptyList(), false, latch);
        new DConvert().execute(arg, false, callback);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
        IOSConverterTest.checkOutDirIos(dst, arg, files);
    }"
at.favre.tools.dconvert.test.DConvertTest.testAndroidPlatformConverter,"    public void testAndroidPlatformConverter() throws Exception {
        List<File> files = AConverterTest.copyToTestPath(src, ""png_example3_alpha_128.png"", ""png_example1_alpha_144.png"", ""jpg_example2_512.jpg"", ""gif_example_640.gif"", ""png_example4_500.png"", ""psd_example_827.psd"");
        Arguments arg = new Arguments.Builder(src, Arguments.DEFAULT_SCALE).platform(Collections.singleton(EPlatform.ANDROID)).dstFolder(dst).threadCount(4).build();
        TestCallback callback = new TestCallback(files.size(), Collections.emptyList(), false, latch);
        new DConvert().execute(arg, false, callback);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
        AndroidConverterTest.checkOutDirAndroid(dst, arg, files);
    }"
at.favre.tools.dconvert.test.DConvertTest.testAllPlatformConverter,"    public void testAllPlatformConverter() throws Exception {
        List<File> files = AConverterTest.copyToTestPath(src, ""png_example3_alpha_128.png"", ""png_example1_alpha_144.png"", ""jpg_example2_512.jpg"");
        Arguments arg = new Arguments.Builder(src, Arguments.DEFAULT_SCALE).platform(EPlatform.getAll()).dstFolder(dst).threadCount(4).build();
        TestCallback callback = new TestCallback(files.size() * EPlatform.getAll().size(), Collections.emptyList(), false, latch);
        new DConvert().execute(arg, false, callback);
        assertTrue(latch.await(WAIT_SEC, TimeUnit.SECONDS));
        checkResult(callback);
        AConverterTest.checkMultiPlatformConvert(dst, arg, files);
    }"
at.favre.tools.dconvert.test.DConvertTest.checkResult,"    private void checkResult(TestCallback callback) {
        assertEquals(callback.expectedJobs, callback.actualJobs);
        assertEquals(callback.expectedExceptions, callback.actualExceptions);
        assertEquals(callback.expectedHaltDuringProcess, callback.actualHaltDuringProcess);
    }"
at.favre.tools.dconvert.test.DConvertTest.onProgress,"        public void onProgress(float percent) {
        }"
at.favre.tools.dconvert.test.DConvertTest.onFinished,"        public void onFinished(int finishedJobs, List<Exception> exceptions, long time, boolean haltedDuringProcess, String log) {
            actualJobs = finishedJobs;
            actualExceptions = exceptions;
            actualHaltDuringProcess = haltedDuringProcess;
            latch.countDown();
        }
    "
at.favre.tools.dconvert.test.CLISystemTest.setUp,"    public void setUp() throws Exception {
        super.setUp();
        defaultArgRaw = ""-src \"""" + src.getAbsolutePath() + ""\"" -dst \"""" + dst.getAbsolutePath() + ""\"" -scale 4"";

    }"
at.favre.tools.dconvert.test.CLISystemTest.testZeroFilesInput,"    public void testZeroFilesInput() throws Exception {
        Arguments arg = CLIInterpreter.parse(CLIParserTest.asArgArray(defaultArgRaw));
        Main.main(CLIParserTest.asArgArray(defaultArgRaw));
        AConverterTest.checkMultiPlatformConvert(dst, arg, Collections.emptyList());
    }"
at.favre.tools.dconvert.test.CLISystemTest.testSingleFileIosPlatformConverter,"    public void testSingleFileIosPlatformConverter() throws Exception {
        defaultArgRaw += "" -"" + CLIInterpreter.PLATFORM_ARG + "" ios"";
        List<File> files = AConverterTest.copyToTestPath(src, ""png_example1_alpha_144.png"");
        Arguments arg = CLIInterpreter.parse(CLIParserTest.asArgArray(defaultArgRaw));
        Main.main(CLIParserTest.asArgArray(defaultArgRaw));
        IOSConverterTest.checkOutDirIos(dst, arg, files);
    }"
at.favre.tools.dconvert.test.CLISystemTest.testAndroidPlatformConverter,"    public void testAndroidPlatformConverter() throws Exception {
        List<File> files = AConverterTest.copyToTestPath(src, ""png_example3_alpha_128.png"", ""png_example1_alpha_144.png"", ""jpg_example2_512.jpg"", ""gif_example_640.gif"", ""png_example4_500.png"", ""psd_example_827.psd"");
        defaultArgRaw += "" -"" + CLIInterpreter.PLATFORM_ARG + "" android"";
        Arguments arg = CLIInterpreter.parse(CLIParserTest.asArgArray(defaultArgRaw));
        Main.main(CLIParserTest.asArgArray(defaultArgRaw));
        AndroidConverterTest.checkOutDirAndroid(dst, arg, files);
    }"
at.favre.tools.dconvert.test.CLISystemTest.testAllPlatformConverter,"    public void testAllPlatformConverter() throws Exception {
        List<File> files = AConverterTest.copyToTestPath(src, ""png_example3_alpha_128.png"", ""png_example1_alpha_144.png"", ""jpg_example2_512.jpg"");
        defaultArgRaw += "" -"" + CLIInterpreter.PLATFORM_ARG + "" all"";
        Arguments arg = CLIInterpreter.parse(CLIParserTest.asArgArray(defaultArgRaw));
        Main.main(CLIParserTest.asArgArray(defaultArgRaw));
        AConverterTest.checkMultiPlatformConvert(dst, arg, files);
    }
"
at.favre.tools.dconvert.test.AConverterTest.oneTimeSetUp,"    public static void oneTimeSetUp() {

    }"
at.favre.tools.dconvert.test.AConverterTest.oneTimeTearDown,"    public static void oneTimeTearDown() {
    }"
at.favre.tools.dconvert.test.AConverterTest.setUp,"    public void setUp() throws IOException {
        defaultSrc = temporaryFolder.newFolder(""converter-test"", ""src"");
        defaultDst = temporaryFolder.newFolder(""converter-test"", ""out"");
        converter = getType().getConverter();
    }"
at.favre.tools.dconvert.test.AConverterTest.tearDown,"    public void tearDown() {
        defaultDst = defaultSrc = null;
        converter = null;
        defaultCallback = null;
    }"
at.favre.tools.dconvert.test.AConverterTest.getType,
at.favre.tools.dconvert.test.AConverterTest.checkOutDir,
at.favre.tools.dconvert.test.AConverterTest.testSinglePng,"    public void testSinglePng() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example1_alpha_144.png"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testSingleJpeg,"    public void testSingleJpeg() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""jpg_example_1920.jpg"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testSingleGif,"    public void testSingleGif() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""gif_example_640.gif"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testSingleBmp,"    public void testSingleBmp() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""bmp_example_256.bmp"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testSingleTiff,"    public void testSingleTiff() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""tiff_example_256.tif"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testSinglePsd,"    public void testSinglePsd() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""psd_example_827.psd"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testSingleSvg,"    public void testSingleSvg() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""svg_example_512.svg"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testRoundMode,"    public void testRoundMode() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example1_alpha_144.png"");
        test(new Arguments.Builder(defaultSrc, 2.33f).dstFolder(defaultDst).scaleRoundingStragy(RoundingHandler.Strategy.FLOOR).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testScaleWidthInDp,"    public void testScaleWidthInDp() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""jpg_example_1920.jpg"");
        test(new Arguments.Builder(defaultSrc, 24).dstFolder(defaultDst).scaleMode(EScaleMode.DP_WIDTH).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testMultipleScaleWidthInDp,"    public void testMultipleScaleWidthInDp() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example1_alpha_144.png"", ""png_example4_500.png"", ""jpg_example_1920.jpg"");
        test(new Arguments.Builder(defaultSrc, 48).dstFolder(defaultDst).scaleMode(EScaleMode.DP_WIDTH).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testScaleHeightInDp,"    public void testScaleHeightInDp() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""jpg_example_1920.jpg"");
        test(new Arguments.Builder(defaultSrc, 128).dstFolder(defaultDst).scaleMode(EScaleMode.DP_HEIGHT).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testMultipleScaleHeightInDp,"    public void testMultipleScaleHeightInDp() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example1_alpha_144.png"", ""png_example4_500.png"", ""jpg_example_1920.jpg"");
        test(new Arguments.Builder(defaultSrc, 48).dstFolder(defaultDst).scaleMode(EScaleMode.DP_HEIGHT).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testMultiplePng,"    public void testMultiplePng() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example1_alpha_144.png"", ""png_example2_alpha_144.png"", ""png_example3_alpha_128.png"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testPngAndJpegKeepCompressions,"    public void testPngAndJpegKeepCompressions() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example2_alpha_144.png"", ""jpg_example_1920.jpg"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testMixedCompressionsShouldBeMostlyPng,"    public void testMixedCompressionsShouldBeMostlyPng() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example2_alpha_144.png"", ""gif_example_640.gif"", ""psd_example_827.psd"", ""bmp_example_256.bmp"", ""jpg_example_1920.jpg"");
        defaultTest(files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testMixedCompressionsShouldKeepCompressions,"    public void testMixedCompressionsShouldKeepCompressions() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example2_alpha_144.png"", ""gif_example_640.gif"", ""tiff_example_256.tif"", ""bmp_example_256.bmp"", ""jpg_example_1920.jpg"");
        test(new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.SAME_AS_INPUT_STRICT, 0.5f)
                .dstFolder(defaultDst).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testMixedCompressionsShouldCreateJpg,"    public void testMixedCompressionsShouldCreateJpg() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example2_alpha_144.png"", ""gif_example_640.gif"", ""psd_example_827.psd"", ""bmp_example_256.bmp"", ""jpg_example_1920.jpg"");
        test(new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_JPG, 0.0f)
                .dstFolder(defaultDst).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testMixedCompressionsShouldCreateJpgAndPng,"    public void testMixedCompressionsShouldCreateJpgAndPng() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example2_alpha_144.png"", ""gif_example_640.gif"", ""jpg_example_1920.jpg"");
        test(new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_JPG_AND_PNG, 0.0f)
                .dstFolder(defaultDst).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.testDryRun,"    public void testDryRun() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example2_alpha_144.png"", ""gif_example_640.gif"", ""jpg_example_1920.jpg"");
        test(new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_JPG_AND_PNG, 0.0f)
                .dstFolder(defaultDst).platform(Collections.singleton(getType())).dryRun(true).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.defaultTest,"    protected void defaultTest(List<File> files) throws Exception {
        test(new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.SAME_AS_INPUT_PREF_PNG, 0.5f)
                .dstFolder(defaultDst).platform(Collections.singleton(getType())).build(), files);
    }"
at.favre.tools.dconvert.test.AConverterTest.test,"    protected void test(Arguments arg, List<File> files) throws Exception {
        for (File fileToProcess : arg.filesToProcess) {
            Result result = converter.convert(fileToProcess, arg);
            assertNull(""should be no exception: "" + result.exception, result.exception);
        }

        if (arg.dryRun) {
            assertEquals(""destination folder should be empty"", 0, arg.dst.list().length);
        } else {
            checkOutDir(arg.dst, arg, files, getType());
        }
    }"
at.favre.tools.dconvert.test.AConverterTest.copyToTestPath,"    public static List<File> copyToTestPath(File defaultSrc, String... resourceNames) throws Exception {
        List<File> copiedFiles = new ArrayList<>();
        for (String resourceName : resourceNames) {
            File dstFile = new File(defaultSrc, resourceName);
            Files.copy(new File(AConverterTest.class.getClassLoader().getResource(resourceName).getFile()).toPath(), dstFile.toPath());
            copiedFiles.add(dstFile);
        }
        return copiedFiles;
    }"
at.favre.tools.dconvert.test.AConverterTest.checkMultiPlatformConvert,"    public static void checkMultiPlatformConvert(File dst, Arguments arg, List<File> files) throws IOException {
        AndroidConverterTest.checkOutDirAndroid(new File(dst, ""android""), arg, files);
        IOSConverterTest.checkOutDirIos(new File(dst, ""ios""), arg, files);
        WindowsConverterTest.checkOutDirWindows(new File(dst, ""windows""), arg, files);
        WebConverterTest.checkOutDirWeb(new File(dst, ""web""), arg, files);
    }"
at.favre.tools.dconvert.test.AConverterTest.createDimensionMap,"    protected static Map<File, Dimension> createDimensionMap(List<File> files) throws IOException {
        Map<File, Dimension> map = new HashMap<>();

        for (File file : files) {
            map.put(file, ImageUtil.getImageDimension(file));
        }
        return map;
    }"
at.favre.tools.dconvert.test.AConverterTest.getScaledDimension,"    protected static Dimension getScaledDimension(File srcFile, Arguments args, Dimension dimension, float scale, boolean isNinePatch) throws IOException {
        double baseWidth;
        double baseHeight;

        if (args.scaleMode == EScaleMode.DP_WIDTH) {
            Dimension srcDimension = ImageUtil.getImageDimension(srcFile);
            float scaleFactor = args.scale / (float) srcDimension.width;

            baseWidth = (int) args.round(args.scale);
            baseHeight = (int) args.round(scaleFactor * (float) srcDimension.height);
        } else if (args.scaleMode == EScaleMode.DP_HEIGHT) {
            Dimension srcDimension = ImageUtil.getImageDimension(srcFile);
            float scaleFactor = args.scale / (float) srcDimension.height;

            baseWidth = (int) args.round(scaleFactor * (float) srcDimension.width);
            baseHeight = (int) args.round(args.scale);
        } else {
            baseWidth = (double) dimension.width / args.scale;
            baseHeight = (double) dimension.height / args.scale;
        }

        if (isNinePatch) {
            return new Dimension((int) args.round(((baseWidth + 1) * scale) + 2),
                    (int) args.round(((baseHeight + 1) * scale) + 2));
        } else {
            return new Dimension((int) args.round(baseWidth * scale),
                    (int) args.round(baseHeight * scale));
        }
    }"
at.favre.tools.dconvert.test.AConverterTest.checkOutDirPostfixDescr,"    public static void checkOutDirPostfixDescr(File dstRootDir, Arguments arguments, List<File> files, List<PostfixDescriptor> densityDescriptors) throws IOException {
        Map<File, Dimension> dimensionMap = createDimensionMap(files);

        if (!files.isEmpty()) {
            assertTrue(""src files and dst folder count should match"", dstRootDir.listFiles().length >= files.size());

            List<ImageInfo> expectedFiles = new ArrayList<>();
            for (File srcImageFile : files) {
                for (PostfixDescriptor descriptor : densityDescriptors) {
                    expectedFiles.addAll(Arguments.getOutCompressionForType(arguments.outputCompressionMode, Arguments.getImageType(srcImageFile))
                            .stream()
                            .map(compression -> new ImageInfo(srcImageFile, MiscUtil.getFileNameWithoutExtension(srcImageFile) + descriptor.postFix + ""."" + compression.extension, descriptor.scale))
                            .collect(Collectors.toList()));
                }
            }

            for (File imageFile : dstRootDir.listFiles()) {
                for (ImageInfo expectedFile : expectedFiles) {
                    if (expectedFile.targetFileName.equals(imageFile.getName())) {
                        expectedFile.found = true;

                        Dimension expectedDimension = getScaledDimension(expectedFile.srcFile, arguments, dimensionMap.get(expectedFile.srcFile), expectedFile.scale, false);
                        assertEquals(""dimensions should match"", expectedDimension, ImageUtil.getImageDimension(imageFile));
                    }
                }
            }

            for (ImageInfo expectedFile : expectedFiles) {
                assertTrue(expectedFile.targetFileName + "" expected in folder "" + dstRootDir, expectedFile.found);
            }

            System.out.println(""found "" + expectedFiles.size() + "" files in "" + dstRootDir);
        } else {
            assertTrue(dstRootDir.list() == null || dstRootDir.list().length == 0);
        }
    }
"
at.favre.tools.dconvert.test.IOSConverterTest.getType,"    protected EPlatform getType() {
        return EPlatform.IOS;
    }"
at.favre.tools.dconvert.test.IOSConverterTest.checkOutDir,"    protected void checkOutDir(File dstDir, Arguments arguments, List<File> files, EPlatform type) throws IOException {
        checkOutDirIos(dstDir, arguments, files);
    }"
at.favre.tools.dconvert.test.IOSConverterTest.testMultiplePngImagesetFolders,"    public void testMultiplePngImagesetFolders() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example1_alpha_144.png"", ""png_example2_alpha_144.png"", ""jpg_example2_512.jpg"");
        test(new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.SAME_AS_INPUT_PREF_PNG, 0.5f)
                .dstFolder(defaultDst).platform(Collections.singleton(getType())).iosCreateImagesetFolders(true).build(), files);
    }"
at.favre.tools.dconvert.test.IOSConverterTest.testSinglePngImagesetFolder,"    public void testSinglePngImagesetFolder() throws Exception {
        List<File> files = copyToTestPath(defaultSrc, ""png_example1_alpha_144.png"");
        test(new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.SAME_AS_INPUT_PREF_PNG, 0.5f)
                .dstFolder(defaultDst).platform(Collections.singleton(getType())).iosCreateImagesetFolders(true).build(), files);
    }"
at.favre.tools.dconvert.test.IOSConverterTest.checkOutDirIos,"    public static void checkOutDirIos(File dstDir, Arguments arguments, List<File> files) throws IOException {
        Map<File, Dimension> dimensionMap = createDimensionMap(files);

        List<PostfixDescriptor> densityDescriptors = IOSConverter.getIosDescriptors();

        System.out.println(""ios-convert "" + files);

        if (arguments.iosCreateImagesetFolders) {
            checkWithImagesetFolders(dstDir, arguments, files, dimensionMap, densityDescriptors);
        } else {
            checkOutDirPostfixDescr(new File(dstDir, IOSConverter.ROOT_FOLDER), arguments, files, densityDescriptors);
        }
    }"
at.favre.tools.dconvert.test.IOSConverterTest.checkWithImagesetFolders,"    private static void checkWithImagesetFolders(File dstDir, Arguments arguments, List<File> files, Map<File, Dimension> dimensionMap, List<PostfixDescriptor> densityDescriptors) throws IOException {
        assertTrue(""src files and dst folder count should match"", files.size() == dstDir.listFiles().length);
        for (File iosImgFolder : dstDir.listFiles()) {
            boolean found = false;
            File srcFile = null;
            for (File file : files) {
                if (String.valueOf(MiscUtil.getFileNameWithoutExtension(file) + "".imageset"").equals(iosImgFolder.getName())) {
                    found = true;
                    srcFile = file;
                    break;
                }
            }

            assertTrue(""root image folder should be found "", found);
            assertTrue(""image folder should contain at least 1 file"", iosImgFolder.listFiles().length > 0);

            List<ImageInfo> expectedFiles = new ArrayList<>();
            for (PostfixDescriptor densityDescriptor : densityDescriptors) {
                final File finalSrcFile = srcFile;
                expectedFiles.addAll(Arguments.getOutCompressionForType(
                        arguments.outputCompressionMode, Arguments.getImageType(srcFile)).stream().map(compression ->
                        new ImageInfo(finalSrcFile, MiscUtil.getFileNameWithoutExtension(finalSrcFile) + densityDescriptor.postFix + ""."" + compression.extension, densityDescriptor.scale)).collect(Collectors.toList()));
            }

            for (File dstImageFile : iosImgFolder.listFiles()) {
                for (ImageInfo expectedFile : expectedFiles) {
                    if (dstImageFile.getName().equals(expectedFile.targetFileName)) {
                        expectedFile.found = true;

                        Dimension expectedDimension = getScaledDimension(expectedFile.srcFile, arguments, dimensionMap.get(expectedFile.srcFile), expectedFile.scale, false);
                        assertEquals(""dimensions should match"", expectedDimension, ImageUtil.getImageDimension(dstImageFile));
                    }
                }
            }

            for (ImageInfo expectedFile : expectedFiles) {
                assertTrue(expectedFile.targetFileName + "" expected in folder "" + srcFile, expectedFile.found);
            }

            System.out.print(""found "" + expectedFiles.size() + "" files in "" + iosImgFolder + "", "");
        }
        System.out.println();
    }
"
at.favre.tools.dconvert.test.CLIParserTest.oneTimeSetUp,"    public static void oneTimeSetUp() {

    }"
at.favre.tools.dconvert.test.CLIParserTest.oneTimeTearDown,"    public static void oneTimeTearDown() {
    }"
at.favre.tools.dconvert.test.CLIParserTest.setUp,"    public void setUp() throws IOException {
        defaultSrc = temporaryFolder.newFolder(FOLDER1);
        defaultCmd = ""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + defaultSrc.getAbsolutePath() + ""\"" -"" + CLIInterpreter.SCALE_ARG + "" "" + DEFAULT_SCALE;
    }"
at.favre.tools.dconvert.test.CLIParserTest.tearDown,"    public void tearDown() {
        defaultSrc = null;
        defaultCmd = null;
    }"
at.favre.tools.dconvert.test.CLIParserTest.testSimpleUsage,"    public void testSimpleUsage() throws Exception {
        float scale = 2f;
        check(""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + defaultSrc.getAbsolutePath() + ""\"" -"" + CLIInterpreter.SCALE_ARG + "" "" + scale,
                new Arguments.Builder(defaultSrc, scale).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testScales,"    public void testScales() throws Exception {
        for (Float scale : Arrays.asList(new Float[]{0.75f, 1f, 2f, 3f, 4f, 5f, 6f, 1.33f, 2.3936573f})) {
            check(""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + defaultSrc.getAbsolutePath() + ""\""  -"" + CLIInterpreter.SCALE_ARG + "" "" + scale,
                    new Arguments.Builder(defaultSrc, scale).build());
        }
    }"
at.favre.tools.dconvert.test.CLIParserTest.testScalesWidthInDp,"    public void testScalesWidthInDp() throws Exception {
        for (Integer scale : Arrays.asList(new Integer[]{1, 12, 24, 48, 106, 33, 500, 96, 256, 480})) {
            check(""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + defaultSrc.getAbsolutePath() + ""\""  -"" + CLIInterpreter.SCALE_ARG + "" "" + scale + ""dp"",
                    new Arguments.Builder(defaultSrc, scale).scaleMode(EScaleMode.DP_WIDTH).build());
        }
    }"
at.favre.tools.dconvert.test.CLIParserTest.test0ScalesWidthInDp,"    public void test0ScalesWidthInDp() throws Exception {
        check(""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + defaultSrc.getAbsolutePath() + ""\""  -"" + CLIInterpreter.SCALE_ARG + "" "" + 0 + ""dp"",
                new Arguments.Builder(defaultSrc, 0).scaleMode(EScaleMode.DP_WIDTH).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.test9999ScalesWidthInDp,"    public void test9999ScalesWidthInDp() throws Exception {
        check(""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + defaultSrc.getAbsolutePath() + ""\""  -"" + CLIInterpreter.SCALE_ARG + "" "" + 9999 + ""dp"",
                new Arguments.Builder(defaultSrc, 9999).scaleMode(EScaleMode.DP_WIDTH).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testScalesHeightInDp,"    public void testScalesHeightInDp() throws Exception {
        for (Integer scale : Arrays.asList(new Integer[]{1, 12, 24, 48, 106, 33, 500, 96, 256, 480})) {
            check(""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + defaultSrc.getAbsolutePath() + ""\"" -"" + CLIInterpreter.SCALE_IS_HEIGHT_DP_ARG + ""  -"" + CLIInterpreter.SCALE_ARG + "" "" + scale + ""dp"",
                    new Arguments.Builder(defaultSrc, scale).scaleMode(EScaleMode.DP_HEIGHT).build());
        }
    }"
at.favre.tools.dconvert.test.CLIParserTest.testScale0fShouldFail,"    public void testScale0fShouldFail() throws Exception {
        check(""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + defaultSrc.getAbsolutePath() + ""\""  -"" + CLIInterpreter.SCALE_ARG + "" "" + 0f,
                new Arguments.Builder(defaultSrc, 0f).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testScale100ShouldFail,"    public void testScale100ShouldFail() throws Exception {
        check(""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + defaultSrc.getAbsolutePath() + ""\""  -"" + CLIInterpreter.SCALE_ARG + "" "" + 100f,
                new Arguments.Builder(defaultSrc, 100f).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testSourceDirectories,"    public void testSourceDirectories() throws Exception {
        File[] srcDirs = new File[]{temporaryFolder.newFolder(""muh""), temporaryFolder.newFolder(""android""), temporaryFolder.newFolder(""out""),
                temporaryFolder.newFolder(""layer1"", ""layer2""), temporaryFolder.newFolder(""user"", ""Project"", ""su_Bf4-ldr"")};

        for (File srcFolder : Arrays.asList(srcDirs)) {
            check(""-"" + CLIInterpreter.SOURCE_ARG + "" \"""" + srcFolder.getAbsolutePath() + ""\"" -"" + CLIInterpreter.SCALE_ARG + "" "" + DEFAULT_SCALE,
                    new Arguments.Builder(srcFolder, DEFAULT_SCALE).build());
        }
    }"
at.favre.tools.dconvert.test.CLIParserTest.testDestDirectories,"    public void testDestDirectories() throws Exception {
        File[] dstDirs = new File[]{temporaryFolder.newFolder(""simpleOut""), temporaryFolder.newFolder(""ios""), temporaryFolder.newFolder(""in""),
                temporaryFolder.newFolder(""res"", ""drawable-xxhdpi""), temporaryFolder.newFolder(""user"", ""Project"", ""su_Bf4-ldr"")};

        for (File dstFolder : Arrays.asList(dstDirs)) {
            check(defaultCmd + "" -"" + CLIInterpreter.DST_ARG + "" \"""" + dstFolder.getAbsolutePath() + ""\"""",
                    new Arguments.Builder(defaultSrc, DEFAULT_SCALE).dstFolder(dstFolder).build());
        }
    }"
at.favre.tools.dconvert.test.CLIParserTest.testPlatforms,"    public void testPlatforms() throws Exception {
        check(defaultCmd + "" -"" + CLIInterpreter.PLATFORM_ARG + "" all"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).platform(EPlatform.getAll()).build());
        check(defaultCmd + "" -"" + CLIInterpreter.PLATFORM_ARG + "" android"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).platform(Collections.singleton(EPlatform.ANDROID)).build());
        check(defaultCmd + "" -"" + CLIInterpreter.PLATFORM_ARG + "" ios"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).platform(Collections.singleton(EPlatform.IOS)).build());
        check(defaultCmd + "" -"" + CLIInterpreter.PLATFORM_ARG + "" win"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).platform(Collections.singleton(EPlatform.WINDOWS)).build());
        check(defaultCmd + "" -"" + CLIInterpreter.PLATFORM_ARG + "" web"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).platform(Collections.singleton(EPlatform.WEB)).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testScalingAlgorithms,"    public void testScalingAlgorithms() throws Exception {
        for (EScalingAlgorithm algorithm : EScalingAlgorithm.getAllEnabled()) {
            if (algorithm.getSupportedForType().contains(EScalingAlgorithm.Type.DOWNSCALING)) {
                check(defaultCmd + "" -"" + CLIInterpreter.DOWNSCALING_ALGO_ARG + "" "" + algorithm.getName(), new Arguments.Builder(defaultSrc, DEFAULT_SCALE).downScaleAlgorithm(algorithm).build());
            }
            if (algorithm.getSupportedForType().contains(EScalingAlgorithm.Type.UPSCALING)) {
                check(defaultCmd + "" -"" + CLIInterpreter.UPSCALING_ALGO_ARG + "" "" + algorithm.getName(), new Arguments.Builder(defaultSrc, DEFAULT_SCALE).upScaleAlgorithm(algorithm).build());
            }
        }
    }"
at.favre.tools.dconvert.test.CLIParserTest.testOutCompressions,"    public void testOutCompressions() throws Exception {
        check(defaultCmd + "" -"" + CLIInterpreter.OUT_COMPRESSION_ARG + "" jpg"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_JPG).build());
        check(defaultCmd + "" -"" + CLIInterpreter.OUT_COMPRESSION_ARG + "" png"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_PNG).build());
        check(defaultCmd + "" -"" + CLIInterpreter.OUT_COMPRESSION_ARG + "" gif"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_GIF).build());
        check(defaultCmd + "" -"" + CLIInterpreter.OUT_COMPRESSION_ARG + "" bmp"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_BMP).build());
        check(defaultCmd + "" -"" + CLIInterpreter.OUT_COMPRESSION_ARG + "" png+jpg"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_JPG_AND_PNG).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testCompressionQuality,"    public void testCompressionQuality() throws Exception {
        for (Float compression : Arrays.asList(new Float[]{0.0f, 0.1f, 0.05f, 1.0f, 0.5f, 0.7f, 0.8f, 0.999f, 0.0001f})) {
            check(defaultCmd + "" -"" + CLIInterpreter.OUT_COMPRESSION_ARG + "" jpg"" + "" -"" + CLIInterpreter.COMPRESSION_QUALITY_ARG + "" "" + compression, new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_JPG, compression).build());
        }
    }"
at.favre.tools.dconvert.test.CLIParserTest.testCompressionQualityShouldFail,"    public void testCompressionQualityShouldFail() throws Exception {
        check(defaultCmd + "" -"" + CLIInterpreter.OUT_COMPRESSION_ARG + "" jpg"" + "" -"" + CLIInterpreter.COMPRESSION_QUALITY_ARG + "" "" + 1.1f,
                new Arguments.Builder(defaultSrc, DEFAULT_SCALE).compression(EOutputCompressionMode.AS_JPG, 1.1f).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testThreadCounts,"    public void testThreadCounts() throws Exception {
        for (Integer threadCount : Arrays.asList(new Integer[]{1, 2, 3, 4, 5, 6, 7, 8})) {
            check(defaultCmd + "" -"" + CLIInterpreter.THREADS_ARG + "" "" + threadCount, new Arguments.Builder(defaultSrc, DEFAULT_SCALE).threadCount(threadCount).build());
        }
    }"
at.favre.tools.dconvert.test.CLIParserTest.testThreadCount0ShouldFail,"    public void testThreadCount0ShouldFail() throws Exception {
        check(defaultCmd + "" -"" + CLIInterpreter.THREADS_ARG + "" "" + 0, new Arguments.Builder(defaultSrc, DEFAULT_SCALE).threadCount(0).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testRoundingModes,"    public void testRoundingModes() throws Exception {
        check(defaultCmd + "" -"" + CLIInterpreter.ROUNDING_MODE_ARG + "" round"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).scaleRoundingStragy(RoundingHandler.Strategy.ROUND_HALF_UP).build());
        check(defaultCmd + "" -"" + CLIInterpreter.ROUNDING_MODE_ARG + "" floor"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).scaleRoundingStragy(RoundingHandler.Strategy.FLOOR).build());
        check(defaultCmd + "" -"" + CLIInterpreter.ROUNDING_MODE_ARG + "" ceil"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).scaleRoundingStragy(RoundingHandler.Strategy.CEIL).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testFlags,"    public void testFlags() throws Exception {
        check(defaultCmd + "" -skipUpscaling"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).skipUpscaling(true).build());
        check(defaultCmd + "" -"" + CLIInterpreter.SKIP_EXISTING_ARG, new Arguments.Builder(defaultSrc, DEFAULT_SCALE).skipExistingFiles(true).build());
        check(defaultCmd + "" -androidIncludeLdpiTvdpi"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).includeAndroidLdpiTvdpi(true).build());
        check(defaultCmd + "" -"" + CLIInterpreter.VERBOSE_ARG, new Arguments.Builder(defaultSrc, DEFAULT_SCALE).verboseLog(true).build());
        check(defaultCmd + "" -haltOnError"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).haltOnError(true).build());
        check(defaultCmd + "" -androidMipmapInsteadOfDrawable"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).createMipMapInsteadOfDrawableDir(true).build());
        check(defaultCmd + "" -antiAliasing"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).antiAliasing(true).build());
        check(defaultCmd + "" -postProcessorPngCrush"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).enablePngCrush(true).build());
        check(defaultCmd + "" -postProcessorWebp"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).postConvertWebp(true).build());
        check(defaultCmd + "" -postProcessorMozJpeg"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).enableMozJpeg(true).build());
        check(defaultCmd + "" -keepOriginalPostProcessedFiles"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).keepUnoptimizedFilesPostProcessor(true).build());
        check(defaultCmd + "" -iosCreateImagesetFolders"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).iosCreateImagesetFolders(true).build());
        check(defaultCmd + "" -clean"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).clearDirBeforeConvert(true).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testFlagsCombinations,"    public void testFlagsCombinations() throws Exception {
        check(defaultCmd + "" -skipUpscaling -haltOnError -postProcessorPngCrush"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).haltOnError(true).enablePngCrush(true).skipUpscaling(true).build());
        check(defaultCmd + "" -antiAliasing -androidIncludeLdpiTvdpi"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).antiAliasing(true).includeAndroidLdpiTvdpi(true).build());
        check(defaultCmd + "" -postProcessorWebp -"" + CLIInterpreter.VERBOSE_ARG + "" -skipUpscaling -antiAliasing"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).antiAliasing(true).postConvertWebp(true).verboseLog(true).skipUpscaling(true).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.testDryRun,"    public void testDryRun() throws Exception {
        check(defaultCmd + "" -dryRun"", new Arguments.Builder(defaultSrc, DEFAULT_SCALE).dryRun(true).build());
    }"
at.favre.tools.dconvert.test.CLIParserTest.check,"    private static void check(String cmd, Arguments ref) {
        Arguments arg = CLIInterpreter.parse(asArgArray(cmd));
        assertEquals(""should create same args"", ref, arg);
        System.out.println(""command line: "" + cmd);
        System.out.println(""resulting arg: "" + arg);
    }"
at.favre.tools.dconvert.test.CLIParserTest.asArgArray,"    public static String[] asArgArray(String cmd) {
        return Commandline.translateCommandline(cmd);
    }
"
at.favre.tools.dconvert.test.GUITest.setupSpec,"    public static void setupSpec() {
        if (HEADLESS) {
            System.setProperty(""testfx.robot"", ""glass"");
            System.setProperty(""testfx.headless"", ""true"");
            System.setProperty(""prism.order"", ""sw"");
            System.setProperty(""prism.text"", ""t2k"");
            System.setProperty(""java.awt.headless"", ""true"");
            System.setProperty(""headless.geometry"", ""1920x1200-32"");
        }
    }"
at.favre.tools.dconvert.test.GUITest.start,"    public void start(Stage stage) throws Exception {
        controller = GUI.setup(stage, new TestPreferenceStore(), new Dimension(1920, 1080));
        stage.show();
        scene = stage.getScene();
    }"
at.favre.tools.dconvert.test.GUITest.setUp,"    public void setUp() throws Exception {
        defaultSrcFolder = temporaryFolder.newFolder();
        defaultBuilder = new Arguments.Builder(defaultSrcFolder, Arguments.DEFAULT_SCALE).guiAdvancedOptions(true).verboseLog(true);
        controller.setSrcForTest(defaultSrcFolder);
        clickOn(""#rbOptAdvanced"");
        assertEquals(""default should match"", defaultBuilder.build(), controller.getFromUI(false));
    }"
at.favre.tools.dconvert.test.GUITest.tearDown,"    public void tearDown() throws Exception {
        clickOn(""#btnReset"");
        assertEquals(""should be default after reset"", new Arguments.Builder(new File(""""), Arguments.DEFAULT_SCALE).skipParamValidation(true).verboseLog(true).build(), controller.getFromUI(true));
    }"
at.favre.tools.dconvert.test.GUITest.testScaleTypes,"    public void testScaleTypes() throws Exception {
        clickOn(""#rbDpWidth"").clickOn(""#textFieldDp"").write(""48"");
        assertEquals(""arguments should match"",
                new Arguments.Builder(defaultSrcFolder, 48).scaleMode(EScaleMode.DP_WIDTH).guiAdvancedOptions(true).verboseLog(true).build(), controller.getFromUI(false));
        clickOn(""#rbDpHeight"").clickOn(""#textFieldDp"").write(""1"");
        assertEquals(""arguments should match"",
                new Arguments.Builder(defaultSrcFolder, 148).scaleMode(EScaleMode.DP_HEIGHT).guiAdvancedOptions(true).verboseLog(true).build(), controller.getFromUI(false));
        clickOn(""#rbFactor"").clickOn(""#scaleSlider"");
        assertEquals(""arguments should match"",
                new Arguments.Builder(defaultSrcFolder, 3).scaleMode(EScaleMode.FACTOR).guiAdvancedOptions(true).verboseLog(true).build(), controller.getFromUI(false));
    }"
at.favre.tools.dconvert.test.GUITest.testPostProcessors,"    public void testPostProcessors() throws Exception {
        if (new WebpProcessor().isSupported()) {
            clickOn(""#cbPostConvertWebp"");
            assertEquals(""arguments should match"", defaultBuilder.postConvertWebp(true).build(), controller.getFromUI(false));
            clickOn(""#cbPostConvertWebp"");
            assertEquals(""arguments should match"", defaultBuilder.postConvertWebp(false).build(), controller.getFromUI(false));
        }
        if (new PngCrushProcessor().isSupported()) {
            clickOn(""#cbEnablePngCrush"");
            assertEquals(""arguments should match"", defaultBuilder.enablePngCrush(true).build(), controller.getFromUI(false));
            clickOn(""#cbEnablePngCrush"");
            assertEquals(""arguments should match"", defaultBuilder.enablePngCrush(false).build(), controller.getFromUI(false));
        }
        if (new MozJpegProcessor().isSupported()) {
            clickOn(""#cbEnableMozJpeg"");
            assertEquals(""arguments should match"", defaultBuilder.enableMozJpeg(true).build(), controller.getFromUI(false));
            clickOn(""#cbEnableMozJpeg"");
            assertEquals(""arguments should match"", defaultBuilder.enableMozJpeg(false).build(), controller.getFromUI(false));
        }

        clickOn(""#cbKeepUnoptimized"");
        assertEquals(""arguments should match"", defaultBuilder.keepUnoptimizedFilesPostProcessor(true).build(), controller.getFromUI(false));
        clickOn(""#cbKeepUnoptimized"");
        assertEquals(""arguments should match"", defaultBuilder.keepUnoptimizedFilesPostProcessor(false).build(), controller.getFromUI(false));
    }"
at.favre.tools.dconvert.test.GUITest.testCBOptions,"    public void testCBOptions() throws Exception {
        clickOn(""#cbMipmapInsteadDrawable"");
        assertEquals(""arguments should match"", defaultBuilder.createMipMapInsteadOfDrawableDir(true).build(), controller.getFromUI(false));
        clickOn(""#cbMipmapInsteadDrawable"");
        assertEquals(""arguments should match"", defaultBuilder.createMipMapInsteadOfDrawableDir(false).build(), controller.getFromUI(false));
        clickOn(""#cbAntiAliasing"");
        assertEquals(""arguments should match"", defaultBuilder.antiAliasing(true).build(), controller.getFromUI(false));
        clickOn(""#cbAntiAliasing"");
        assertEquals(""arguments should match"", defaultBuilder.antiAliasing(false).build(), controller.getFromUI(false));
        clickOn(""#cbAndroidIncludeLdpiTvdpi"");
        assertEquals(""arguments should match"", defaultBuilder.includeAndroidLdpiTvdpi(true).build(), controller.getFromUI(false));
        clickOn(""#cbAndroidIncludeLdpiTvdpi"");
        assertEquals(""arguments should match"", defaultBuilder.includeAndroidLdpiTvdpi(false).build(), controller.getFromUI(false));
        clickOn(""#cbHaltOnError"");
        assertEquals(""arguments should match"", defaultBuilder.haltOnError(true).build(), controller.getFromUI(false));
        clickOn(""#cbHaltOnError"");
        assertEquals(""arguments should match"", defaultBuilder.haltOnError(false).build(), controller.getFromUI(false));
        clickOn(""#cbDryRun"");
        assertEquals(""arguments should match"", defaultBuilder.dryRun(true).build(), controller.getFromUI(false));
        clickOn(""#cbDryRun"");
        assertEquals(""arguments should match"", defaultBuilder.dryRun(false).build(), controller.getFromUI(false));
        clickOn(""#cbSkipUpscaling"");
        assertEquals(""arguments should match"", defaultBuilder.skipUpscaling(true).build(), controller.getFromUI(false));
        clickOn(""#cbSkipUpscaling"");
        assertEquals(""arguments should match"", defaultBuilder.skipUpscaling(false).build(), controller.getFromUI(false));
        clickOn(""#cbSkipExisting"");
        assertEquals(""arguments should match"", defaultBuilder.skipExistingFiles(true).build(), controller.getFromUI(false));
        clickOn(""#cbSkipExisting"");
        assertEquals(""arguments should match"", defaultBuilder.skipExistingFiles(false).build(), controller.getFromUI(false));
        clickOn(""#cbIosCreateImageset"");
        assertEquals(""arguments should match"", defaultBuilder.iosCreateImagesetFolders(true).build(), controller.getFromUI(false));
        clickOn(""#cbIosCreateImageset"");
        assertEquals(""arguments should match"", defaultBuilder.iosCreateImagesetFolders(false).build(), controller.getFromUI(false));
        clickOn(""#cbCleanBeforeConvert"");
        assertEquals(""arguments should match"", defaultBuilder.clearDirBeforeConvert(true).build(), controller.getFromUI(false));
        clickOn(""#cbCleanBeforeConvert"");
        assertEquals(""arguments should match"", defaultBuilder.clearDirBeforeConvert(false).build(), controller.getFromUI(false));
    }"
at.favre.tools.dconvert.test.GUITest.testPlatforms,"    public void testPlatforms() throws Exception {
        for (EPlatform ePlatform : Arguments.DEFAULT_PLATFORM) {
            clickOn(getIdForPlatform(ePlatform));
        }

        for (EPlatform ePlatform : EPlatform.values()) {
            clickOn(getIdForPlatform(ePlatform));
            assertEquals(""arguments should match"", defaultBuilder.platform(Collections.singleton(ePlatform)).build(), controller.getFromUI(false));
            clickOn(getIdForPlatform(ePlatform));
        }
    }"
at.favre.tools.dconvert.test.GUITest.testDownScalingQuality,"    public void testDownScalingQuality() throws Exception {
        Assume.assumeFalse(""this only seems to work in non-headless test"", HEADLESS);
        for (EScalingAlgorithm algo : EScalingAlgorithm.getAllEnabled()) {
            if (algo.getSupportedForType().contains(EScalingAlgorithm.Type.DOWNSCALING)) {
                clickOn(""#choiceDownScale"").clickOn(algo.toString());
                assertEquals(""arguments should match"", defaultBuilder.downScaleAlgorithm(algo).build(), controller.getFromUI(false));
            }
        }
    }"
at.favre.tools.dconvert.test.GUITest.testUpScalingQuality,"    public void testUpScalingQuality() throws Exception {
        for (EScalingAlgorithm algo : EScalingAlgorithm.getAllEnabled()) {
            if (algo.getSupportedForType().contains(EScalingAlgorithm.Type.UPSCALING)) {

                ChoiceBox choiceBox = (ChoiceBox) scene.lookup(""#choiceUpScale"");
                //choiceBox.getSelectionModel().
                for (Object o : choiceBox.getItems()) {
                    if (o.toString().equals(algo.toString())) {

                    }
                }
                clickOn(""#choiceUpScale"").clickOn(algo.toString());
                assertEquals(""arguments should match"", defaultBuilder.upScaleAlgorithm(algo).build(), controller.getFromUI(false));
            }
        }
    }"
at.favre.tools.dconvert.test.GUITest.getIdForPlatform,"    private String getIdForPlatform(EPlatform platform) {
        switch (platform) {
            case ANDROID:
                return ""#tgAndroid"";
            case IOS:
                return ""#tgIos"";
            case WINDOWS:
                return ""#tgWindows"";
            case WEB:
                return ""#tgWeb"";
            default:
                throw new IllegalArgumentException(""platform unknown"");
        }
    }"
at.favre.tools.dconvert.test.GUITest.testCompressions,"    public void testCompressions() throws Exception {
        for (EOutputCompressionMode eOutputCompressionMode : EOutputCompressionMode.values()) {
            clickOn(""#choiceCompression"").clickOn(bundle.getString(eOutputCompressionMode.rbKey));
            assertEquals(""arguments should match"", defaultBuilder.compression(eOutputCompressionMode).build(), controller.getFromUI(false));
        }
    }"
at.favre.tools.dconvert.test.GUITest.testRounding,"    public void testRounding() throws Exception {
        for (RoundingHandler.Strategy strategy : RoundingHandler.Strategy.values()) {
            clickOn(""#choiceRounding"").clickOn(strategy.toString());
            assertEquals(""arguments should match"", defaultBuilder.scaleRoundingStragy(strategy).build(), controller.getFromUI(false));
        }
    }"
at.favre.tools.dconvert.test.GUITest.testThreads,"    public void testThreads() throws Exception {
        for (int i = 1; i < Arguments.MAX_THREAD_COUNT + 1; i++) {
            sleep(18, TimeUnit.MILLISECONDS); //hack because after testfx update headless mode failed
            clickOn(""#choiceThreads"").clickOn(String.valueOf(i));
            assertEquals(""arguments should match"", defaultBuilder.threadCount(i).build(), controller.getFromUI(false));
        }
    }"
at.favre.tools.dconvert.test.GUITest.testJpegQuality,"    public void testJpegQuality() throws Exception {
        clickOn(""#choiceCompression"").clickOn(bundle.getString(EOutputCompressionMode.AS_JPG.rbKey));
        for (float i = 0f; i < 1.1f; i += 0.1) {
            clickOn(""#choiceCompressionQuality"").clickOn(GUIController.toJpgQ(i));
            assertEquals(""arguments should match"", defaultBuilder.compression(EOutputCompressionMode.AS_JPG, Float.parseFloat(String.format(Locale.US, ""%.1f"", i))).build(), controller.getFromUI(false));
        }
        clickOn(""#choiceCompressionQuality"").clickOn(GUIController.toJpgQ(Arguments.DEFAULT_COMPRESSION_QUALITY));
        clickOn(""#choiceCompression"").clickOn(bundle.getString(EOutputCompressionMode.SAME_AS_INPUT_PREF_PNG.rbKey));
        assertEquals(""arguments should match"", defaultBuilder.compression(EOutputCompressionMode.SAME_AS_INPUT_PREF_PNG, Arguments.DEFAULT_COMPRESSION_QUALITY).build(), controller.getFromUI(false));
    }"
at.favre.tools.dconvert.test.GUITest.testClickSelectFolder,"    public void testClickSelectFolder() {
        if (!HEADLESS) {
            clickOn(""#btnSrcFolder"").sleep(400).press(KeyCode.ESCAPE);
        }
    }"
at.favre.tools.dconvert.test.GUITest.testClickSelectFile,"    public void testClickSelectFile() {
        if (!HEADLESS) {
            clickOn(""#btnSrcFile"").sleep(400).press(KeyCode.ESCAPE);
        }
    }"
at.favre.tools.dconvert.test.GUITest.testClickSelectDstFolder,"    public void testClickSelectDstFolder() {
        if (!HEADLESS) {
            clickOn(""#btnDstFolder"").sleep(400).press(KeyCode.ESCAPE);
        }
    }"
at.favre.tools.dconvert.test.GUITest.testCase1,"    public void testCase1() throws Exception {
        for (EPlatform ePlatform : Arguments.DEFAULT_PLATFORM) {
            clickOn(getIdForPlatform(ePlatform));
        }

        clickOn(""#rbDpHeight"").clickOn(""#textFieldDp"").write(""64"");
        clickOn(getIdForPlatform(EPlatform.ANDROID));
        clickOn(""#cbSkipUpscaling"");
        clickOn(""#cbSkipExisting"");

        assertEquals(""arguments should match"", new Arguments.Builder(defaultSrcFolder, 64).guiAdvancedOptions(true).verboseLog(true)
                .scaleMode(EScaleMode.DP_HEIGHT).platform(Collections.singleton(EPlatform.ANDROID)).skipUpscaling(true).threadCount(4).skipExistingFiles(true)
                .build(), controller.getFromUI(false));
    }"
at.favre.tools.dconvert.test.GUITest.testCase2,"    public void testCase2() throws Exception {
        for (EPlatform ePlatform : Arguments.DEFAULT_PLATFORM) {
            clickOn(getIdForPlatform(ePlatform));
        }

        clickOn(""#rbDpWidth"").clickOn(""#textFieldDp"").write(""128"");
        clickOn(getIdForPlatform(EPlatform.ANDROID));
        clickOn(""#choiceCompression"").clickOn(bundle.getString(EOutputCompressionMode.AS_JPG.rbKey));
        float jpegQ = 0.3f;
        clickOn(""#choiceCompressionQuality"").clickOn(GUIController.toJpgQ(jpegQ));
        clickOn(""#cbSkipExisting"");
        assertEquals(""arguments should match"", new Arguments.Builder(defaultSrcFolder, 128).guiAdvancedOptions(true).verboseLog(true)
                .scaleMode(EScaleMode.DP_WIDTH).platform(Collections.singleton(EPlatform.ANDROID)).skipExistingFiles(true)
                .compression(EOutputCompressionMode.AS_JPG, Float.parseFloat(String.format(Locale.US, ""%.1f"", jpegQ)))
                .build(), controller.getFromUI(false));
    }

"
at.favre.tools.dconvert.test.WebConverterTest.getType,"    protected EPlatform getType() {
        return EPlatform.WEB;
    }"
at.favre.tools.dconvert.test.WebConverterTest.checkOutDir,"    protected void checkOutDir(File dstDir, Arguments arguments, List<File> files, EPlatform type) throws IOException {
        checkOutDirWeb(dstDir, arguments, files);
    }"
at.favre.tools.dconvert.test.WebConverterTest.checkOutDirWeb,"    public static void checkOutDirWeb(File dstDir, Arguments arguments, List<File> files) throws IOException {
        System.out.println(""web-convert "" + files);
        checkOutDirPostfixDescr(new File(dstDir, WebConverter.ROOT_FOLDER), arguments, files, WebConverter.getWebDescriptors());
    }
"
at.favre.tools.dconvert.test.WindowsConverterTest.getType,"    protected EPlatform getType() {
        return EPlatform.WINDOWS;
    }"
at.favre.tools.dconvert.test.WindowsConverterTest.checkOutDir,"    protected void checkOutDir(File dstDir, Arguments arguments, List<File> files, EPlatform type) throws IOException {
        checkOutDirWindows(dstDir, arguments, files);
    }"
at.favre.tools.dconvert.test.WindowsConverterTest.checkOutDirWindows,"    public static void checkOutDirWindows(File dstDir, Arguments arguments, List<File> files) throws IOException {
        System.out.println(""windows-convert "" + files);
        checkOutDirPostfixDescr(new File(dstDir, WindowsConverter.ROOT_FOLDER), arguments, files, WindowsConverter.getWindowsDescriptors());
    }
"
at.favre.tools.dconvert.test.helper.TestPreferenceStore.save,"    public void save(Arguments arg) {
        this.arg = arg;
    }"
at.favre.tools.dconvert.test.helper.TestPreferenceStore.get,"    public Arguments get() {
        return arg;
    }
"
at.favre.tools.dconvert.test.helper.MockException.equals,"    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        MockException that = (MockException) o;

        return s != null ? s.equals(that.s) : that.s == null;

    }"
at.favre.tools.dconvert.test.helper.MockException.hashCode,"    public int hashCode() {
        return s != null ? s.hashCode() : 0;
    }
"
at.favre.tools.dconvert.test.helper.MockProcessor.process,"    public Result process(File rawFile, boolean keepOriginal) {
        try {
            Thread.sleep(sleep);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        return new Result(""test done"", exception, Collections.singletonList(rawFile));
    }"
at.favre.tools.dconvert.test.helper.MockProcessor.isSupported,"    public boolean isSupported() {
        return true;
    }
"
at.favre.tools.dconvert.DConvert.execute,"/**
* Starts the execution of the dconvert
*
* @param args                  from user interface
* @param blockingWaitForFinish if true will block the thread until all threads are finished
* @param callback              main callback
*/
    public void execute(Arguments args, boolean blockingWaitForFinish, HandlerCallback callback) {
        beginMs = System.currentTimeMillis();
        handlerCallback = callback;

        logStringBuilder.append(""registered image readers:\n"").append(getRegisteredImageReadersAndWriters()).append(""\n"");
        logStringBuilder.append(""begin execution using "").append(args.threadCount).append("" theads\n"");
        logStringBuilder.append(""args: "").append(args).append(""\n"");

        if (!args.filesToProcess.isEmpty()) {
            List<IPlatformConverter> converters = new ArrayList<>();
            List<IPostProcessor> postProcessors = new ArrayList<>();

            for (EPlatform ePlatform : args.platform) {
                logStringBuilder.append(""add "").append(ePlatform.getConverter().getClass().getSimpleName()).append(""\n"");
                converters.add(ePlatform.getConverter());
            }

            if (args.clearDirBeforeConvert) {
                logStringBuilder.append(""clear out dirs before convert\n"");
                for (IPlatformConverter converter : converters) {
                    converter.clean(args);
                }
            }

            if (args.enablePngCrush) {
                IPostProcessor postProcessor = new PngCrushProcessor();
                if (postProcessor.isSupported()) {
                    logStringBuilder.append(""add pngcrush postprocessor\n"");
                    postProcessors.add(postProcessor);
                } else {
                    logStringBuilder.append(""WARNING: Tool 'pngcrush' cannot be accessed. Is it set in PATH?\n"");
                }
            }
            if (args.postConvertWebp) {
                IPostProcessor postProcessor = new WebpProcessor();
                if (postProcessor.isSupported()) {
                    logStringBuilder.append(""add cwebp postprocessor\n"");
                    postProcessors.add(postProcessor);
                } else {
                    logStringBuilder.append(""WARNING: Tool 'cwebp' cannot be accessed. Is it set in PATH?\n"");
                }
            }
            if (args.enableMozJpeg) {
                IPostProcessor postProcessor = new MozJpegProcessor();
                if (postProcessor.isSupported()) {
                    logStringBuilder.append(""add mozJpeg postprocessor\n"");
                    postProcessors.add(postProcessor);
                } else {
                    logStringBuilder.append(""WARNING: Tool 'jpegtran' cannot be accessed. Is it set in PATH?\n"");
                }
            }

            int convertJobs = args.filesToProcess.size() * converters.size();
            int postProcessorJobs = convertJobs * postProcessors.size();

            float convertPercentage = (float) convertJobs / (float) (convertJobs + postProcessorJobs);
            float postProcessPercentage = (float) postProcessorJobs / (float) (convertJobs + postProcessorJobs);

            mainLatch = new CountDownLatch(1);

            for (File srcFile : args.filesToProcess) {
                logStringBuilder.append(""add "").append(srcFile).append("" to processing queue\n"");

                if (!srcFile.exists() || !srcFile.isFile()) {
                    throw new IllegalStateException(""srcFile "" + srcFile + "" does not exist"");
                }
            }

            new WorkerHandler<>(converters, args, new WorkerHandler.Callback() {
                @Override
                public void onProgress(float percent) {
                    handlerCallback.onProgress(convertPercentage * percent);
                }

                @Override
                public void onFinished(final int finishedJobsConverters, List<File> outFiles, final StringBuilder logConverters, final List<Exception> exceptionsConverters, final boolean haltedDuringProcessConverters) {
                    logStringBuilder.append(logConverters);
                    if (haltedDuringProcessConverters) {
                        informFinished(finishedJobsConverters, exceptionsConverters, true);
                    } else {
                        new WorkerHandler<>(postProcessors, args, new WorkerHandler.Callback() {
                            @Override
                            public void onProgress(float percent) {
                                handlerCallback.onProgress(convertPercentage + (postProcessPercentage * percent));
                            }

                            @Override
                            public void onFinished(int finishedJobsPostProcessors, List<File> outFiles, StringBuilder log, List<Exception> exceptions, boolean haltedDuringProcess) {
                                exceptionsConverters.addAll(exceptions);
                                logStringBuilder.append(log);
                                informFinished(finishedJobsPostProcessors + finishedJobsConverters, exceptionsConverters, haltedDuringProcess);
                            }
                        }).start(outFiles);
                    }
                }
            }).start(args.filesToProcess);

            if (blockingWaitForFinish) {
                try {
                    mainLatch.await(60, TimeUnit.MINUTES);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        } else {
            logStringBuilder.append(""no files to convert\n"");
            informFinished(0, Collections.emptyList(), false);
        }
    }"
at.favre.tools.dconvert.DConvert.onProgress,"                public void onProgress(float percent) {
                    handlerCallback.onProgress(convertPercentage * percent);
                }"
at.favre.tools.dconvert.DConvert.onFinished,"                public void onFinished(final int finishedJobsConverters, List<File> outFiles, final StringBuilder logConverters, final List<Exception> exceptionsConverters, final boolean haltedDuringProcessConverters) {
                    logStringBuilder.append(logConverters);
                    if (haltedDuringProcessConverters) {
                        informFinished(finishedJobsConverters, exceptionsConverters, true);
                    } else {
                        new WorkerHandler<>(postProcessors, args, new WorkerHandler.Callback() {
                            @Override
                            public void onProgress(float percent) {
                                handlerCallback.onProgress(convertPercentage + (postProcessPercentage * percent));
                            }

                            @Override
                            public void onFinished(int finishedJobsPostProcessors, List<File> outFiles, StringBuilder log, List<Exception> exceptions, boolean haltedDuringProcess) {
                                exceptionsConverters.addAll(exceptions);
                                logStringBuilder.append(log);
                                informFinished(finishedJobsPostProcessors + finishedJobsConverters, exceptionsConverters, haltedDuringProcess);
                            }
                        }).start(outFiles);
                    }
                }
            "
at.favre.tools.dconvert.DConvert.onProgress,"                            public void onProgress(float percent) {
                                handlerCallback.onProgress(convertPercentage + (postProcessPercentage * percent));
                            }"
at.favre.tools.dconvert.DConvert.onFinished,"                            public void onFinished(int finishedJobsPostProcessors, List<File> outFiles, StringBuilder log, List<Exception> exceptions, boolean haltedDuringProcess) {
                                exceptionsConverters.addAll(exceptions);
                                logStringBuilder.append(log);
                                informFinished(finishedJobsPostProcessors + finishedJobsConverters, exceptionsConverters, haltedDuringProcess);
                            }
                        "
at.favre.tools.dconvert.DConvert.informFinished,"    private void informFinished(int finishedJobs, List<Exception> exceptions, boolean haltedDuringProcess) {
        System.gc();
        printTrace();
        if (handlerCallback != null) {
            if (mainLatch != null) {
                mainLatch.countDown();
            }
            for (Exception exception : exceptions) {
                logStringBuilder.append(MiscUtil.getStackTrace(exception)).append(""\n"");
            }
            handlerCallback.onFinished(finishedJobs, exceptions, (System.currentTimeMillis() - beginMs), haltedDuringProcess, logStringBuilder.toString().trim());
        }
    }"
at.favre.tools.dconvert.DConvert.onProgress,
at.favre.tools.dconvert.DConvert.onFinished,"        void onFinished(int finishedJobs, List<Exception> exceptions, long time, boolean haltedDuringProcess, String log);
    "
at.favre.tools.dconvert.DConvert.getRegisteredImageReadersAndWriters,"    private String getRegisteredImageReadersAndWriters() {
        String[] formats = new String[]{""JPEG"", ""PNG"", ""TIFF"", ""PSD"", ""SVG"", ""BMP""};

        StringBuilder sb = new StringBuilder();
        for (String format : Arrays.asList(formats)) {
            Iterator<ImageReader> reader = ImageIO.getImageReadersByFormatName(format);
            while (reader.hasNext()) {
                ImageReader next = reader.next();
                sb.append(""reader: "").append(next).append(""\n"");
            }
            Iterator<ImageWriter> writer = ImageIO.getImageWritersByFormatName(format);
            while (writer.hasNext()) {
                ImageWriter next = writer.next();
                sb.append(""writer: "").append(next).append(""\n"");
            }
        }
        return sb.toString();
    }"
at.favre.tools.dconvert.DConvert.printTrace,"    private void printTrace() {
        if (ImageHandler.TEST_MODE) {
            for (Map.Entry<ScaleAlgorithm, Long> entry : ImageHandler.traceMap.entrySet()) {
                System.out.println(entry.getKey() + "": "" + String.format(Locale.US, ""%.2f"", (double) entry.getValue() / 1000000.0));
            }
        }
    }
"
at.favre.tools.dconvert.Main.main,"    public static void main(String[] rawArgs) {

        if (rawArgs.length < 1) {
            new GUI().launchApp(rawArgs);
            return;
        }

        Arguments args = CLIInterpreter.parse(rawArgs);

        if (args == null) {
            return;
        } else if (args == Arguments.START_GUI) {
            System.out.println(""start gui"");
            new GUI().launchApp(rawArgs);
            return;
        }

        System.out.println(""start converting "" + args.filesToProcess.size() + "" files"");

        new DConvert().execute(args, true, new DConvert.HandlerCallback() {
            @Override
            public void onProgress(float progress) {
                try {
                    System.out.write(MiscUtil.getCmdProgressBar(progress).getBytes());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onFinished(int finishedJobs, List<Exception> exceptions, long time, boolean haltedDuringProcess, String log) {
                System.out.print(MiscUtil.getCmdProgressBar(1f));

                System.out.println("""");

                if (args.verboseLog) {
                    System.out.println(""Log:"");
                    System.out.println(log);
                }

                if (haltedDuringProcess) {
                    System.err.println(""abort due to error"");
                }
                if (exceptions.size() > 0) {
                    System.err.println(""found "" + exceptions.size() + "" errors during execution"");
                    if (args.verboseLog) {
                        for (Exception exception : exceptions) {
                            System.err.println(""\terror: "" + exception.getMessage());
                            exception.printStackTrace();
                        }
                    }
                }
                System.out.println(""execution finished ("" + time + ""ms) with "" + finishedJobs + "" finsihed jobs and "" + exceptions.size() + "" errors"");
            }
        });
    }
"
at.favre.tools.dconvert.Main.onProgress,"            public void onProgress(float progress) {
                try {
                    System.out.write(MiscUtil.getCmdProgressBar(progress).getBytes());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }"
at.favre.tools.dconvert.Main.onFinished,"            public void onFinished(int finishedJobs, List<Exception> exceptions, long time, boolean haltedDuringProcess, String log) {
                System.out.print(MiscUtil.getCmdProgressBar(1f));

                System.out.println("""");

                if (args.verboseLog) {
                    System.out.println(""Log:"");
                    System.out.println(log);
                }

                if (haltedDuringProcess) {
                    System.err.println(""abort due to error"");
                }
                if (exceptions.size() > 0) {
                    System.err.println(""found "" + exceptions.size() + "" errors during execution"");
                    if (args.verboseLog) {
                        for (Exception exception : exceptions) {
                            System.err.println(""\terror: "" + exception.getMessage());
                            exception.printStackTrace();
                        }
                    }
                }
                System.out.println(""execution finished ("" + time + ""ms) with "" + finishedJobs + "" finsihed jobs and "" + exceptions.size() + "" errors"");
            }
        "
at.favre.tools.dconvert.WorkerHandler.start,"    public void start(List<File> allFiles) {
        this.jobCount = allFiles.size() * processors.size();

        InternalCallback internalCallback = new InternalCallback(callback);

        for (T processor : processors) {
            for (File fileToProcess : allFiles) {
                threadPool.execute(new Worker(fileToProcess, processor, arguments, internalCallback));
            }
        }

        threadPool.shutdown();

        if (jobCount == 0) {
            callback.onFinished(0, Collections.emptyList(), new StringBuilder(), Collections.emptyList(), false);
        }
    }"
at.favre.tools.dconvert.WorkerHandler.run,"        public void run() {
            Result result = null;
            if (IPostProcessor.class.isInstance(processor)) {
                result = ((IPostProcessor) processor).process(unprocessedFile, arguments.keepUnoptimizedFilesPostProcessor);
            } else if (IPlatformConverter.class.isInstance(processor)) {
                result = ((IPlatformConverter) processor).convert(unprocessedFile, arguments);
            }
            callback.onJobFinished(result);
        }
    }

    private class InternalCallback {
        private int currentJobCount = 0;
        private List<Exception> exceptionList = new ArrayList<>();
        private Callback callback;
        private StringBuilder logBuilder = new StringBuilder();
        private boolean canceled = false;
        private List<File> files = new ArrayList<>();

        public InternalCallback(Callback callback) {
            this.callback = callback;
        }

        synchronized void onJobFinished(Result result) {
            if (!canceled) {
                currentJobCount++;

                if (result != null) {
                    if (result.log != null && result.log.length() > 0) {
                        logBuilder.append(result.log).append(""\n"");
                    }
                    if (result.processedFiles != null) {
                        files.addAll(result.processedFiles);
                    }
                    if (result.exception != null) {
                        exceptionList.add(result.exception);

                        if (arguments.haltOnError) {
                            canceled = true;
                            threadPool.shutdownNow();
                            callback.onFinished(currentJobCount, files, logBuilder, exceptionList, true);
                        }
                    }
                }

                if (!canceled) {
                    if (currentJobCount == jobCount) {
                        callback.onFinished(currentJobCount, files, logBuilder, exceptionList, false);
                    } else {
                        callback.onProgress((float) currentJobCount / (float) jobCount);
                    }
                }
            }
        }
    }

    public interface Callback {
        void onProgress(float percent);

        void onFinished(int finishedJobs, List<File> outFiles, StringBuilder log, List<Exception> exceptions, boolean haltedDuringProcess);
    "
at.favre.tools.dconvert.WorkerHandler.onJobFinished,"        synchronized void onJobFinished(Result result) {
            if (!canceled) {
                currentJobCount++;

                if (result != null) {
                    if (result.log != null && result.log.length() > 0) {
                        logBuilder.append(result.log).append(""\n"");
                    }
                    if (result.processedFiles != null) {
                        files.addAll(result.processedFiles);
                    }
                    if (result.exception != null) {
                        exceptionList.add(result.exception);

                        if (arguments.haltOnError) {
                            canceled = true;
                            threadPool.shutdownNow();
                            callback.onFinished(currentJobCount, files, logBuilder, exceptionList, true);
                        }
                    }
                }

                if (!canceled) {
                    if (currentJobCount == jobCount) {
                        callback.onFinished(currentJobCount, files, logBuilder, exceptionList, false);
                    } else {
                        callback.onProgress((float) currentJobCount / (float) jobCount);
                    }
                }
            }
        }
    "
at.favre.tools.dconvert.WorkerHandler.onProgress,
at.favre.tools.dconvert.WorkerHandler.onFinished,"        void onFinished(int finishedJobs, List<File> outFiles, StringBuilder log, List<Exception> exceptions, boolean haltedDuringProcess);
    "
at.favre.tools.dconvert.ui.WinTaskbarProgress.updateProgress,"    public void updateProgress(double progress) {
        if (!enabled) return;
        executor.execute(() -> list.SetProgressValue((Pointer) hwnd, Math.round(progress * (double) MAX), MAX));
    }"
at.favre.tools.dconvert.ui.WinTaskbarProgress.finish,"    public void finish() {
        if (!enabled) return;
        executor.execute(() -> {
            list.SetProgressValue((Pointer) hwnd, MAX, MAX);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            list.SetProgressState((Pointer) hwnd, ITaskbarList3.TbpFlag.TBPF_NOPROGRESS);
            list.SetProgressValue((Pointer) hwnd, 0, MAX);
            list.Release();
        });
    }"
at.favre.tools.dconvert.ui.WinTaskbarProgress.error,"    public void error() {
        if (!enabled) return;
        executor.execute(() -> {
            list.SetProgressState((Pointer) hwnd, ITaskbarList3.TbpFlag.TBPF_ERROR);
            list.SetProgressValue((Pointer) hwnd, MAX, MAX);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            list.SetProgressState((Pointer) hwnd, ITaskbarList3.TbpFlag.TBPF_NOPROGRESS);
            list.SetProgressValue((Pointer) hwnd, 0, MAX);
            list.Release();
        });
    }
"
at.favre.tools.dconvert.ui.IPreferenceStore.save,"/**
* Persistently saves the given argument
*
* @param arg
*/
"
at.favre.tools.dconvert.ui.IPreferenceStore.get,"/**
* Gets the arguemnt object from the persistence store
*
* @return the arg or null if not set or could not be read
*/
    Arguments get();
"
at.favre.tools.dconvert.ui.SerializePreferenceStore.save,"    public void save(Arguments arg) {
        try {
            prefs.put(ARGS_KEY, serialize(arg));
        } catch (Exception e) {
            prefs.remove(ARGS_KEY);
            e.printStackTrace();
        }
    }"
at.favre.tools.dconvert.ui.SerializePreferenceStore.get,"    public Arguments get() {
        try {
            String saved = prefs.get(ARGS_KEY, null);
            if (saved == null) {
                return null;
            }

            Object out = unserialize(saved);
            return (Arguments) out;
        } catch (Exception e) {
            prefs.remove(ARGS_KEY);
            e.printStackTrace();
            return null;
        }
    }"
at.favre.tools.dconvert.ui.SerializePreferenceStore.serialize,"    private static String serialize(Serializable obj) throws IOException {
        ObjectOutput out = null;
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {
            out = new ObjectOutputStream(bos);
            out.writeObject(obj);
            return Base64.getEncoder().encodeToString(bos.toByteArray());
        } finally {
            try {
                if (out != null) {
                    out.close();
                }
            } catch (IOException ex) {
                // ignore close exception
            }
        }
    }"
at.favre.tools.dconvert.ui.SerializePreferenceStore.unserialize,"    private static Object unserialize(String base64Obj) throws IOException, ClassNotFoundException {
        try (ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(base64Obj)))) {
            return in.readObject();
        }
    }
"
at.favre.tools.dconvert.ui.GUIController.onCreate,"    public void onCreate(final Stage stage, IPreferenceStore store, ResourceBundle bundle) {
        this.bundle = bundle;
        this.preferenceStore = store;

        setupLayout();

        btnSrcFile.setOnAction(event -> {
            srcFileChooser.setTitle(bundle.getString(""main.filechooser.titel""));
            File file = new File(textFieldSrcPath.getText());
            if (file != null && file.isFile()) {
                file = file.getParentFile();
            }

            if (file == null || textFieldSrcPath.getText().isEmpty() || !file.exists() || !file.isDirectory()) {
                srcFileChooser.setInitialDirectory(new File(System.getProperty(""user.home"")));
            } else {
                srcFileChooser.setInitialDirectory(file);
            }
            srcFileChooser.setSelectedExtensionFilter(new FileChooser.ExtensionFilter(""Images"", ""*.jpg"", ""*.jpeg"", ""*.png"", ""*.gif"", ""*.psd"", ""*.svg""));
            File srcFile = srcFileChooser.showOpenDialog(btnSrcFile.getScene().getWindow());
            if (srcFile != null) {
                textFieldSrcPath.setText(srcFile.getAbsolutePath());
                if ((textFieldDstPath.getText() == null || textFieldDstPath.getText().trim().isEmpty())) {
                    textFieldDstPath.setText(srcFile.getParentFile().getAbsolutePath());
                }
            }
        });

        btnSrcFolder.setOnAction(new FolderPicker(srcDirectoryChooser, textFieldSrcPath, textFieldDstPath, bundle));
        btnDstFolder.setOnAction(new FolderPicker(srcDirectoryChooser, textFieldDstPath, null, bundle));
        btnConvert.setOnAction(event -> {
            WinTaskbarProgress winTaskbarProgress = new WinTaskbarProgress();
            try {
                Arguments arg = getFromUI(false);
                saveToPrefs(arg);
                btnConvert.setDisable(true);
                labelResult.setText("""");
                textFieldConsole.setText("""");
                textFieldConsole.setDisable(true);
                progressBar.setProgress(0);
                btnConvert.setText("""");

                new DConvert().execute(arg, false, new DConvert.HandlerCallback() {
                    @Override
                    public void onProgress(float progress) {
                        Platform.runLater(() -> {
                            progressBar.setProgress(progress);
                            winTaskbarProgress.updateProgress(progress);
                        });
                    }

                    @Override
                    public void onFinished(int finishedJobs, List<Exception> exceptions, long time, boolean haltedDuringProcess, String log) {
                        Platform.runLater(() -> {
                            resetUIAfterExecution();
                            labelResult.setText(
                                    MessageFormat.format(bundle.getString(""main.label.finish""), finishedJobs, exceptions.size(), MiscUtil.duration(time)));
                            textFieldConsole.setText(log);
                            textFieldConsole.appendText("""");

                            if (!exceptions.isEmpty()) {
                                winTaskbarProgress.error();
                                Alert alert = new Alert(Alert.AlertType.WARNING);
                                alert.setTitle(bundle.getString(""main.alert.title""));
                                alert.setHeaderText(null);
                                alert.setContentText(MessageFormat.format(bundle.getString(""main.alert.content""), exceptions.size()));
                                alert.showAndWait();
                            } else {
                                winTaskbarProgress.finish();
                            }
                        });

                    }
                });
            } catch (Exception e) {
                resetUIAfterExecution();
                String stacktrace = MiscUtil.getStackTrace(e);
                labelResult.setText(""Error: "" + e.getClass().getSimpleName());
                Alert alert = new Alert(Alert.AlertType.WARNING);
                alert.setTitle(e.getClass().getSimpleName());
                alert.setHeaderText(e.getMessage());
                alert.setContentText(stacktrace.length() > 600 ? stacktrace.substring(0, 600) + ""..."" : stacktrace);
                alert.showAndWait();
            }
        });

        btnDstFolder.setGraphic(new ImageView(new Image(""img/folder-symbol.png"")));
        btnSrcFolder.setGraphic(new ImageView(new Image(""img/folder-symbol.png"")));
        btnSrcFile.setGraphic(new ImageView(new Image(""img/file-symbol.png"")));
        btnDstFolderOpen.setGraphic(new ImageView(new Image(""img/eye.png"")));

        btnReset.setOnAction(event -> {
            saveToPrefs(new Arguments());
            loadPrefs();
        });

        scaleTypeToggleGroup.selectedToggleProperty().addListener((ov, old_toggle, new_toggle) -> {
            scaleSlider.setVisible(!rbDpWidth.isSelected() && !rbDpHeight.isSelected());
            gridPaneScaleFactorLabel.setVisible(!rbDpWidth.isSelected() && !rbDpHeight.isSelected());
            textFieldDp.setVisible(rbDpWidth.isSelected() || rbDpHeight.isSelected());
            labelDpPostFix.setVisible(rbDpWidth.isSelected() || rbDpHeight.isSelected());
            labelDpWidth.setVisible(rbDpWidth.isSelected());
            labelDpHeight.setVisible(rbDpHeight.isSelected());
        });

        optionTypeToggleGroup.selectedToggleProperty().addListener((observable, oldValue, newValue) -> {
            if (rbOptAdvanced.isSelected()) {
                if (stage.getHeight() < GUI.MIN_HEIGHT) {
                    stage.setHeight(GUI.MIN_HEIGHT);
                }
            }
        });

        gridPaneOptionsCheckboxes.managedProperty().bind(rbOptAdvanced.selectedProperty());
        gridPaneOptionsCheckboxes.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        gridPanePostProcessors.managedProperty().bind(rbOptAdvanced.selectedProperty());
        gridPanePostProcessors.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        labelPostProcessor.managedProperty().bind(rbOptAdvanced.selectedProperty());
        labelPostProcessor.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        hboxWhy.managedProperty().bind(rbOptAdvanced.selectedProperty());
        hboxWhy.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        vboxOptionsCheckboxes.managedProperty().bind(rbOptAdvanced.selectedProperty());
        vboxOptionsCheckboxes.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        vboxPostProcessors.managedProperty().bind(rbOptAdvanced.selectedProperty());
        vboxPostProcessors.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        gridPaneChoiceBoxes.managedProperty().bind(rbOptAdvanced.selectedProperty());
        gridPaneChoiceBoxes.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        textFieldConsole.managedProperty().bind(rbOptAdvanced.selectedProperty());
        textFieldConsole.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        vboxFillFreeSpace.managedProperty().bind(rbOptSimple.selectedProperty());
        vboxFillFreeSpace.visibleProperty().bind(rbOptSimple.selectedProperty());

        scaleSlider.valueProperty().addListener((observable, oldValue, newValue) -> {
            labelScale.setText(
                    MessageFormat.format(bundle.getString(""main.label.factor""), String.format(Locale.US, ""%.2f"", Math.round(scaleSlider.getValue() * 4f) / 4f)));
            labelScaleSubtitle.setText(getNameForScale((float) scaleSlider.getValue()));
        });
        scaleSlider.setValue(Arguments.DEFAULT_SCALE);

        setPlatformToogles(Arguments.DEFAULT_PLATFORM);
        choiceCompression.setConverter(new StringConverter() {
            @Override
            public String toString(Object object) {
                return bundle.getString(((EOutputCompressionMode) object).rbKey);
            }

            @Override
            public Object fromString(String string) {
                return EOutputCompressionMode.getFromString(string, bundle);
            }
        });
        choiceCompression.setItems(FXCollections.observableArrayList(
                EOutputCompressionMode.SAME_AS_INPUT_PREF_PNG, EOutputCompressionMode.SAME_AS_INPUT_STRICT, new Separator(), EOutputCompressionMode.AS_JPG,
                EOutputCompressionMode.AS_PNG, EOutputCompressionMode.AS_GIF, EOutputCompressionMode.AS_BMP, EOutputCompressionMode.AS_JPG_AND_PNG));
        choiceCompression.getSelectionModel().select(Arguments.DEFAULT_OUT_COMPRESSION);

        choiceCompressionQuality.setItems(FXCollections.observableArrayList(
                toJpgQ(0f), toJpgQ(0.1f), toJpgQ(0.2f), toJpgQ(0.3f), toJpgQ(0.4f), toJpgQ(0.5f), toJpgQ(0.6f), toJpgQ(0.7f), toJpgQ(0.75f), toJpgQ(0.8f), toJpgQ(0.85f), toJpgQ(0.9f), toJpgQ(0.95f), toJpgQ(1.0f)));
        choiceCompressionQuality.getSelectionModel().select(toJpgQ(Float.valueOf(Arguments.DEFAULT_COMPRESSION_QUALITY)));

        choiceRounding.setItems(FXCollections.observableArrayList(
                RoundingHandler.Strategy.ROUND_HALF_UP, RoundingHandler.Strategy.CEIL, RoundingHandler.Strategy.FLOOR));
        choiceRounding.getSelectionModel().select(Arguments.DEFAULT_ROUNDING_STRATEGY);

        choiceThreads.setItems(FXCollections.observableArrayList(
                1, 2, 3, 4, 5, 6, 7, 8));
        choiceThreads.getSelectionModel().select(Arguments.DEFAULT_THREAD_COUNT - 1);

        choiceDownScale.setItems(FXCollections.observableArrayList(EScalingAlgorithm.getForType(EScalingAlgorithm.Type.DOWNSCALING)));
        choiceDownScale.getSelectionModel().select(Arguments.DEFAULT_DOWNSCALING_QUALITY);

        choiceUpScale.setItems(FXCollections.observableArrayList(EScalingAlgorithm.getForType(EScalingAlgorithm.Type.UPSCALING)));
        choiceUpScale.getSelectionModel().select(Arguments.DEFAULT_UPSCALING_QUALITY);

        labelVersion.setText(""v"" + GUIController.class.getPackage().getImplementationVersion());

        textFieldDp.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches(""\\d*"")) {
                textFieldDp.setText(newValue.replaceAll(""[^\\d]"", """"));
            }
            if (textFieldDp.getText().length() > 10) {
                String s = textFieldDp.getText().substring(0, 10);
                textFieldDp.setText(s);
            }
        });

        labelWhyPP.setOnMouseClicked(event -> {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle(""Info"");
            alert.setHeaderText(bundle.getString(""alert.whypp.title""));
            alert.setContentText(bundle.getString(""alert.whypp.text""));
            alert.showAndWait();
        });

        btnDstFolderOpen.setOnAction(event -> {
            try {
                Desktop.getDesktop().open(new File(textFieldDstPath.getText()));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });

        textFieldDstPath.textProperty().addListener(observable -> {
            if (textFieldDstPath != null) {
                File dstFolder = new File(textFieldDstPath.getText());
                if (dstFolder.exists() && dstFolder.isDirectory()) {
                    btnDstFolderOpen.setDisable(false);
                    return;
                }
            }
            btnDstFolderOpen.setDisable(true);
        });

        loadPrefs();
        new Thread(new PostProcessorChecker()).start();
    }"
at.favre.tools.dconvert.ui.GUIController.onProgress,"                    public void onProgress(float progress) {
                        Platform.runLater(() -> {
                            progressBar.setProgress(progress);
                            winTaskbarProgress.updateProgress(progress);
                        });
                    }"
at.favre.tools.dconvert.ui.GUIController.onFinished,"                    public void onFinished(int finishedJobs, List<Exception> exceptions, long time, boolean haltedDuringProcess, String log) {
                        Platform.runLater(() -> {
                            resetUIAfterExecution();
                            labelResult.setText(
                                    MessageFormat.format(bundle.getString(""main.label.finish""), finishedJobs, exceptions.size(), MiscUtil.duration(time)));
                            textFieldConsole.setText(log);
                            textFieldConsole.appendText("""");

                            if (!exceptions.isEmpty()) {
                                winTaskbarProgress.error();
                                Alert alert = new Alert(Alert.AlertType.WARNING);
                                alert.setTitle(bundle.getString(""main.alert.title""));
                                alert.setHeaderText(null);
                                alert.setContentText(MessageFormat.format(bundle.getString(""main.alert.content""), exceptions.size()));
                                alert.showAndWait();
                            } else {
                                winTaskbarProgress.finish();
                            }
                        });

                    }
                });
            } catch (Exception e) {
                resetUIAfterExecution();
                String stacktrace = MiscUtil.getStackTrace(e);
                labelResult.setText(""Error: "" + e.getClass().getSimpleName());
                Alert alert = new Alert(Alert.AlertType.WARNING);
                alert.setTitle(e.getClass().getSimpleName());
                alert.setHeaderText(e.getMessage());
                alert.setContentText(stacktrace.length() > 600 ? stacktrace.substring(0, 600) + ""..."" : stacktrace);
                alert.showAndWait();
            }
        });

        btnDstFolder.setGraphic(new ImageView(new Image(""img/folder-symbol.png"")));
        btnSrcFolder.setGraphic(new ImageView(new Image(""img/folder-symbol.png"")));
        btnSrcFile.setGraphic(new ImageView(new Image(""img/file-symbol.png"")));
        btnDstFolderOpen.setGraphic(new ImageView(new Image(""img/eye.png"")));

        btnReset.setOnAction(event -> {
            saveToPrefs(new Arguments());
            loadPrefs();
        });

        scaleTypeToggleGroup.selectedToggleProperty().addListener((ov, old_toggle, new_toggle) -> {
            scaleSlider.setVisible(!rbDpWidth.isSelected() && !rbDpHeight.isSelected());
            gridPaneScaleFactorLabel.setVisible(!rbDpWidth.isSelected() && !rbDpHeight.isSelected());
            textFieldDp.setVisible(rbDpWidth.isSelected() || rbDpHeight.isSelected());
            labelDpPostFix.setVisible(rbDpWidth.isSelected() || rbDpHeight.isSelected());
            labelDpWidth.setVisible(rbDpWidth.isSelected());
            labelDpHeight.setVisible(rbDpHeight.isSelected());
        });

        optionTypeToggleGroup.selectedToggleProperty().addListener((observable, oldValue, newValue) -> {
            if (rbOptAdvanced.isSelected()) {
                if (stage.getHeight() < GUI.MIN_HEIGHT) {
                    stage.setHeight(GUI.MIN_HEIGHT);
                }
            }
        });

        gridPaneOptionsCheckboxes.managedProperty().bind(rbOptAdvanced.selectedProperty());
        gridPaneOptionsCheckboxes.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        gridPanePostProcessors.managedProperty().bind(rbOptAdvanced.selectedProperty());
        gridPanePostProcessors.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        labelPostProcessor.managedProperty().bind(rbOptAdvanced.selectedProperty());
        labelPostProcessor.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        hboxWhy.managedProperty().bind(rbOptAdvanced.selectedProperty());
        hboxWhy.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        vboxOptionsCheckboxes.managedProperty().bind(rbOptAdvanced.selectedProperty());
        vboxOptionsCheckboxes.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        vboxPostProcessors.managedProperty().bind(rbOptAdvanced.selectedProperty());
        vboxPostProcessors.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        gridPaneChoiceBoxes.managedProperty().bind(rbOptAdvanced.selectedProperty());
        gridPaneChoiceBoxes.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        textFieldConsole.managedProperty().bind(rbOptAdvanced.selectedProperty());
        textFieldConsole.visibleProperty().bind(rbOptAdvanced.selectedProperty());
        vboxFillFreeSpace.managedProperty().bind(rbOptSimple.selectedProperty());
        vboxFillFreeSpace.visibleProperty().bind(rbOptSimple.selectedProperty());

        scaleSlider.valueProperty().addListener((observable, oldValue, newValue) -> {
            labelScale.setText(
                    MessageFormat.format(bundle.getString(""main.label.factor""), String.format(Locale.US, ""%.2f"", Math.round(scaleSlider.getValue() * 4f) / 4f)));
            labelScaleSubtitle.setText(getNameForScale((float) scaleSlider.getValue()));
        });
        scaleSlider.setValue(Arguments.DEFAULT_SCALE);

        setPlatformToogles(Arguments.DEFAULT_PLATFORM);
        choiceCompression.setConverter(new StringConverter() {
            @Override
            public String toString(Object object) {
                return bundle.getString(((EOutputCompressionMode) object).rbKey);
            }

            @Override
            public Object fromString(String string) {
                return EOutputCompressionMode.getFromString(string, bundle);
            }
        });
        choiceCompression.setItems(FXCollections.observableArrayList(
                EOutputCompressionMode.SAME_AS_INPUT_PREF_PNG, EOutputCompressionMode.SAME_AS_INPUT_STRICT, new Separator(), EOutputCompressionMode.AS_JPG,
                EOutputCompressionMode.AS_PNG, EOutputCompressionMode.AS_GIF, EOutputCompressionMode.AS_BMP, EOutputCompressionMode.AS_JPG_AND_PNG));
        choiceCompression.getSelectionModel().select(Arguments.DEFAULT_OUT_COMPRESSION);

        choiceCompressionQuality.setItems(FXCollections.observableArrayList(
                toJpgQ(0f), toJpgQ(0.1f), toJpgQ(0.2f), toJpgQ(0.3f), toJpgQ(0.4f), toJpgQ(0.5f), toJpgQ(0.6f), toJpgQ(0.7f), toJpgQ(0.75f), toJpgQ(0.8f), toJpgQ(0.85f), toJpgQ(0.9f), toJpgQ(0.95f), toJpgQ(1.0f)));
        choiceCompressionQuality.getSelectionModel().select(toJpgQ(Float.valueOf(Arguments.DEFAULT_COMPRESSION_QUALITY)));

        choiceRounding.setItems(FXCollections.observableArrayList(
                RoundingHandler.Strategy.ROUND_HALF_UP, RoundingHandler.Strategy.CEIL, RoundingHandler.Strategy.FLOOR));
        choiceRounding.getSelectionModel().select(Arguments.DEFAULT_ROUNDING_STRATEGY);

        choiceThreads.setItems(FXCollections.observableArrayList(
                1, 2, 3, 4, 5, 6, 7, 8));
        choiceThreads.getSelectionModel().select(Arguments.DEFAULT_THREAD_COUNT - 1);

        choiceDownScale.setItems(FXCollections.observableArrayList(EScalingAlgorithm.getForType(EScalingAlgorithm.Type.DOWNSCALING)));
        choiceDownScale.getSelectionModel().select(Arguments.DEFAULT_DOWNSCALING_QUALITY);

        choiceUpScale.setItems(FXCollections.observableArrayList(EScalingAlgorithm.getForType(EScalingAlgorithm.Type.UPSCALING)));
        choiceUpScale.getSelectionModel().select(Arguments.DEFAULT_UPSCALING_QUALITY);

        labelVersion.setText(""v"" + GUIController.class.getPackage().getImplementationVersion());

        textFieldDp.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches(""\\d*"")) {
                textFieldDp.setText(newValue.replaceAll(""[^\\d]"", """"));
            }
            if (textFieldDp.getText().length() > 10) {
                String s = textFieldDp.getText().substring(0, 10);
                textFieldDp.setText(s);
            }
        });

        labelWhyPP.setOnMouseClicked(event -> {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle(""Info"");
            alert.setHeaderText(bundle.getString(""alert.whypp.title""));
            alert.setContentText(bundle.getString(""alert.whypp.text""));
            alert.showAndWait();
        });

        btnDstFolderOpen.setOnAction(event -> {
            try {
                Desktop.getDesktop().open(new File(textFieldDstPath.getText()));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });

        textFieldDstPath.textProperty().addListener(observable -> {
            if (textFieldDstPath != null) {
                File dstFolder = new File(textFieldDstPath.getText());
                if (dstFolder.exists() && dstFolder.isDirectory()) {
                    btnDstFolderOpen.setDisable(false);
                    return;
                }
            }
            btnDstFolderOpen.setDisable(true);
        });

        loadPrefs();
        new Thread(new PostProcessorChecker()).start();
    }

    public static String toJpgQ(Float floatQuality) {
        return String.format(Locale.US, ""%.0f"", floatQuality * 100f) + ""%"";
    }

    private void setPlatformToogles(Set<EPlatform> platformSet) {
        tgAndroid.setSelected(platformSet.contains(EPlatform.ANDROID));
        tgIos.setSelected(platformSet.contains(EPlatform.IOS));
        tgWindows.setSelected(platformSet.contains(EPlatform.WINDOWS));
        tgWeb.setSelected(platformSet.contains(EPlatform.WEB));
    }

    private void setupLayout() {
        ColumnConstraints column1M = new ColumnConstraints();
        column1M.setPercentWidth(20);
        ColumnConstraints column2M = new ColumnConstraints();
        column2M.setPercentWidth(56);
        ColumnConstraints column3M = new ColumnConstraints();
        column3M.setPercentWidth(12);
        ColumnConstraints column4M = new ColumnConstraints();
        column4M.setPercentWidth(12);
        rootGridPane.getColumnConstraints().addAll(column1M, column2M, column3M, column4M);

        ColumnConstraints column1 = new ColumnConstraints();
        column1.setPercentWidth(20);
        ColumnConstraints column2 = new ColumnConstraints();
        column2.setPercentWidth(30);
        ColumnConstraints column3 = new ColumnConstraints();
        column3.setPercentWidth(20);
        ColumnConstraints column4 = new ColumnConstraints();
        column4.setPercentWidth(30);
        gridPaneChoiceBoxes.getColumnConstraints().addAll(column1, column2, column3, column4);

        ColumnConstraints column1C = new ColumnConstraints();
        column1C.setPercentWidth(50);
        ColumnConstraints column2C = new ColumnConstraints();
        column2C.setPercentWidth(50);
        gridPaneOptionsCheckboxes.getColumnConstraints().addAll(column1C, column2C);
        gridPanePostProcessors.getColumnConstraints().addAll(column1C, column2C);

        ColumnConstraints column1D = new ColumnConstraints();
        column1D.setPercentWidth(25);
        ColumnConstraints column2D = new ColumnConstraints();
        column2D.setPercentWidth(25);
        ColumnConstraints column3D = new ColumnConstraints();
        column3D.setPercentWidth(25);
        ColumnConstraints column4D = new ColumnConstraints();
        column4D.setPercentWidth(25);
        gridPaneToggleGroup.getColumnConstraints().addAll(column1D, column2D, column3D, column4D);
    }

    private void saveToPrefs(Arguments arg) {
        preferenceStore.save(arg);
    }

    private void loadPrefs() {
        Arguments args = preferenceStore.get();
        if (args != null) {
            textFieldSrcPath.setText(args.src != null ? args.src.getAbsolutePath() : """");
            textFieldDstPath.setText(args.dst != null ? args.dst.getAbsolutePath() : """");

            scaleSlider.setValue(Arguments.DEFAULT_SCALE);
            textFieldDp.setText(String.valueOf((int) args.scale));

            if (args.scaleMode == EScaleMode.FACTOR) {
                rbFactor.setSelected(true);
                scaleSlider.setValue(args.scale);
                textFieldDp.setText("""");
            } else if (args.scaleMode == EScaleMode.DP_WIDTH) {
                rbDpWidth.setSelected(true);
            } else if (args.scaleMode == EScaleMode.DP_HEIGHT) {
                rbDpHeight.setSelected(true);
            }

            setPlatformToogles(args.platform);
            choiceCompression.getSelectionModel().select(args.outputCompressionMode);
            choiceCompressionQuality.getSelectionModel().select(toJpgQ(args.compressionQuality));
            choiceRounding.getSelectionModel().select(args.roundingHandler);
            choiceThreads.getSelectionModel().select(Integer.valueOf(args.threadCount));
            choiceDownScale.getSelectionModel().select(args.downScalingAlgorithm);
            choiceUpScale.getSelectionModel().select(args.upScalingAlgorithm);

            cbSkipExisting.setSelected(args.skipExistingFiles);
            cbSkipUpscaling.setSelected(args.skipUpscaling);
            cbAndroidIncludeLdpiTvdpi.setSelected(args.includeAndroidLdpiTvdpi);
            cbAntiAliasing.setSelected(args.enableAntiAliasing);
            cbMipmapInsteadDrawable.setSelected(args.createMipMapInsteadOfDrawableDir);
            cbHaltOnError.setSelected(args.haltOnError);
            cbDryRun.setSelected(args.dryRun);
            cbEnablePngCrush.setSelected(args.enablePngCrush);
            cbPostConvertWebp.setSelected(args.postConvertWebp);
            cbEnableMozJpeg.setSelected(args.enableMozJpeg);
            cbKeepUnoptimized.setSelected(args.keepUnoptimizedFilesPostProcessor);
            cbIosCreateImageset.setSelected(args.iosCreateImagesetFolders);
            cbCleanBeforeConvert.setSelected(args.clearDirBeforeConvert);
            rbOptAdvanced.setSelected(args.guiAdvancedOptions);
            rbOptSimple.setSelected(!args.guiAdvancedOptions);

        }
    }

    public Arguments getFromUI(boolean skipValidation) throws InvalidArgumentException {
        float scale = Arguments.DEFAULT_SCALE;

        try {
            scale = rbFactor.isSelected() ? (float) scaleSlider.getValue() : Float.valueOf(textFieldDp.getText());
        } catch (NumberFormatException e) {
            if (!skipValidation) {
                throw new InvalidArgumentException(
                        MessageFormat.format(bundle.getString(""error.parse.dp""), textFieldDp.getText()));
            }
        }

        Set<EPlatform> platformSet = new HashSet<>();
        if (tgAndroid.isSelected()) {
            platformSet.add(EPlatform.ANDROID);
        }
        if (tgIos.isSelected()) {
            platformSet.add(EPlatform.IOS);
        }
        if (tgWindows.isSelected()) {
            platformSet.add(EPlatform.WINDOWS);
        }
        if (tgWeb.isSelected()) {
            platformSet.add(EPlatform.WEB);
        }

        Arguments.Builder builder = new Arguments.Builder(new File(textFieldSrcPath.getText()), scale);
        builder.dstFolder(textFieldDstPath.getText() != null && !textFieldDstPath.getText().trim().isEmpty() ? new File(textFieldDstPath.getText()) : null);
        builder.scaleMode(rbFactor.isSelected() ? EScaleMode.FACTOR : rbDpWidth.isSelected() ? EScaleMode.DP_WIDTH : EScaleMode.DP_HEIGHT);
        builder.platform(platformSet);
        builder.compression((EOutputCompressionMode) choiceCompression.getSelectionModel().getSelectedItem(), toJpgQFloat(choiceCompressionQuality.getSelectionModel().getSelectedItem()));
        builder.scaleRoundingStragy((RoundingHandler.Strategy) choiceRounding.getSelectionModel().getSelectedItem());
        builder.threadCount((Integer) choiceThreads.getSelectionModel().getSelectedItem());
        builder.downScaleAlgorithm((EScalingAlgorithm) choiceDownScale.getSelectionModel().getSelectedItem());
        builder.upScaleAlgorithm((EScalingAlgorithm) choiceUpScale.getSelectionModel().getSelectedItem());

        builder.skipExistingFiles(cbSkipExisting.isSelected());
        builder.skipUpscaling(cbSkipUpscaling.isSelected());
        builder.verboseLog(true);
        builder.includeAndroidLdpiTvdpi(cbAndroidIncludeLdpiTvdpi.isSelected());
        builder.haltOnError(cbHaltOnError.isSelected());
        builder.createMipMapInsteadOfDrawableDir(cbMipmapInsteadDrawable.isSelected());
        builder.antiAliasing(cbAntiAliasing.isSelected());
        builder.dryRun(cbDryRun.isSelected());
        builder.enablePngCrush(cbEnablePngCrush.isSelected());
        builder.postConvertWebp(cbPostConvertWebp.isSelected());
        builder.enableMozJpeg(cbEnableMozJpeg.isSelected());
        builder.keepUnoptimizedFilesPostProcessor(cbKeepUnoptimized.isSelected());
        builder.iosCreateImagesetFolders(cbIosCreateImageset.isSelected());
        builder.guiAdvancedOptions(rbOptAdvanced.isSelected());
        builder.clearDirBeforeConvert(cbCleanBeforeConvert.isSelected());

        return builder.skipParamValidation(skipValidation).build();
    }

    private float toJpgQFloat(Object selectedItem) {
        String raw = selectedItem.toString();
        raw = raw.replace(""%"", """");
        int rawInt = Integer.parseInt(raw);
        return (float) rawInt / 100f;
    }

    private void resetUIAfterExecution() {
        progressBar.setProgress(0);
        btnConvert.setDisable(false);
        textFieldConsole.setDisable(false);
        btnConvert.setText(bundle.getString(""main.btn.convert""));
    }

    public void setSrcForTest(File srcFile) {
        if (srcFile != null) {
            textFieldSrcPath.setText(srcFile.getAbsolutePath());
            if (textFieldDstPath != null && (textFieldDstPath.getText() == null || textFieldDstPath.getText().trim().isEmpty())) {
                textFieldDstPath.setText(srcFile.getAbsolutePath());
            }
        }
    }

    private static String getNameForScale(float scale) {
        String scaleString = String.format(Locale.US, ""%.2f"", Math.round(scale * 4f) / 4f);
        switch (scaleString) {
            case ""0.75"":
                return ""ldpi / "" + getDpi(scaleString);
            case ""1.00"":
                return ""mdpi / 1x / "" + getDpi(scaleString);
            case ""1.50"":
                return ""hdpi / "" + getDpi(scaleString);
            case ""2.00"":
                return ""xhdpi / 2x / "" + getDpi(scaleString);
            case ""3.00"":
                return ""xxhdpi / 3x / "" + getDpi(scaleString);
            case ""4.00"":
                return ""xxxhdpi / "" + getDpi(scaleString);
            default:
                return getDpi(scaleString);
        }
    }

    private static String getDpi(String scaleString) {
        return String.format(Locale.US, ""%.0f"", Float.valueOf(scaleString) * 160) + ""dpi"";
    }

    private static class FolderPicker implements EventHandler<ActionEvent> {
        private final DirectoryChooser directoryChooser;
        private final TextField textFieldPath;
        private final TextField dstTextFieldPath;
        private final ResourceBundle bundle;

        public FolderPicker(DirectoryChooser directoryChooser, TextField textFieldPath, TextField dstTextFieldPath, ResourceBundle bundle) {
            this.directoryChooser = directoryChooser;
            this.textFieldPath = textFieldPath;
            this.dstTextFieldPath = dstTextFieldPath;
            this.bundle = bundle;
        }

        @Override
        public void handle(ActionEvent event) {
            directoryChooser.setTitle(bundle.getString(""main.dirchooser.titel""));
            File dir = new File(textFieldPath.getText());

            if (dir != null && dir.isFile()) {
                dir = dir.getParentFile();
            }

            while (true) {
                if (dir == null || dir.isDirectory()) break;
                if (!dir.exists()) {
                    dir = dir.getParentFile();
                }
            }

            if (textFieldPath.getText().isEmpty() || !dir.exists() || !dir.isDirectory()) {
                directoryChooser.setInitialDirectory(new File(System.getProperty(""user.home"")));
            } else {
                directoryChooser.setInitialDirectory(dir);
            }
            File srcFile = directoryChooser.showDialog(textFieldPath.getScene().getWindow());
            if (srcFile != null) {
                textFieldPath.setText(srcFile.getAbsolutePath());
                if (dstTextFieldPath != null && (dstTextFieldPath.getText() == null || dstTextFieldPath.getText().trim().isEmpty())) {
                    dstTextFieldPath.setText(srcFile.getAbsolutePath());
                }
            }
        }
    "
at.favre.tools.dconvert.ui.GUIController.toString,"            public String toString(Object object) {
                return bundle.getString(((EOutputCompressionMode) object).rbKey);
            }"
at.favre.tools.dconvert.ui.GUIController.fromString,"            public Object fromString(String string) {
                return EOutputCompressionMode.getFromString(string, bundle);
            }
        "
at.favre.tools.dconvert.ui.GUIController.toJpgQ,"    public static String toJpgQ(Float floatQuality) {
        return String.format(Locale.US, ""%.0f"", floatQuality * 100f) + ""%"";
    }"
at.favre.tools.dconvert.ui.GUIController.setPlatformToogles,"    private void setPlatformToogles(Set<EPlatform> platformSet) {
        tgAndroid.setSelected(platformSet.contains(EPlatform.ANDROID));
        tgIos.setSelected(platformSet.contains(EPlatform.IOS));
        tgWindows.setSelected(platformSet.contains(EPlatform.WINDOWS));
        tgWeb.setSelected(platformSet.contains(EPlatform.WEB));
    }"
at.favre.tools.dconvert.ui.GUIController.setupLayout,"    private void setupLayout() {
        ColumnConstraints column1M = new ColumnConstraints();
        column1M.setPercentWidth(20);
        ColumnConstraints column2M = new ColumnConstraints();
        column2M.setPercentWidth(56);
        ColumnConstraints column3M = new ColumnConstraints();
        column3M.setPercentWidth(12);
        ColumnConstraints column4M = new ColumnConstraints();
        column4M.setPercentWidth(12);
        rootGridPane.getColumnConstraints().addAll(column1M, column2M, column3M, column4M);

        ColumnConstraints column1 = new ColumnConstraints();
        column1.setPercentWidth(20);
        ColumnConstraints column2 = new ColumnConstraints();
        column2.setPercentWidth(30);
        ColumnConstraints column3 = new ColumnConstraints();
        column3.setPercentWidth(20);
        ColumnConstraints column4 = new ColumnConstraints();
        column4.setPercentWidth(30);
        gridPaneChoiceBoxes.getColumnConstraints().addAll(column1, column2, column3, column4);

        ColumnConstraints column1C = new ColumnConstraints();
        column1C.setPercentWidth(50);
        ColumnConstraints column2C = new ColumnConstraints();
        column2C.setPercentWidth(50);
        gridPaneOptionsCheckboxes.getColumnConstraints().addAll(column1C, column2C);
        gridPanePostProcessors.getColumnConstraints().addAll(column1C, column2C);

        ColumnConstraints column1D = new ColumnConstraints();
        column1D.setPercentWidth(25);
        ColumnConstraints column2D = new ColumnConstraints();
        column2D.setPercentWidth(25);
        ColumnConstraints column3D = new ColumnConstraints();
        column3D.setPercentWidth(25);
        ColumnConstraints column4D = new ColumnConstraints();
        column4D.setPercentWidth(25);
        gridPaneToggleGroup.getColumnConstraints().addAll(column1D, column2D, column3D, column4D);
    }"
at.favre.tools.dconvert.ui.GUIController.saveToPrefs,"    private void saveToPrefs(Arguments arg) {
        preferenceStore.save(arg);
    }"
at.favre.tools.dconvert.ui.GUIController.loadPrefs,"    private void loadPrefs() {
        Arguments args = preferenceStore.get();
        if (args != null) {
            textFieldSrcPath.setText(args.src != null ? args.src.getAbsolutePath() : """");
            textFieldDstPath.setText(args.dst != null ? args.dst.getAbsolutePath() : """");

            scaleSlider.setValue(Arguments.DEFAULT_SCALE);
            textFieldDp.setText(String.valueOf((int) args.scale));

            if (args.scaleMode == EScaleMode.FACTOR) {
                rbFactor.setSelected(true);
                scaleSlider.setValue(args.scale);
                textFieldDp.setText("""");
            } else if (args.scaleMode == EScaleMode.DP_WIDTH) {
                rbDpWidth.setSelected(true);
            } else if (args.scaleMode == EScaleMode.DP_HEIGHT) {
                rbDpHeight.setSelected(true);
            }

            setPlatformToogles(args.platform);
            choiceCompression.getSelectionModel().select(args.outputCompressionMode);
            choiceCompressionQuality.getSelectionModel().select(toJpgQ(args.compressionQuality));
            choiceRounding.getSelectionModel().select(args.roundingHandler);
            choiceThreads.getSelectionModel().select(Integer.valueOf(args.threadCount));
            choiceDownScale.getSelectionModel().select(args.downScalingAlgorithm);
            choiceUpScale.getSelectionModel().select(args.upScalingAlgorithm);

            cbSkipExisting.setSelected(args.skipExistingFiles);
            cbSkipUpscaling.setSelected(args.skipUpscaling);
            cbAndroidIncludeLdpiTvdpi.setSelected(args.includeAndroidLdpiTvdpi);
            cbAntiAliasing.setSelected(args.enableAntiAliasing);
            cbMipmapInsteadDrawable.setSelected(args.createMipMapInsteadOfDrawableDir);
            cbHaltOnError.setSelected(args.haltOnError);
            cbDryRun.setSelected(args.dryRun);
            cbEnablePngCrush.setSelected(args.enablePngCrush);
            cbPostConvertWebp.setSelected(args.postConvertWebp);
            cbEnableMozJpeg.setSelected(args.enableMozJpeg);
            cbKeepUnoptimized.setSelected(args.keepUnoptimizedFilesPostProcessor);
            cbIosCreateImageset.setSelected(args.iosCreateImagesetFolders);
            cbCleanBeforeConvert.setSelected(args.clearDirBeforeConvert);
            rbOptAdvanced.setSelected(args.guiAdvancedOptions);
            rbOptSimple.setSelected(!args.guiAdvancedOptions);

        }
    }"
at.favre.tools.dconvert.ui.GUIController.getFromUI,"    public Arguments getFromUI(boolean skipValidation) throws InvalidArgumentException {
        float scale = Arguments.DEFAULT_SCALE;

        try {
            scale = rbFactor.isSelected() ? (float) scaleSlider.getValue() : Float.valueOf(textFieldDp.getText());
        } catch (NumberFormatException e) {
            if (!skipValidation) {
                throw new InvalidArgumentException(
                        MessageFormat.format(bundle.getString(""error.parse.dp""), textFieldDp.getText()));
            }
        }

        Set<EPlatform> platformSet = new HashSet<>();
        if (tgAndroid.isSelected()) {
            platformSet.add(EPlatform.ANDROID);
        }
        if (tgIos.isSelected()) {
            platformSet.add(EPlatform.IOS);
        }
        if (tgWindows.isSelected()) {
            platformSet.add(EPlatform.WINDOWS);
        }
        if (tgWeb.isSelected()) {
            platformSet.add(EPlatform.WEB);
        }

        Arguments.Builder builder = new Arguments.Builder(new File(textFieldSrcPath.getText()), scale);
        builder.dstFolder(textFieldDstPath.getText() != null && !textFieldDstPath.getText().trim().isEmpty() ? new File(textFieldDstPath.getText()) : null);
        builder.scaleMode(rbFactor.isSelected() ? EScaleMode.FACTOR : rbDpWidth.isSelected() ? EScaleMode.DP_WIDTH : EScaleMode.DP_HEIGHT);
        builder.platform(platformSet);
        builder.compression((EOutputCompressionMode) choiceCompression.getSelectionModel().getSelectedItem(), toJpgQFloat(choiceCompressionQuality.getSelectionModel().getSelectedItem()));
        builder.scaleRoundingStragy((RoundingHandler.Strategy) choiceRounding.getSelectionModel().getSelectedItem());
        builder.threadCount((Integer) choiceThreads.getSelectionModel().getSelectedItem());
        builder.downScaleAlgorithm((EScalingAlgorithm) choiceDownScale.getSelectionModel().getSelectedItem());
        builder.upScaleAlgorithm((EScalingAlgorithm) choiceUpScale.getSelectionModel().getSelectedItem());

        builder.skipExistingFiles(cbSkipExisting.isSelected());
        builder.skipUpscaling(cbSkipUpscaling.isSelected());
        builder.verboseLog(true);
        builder.includeAndroidLdpiTvdpi(cbAndroidIncludeLdpiTvdpi.isSelected());
        builder.haltOnError(cbHaltOnError.isSelected());
        builder.createMipMapInsteadOfDrawableDir(cbMipmapInsteadDrawable.isSelected());
        builder.antiAliasing(cbAntiAliasing.isSelected());
        builder.dryRun(cbDryRun.isSelected());
        builder.enablePngCrush(cbEnablePngCrush.isSelected());
        builder.postConvertWebp(cbPostConvertWebp.isSelected());
        builder.enableMozJpeg(cbEnableMozJpeg.isSelected());
        builder.keepUnoptimizedFilesPostProcessor(cbKeepUnoptimized.isSelected());
        builder.iosCreateImagesetFolders(cbIosCreateImageset.isSelected());
        builder.guiAdvancedOptions(rbOptAdvanced.isSelected());
        builder.clearDirBeforeConvert(cbCleanBeforeConvert.isSelected());

        return builder.skipParamValidation(skipValidation).build();
    }"
at.favre.tools.dconvert.ui.GUIController.toJpgQFloat,"    private float toJpgQFloat(Object selectedItem) {
        String raw = selectedItem.toString();
        raw = raw.replace(""%"", """");
        int rawInt = Integer.parseInt(raw);
        return (float) rawInt / 100f;
    }"
at.favre.tools.dconvert.ui.GUIController.resetUIAfterExecution,"    private void resetUIAfterExecution() {
        progressBar.setProgress(0);
        btnConvert.setDisable(false);
        textFieldConsole.setDisable(false);
        btnConvert.setText(bundle.getString(""main.btn.convert""));
    }"
at.favre.tools.dconvert.ui.GUIController.setSrcForTest,"    public void setSrcForTest(File srcFile) {
        if (srcFile != null) {
            textFieldSrcPath.setText(srcFile.getAbsolutePath());
            if (textFieldDstPath != null && (textFieldDstPath.getText() == null || textFieldDstPath.getText().trim().isEmpty())) {
                textFieldDstPath.setText(srcFile.getAbsolutePath());
            }
        }
    }"
at.favre.tools.dconvert.ui.GUIController.getNameForScale,"    private static String getNameForScale(float scale) {
        String scaleString = String.format(Locale.US, ""%.2f"", Math.round(scale * 4f) / 4f);
        switch (scaleString) {
            case ""0.75"":
                return ""ldpi / "" + getDpi(scaleString);
            case ""1.00"":
                return ""mdpi / 1x / "" + getDpi(scaleString);
            case ""1.50"":
                return ""hdpi / "" + getDpi(scaleString);
            case ""2.00"":
                return ""xhdpi / 2x / "" + getDpi(scaleString);
            case ""3.00"":
                return ""xxhdpi / 3x / "" + getDpi(scaleString);
            case ""4.00"":
                return ""xxxhdpi / "" + getDpi(scaleString);
            default:
                return getDpi(scaleString);
        }
    }"
at.favre.tools.dconvert.ui.GUIController.getDpi,"    private static String getDpi(String scaleString) {
        return String.format(Locale.US, ""%.0f"", Float.valueOf(scaleString) * 160) + ""dpi"";
    }"
at.favre.tools.dconvert.ui.GUIController.handle,"        public void handle(ActionEvent event) {
            directoryChooser.setTitle(bundle.getString(""main.dirchooser.titel""));
            File dir = new File(textFieldPath.getText());

            if (dir != null && dir.isFile()) {
                dir = dir.getParentFile();
            }

            while (true) {
                if (dir == null || dir.isDirectory()) break;
                if (!dir.exists()) {
                    dir = dir.getParentFile();
                }
            }

            if (textFieldPath.getText().isEmpty() || !dir.exists() || !dir.isDirectory()) {
                directoryChooser.setInitialDirectory(new File(System.getProperty(""user.home"")));
            } else {
                directoryChooser.setInitialDirectory(dir);
            }
            File srcFile = directoryChooser.showDialog(textFieldPath.getScene().getWindow());
            if (srcFile != null) {
                textFieldPath.setText(srcFile.getAbsolutePath());
                if (dstTextFieldPath != null && (dstTextFieldPath.getText() == null || dstTextFieldPath.getText().trim().isEmpty())) {
                    dstTextFieldPath.setText(srcFile.getAbsolutePath());
                }
            }
        }
    }

    private class PostProcessorChecker implements Runnable {
        @Override
        public void run() {
            boolean pngcrushSupported = new PngCrushProcessor().isSupported();
            boolean mozJpegSupported = new MozJpegProcessor().isSupported();
            boolean webpSupported = new WebpProcessor().isSupported();

            Platform.runLater(() -> {
                cbEnablePngCrush.setDisable(!pngcrushSupported);
                cbEnableMozJpeg.setDisable(!mozJpegSupported);
                cbPostConvertWebp.setDisable(!webpSupported);
                labelWhyPP.setVisible(!pngcrushSupported || !mozJpegSupported || !webpSupported);
            });
        }
    "
at.favre.tools.dconvert.ui.GUIController.run,"        public void run() {
            boolean pngcrushSupported = new PngCrushProcessor().isSupported();
            boolean mozJpegSupported = new MozJpegProcessor().isSupported();
            boolean webpSupported = new WebpProcessor().isSupported();

            Platform.runLater(() -> {
                cbEnablePngCrush.setDisable(!pngcrushSupported);
                cbEnableMozJpeg.setDisable(!mozJpegSupported);
                cbPostConvertWebp.setDisable(!webpSupported);
                labelWhyPP.setVisible(!pngcrushSupported || !mozJpegSupported || !webpSupported);
            });
        }
    "
at.favre.tools.dconvert.ui.GUI.launchApp,"    public void launchApp(String[] args) {
        launch(args);
    }"
at.favre.tools.dconvert.ui.GUI.start,"    public void start(Stage primaryStage) throws Exception {
        setup(primaryStage, new SerializePreferenceStore(), Toolkit.getDefaultToolkit().getScreenSize());
        primaryStage.show();
    }"
at.favre.tools.dconvert.ui.GUI.setup,"    public static GUIController setup(Stage primaryStage, IPreferenceStore store, Dimension screenSize) throws IOException {
        primaryStage.setTitle(""Density Converter"");

        ResourceBundle bundle = ResourceBundle.getBundle(""bundles.strings"", Locale.getDefault());

        FXMLLoader loader = new FXMLLoader(GUI.class.getClassLoader().getResource(""main.fxml""));
        loader.setResources(bundle);
        Parent root = loader.load();
        GUIController controller = loader.getController();
        controller.onCreate(primaryStage, store, bundle);

        if (screenSize.getHeight() <= 768) {
            MIN_HEIGHT = 740;
        }

        Scene scene = new Scene(root, 600, MIN_HEIGHT);
        primaryStage.setScene(scene);
        primaryStage.setResizable(true);
        primaryStage.setMinWidth(400);
        primaryStage.setMinHeight(500);
        primaryStage.getIcons().add(new Image(""img/density_converter_icon_16.png""));
        primaryStage.getIcons().add(new Image(""img/density_converter_icon_24.png""));
        primaryStage.getIcons().add(new Image(""img/density_converter_icon_48.png""));
        primaryStage.getIcons().add(new Image(""img/density_converter_icon_64.png""));
        primaryStage.getIcons().add(new Image(""img/density_converter_icon_128.png""));
        primaryStage.getIcons().add(new Image(""img/density_converter_icon_256.png""));

        return controller;
    }
"
at.favre.tools.dconvert.ui.CLIInterpreter.parse,"    public static Arguments parse(String[] args) {
        ResourceBundle strings = ResourceBundle.getBundle(""bundles.strings"", Locale.getDefault());
        Options options = setupOptions(strings);
        CommandLineParser parser = new DefaultParser();

        Arguments.Builder builder;
        try {
            CommandLine commandLine = parser.parse(options, args);

            if (commandLine.hasOption(""gui"")) {
                return Arguments.START_GUI;
            }

            if (commandLine.hasOption(""h"") || commandLine.hasOption(""help"")) {
                printHelp(options);
                return null;
            }

            if (commandLine.hasOption(""v"") || commandLine.hasOption(""version"")) {
                System.out.println(""Version: "" + CLIInterpreter.class.getPackage().getImplementationVersion());
                return null;
            }

            String scaleRawParam = commandLine.getOptionValue(SCALE_ARG).toLowerCase();

            boolean dp = false;

            if (scaleRawParam.contains(""dp"")) {
                dp = true;
                scaleRawParam = scaleRawParam.replace(""dp"", """").trim();
            }

            builder = new Arguments.Builder(new File(commandLine.getOptionValue(SOURCE_ARG)), Float.parseFloat(scaleRawParam));

            if (dp && commandLine.hasOption(SCALE_IS_HEIGHT_DP_ARG)) {
                builder.scaleMode(EScaleMode.DP_HEIGHT);
            } else if (dp && !commandLine.hasOption(SCALE_IS_HEIGHT_DP_ARG)) {
                builder.scaleMode(EScaleMode.DP_WIDTH);
            } else {
                builder.scaleMode(EScaleMode.FACTOR);
            }

            if (commandLine.hasOption(DST_ARG)) {
                builder.dstFolder(new File(commandLine.getOptionValue(DST_ARG)));
            }

            float compressionQuality = Arguments.DEFAULT_COMPRESSION_QUALITY;
            if (commandLine.hasOption(COMPRESSION_QUALITY_ARG)) {
                compressionQuality = Float.valueOf(commandLine.getOptionValue(COMPRESSION_QUALITY_ARG));
            }

            if (commandLine.hasOption(OUT_COMPRESSION_ARG)) {
                switch (commandLine.getOptionValue(OUT_COMPRESSION_ARG)) {
                    case ""strict"":
                        builder.compression(EOutputCompressionMode.SAME_AS_INPUT_STRICT);
                        break;
                    case ""png"":
                        builder.compression(EOutputCompressionMode.AS_PNG);
                        break;
                    case ""jpg"":
                        builder.compression(EOutputCompressionMode.AS_JPG, compressionQuality);
                        break;
                    case ""gif"":
                        builder.compression(EOutputCompressionMode.AS_GIF);
                        break;
                    case ""bmp"":
                        builder.compression(EOutputCompressionMode.AS_BMP);
                        break;
                    case ""png+jpg"":
                        builder.compression(EOutputCompressionMode.AS_JPG_AND_PNG, compressionQuality);
                        break;
                    default:
                        System.err.println(""unknown compression type: "" + commandLine.getOptionValue(OUT_COMPRESSION_ARG));
                }
            }

            Set<EPlatform> platformSet = new HashSet<>(EPlatform.values().length);
            if (commandLine.hasOption(PLATFORM_ARG)) {
                switch (commandLine.getOptionValue(PLATFORM_ARG)) {
                    case ""all"":
                        platformSet = EPlatform.getAll();
                        break;
                    case ""android"":
                        platformSet.add(EPlatform.ANDROID);
                        break;
                    case ""ios"":
                        platformSet.add(EPlatform.IOS);
                        break;
                    case ""win"":
                        platformSet.add(EPlatform.WINDOWS);
                        break;
                    case ""web"":
                        platformSet.add(EPlatform.WEB);
                        break;
                    default:
                        System.err.println(""unknown mode: "" + commandLine.getOptionValue(PLATFORM_ARG));
                }
                builder.platform(platformSet);
            }

            if (commandLine.hasOption(UPSCALING_ALGO_ARG)) {
                builder.upScaleAlgorithm(EScalingAlgorithm.getByName(commandLine.getOptionValue(UPSCALING_ALGO_ARG)));
            }

            if (commandLine.hasOption(DOWNSCALING_ALGO_ARG)) {
                builder.downScaleAlgorithm(EScalingAlgorithm.getByName(commandLine.getOptionValue(DOWNSCALING_ALGO_ARG)));
            }

            if (commandLine.hasOption(ROUNDING_MODE_ARG)) {
                switch (commandLine.getOptionValue(ROUNDING_MODE_ARG)) {
                    case ""round"":
                        builder.scaleRoundingStragy(RoundingHandler.Strategy.ROUND_HALF_UP);
                        break;
                    case ""ceil"":
                        builder.scaleRoundingStragy(RoundingHandler.Strategy.CEIL);
                        break;
                    case ""floor"":
                        builder.scaleRoundingStragy(RoundingHandler.Strategy.FLOOR);
                        break;
                    default:
                        System.err.println(""unknown mode: "" + commandLine.getOptionValue(ROUNDING_MODE_ARG));
                }
            }

            if (commandLine.hasOption(THREADS_ARG)) {
                builder.threadCount(Integer.valueOf(commandLine.getOptionValue(THREADS_ARG)));
            }

            builder.skipUpscaling(commandLine.hasOption(""skipUpscaling""));
            builder.skipExistingFiles(commandLine.hasOption(SKIP_EXISTING_ARG));
            builder.includeAndroidLdpiTvdpi(commandLine.hasOption(""androidIncludeLdpiTvdpi""));
            builder.verboseLog(commandLine.hasOption(VERBOSE_ARG));
            builder.haltOnError(commandLine.hasOption(""haltOnError""));
            builder.createMipMapInsteadOfDrawableDir(commandLine.hasOption(""androidMipmapInsteadOfDrawable""));
            builder.antiAliasing(commandLine.hasOption(""antiAliasing""));
            builder.enablePngCrush(commandLine.hasOption(""postProcessorPngCrush""));
            builder.postConvertWebp(commandLine.hasOption(""postProcessorWebp""));
            builder.dryRun(commandLine.hasOption(""dryRun""));
            builder.enableMozJpeg(commandLine.hasOption(""postProcessorMozJpeg""));
            builder.keepUnoptimizedFilesPostProcessor(commandLine.hasOption(""keepOriginalPostProcessedFiles""));
            builder.iosCreateImagesetFolders(commandLine.hasOption(""iosCreateImagesetFolders""));
            builder.clearDirBeforeConvert(commandLine.hasOption(""clean""));

            return builder.build();
        } catch (Exception e) {
            System.err.println(""Could not parse args: "" + e.getMessage());
        }
        return null;
    }"
at.favre.tools.dconvert.ui.CLIInterpreter.printHelp,"    private static void printHelp(Options options) {
        HelpFormatter help = new HelpFormatter();
        help.setWidth(110);
        help.setLeftPadding(4);
        help.printHelp(""converter"", ""version: "" + CLIInterpreter.class.getPackage().getImplementationVersion(), options, """", true);
    }"
at.favre.tools.dconvert.ui.CLIInterpreter.setupOptions,"    private static Options setupOptions(ResourceBundle bundle) {
        Options options = new Options();

        Option srcOpt = Option.builder(SOURCE_ARG).required().argName(""path to file or folder"").hasArg(true).desc(bundle.getString(""arg.descr.cmd.src"")).build();
        Option srcScaleOpt = Option.builder(SCALE_ARG).argName(""[float]|[int]dp"").hasArg(true).desc(bundle.getString(""arg.descr.cmd.scale"")).build();
        Option dstOpt = Option.builder(DST_ARG).hasArg(true).argName(""path"").desc(bundle.getString(""arg.descr.cmd.dst"")).build();

        Option platform = Option.builder(PLATFORM_ARG).hasArg(true).argName(""all|android|ios|win|web"").desc(MessageFormat.format(bundle.getString(""arg.descr.cmd.platform""), Arguments.DEFAULT_PLATFORM)).build();
        Option threadCount = Option.builder(THREADS_ARG).argName(""1-8"").hasArg(true).desc(MessageFormat.format(bundle.getString(""arg.descr.cmd.threads""), String.valueOf(Arguments.DEFAULT_THREAD_COUNT))).build();
        Option roundingHandler = Option.builder(ROUNDING_MODE_ARG).argName(""round|ceil|floor"").hasArg(true).desc(MessageFormat.format(bundle.getString(""arg.descr.cmd.rounding""), Arguments.DEFAULT_ROUNDING_STRATEGY)).build();
        Option compression = Option.builder(OUT_COMPRESSION_ARG).hasArg(true).argName(""png|jpg|gif|bmp"").desc(bundle.getString(""arg.descr.cmd.outcompression"")).build();
        Option compressionQuality = Option.builder(COMPRESSION_QUALITY_ARG).hasArg(true).argName(""0.0-1.0"").desc(MessageFormat.format(bundle.getString(""arg.descr.cmd.compression""), String.valueOf(Arguments.DEFAULT_COMPRESSION_QUALITY))).build();
        Option upScalingAlgo = Option.builder(UPSCALING_ALGO_ARG).hasArg(true).argName(EScalingAlgorithm.getCliArgString(EScalingAlgorithm.Type.UPSCALING)).desc(MessageFormat.format(bundle.getString(""arg.descr.scalingalgo""), Arguments.DEFAULT_PLATFORM)).build();
        Option downScalingAlgo = Option.builder(DOWNSCALING_ALGO_ARG).hasArg(true).argName(EScalingAlgorithm.getCliArgString(EScalingAlgorithm.Type.DOWNSCALING)).desc(MessageFormat.format(bundle.getString(""arg.descr.scalingalgo""), Arguments.DEFAULT_PLATFORM)).build();

        Option skipExistingFiles = Option.builder(SKIP_EXISTING_ARG).desc(bundle.getString(""arg.descr.skipexisting"")).build();
        Option androidIncludeLdpiTvdpi = Option.builder(""androidIncludeLdpiTvdpi"").desc(bundle.getString(""arg.descr.androidmipmap"")).build();
        Option mipmapInsteadOfDrawable = Option.builder(""androidMipmapInsteadOfDrawable"").desc(bundle.getString(""arg.descr.androidldpi"")).build();
        Option iosCreateImagesetFolders = Option.builder(""iosCreateImagesetFolders"").desc(bundle.getString(""arg.descr.iosimageset"")).build();
        Option skipUpscaling = Option.builder(""skipUpscaling"").desc(bundle.getString(""arg.descr.skipupscaling"")).build();
        Option verboseLog = Option.builder(VERBOSE_ARG).desc(bundle.getString(""arg.descr.cmd.verbose"")).build();
        Option haltOnError = Option.builder(""haltOnError"").desc(bundle.getString(""arg.descr.halterror"")).build();
        Option antiAliasing = Option.builder(""antiAliasing"").desc(bundle.getString(""arg.descr.antialiasing"")).build();
        Option enablePngCrush = Option.builder(""postProcessorPngCrush"").desc(bundle.getString(""arg.descr.pngcrush"")).build();
        Option postWebpConvert = Option.builder(""postProcessorWebp"").desc(bundle.getString(""arg.descr.webp"")).build();
        Option keepUnPostProcessed = Option.builder(""keepOriginalPostProcessedFiles"").desc(bundle.getString(""arg.descr.keeporiginal"")).build();
        Option dpScaleIsHeight = Option.builder(SCALE_IS_HEIGHT_DP_ARG).desc(bundle.getString(""arg.descr.cmd.dpIsHeight"")).build();
        Option dryRun = Option.builder(""dryRun"").desc(bundle.getString(""arg.descr.dryrun"")).build();
        Option enableMozJpeg = Option.builder(""postProcessorMozJpeg"").desc(bundle.getString(""arg.descr.mozjpeg"")).build();
        Option cleanBeforeConvert = Option.builder(""clean"").desc(bundle.getString(""arg.descr.clean"")).build();

        Option help = Option.builder(""h"").longOpt(""help"").desc(bundle.getString(""arg.descr.cmd.help"")).build();
        Option version = Option.builder(""v"").longOpt(""version"").desc(bundle.getString(""arg.descr.cmd.version"")).build();
        Option gui = Option.builder(""gui"").desc(bundle.getString(""arg.descr.cmd.gui"")).build();

        OptionGroup mainArgs = new OptionGroup();
        mainArgs.addOption(srcOpt).addOption(help).addOption(version).addOption(gui);
        mainArgs.setRequired(true);

        options.addOption(srcScaleOpt).addOption(dstOpt);
        options.addOption(platform).addOption(compression).addOption(compressionQuality).addOption(threadCount).addOption(roundingHandler)
                .addOption(upScalingAlgo).addOption(downScalingAlgo);
        options.addOption(skipExistingFiles).addOption(skipUpscaling).addOption(androidIncludeLdpiTvdpi).addOption(verboseLog)
                .addOption(antiAliasing).addOption(dryRun).addOption(haltOnError).addOption(mipmapInsteadOfDrawable)
                .addOption(enablePngCrush).addOption(postWebpConvert).addOption(dpScaleIsHeight).addOption(enableMozJpeg)
                .addOption(keepUnPostProcessed).addOption(iosCreateImagesetFolders).addOption(cleanBeforeConvert);

        options.addOptionGroup(mainArgs);

        return options;
    }
"
at.favre.tools.dconvert.util.DensityBucketUtil.getDensityBuckets,"    public static <T extends DensityDescriptor> Map<T, Dimension> getDensityBuckets(java.util.List<T> densities, Dimension srcDimension, Arguments args, float scale, boolean isNinePatch) throws IOException {

        if (isNinePatch) {
            srcDimension.setSize(srcDimension.getWidth() - 2, srcDimension.getHeight() - 2);
        }

        switch (args.scaleMode) {
            case DP_WIDTH:
                return getDensityBucketsWithDpScale(densities, srcDimension, args, scale);
            case DP_HEIGHT:
                return getDensityBucketsHeightDpScale(densities, srcDimension, args, scale);
            default:
            case FACTOR:
                return getDensityBucketsWithFactorScale(densities, srcDimension, args, scale);
        }
    }"
at.favre.tools.dconvert.util.DensityBucketUtil.getDensityBucketsWithDpScale,"    private static <T extends DensityDescriptor> Map<T, Dimension> getDensityBucketsWithDpScale(java.util.List<T> densities, Dimension srcDimension, Arguments args, float scale) throws IOException {
        float scaleFactor = scale / (float) srcDimension.width;

        int baseWidth = (int) args.round(scale);
        int baseHeight = (int) args.round(scaleFactor * (float) srcDimension.height);

        Map<T, Dimension> bucketMap = new TreeMap<>();
        densities.stream().filter(density -> (int) args.round(baseWidth * density.scale) <= srcDimension.width || !args.skipUpscaling).forEach(density -> {
            bucketMap.put(density, new Dimension((int) args.round(baseWidth * density.scale),
                    (int) args.round(baseHeight * density.scale)));
        });
        return bucketMap;
    }"
at.favre.tools.dconvert.util.DensityBucketUtil.getDensityBucketsHeightDpScale,"    private static <T extends DensityDescriptor> Map<T, Dimension> getDensityBucketsHeightDpScale(java.util.List<T> densities, Dimension srcDimension, Arguments args, float scale) throws IOException {
        float scaleFactor = scale / (float) srcDimension.height;

        int baseWidth = (int) args.round(scaleFactor * (float) srcDimension.width);
        int baseHeight = (int) args.round(scale);

        Map<T, Dimension> bucketMap = new TreeMap<>();
        densities.stream().filter(density -> (int) args.round(baseHeight * density.scale) <= srcDimension.height || !args.skipUpscaling).forEach(density -> {
            bucketMap.put(density, new Dimension((int) args.round(baseWidth * density.scale),
                    (int) args.round(baseHeight * density.scale)));
        });
        return bucketMap;
    }"
at.favre.tools.dconvert.util.DensityBucketUtil.getDensityBucketsWithFactorScale,"    private static <T extends DensityDescriptor> Map<T, Dimension> getDensityBucketsWithFactorScale(java.util.List<T> densities, Dimension srcDimension, Arguments args, float scale) {
        double baseWidth = (double) srcDimension.width / scale;
        double baseHeight = (double) srcDimension.height / scale;

        Map<T, Dimension> bucketMap = new TreeMap<>();
        densities.stream().filter(density -> scale >= density.scale || !args.skipUpscaling).forEach(density -> {
            bucketMap.put(density, new Dimension((int) args.round(baseWidth * density.scale),
                    (int) args.round(baseHeight * density.scale)));
        });
        return bucketMap;
    }"
at.favre.tools.dconvert.util.DensityBucketUtil.getHqDimension,"    private static Dimension getHqDimension(File image, Arguments args) throws IOException {
        Dimension srcDimension = ImageUtil.getImageDimension(image);
        Dimension hqDimension;
        if (args.scaleMode == EScaleMode.FACTOR && args.scale < SVG_UPSCALE_FACTOR) {
            hqDimension = new Dimension((int) args.round(SVG_UPSCALE_FACTOR / args.scale * (float) srcDimension.width), (int) args.round(SVG_UPSCALE_FACTOR / args.scale * (float) srcDimension.width));
        } else if (args.scaleMode == EScaleMode.DP_WIDTH && (args.scale * SVG_UPSCALE_FACTOR < srcDimension.width)) {
            float scaleFactor = args.scale / (float) srcDimension.width * SVG_UPSCALE_FACTOR;
            hqDimension = new Dimension((int) args.round(scaleFactor * (float) srcDimension.width), (int) args.round(scaleFactor * (float) srcDimension.height));
        } else if (args.scaleMode == EScaleMode.DP_HEIGHT && (args.scale * SVG_UPSCALE_FACTOR < srcDimension.height)) {
            float scaleFactor = args.scale / (float) srcDimension.height * SVG_UPSCALE_FACTOR;
            hqDimension = new Dimension((int) args.round(scaleFactor * (float) srcDimension.width), (int) args.round(scaleFactor * (float) srcDimension.height));
        } else {
            hqDimension = srcDimension;
        }
        return hqDimension;
    }
"
at.favre.tools.dconvert.util.LoadedImage.getSourceFile,"    public File getSourceFile() {
        return sourceFile;
    }"
at.favre.tools.dconvert.util.LoadedImage.getImage,"    public BufferedImage getImage() {
        return image;
    }"
at.favre.tools.dconvert.util.LoadedImage.getMetadata,"    public IIOMetadata getMetadata() {
        return metadata;
    }"
at.favre.tools.dconvert.util.LoadedImage.getExif,"    public CompoundDirectory getExif() {
        return directory;
    }
"
at.favre.tools.dconvert.util.PostProcessorUtil.runImageOptimizer,"    public static Result runImageOptimizer(File rawFile, ImageType processedType, String[] args, boolean keepOriginal) throws IOException {
        return runImageOptimizer(rawFile, processedType, args, keepOriginal, MiscUtil.getFileExtension(rawFile));
    }"
at.favre.tools.dconvert.util.PostProcessorUtil.runImageOptimizer,"    public static Result runImageOptimizer(File rawFile, ImageType processedType, String[] args, boolean keepOriginal, String outExtension) throws IOException {
        if (Arguments.getImageType(rawFile) == processedType && rawFile.exists() && rawFile.isFile()) {
            String id = UUID.randomUUID().toString().substring(0, 8);

            File outFile = getFileWithPostFix(rawFile, ""_optimized_"" + id, outExtension);
            File copy = getFileWithPostFix(rawFile, ""_copy_"" + id, outExtension);

            Files.copy(rawFile.toPath(), copy.toPath(), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);

            for (int i = 0; i < args.length; i++) {
                if (args[i].equals(""%%outFilePath%%"")) {
                    args[i] = ""\"""" + outFile.getAbsolutePath() + ""\"""";
                }

                if (args[i].equals(""%%sourceFilePath%%"")) {
                    args[i] = ""\"""" + copy.getAbsolutePath() + ""\"""";
                }
            }

            Result result = runCmd(args);

            copy.delete();

            boolean r1 = true, r2 = true, r3 = true;
            if (outFile.exists() && outFile.isFile()) {
                if (keepOriginal) {
                    File origFile = getFileWithPostFix(rawFile, IPostProcessor.ORIG_POSTFIX, MiscUtil.getFileExtension(rawFile));

                    if (origFile.exists()) {
                        origFile.delete();
                    }

                    r1 = rawFile.renameTo(origFile);

                    File outFileNew = getFileWithPostFix(rawFile, """", outExtension);

                    if (outFileNew.exists()) {
                        outFileNew.delete();
                    }

                    r2 = outFile.renameTo(outFileNew);
                } else {
                    if (rawFile.delete()) {
                        File outFileNew = getFileWithPostFix(rawFile, """", outExtension);

                        if (outFileNew.exists()) {
                            outFileNew.delete();
                        }

                        r3 = outFile.renameTo(outFileNew);
                    }
                }
            }
            String log = result.log;
            if (!r1 || !r2 || !r3) {
                log += ""Could not rename all files correctly\n"";
            }

            return new Result(log, result.exception, Collections.singletonList(rawFile));
        }
        return null;
    }"
at.favre.tools.dconvert.util.PostProcessorUtil.getFileWithPostFix,"    private static File getFileWithPostFix(File src, String postfix, String extension) {
        return new File(src.getParentFile(), MiscUtil.getFileNameWithoutExtension(src) + postfix + ""."" + extension);
    }"
at.favre.tools.dconvert.util.PostProcessorUtil.runCmd,"    private static Result runCmd(String[] cmdArray) {
        StringBuilder logStringBuilder = new StringBuilder();
        Exception exception = null;
        try {
            logStringBuilder.append(""execute: "").append(Arrays.toString(cmdArray)).append(""\n"");
            ProcessBuilder pb = new ProcessBuilder(cmdArray);
            pb.redirectErrorStream(true);
            Process process = pb.start();
            try (BufferedReader inStreamReader = new BufferedReader(
                    new InputStreamReader(process.getInputStream()))) {
                String s;
                while ((s = inStreamReader.readLine()) != null) {
                    if (!s.isEmpty()) logStringBuilder.append(""\t"").append(s).append(""\n"");
                }
            }
            process.waitFor();
        } catch (Exception e) {
            exception = e;
            logStringBuilder.append(""error: could not run command - "").append(Arrays.toString(cmdArray)).append("" - "").append(e.getMessage()).append("" - is it set in PATH?\n"");
        }
        return new Result(logStringBuilder.toString(), exception, Collections.emptyList());
    }"
at.favre.tools.dconvert.util.PostProcessorUtil.canRunCmd,"    public static boolean canRunCmd(String[] cmdArray) {
        try {
            ProcessBuilder pb = new ProcessBuilder(cmdArray);
            pb.redirectErrorStream(true);
            Process process = pb.start();
            try (BufferedReader inStreamReader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                while ((inStreamReader.readLine()) != null) {
                }
            }
            process.waitFor();
        } catch (Exception e) {
            return false;
        }
        return true;
    }
"
at.favre.tools.dconvert.util.MiscUtil.getStackTrace,"    public static String getStackTrace(Throwable t) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        t.printStackTrace(pw);
        return sw.toString();
    }"
at.favre.tools.dconvert.util.MiscUtil.duration,"    public static String duration(long ms) {
        if (ms >= 1000) {
            return String.format(Locale.US, ""%.2f sec"", (double) ms / 1000);
        }
        return ms + "" ms"";
    }"
at.favre.tools.dconvert.util.MiscUtil.concat,"    public static <T> T[] concat(T[] first, T[] second) {
        T[] result = Arrays.copyOf(first, first.length + second.length);
        System.arraycopy(second, 0, result, first.length, second.length);
        return result;
    }"
at.favre.tools.dconvert.util.MiscUtil.createAndCheckFolder,"    public static File createAndCheckFolder(String path, boolean dryRun) {
        File f = new File(path);

        if (dryRun) {
            return f;
        }

        if (!f.exists()) {
            f.mkdirs();
        }

        if (!f.exists() || !f.isDirectory()) {
            throw new IllegalStateException(""could not create folder: "" + path);
        }
        return f;
    }"
at.favre.tools.dconvert.util.MiscUtil.getFileExtensionLowerCase,"    public static String getFileExtensionLowerCase(File file) {
        return getFileExtension(file).toLowerCase();
    }"
at.favre.tools.dconvert.util.MiscUtil.getFileExtension,"    public static String getFileExtension(File file) {
        if (file == null) {
            return """";
        }
        return file.getName().substring(file.getName().lastIndexOf(""."") + 1);
    }"
at.favre.tools.dconvert.util.MiscUtil.getFileNameWithoutExtension,"    public static String getFileNameWithoutExtension(File file) {
        String fileName = file.getName();
        int pos = fileName.lastIndexOf(""."");
        if (pos > 0) {
            fileName = fileName.substring(0, pos);
        }
        return fileName;
    }"
at.favre.tools.dconvert.util.MiscUtil.getCmdProgressBar,"    public static String getCmdProgressBar(float progress) {
        int loadingBarCount = 40;
        int bars = Math.round((float) loadingBarCount * progress);
        StringBuilder sb = new StringBuilder(""\r["");

        for (int i = 0; i < loadingBarCount; i++) {
            if (i < bars) {
                sb.append(""-"");
            } else {
                sb.append("" "");
            }
        }
        sb.append(""] "");

        if (progress < 1f) {
            sb.append(String.format(""%6s"", String.format(Locale.US, ""%.2f"", progress * 100f))).append(""%"");
        } else {
            sb.append(""100.00%\n"");
        }

        return sb.toString();
    }"
at.favre.tools.dconvert.util.MiscUtil.toSet,"    public static <T> Set<T> toSet(T elem) {
        Set<T> set = new HashSet<>(1);
        set.add(elem);
        return set;
    }"
at.favre.tools.dconvert.util.MiscUtil.deleteFolder,"    public static void deleteFolder(File folder) {
        if (folder != null && folder.exists()) {
            File[] files = folder.listFiles();
            if (files != null) { //some JVMs return null for empty dirs
                for (File f : files) {
                    if (f.isDirectory()) {
                        deleteFolder(f);
                    } else {
                        f.delete();
                    }
                }
            }
            folder.delete();
        }
    }
"
at.favre.tools.dconvert.util.ImageUtil.loadImage,"    public static LoadedImage loadImage(File input) throws Exception {
        if (input == null) {
            throw new IllegalArgumentException(""input == null!"");
        }
        if (!input.canRead()) {
            throw new IIOException(""Can't read input file!"");
        }

        ImageInputStream stream = ImageIO.createImageInputStream(input);
        if (stream == null) {
            throw new IIOException(""Can't create an ImageInputStream!"");
        }
        LoadedImage image = read(stream, Arguments.getImageType(input));
        if (image.getImage() == null) {
            stream.close();
        }
        return new LoadedImage(input, image.getImage(), image.getMetadata(), readExif(input));
    }"
at.favre.tools.dconvert.util.ImageUtil.readExif,"    private static CompoundDirectory readExif(File input) throws IOException {
        if (Arguments.getImageType(input) == ImageType.JPG) {
            try (ImageInputStream stream = ImageIO.createImageInputStream(input)) {
                List<JPEGSegment> exifSegment = JPEGSegmentUtil.readSegments(stream, JPEG.APP1, ""Exif"");
                if (!exifSegment.isEmpty()) {
                    InputStream exifData = exifSegment.get(0).data();
                    exifData.read(); // Skip 0-pad for Exif in JFIF
                    try (ImageInputStream exifStream = ImageIO.createImageInputStream(exifData)) {
                        return (CompoundDirectory) new EXIFReader().read(exifStream);
                    }
                }
            } catch (Exception e) {
                System.err.println(""could not read exif"");
                e.printStackTrace();
                return null;
            }
        }
        return null;
    }"
at.favre.tools.dconvert.util.ImageUtil.read,"    private static LoadedImage read(ImageInputStream stream, ImageType imageType) throws IOException {
        if (stream == null) {
            throw new IllegalArgumentException(""stream == null!"");
        }

        Iterator iter = ImageIO.getImageReaders(stream);
        if (!iter.hasNext()) {
            return null;
        }

        ImageReader reader = (ImageReader) iter.next();
        ImageReadParam param = reader.getDefaultReadParam();
        reader.setInput(stream, true, true);
        BufferedImage bi;
        IIOMetadata metadata;
        try {
            metadata = reader.getImageMetadata(0);
            bi = reader.read(0, param);
        } finally {
            reader.dispose();
            stream.close();
        }

        return new LoadedImage(null, bi, metadata, null);
    }"
at.favre.tools.dconvert.util.ImageUtil.readSvg,"    public static BufferedImage readSvg(File file, Dimension sourceDimension) throws Exception {
        try (ImageInputStream input = ImageIO.createImageInputStream(file)) {
            Iterator<ImageReader> readers = ImageIO.getImageReaders(input);
            if (!readers.hasNext()) {
                throw new IllegalArgumentException(""No reader for: "" + file);
            }

            ImageReader reader = readers.next();
            try {
                reader.setInput(input);
                ImageReadParam param = reader.getDefaultReadParam();
                param.setSourceRenderSize(sourceDimension);
                return reader.read(0, param);
            } finally {
                reader.dispose();
            }
        }
    }"
at.favre.tools.dconvert.util.ImageUtil.getImageDimension,"/**
* Gets image dimensions for given file
*
* @param imgFile image file
* @return dimensions of image
* @throws IOException if the file is not a known image
*/
    public static Dimension getImageDimension(File imgFile) throws IOException {
        int pos = imgFile.getName().lastIndexOf(""."");
        if (pos == -1)
            throw new IOException(""No extension for file: "" + imgFile.getAbsolutePath());
        String suffix = imgFile.getName().substring(pos + 1);
        Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);
        if (iter.hasNext()) {
            ImageReader reader = iter.next();
            try {
                ImageInputStream stream = new FileImageInputStream(imgFile);
                reader.setInput(stream);
                int width = reader.getWidth(reader.getMinIndex());
                int height = reader.getHeight(reader.getMinIndex());
                return new Dimension(width, height);
            } finally {
                reader.dispose();
            }
        }

        throw new IOException(""Not a known image file: "" + imgFile.getAbsolutePath());
    }
"
at.favre.tools.dconvert.util.NinePatchScaler.scale,"    public BufferedImage scale(BufferedImage inputImage, Dimension dimensions, ScaleAlgorithm algorithm) throws NinePatchException {
        this.algorithm = algorithm;
        BufferedImage trimmedImage = this.trim9PBorder(inputImage);

        trimmedImage = algorithm.scale(trimmedImage, dimensions.width, dimensions.height);

        BufferedImage borderImage;

        int w = trimmedImage.getWidth();
        int h = trimmedImage.getHeight();

        borderImage = this.generateBordersImage(inputImage, w, h);

        int[] rgbArray = new int[w * h];
        trimmedImage.getRGB(0, 0, w, h, rgbArray, 0, w);
        borderImage.setRGB(1, 1, w, h, rgbArray, 0, w);
        rgbArray = null;

        return borderImage;
    }"
at.favre.tools.dconvert.util.NinePatchScaler.trim9PBorder,"    private BufferedImage trim9PBorder(BufferedImage inputImage) {
        BufferedImage trimedImage = new BufferedImage(inputImage.getWidth() - 2, inputImage.getHeight() - 2, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = trimedImage.createGraphics();
        g.drawImage(inputImage, 0, 0, trimedImage.getWidth(), trimedImage.getHeight(), 1, 1, inputImage.getWidth() - 1, inputImage.getHeight() - 1, null);
        g.dispose();
        return trimedImage;
    }"
at.favre.tools.dconvert.util.NinePatchScaler.enforceBorderColors,"    private void enforceBorderColors(BufferedImage inputImage) {
        Graphics2D g = inputImage.createGraphics();
        g.setBackground(new Color(0, 0, 0, 0));
        g.clearRect(1, 1, inputImage.getWidth() - 2, inputImage.getHeight() - 2);
        g.dispose();
        int w = inputImage.getWidth();
        int h = inputImage.getHeight();
        int[] rgb = new int[w * h];

        inputImage.getRGB(0, 0, w, h, rgb, 0, w);

        for (int i = 0; i < rgb.length; i++) {
            if ((0xff000000 & rgb[i]) != 0) {
                rgb[i] = 0xff000000;
            }
        }
        inputImage.setRGB(0, 0, w, h, rgb, 0, w);
        inputImage.setRGB(0, 0, 0x0);
        inputImage.setRGB(0, h - 1, 0x0);
        inputImage.setRGB(w - 1, h - 1, 0x0);
        inputImage.setRGB(w - 1, 0, 0x0);
    }"
at.favre.tools.dconvert.util.NinePatchScaler.generateBordersImage,"    private BufferedImage generateBordersImage(BufferedImage source, int trimedWidth, int trimedHeight) throws NinePatchException {
        BufferedImage finalBorder = new BufferedImage(trimedWidth + 2, trimedHeight + 2, BufferedImage.TYPE_INT_ARGB);
        int cutW = source.getWidth() - 2;
        int cutH = source.getHeight() - 2;
        // left border
        BufferedImage leftBorder = new BufferedImage(1, cutH, BufferedImage.TYPE_INT_ARGB);
        leftBorder.setRGB(0, 0, 1, cutH, source.getRGB(0, 1, 1, cutH, null, 0, 1), 0, 1);
        this.verifyBorderImage(leftBorder);
        leftBorder = this.resizeBorder(leftBorder, 1, trimedHeight);
        finalBorder.setRGB(0, 1, 1, trimedHeight, leftBorder.getRGB(0, 0, 1, trimedHeight, null, 0, 1), 0, 1);
        // right border
        BufferedImage rightBorder = new BufferedImage(1, cutH, BufferedImage.TYPE_INT_ARGB);
        rightBorder.setRGB(0, 0, 1, cutH, source.getRGB(cutW + 1, 1, 1, cutH, null, 0, 1), 0, 1);
        this.verifyBorderImage(rightBorder);
        rightBorder = this.resizeBorder(rightBorder, 1, trimedHeight);
        finalBorder.setRGB(trimedWidth + 1, 1, 1, trimedHeight, rightBorder.getRGB(0, 0, 1, trimedHeight, null, 0, 1), 0, 1);
        // top border
        BufferedImage topBorder = new BufferedImage(cutW, 1, BufferedImage.TYPE_INT_ARGB);
        topBorder.setRGB(0, 0, cutW, 1, source.getRGB(1, 0, cutW, 1, null, 0, cutW), 0, cutW);
        this.verifyBorderImage(topBorder);
        topBorder = this.resizeBorder(topBorder, trimedWidth, 1);
        finalBorder.setRGB(1, 0, trimedWidth, 1, topBorder.getRGB(0, 0, trimedWidth, 1, null, 0, trimedWidth), 0, trimedWidth);
        // bottom border
        BufferedImage bottomBorder = new BufferedImage(cutW, 1, BufferedImage.TYPE_INT_ARGB);
        bottomBorder.setRGB(0, 0, cutW, 1, source.getRGB(1, cutH + 1, cutW, 1, null, 0, cutW), 0, cutW);
        this.verifyBorderImage(bottomBorder);
        bottomBorder = this.resizeBorder(bottomBorder, trimedWidth, 1);
        finalBorder.setRGB(1, trimedHeight + 1, trimedWidth, 1, bottomBorder.getRGB(0, 0, trimedWidth, 1, null, 0, trimedWidth), 0, trimedWidth);

        return finalBorder;
    }"
at.favre.tools.dconvert.util.NinePatchScaler.resizeBorder,"    private BufferedImage resizeBorder(final BufferedImage border, int targetWidth, int targetHeight) {
        if (targetWidth > border.getWidth()
                || targetHeight > border.getHeight()) {
            BufferedImage endImage = borderScalerAlgorithm.scale(border, targetWidth, targetHeight);
            this.enforceBorderColors(endImage);
            return endImage;
        }

        int w = border.getWidth();
        int h = border.getHeight();
        int[] data = border.getRGB(0, 0, w, h, null, 0, w);
        int[] newData = new int[targetWidth * targetHeight];

        float widthRatio = (float) Math.max(targetWidth - 1, 1)
                / (float) Math.max(w - 1, 1);
        float heightRatio = (float) Math.max(targetHeight - 1, 1)
                / (float) Math.max(h - 1, 1);

        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                if ((0xff000000 & data[y * w + x]) != 0) {
                    int newX = Math.min(Math.round(x * widthRatio), targetWidth - 1);
                    int newY = Math.min(Math.round(y * heightRatio), targetHeight - 1);

                    newData[newY * targetWidth + newX] = data[y * w + x];
                }
            }
        }

        BufferedImage img = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_ARGB);
        img.setRGB(0, 0, targetWidth, targetHeight, newData, 0, targetWidth);

        return img;
    }"
at.favre.tools.dconvert.util.NinePatchScaler.verifyBorderImage,"    private void verifyBorderImage(BufferedImage border)
            throws NinePatchException {
        int[] rgb = border.getRGB(0, 0, border.getWidth(), border.getHeight(),
                null, 0, border.getWidth());
        for (int i = 0; i < rgb.length; i++) {
            if ((0xff000000 & rgb[i]) != 0) {
                if (rgb[i] != 0xff000000 && rgb[i] != 0xffff0000) {
                    throw new NinePatchException();
                }
            }
        }
    }
"
at.favre.tools.dconvert.arg.EScalingAlgorithm.getImplementation,"    public ScaleAlgorithm getImplementation() {
        return algorithm;
    }"
at.favre.tools.dconvert.arg.EScalingAlgorithm.getName,"    public String getName() {
        return cliName;
    }"
at.favre.tools.dconvert.arg.EScalingAlgorithm.getSupportedForType,"    public List<Type> getSupportedForType() {
        return supportedForType;
    }"
at.favre.tools.dconvert.arg.EScalingAlgorithm.isEnabled,"    public boolean isEnabled() {
        return enabled;
    }"
at.favre.tools.dconvert.arg.EScalingAlgorithm.getByName,"    public static EScalingAlgorithm getByName(String name) {
        for (EScalingAlgorithm eScalingAlgorithm : getAllEnabled()) {
            if (eScalingAlgorithm.getName().equals(name)) {
                return eScalingAlgorithm;
            }
        }
        return null;
    }"
at.favre.tools.dconvert.arg.EScalingAlgorithm.getForType,"    public static Set<EScalingAlgorithm> getForType(Type type) {
        return getAllEnabled().stream().filter(eScalingAlgorithm -> eScalingAlgorithm.getSupportedForType().contains(type)).collect(Collectors.toSet());
    }"
at.favre.tools.dconvert.arg.EScalingAlgorithm.getCliArgString,"    public static String getCliArgString(Type type) {
        StringBuilder sb = new StringBuilder();
        getAllEnabled().stream().filter(eScalingAlgorithm -> eScalingAlgorithm.getSupportedForType().contains(type)).forEach(eScalingAlgorithm -> {
            sb.append(eScalingAlgorithm.getName()).append(""|"");
        });
        String argList = sb.toString();
        return argList.substring(0, argList.length() - 1);
    }"
at.favre.tools.dconvert.arg.EScalingAlgorithm.getAllEnabled,"    public static Set<EScalingAlgorithm> getAllEnabled() {
        Set<EScalingAlgorithm> set = new HashSet<>();
        for (EScalingAlgorithm eScalingAlgorithm : EScalingAlgorithm.values()) {
            if (eScalingAlgorithm.isEnabled()) {
                set.add(eScalingAlgorithm);
            }
        }
        return set;
    }
"
at.favre.tools.dconvert.arg.EPlatform.getConverter,"    public IPlatformConverter getConverter() {
        return converter;
    }"
at.favre.tools.dconvert.arg.EPlatform.getAll,"    public static Set<EPlatform> getAll() {
        if (ALL == null) {
            Set<EPlatform> temp = new HashSet<>(EPlatform.values().length);
            for (EPlatform ePlatform : EPlatform.values()) {
                temp.add(ePlatform);
            }
            ALL = Collections.unmodifiableSet(temp);
        }
        return ALL;
    }"
at.favre.tools.dconvert.arg.EPlatform.getAllConverters,"    public static List<IPlatformConverter> getAllConverters() {
        return getAll().stream().map(EPlatform::getConverter).collect(Collectors.toList());
    }
"
at.favre.tools.dconvert.arg.RoundingHandler.round,"    public long round(double value) {
        switch (strategy) {
            case CEIL:
                return Math.max(1, (long) Math.ceil(value));
            case FLOOR:
                return Math.max(1, (long) Math.floor(value));
            default:
            case ROUND_HALF_UP:
                return Math.max(1, Math.round(value));
        }
    }
"
at.favre.tools.dconvert.arg.EOutputCompressionMode.getFromString,"    public static EOutputCompressionMode getFromString(String i18nString, ResourceBundle bundle) {
        for (EOutputCompressionMode eOutputCompressionMode : EOutputCompressionMode.values()) {
            if (bundle.getString(eOutputCompressionMode.rbKey).equals(i18nString)) {
                return eOutputCompressionMode;
            }
        }
        return null;
    }
"
at.favre.tools.dconvert.arg.Arguments.round,"    public double round(double raw) {
        return new RoundingHandler(roundingHandler).round(raw);
    }"
at.favre.tools.dconvert.arg.Arguments.toString,"    public String toString() {
        return ""Arguments{"" +
                ""src="" + src +
                "", dst="" + dst +
                "", scale="" + scale +
                "", platform="" + platform +
                "", outputCompressionMode="" + outputCompressionMode +
                "", scaleMode="" + scaleMode +
                "", downScalingAlgorithm="" + downScalingAlgorithm +
                "", upScalingAlgorithm="" + upScalingAlgorithm +
                "", compressionQuality="" + compressionQuality +
                "", threadCount="" + threadCount +
                "", skipExistingFiles="" + skipExistingFiles +
                "", skipUpscaling="" + skipUpscaling +
                "", verboseLog="" + verboseLog +
                "", includeAndroidLdpiTvdpi="" + includeAndroidLdpiTvdpi +
                "", haltOnError="" + haltOnError +
                "", createMipMapInsteadOfDrawableDir="" + createMipMapInsteadOfDrawableDir +
                "", enablePngCrush="" + enablePngCrush +
                "", enableMozJpeg="" + enableMozJpeg +
                "", postConvertWebp="" + postConvertWebp +
                "", enableAntiAliasing="" + enableAntiAliasing +
                "", dryRun="" + dryRun +
                "", keepUnoptimizedFilesPostProcessor="" + keepUnoptimizedFilesPostProcessor +
                "", roundingHandler="" + roundingHandler +
                "", iosCreateImagesetFolders="" + iosCreateImagesetFolders +
                "", guiAdvancedOptions="" + guiAdvancedOptions +
                "", clearDirBeforeConvert="" + clearDirBeforeConvert +
                "", filesToProcess="" + filesToProcess +
                '}';
    }"
at.favre.tools.dconvert.arg.Arguments.equals,"    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Arguments arguments = (Arguments) o;

        if (Float.compare(arguments.scale, scale) != 0) return false;
        if (Float.compare(arguments.compressionQuality, compressionQuality) != 0) return false;
        if (threadCount != arguments.threadCount) return false;
        if (skipExistingFiles != arguments.skipExistingFiles) return false;
        if (skipUpscaling != arguments.skipUpscaling) return false;
        if (verboseLog != arguments.verboseLog) return false;
        if (includeAndroidLdpiTvdpi != arguments.includeAndroidLdpiTvdpi) return false;
        if (haltOnError != arguments.haltOnError) return false;
        if (createMipMapInsteadOfDrawableDir != arguments.createMipMapInsteadOfDrawableDir) return false;
        if (enablePngCrush != arguments.enablePngCrush) return false;
        if (enableMozJpeg != arguments.enableMozJpeg) return false;
        if (postConvertWebp != arguments.postConvertWebp) return false;
        if (enableAntiAliasing != arguments.enableAntiAliasing) return false;
        if (dryRun != arguments.dryRun) return false;
        if (keepUnoptimizedFilesPostProcessor != arguments.keepUnoptimizedFilesPostProcessor) return false;
        if (iosCreateImagesetFolders != arguments.iosCreateImagesetFolders) return false;
        if (guiAdvancedOptions != arguments.guiAdvancedOptions) return false;
        if (clearDirBeforeConvert != arguments.clearDirBeforeConvert) return false;
        if (src != null ? !src.equals(arguments.src) : arguments.src != null) return false;
        if (dst != null ? !dst.equals(arguments.dst) : arguments.dst != null) return false;
        if (platform != null ? !platform.equals(arguments.platform) : arguments.platform != null) return false;
        if (outputCompressionMode != arguments.outputCompressionMode) return false;
        if (scaleMode != arguments.scaleMode) return false;
        if (downScalingAlgorithm != arguments.downScalingAlgorithm) return false;
        if (upScalingAlgorithm != arguments.upScalingAlgorithm) return false;
        if (roundingHandler != arguments.roundingHandler) return false;
        return filesToProcess != null ? filesToProcess.equals(arguments.filesToProcess) : arguments.filesToProcess == null;

    }"
at.favre.tools.dconvert.arg.Arguments.hashCode,"    public int hashCode() {
        int result = src != null ? src.hashCode() : 0;
        result = 31 * result + (dst != null ? dst.hashCode() : 0);
        result = 31 * result + (scale != +0.0f ? Float.floatToIntBits(scale) : 0);
        result = 31 * result + (platform != null ? platform.hashCode() : 0);
        result = 31 * result + (outputCompressionMode != null ? outputCompressionMode.hashCode() : 0);
        result = 31 * result + (scaleMode != null ? scaleMode.hashCode() : 0);
        result = 31 * result + (downScalingAlgorithm != null ? downScalingAlgorithm.hashCode() : 0);
        result = 31 * result + (upScalingAlgorithm != null ? upScalingAlgorithm.hashCode() : 0);
        result = 31 * result + (compressionQuality != +0.0f ? Float.floatToIntBits(compressionQuality) : 0);
        result = 31 * result + threadCount;
        result = 31 * result + (skipExistingFiles ? 1 : 0);
        result = 31 * result + (skipUpscaling ? 1 : 0);
        result = 31 * result + (verboseLog ? 1 : 0);
        result = 31 * result + (includeAndroidLdpiTvdpi ? 1 : 0);
        result = 31 * result + (haltOnError ? 1 : 0);
        result = 31 * result + (createMipMapInsteadOfDrawableDir ? 1 : 0);
        result = 31 * result + (enablePngCrush ? 1 : 0);
        result = 31 * result + (enableMozJpeg ? 1 : 0);
        result = 31 * result + (postConvertWebp ? 1 : 0);
        result = 31 * result + (enableAntiAliasing ? 1 : 0);
        result = 31 * result + (dryRun ? 1 : 0);
        result = 31 * result + (keepUnoptimizedFilesPostProcessor ? 1 : 0);
        result = 31 * result + (roundingHandler != null ? roundingHandler.hashCode() : 0);
        result = 31 * result + (iosCreateImagesetFolders ? 1 : 0);
        result = 31 * result + (guiAdvancedOptions ? 1 : 0);
        result = 31 * result + (clearDirBeforeConvert ? 1 : 0);
        result = 31 * result + (filesToProcess != null ? filesToProcess.hashCode() : 0);
        return result;
    }"
at.favre.tools.dconvert.arg.Arguments.getSupportedFileTypes,"    public static Set<String> getSupportedFileTypes() {
        Set<String> set = new HashSet<>();
        for (ImageType imageType : ImageType.values()) {
            if (imageType.supportRead) {
                set.addAll(Arrays.asList(imageType.extensions));
            }
        }

        return set;
    }"
at.favre.tools.dconvert.arg.Arguments.scaleMode,"        public Builder scaleMode(EScaleMode type) {
            this.scaleType = type;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.upScaleAlgorithm,"        public Builder upScaleAlgorithm(EScalingAlgorithm scalingAlgorithm) {
            this.upScalingAlgorithm = scalingAlgorithm;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.downScaleAlgorithm,"        public Builder downScaleAlgorithm(EScalingAlgorithm scalingAlgorithm) {
            this.downScalingAlgorithm = scalingAlgorithm;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.dstFolder,"        public Builder dstFolder(File dst) {
            this.dst = dst;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.platform,"        public Builder platform(Set<EPlatform> platform) {
            this.platform = platform;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.compression,"        public Builder compression(EOutputCompressionMode outputCompressionMode) {
            this.outputCompressionMode = outputCompressionMode;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.compression,"        public Builder compression(EOutputCompressionMode outputCompressionMode, float compressionQuality) {
            this.outputCompressionMode = outputCompressionMode;
            this.compressionQuality = compressionQuality;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.threadCount,"        public Builder threadCount(int threadCount) {
            this.threadCount = threadCount;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.skipExistingFiles,"        public Builder skipExistingFiles(boolean b) {
            this.skipExistingFiles = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.skipUpscaling,"        public Builder skipUpscaling(boolean b) {
            this.skipUpscaling = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.verboseLog,"        public Builder verboseLog(boolean b) {
            this.verboseLog = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.includeAndroidLdpiTvdpi,"        public Builder includeAndroidLdpiTvdpi(boolean b) {
            this.includeAndroidLdpiTvdpi = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.haltOnError,"        public Builder haltOnError(boolean b) {
            this.haltOnError = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.createMipMapInsteadOfDrawableDir,"        public Builder createMipMapInsteadOfDrawableDir(boolean b) {
            this.createMipMapInsteadOfDrawableDir = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.antiAliasing,"        public Builder antiAliasing(boolean b) {
            this.enableAntiAliasing = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.enablePngCrush,"        public Builder enablePngCrush(boolean b) {
            this.enablePngCrush = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.enableMozJpeg,"        public Builder enableMozJpeg(boolean b) {
            this.enableMozJpeg = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.postConvertWebp,"        public Builder postConvertWebp(boolean b) {
            this.postConvertWebp = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.dryRun,"        public Builder dryRun(boolean b) {
            this.dryRun = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.scaleRoundingStragy,"        public Builder scaleRoundingStragy(RoundingHandler.Strategy strategy) {
            this.roundingStrategy = strategy;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.skipParamValidation,"        public Builder skipParamValidation(boolean b) {
            this.internalSkipParamValidation = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.keepUnoptimizedFilesPostProcessor,"        public Builder keepUnoptimizedFilesPostProcessor(boolean b) {
            this.keepUnoptimizedFilesPostProcessor = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.iosCreateImagesetFolders,"        public Builder iosCreateImagesetFolders(boolean b) {
            this.iosCreateImagesetFolders = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.guiAdvancedOptions,"        public Builder guiAdvancedOptions(boolean b) {
            this.guiAdvancedOptions = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.clearDirBeforeConvert,"        public Builder clearDirBeforeConvert(boolean b) {
            this.clearDirBeforeConvert = b;
            return this;
        }"
at.favre.tools.dconvert.arg.Arguments.build,"        public Arguments build() throws InvalidArgumentException {
            if (!internalSkipParamValidation) {
                ResourceBundle bundle = ResourceBundle.getBundle(""bundles.strings"", Locale.getDefault());

                if (platform.isEmpty()) {
                    throw new InvalidArgumentException(bundle.getString(""error.missing.platforms""));
                }

                if (src == null || !src.exists()) {
                    throw new InvalidArgumentException(MessageFormat.format(bundle.getString(""error.missing.src""), src));
                }

                if (dst == null) {
                    if (src.isDirectory()) {
                        dst = src;
                    } else {
                        dst = src.getParentFile();
                    }
                }

                if (compressionQuality < 0 || compressionQuality > 1.0) {
                    throw new InvalidArgumentException(MessageFormat.format(bundle.getString(""error.invalid.compressionQ""), compressionQuality));
                }

                if (threadCount < 1 || threadCount > MAX_THREAD_COUNT) {
                    throw new InvalidArgumentException(MessageFormat.format(bundle.getString(""error.invalid.thread""), threadCount, MAX_THREAD_COUNT));
                }

                switch (scaleType) {
                    case FACTOR:
                        if (srcScale <= 0 || srcScale >= 100) {
                            throw new InvalidArgumentException(MessageFormat.format(bundle.getString(""error.invalid.factorscale""), srcScale));
                        }
                        break;
                    case DP_WIDTH:
                    case DP_HEIGHT:
                        if (srcScale <= 0 || srcScale >= 9999) {
                            throw new InvalidArgumentException(MessageFormat.format(bundle.getString(""error.invalid.dp""), srcScale));
                        }
                        break;
                }

                if (downScalingAlgorithm == null || upScalingAlgorithm == null) {
                    throw new InvalidArgumentException(bundle.getString(""error.missing.scalealgorithm""));
                }
            }
            return new Arguments(src, dst, srcScale, platform, outputCompressionMode, scaleType, downScalingAlgorithm, upScalingAlgorithm, compressionQuality, threadCount,
                    skipExistingFiles, skipUpscaling, verboseLog, includeAndroidLdpiTvdpi, haltOnError, createMipMapInsteadOfDrawableDir,
                    iosCreateImagesetFolders, enablePngCrush, enableMozJpeg, postConvertWebp, enableAntiAliasing, dryRun, keepUnoptimizedFilesPostProcessor, roundingStrategy, guiAdvancedOptions, clearDirBeforeConvert);
        }
    "
at.favre.tools.dconvert.arg.Arguments.getImageType,"    public static ImageType getImageType(File srcFile) {
        String extension = MiscUtil.getFileExtensionLowerCase(srcFile);
        switch (extension) {
            case ""jpg"":
            case ""jpeg"":
                return ImageType.JPG;
            case ""png"":
                return ImageType.PNG;
            case ""svg"":
                return ImageType.SVG;
            case ""tif"":
            case ""tiff"":
                return ImageType.TIFF;
            case ""psd"":
                return ImageType.PSD;
            case ""gif"":
                return ImageType.GIF;
            case ""bmp"":
                return ImageType.BMP;
            default:
                throw new IllegalArgumentException(""unknown file extension "" + extension + "" in srcFile "" + srcFile);
        }
    }"
at.favre.tools.dconvert.arg.Arguments.getOutCompressionForType,"    public static List<ImageType.ECompression> getOutCompressionForType(EOutputCompressionMode type, ImageType imageType) {
        List<ImageType.ECompression> list = new ArrayList<>(2);
        switch (type) {
            case AS_GIF:
                list.add(ImageType.ECompression.GIF);
                break;
            case AS_PNG:
                list.add(ImageType.ECompression.PNG);
                break;
            case AS_JPG:
                list.add(ImageType.ECompression.JPG);
                break;
            case AS_JPG_AND_PNG:
                list.add(ImageType.ECompression.JPG);
                list.add(ImageType.ECompression.PNG);
                break;
            case AS_BMP:
                list.add(ImageType.ECompression.BMP);
                break;
            case SAME_AS_INPUT_PREF_PNG:
                list.add(imageType.outCompressionCompat);
                break;
            default:
            case SAME_AS_INPUT_STRICT:
                list.add(imageType.outCompressionStrict);
                break;
        }
        return list;
    }
"
at.favre.tools.dconvert.converters.WindowsConverter.usedOutputDensities,"    public List<PostfixDescriptor> usedOutputDensities(Arguments arguments) {
        return getWindowsDescriptors();
    }"
at.favre.tools.dconvert.converters.WindowsConverter.getWindowsDescriptors,"    public static List<PostfixDescriptor> getWindowsDescriptors() {
        List<PostfixDescriptor> list = new ArrayList<>();
        list.add(new PostfixDescriptor(1, ""100%"", "".scale-100""));
        list.add(new PostfixDescriptor(1.4f, ""140%"", "".scale-140""));
        list.add(new PostfixDescriptor(1.8f, ""180%"", "".scale-180""));
        list.add(new PostfixDescriptor(2.4f, ""240%"", "".scale-240""));
        return list;
    }"
at.favre.tools.dconvert.converters.WindowsConverter.getConverterName,"    public String getConverterName() {
        return ""windows-converter"";
    }"
at.favre.tools.dconvert.converters.WindowsConverter.createMainSubFolder,"    public File createMainSubFolder(File destinationFolder, String targetImageFileName, Arguments arguments) {
        if (arguments.platform.size() > 1) {
            destinationFolder = MiscUtil.createAndCheckFolder(new File(destinationFolder, WINDOWS_FOLDER_NAME).getAbsolutePath(), arguments.dryRun);
        }
        return MiscUtil.createAndCheckFolder(new File(destinationFolder, WindowsConverter.ROOT_FOLDER).getAbsolutePath(), arguments.dryRun);
    }"
at.favre.tools.dconvert.converters.WindowsConverter.createFolderForOutputFile,"    public File createFolderForOutputFile(File mainSubFolder, PostfixDescriptor density, Dimension dimension, String targetFileName, Arguments arguments) {
        return mainSubFolder;
    }"
at.favre.tools.dconvert.converters.WindowsConverter.createDestinationFileNameWithoutExtension,"    public String createDestinationFileNameWithoutExtension(PostfixDescriptor density, Dimension dimension, String targetFileName, Arguments arguments) {
        return targetFileName + density.postFix;
    }"
at.favre.tools.dconvert.converters.WindowsConverter.onPreExecute,"    public void onPreExecute(File dstFolder, String targetFileName, List<PostfixDescriptor> densityDescriptions, ImageType imageType, Arguments arguments) throws Exception {

    }"
at.favre.tools.dconvert.converters.WindowsConverter.onPostExecute,"    public void onPostExecute(Arguments arguments) {

    }"
at.favre.tools.dconvert.converters.WindowsConverter.clean,"    public void clean(Arguments arguments) {
        if (arguments.platform.size() == 1) {
            MiscUtil.deleteFolder(new File(arguments.dst, ROOT_FOLDER));
        } else {
            MiscUtil.deleteFolder(new File(new File(arguments.dst, WINDOWS_FOLDER_NAME), ROOT_FOLDER));
        }
    }
"
at.favre.tools.dconvert.converters.WebConverter.usedOutputDensities,"    public List<PostfixDescriptor> usedOutputDensities(Arguments arguments) {
        return getWebDescriptors();
    }"
at.favre.tools.dconvert.converters.WebConverter.getWebDescriptors,"    public static List<PostfixDescriptor> getWebDescriptors() {
        List<PostfixDescriptor> list = new ArrayList<>();
        list.add(new PostfixDescriptor(1, ""1x"", ""-1x""));
        list.add(new PostfixDescriptor(2f, ""2x"", ""-2x""));
        return list;
    }"
at.favre.tools.dconvert.converters.WebConverter.getConverterName,"    public String getConverterName() {
        return ""web-converter"";
    }"
at.favre.tools.dconvert.converters.WebConverter.createMainSubFolder,"    public File createMainSubFolder(File destinationFolder, String targetImageFileName, Arguments arguments) {
        if (arguments.platform.size() > 1) {
            destinationFolder = MiscUtil.createAndCheckFolder(new File(destinationFolder, WEB_FOLDER_NAME).getAbsolutePath(), arguments.dryRun);
        }
        return MiscUtil.createAndCheckFolder(new File(destinationFolder, ROOT_FOLDER).getAbsolutePath(), arguments.dryRun);
    }"
at.favre.tools.dconvert.converters.WebConverter.createFolderForOutputFile,"    public File createFolderForOutputFile(File mainSubFolder, PostfixDescriptor density, Dimension dimension, String targetFileName, Arguments arguments) {
        return mainSubFolder;
    }"
at.favre.tools.dconvert.converters.WebConverter.createDestinationFileNameWithoutExtension,"    public String createDestinationFileNameWithoutExtension(PostfixDescriptor density, Dimension dimension, String targetFileName, Arguments arguments) {
        return targetFileName + density.postFix;
    }"
at.favre.tools.dconvert.converters.WebConverter.onPreExecute,"    public void onPreExecute(File dstFolder, String targetFileName, List<PostfixDescriptor> densityDescriptions, ImageType imageType, Arguments arguments) throws Exception {

    }"
at.favre.tools.dconvert.converters.WebConverter.onPostExecute,"    public void onPostExecute(Arguments arguments) {

    }"
at.favre.tools.dconvert.converters.WebConverter.clean,"    public void clean(Arguments arguments) {
        if (arguments.platform.size() == 1) {
            MiscUtil.deleteFolder(new File(arguments.dst, ROOT_FOLDER));
        } else {
            MiscUtil.deleteFolder(new File(new File(arguments.dst, WEB_FOLDER_NAME), ROOT_FOLDER));
        }
    }
"
at.favre.tools.dconvert.converters.ConverterCallback.success,
at.favre.tools.dconvert.converters.ConverterCallback.failure,"    void failure(Exception e);

"
at.favre.tools.dconvert.converters.APlatformConverter.convert,"    public Result convert(File srcImage, Arguments args) {
        try {
            File destinationFolder = args.dst;
            LoadedImage imageData = ImageUtil.loadImage(srcImage);
            String targetImageFileName = MiscUtil.getFileNameWithoutExtension(srcImage);
            ImageType imageType = Arguments.getImageType(srcImage);
            boolean isNinePatch = AndroidConverter.isNinePatch(srcImage) && getClass() == AndroidConverter.class;

            StringBuilder log = new StringBuilder();
            log.append(getConverterName()).append("": "").append(targetImageFileName).append("" "")
                    .append(imageData.getImage().getWidth()).append(""x"").append(imageData.getImage().getHeight()).append("" ("").append(args.scale).append(args.scaleMode == EScaleMode.FACTOR ? ""x"" : ""dp"").append("")\n"");

            Map<T, Dimension> densityMap = DensityBucketUtil.getDensityBuckets(usedOutputDensities(args), new Dimension(imageData.getImage().getWidth(), imageData.getImage().getHeight()), args, args.scale, isNinePatch);

            File mainSubFolder = createMainSubFolder(destinationFolder, targetImageFileName, args);

            onPreExecute(mainSubFolder, targetImageFileName, usedOutputDensities(args), imageType, args);

            List<File> allResultingFiles = new ArrayList<>();

            for (Map.Entry<T, Dimension> entry : densityMap.entrySet()) {
                File dstFolder = createFolderForOutputFile(mainSubFolder, entry.getKey(), entry.getValue(), targetImageFileName, args);

                if ((dstFolder.isDirectory() && dstFolder.exists()) || args.dryRun) {
                    File imageFile = new File(dstFolder, createDestinationFileNameWithoutExtension(entry.getKey(), entry.getValue(), targetImageFileName, args));

                    log.append(""process "").append(imageFile).append("" with "").append(entry.getValue().width).append(""x"").append(entry.getValue().height).append("" (x"")
                            .append(entry.getKey().scale).append("") "").append(isNinePatch ? ""(9-patch)"" : """").append(""\n"");

                    if (!args.dryRun) {
                        List<File> files = new ImageHandler(args).saveToFile(imageFile, imageData, entry.getValue(), isNinePatch);

                        allResultingFiles.addAll(files);

                        for (File file : files) {
                            log.append(""compressed to disk: "").append(file).append("" ("").append(String.format(Locale.US, ""%.2f"", (float) file.length() / 1024f)).append(""kB)\n"");
                        }

                        if (files.isEmpty()) {
                            log.append(""files skipped\n"");
                        }
                    }
                } else {
                    throw new IllegalStateException(""could not create "" + dstFolder);
                }
            }

            onPostExecute(args);

            imageData.getImage().flush();

            return new Result(log.toString(), allResultingFiles);
        } catch (Exception e) {
            e.printStackTrace();
            return new Result(null, e, Collections.emptyList());
        }
    }"
at.favre.tools.dconvert.converters.APlatformConverter.usedOutputDensities,
at.favre.tools.dconvert.converters.APlatformConverter.getConverterName,
at.favre.tools.dconvert.converters.APlatformConverter.createMainSubFolder,
at.favre.tools.dconvert.converters.APlatformConverter.createFolderForOutputFile,
at.favre.tools.dconvert.converters.APlatformConverter.createDestinationFileNameWithoutExtension,
at.favre.tools.dconvert.converters.APlatformConverter.onPreExecute,
at.favre.tools.dconvert.converters.APlatformConverter.onPostExecute,"    public abstract void onPostExecute(Arguments arguments);
"
at.favre.tools.dconvert.converters.IPlatformConverter.convert,"/**
* Converts the given file to all needed densities
*
* @param srcImageFile source image file to be used as base to scale
* @param arguments    all tool args
* @return result
*/
"
at.favre.tools.dconvert.converters.IPlatformConverter.clean,"/**
* Cleans (ie. deletes) all dirs that would be generated with this converter and arguments
*
* @param arguments
*/
    void clean(Arguments arguments);
"
at.favre.tools.dconvert.converters.IOSConverter.usedOutputDensities,"    public List<PostfixDescriptor> usedOutputDensities(Arguments arguments) {
        return getIosDescriptors();
    }"
at.favre.tools.dconvert.converters.IOSConverter.getIosDescriptors,"    public static List<PostfixDescriptor> getIosDescriptors() {
        List<PostfixDescriptor> list = new ArrayList<>();
        list.add(new PostfixDescriptor(1, ""1x"", """"));
        list.add(new PostfixDescriptor(2, ""2x"", ""@2x""));
        list.add(new PostfixDescriptor(3, ""3x"", ""@3x""));
        return list;
    }"
at.favre.tools.dconvert.converters.IOSConverter.getConverterName,"    public String getConverterName() {
        return ""ios-converter"";
    }"
at.favre.tools.dconvert.converters.IOSConverter.createMainSubFolder,"    public File createMainSubFolder(File destinationFolder, String targetImageFileName, Arguments arguments) {
        if (arguments.platform.size() > 1) {
            destinationFolder = MiscUtil.createAndCheckFolder(new File(destinationFolder, IOS_FOLDER_NAME).getAbsolutePath(), arguments.dryRun);
        }
        if (arguments.iosCreateImagesetFolders) {
            return MiscUtil.createAndCheckFolder(new File(destinationFolder, targetImageFileName + "".imageset"").getAbsolutePath(), arguments.dryRun);
        } else {
            return MiscUtil.createAndCheckFolder(new File(destinationFolder, ROOT_FOLDER).getAbsolutePath(), arguments.dryRun);
        }
    }"
at.favre.tools.dconvert.converters.IOSConverter.createFolderForOutputFile,"    public File createFolderForOutputFile(File mainSubFolder, PostfixDescriptor density, Dimension dimension, String targetFileName, Arguments arguments) {
        return mainSubFolder;
    }"
at.favre.tools.dconvert.converters.IOSConverter.createDestinationFileNameWithoutExtension,"    public String createDestinationFileNameWithoutExtension(PostfixDescriptor density, Dimension dimension, String targetFileName, Arguments arguments) {
        return targetFileName + density.postFix;
    }"
at.favre.tools.dconvert.converters.IOSConverter.onPreExecute,"    public void onPreExecute(File dstFolder, String targetFileName, List<PostfixDescriptor> densityDescriptions, ImageType imageType, Arguments arguments) throws Exception {
        if (!arguments.dryRun && arguments.iosCreateImagesetFolders) {
            writeContentsJson(dstFolder, targetFileName, densityDescriptions, Arguments.getOutCompressionForType(arguments.outputCompressionMode, imageType));
        }
    }"
at.favre.tools.dconvert.converters.IOSConverter.onPostExecute,"    public void onPostExecute(Arguments arguments) {

    }"
at.favre.tools.dconvert.converters.IOSConverter.writeContentsJson,"    private void writeContentsJson(File dstFolder, String targetFileName, List<PostfixDescriptor> iosDensityDescriptions, List<ImageType.ECompression> compressions) throws IOException {
        File contentJson = new File(dstFolder, ""Contents.json"");

        if (contentJson.exists()) {
            contentJson.delete();
        }
        contentJson.createNewFile();

        try (PrintWriter out = new PrintWriter(contentJson)) {
            out.println(createContentsJson(targetFileName, iosDensityDescriptions, compressions));
        }
    }"
at.favre.tools.dconvert.converters.IOSConverter.createContentsJson,"    private String createContentsJson(String targetFileName, List<PostfixDescriptor> iosDensityDescriptions, List<ImageType.ECompression> compressions) {
        StringBuilder sb = new StringBuilder(""{\n\t\""images\"": ["");
        for (ImageType.ECompression compression : compressions) {
            for (PostfixDescriptor densityDescription : iosDensityDescriptions) {
                sb.append(""\n\t\t{\n"" +
                        ""\t\t\t\""filename\"": \"""" + targetFileName + densityDescription.postFix + ""."" + compression.name().toLowerCase() + ""\"",\n"" +
                        ""\t\t\t\""idiom\"": \""universal\"",\n"" +
                        ""\t\t\t\""scale\"": \"""" + densityDescription.name + ""\""\n"" +
                        ""\t\t},"");
            }
        }
        sb.setLength(sb.length() - 1);
        sb.append(""\n\t],\n\t\""info\"": {\n\t\t\""author\"": \""xcode\"",\n\t\t\""version\"": 1\n\t}\n}"");

        return sb.toString();
    }"
at.favre.tools.dconvert.converters.IOSConverter.clean,"    public void clean(Arguments arguments) {
        if (arguments.platform.size() == 1) {
            if (arguments.iosCreateImagesetFolders) {
                for (File filesToProcess : arguments.filesToProcess) {
                    MiscUtil.deleteFolder(new File(arguments.dst, MiscUtil.getFileNameWithoutExtension(filesToProcess) + "".imageset""));
                }
            } else {
                MiscUtil.deleteFolder(new File(arguments.dst, ROOT_FOLDER));
            }
        } else {
            MiscUtil.deleteFolder(new File(arguments.dst, IOS_FOLDER_NAME));
        }
    }
"
at.favre.tools.dconvert.converters.AndroidConverter.usedOutputDensities,"    public List<AndroidDensityDescriptor> usedOutputDensities(Arguments arguments) {
        return getAndroidDensityDescriptors(arguments);
    }"
at.favre.tools.dconvert.converters.AndroidConverter.getAndroidDensityDescriptors,"    public static List<AndroidDensityDescriptor> getAndroidDensityDescriptors(Arguments arguments) {
        List<AndroidDensityDescriptor> list = new ArrayList<>();
        String dirPrefix = arguments.createMipMapInsteadOfDrawableDir ? ""mipmap"" : ""drawable"";
        if (arguments.includeAndroidLdpiTvdpi) {
            list.add(new AndroidDensityDescriptor(0.75f, ""ldpi"", dirPrefix + ""-ldpi""));
            list.add(new AndroidDensityDescriptor(1.33f, ""tvdpi"", dirPrefix + ""-tvdpi""));
        }
        list.add(new AndroidDensityDescriptor(1, ""mdpi"", dirPrefix + ""-mdpi""));
        list.add(new AndroidDensityDescriptor(1.5f, ""hdpi"", dirPrefix + ""-hdpi""));
        list.add(new AndroidDensityDescriptor(2, ""xhdpi"", dirPrefix + ""-xhdpi""));
        list.add(new AndroidDensityDescriptor(3, ""xxhdpi"", dirPrefix + ""-xxhdpi""));
        list.add(new AndroidDensityDescriptor(4, ""xxxhdpi"", dirPrefix + ""-xxxhdpi""));
        return list;
    }"
at.favre.tools.dconvert.converters.AndroidConverter.getConverterName,"    public String getConverterName() {
        return ""android-converter"";
    }"
at.favre.tools.dconvert.converters.AndroidConverter.createMainSubFolder,"    public File createMainSubFolder(File destinationFolder, String targetImageFileName, Arguments arguments) {
        if (arguments.platform.size() > 1) {
            return MiscUtil.createAndCheckFolder(new File(destinationFolder, ANDROID_FOLDER_NAME).getAbsolutePath(), arguments.dryRun);
        } else {
            return destinationFolder;
        }
    }"
at.favre.tools.dconvert.converters.AndroidConverter.createFolderForOutputFile,"    public File createFolderForOutputFile(File mainSubFolder, AndroidDensityDescriptor density, Dimension dimension, String targetFileName, Arguments arguments) {
        return MiscUtil.createAndCheckFolder(new File(mainSubFolder, density.folderName).getAbsolutePath(), arguments.dryRun);
    }"
at.favre.tools.dconvert.converters.AndroidConverter.createDestinationFileNameWithoutExtension,"    public String createDestinationFileNameWithoutExtension(AndroidDensityDescriptor density, Dimension dimension, String targetFileName, Arguments arguments) {
        return targetFileName;
    }"
at.favre.tools.dconvert.converters.AndroidConverter.onPreExecute,"    public void onPreExecute(File dstFolder, String targetFileName, List<AndroidDensityDescriptor> densityDescriptions, ImageType imageType, Arguments arguments) throws Exception {
        //nothing
    }"
at.favre.tools.dconvert.converters.AndroidConverter.onPostExecute,"    public void onPostExecute(Arguments arguments) {
        //nothing
    }"
at.favre.tools.dconvert.converters.AndroidConverter.isNinePatch,"    public static boolean isNinePatch(File file) {
        return file.getName().endsWith("".9.png"");
    }"
at.favre.tools.dconvert.converters.AndroidConverter.clean,"    public void clean(Arguments arguments) {
        if (arguments.platform.size() == 1) {
            for (AndroidDensityDescriptor androidDensityDescriptor : getAndroidDensityDescriptors(arguments)) {
                File dir = new File(arguments.dst, androidDensityDescriptor.folderName);
                MiscUtil.deleteFolder(dir);
            }
        } else {
            MiscUtil.deleteFolder(new File(arguments.dst, ANDROID_FOLDER_NAME));
        }
    }
"
at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm.scale,"    public BufferedImage scale(BufferedImage imageToScale, int dWidth, int dHeight) {
        ResampleOp resizeOp = new ResampleOp(dWidth, dHeight);
        resizeOp.setFilter(filter);
        return resizeOp.filter(imageToScale, null);
    }"
at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm.sincModified,"        private float sincModified(float value) {
            return ((float) Math.sin(value)) / value;
        }"
at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm.apply,"        public final float apply(float value) {
            if (value == 0) {
                return 1.0f;
            }
            if (value < 0.0f) {
                value = -value;
            }

            if (value < radius) {
                value *= PI_FLOAT;
                return sincModified(value) * sincModified(value / radius);
            } else {
                return 0.0f;
            }
        }"
at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm.getSamplingRadius,"        public float getSamplingRadius() {
            return radius;
        }"
at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm.getName,"        public String getName() {
            return ""Lanczos"" + (int) radius;
        }
    }

    @Override
    public String toString() {
        return ""ResampleAlgorithm["" + filter.getName() + ']';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ResampleAlgorithm that = (ResampleAlgorithm) o;

        return filter != null ? filter.equals(that.filter) : that.filter == null;

    }

    @Override
    public int hashCode() {
        return filter != null ? filter.hashCode() : 0;
    "
at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm.toString,"    public String toString() {
        return ""ResampleAlgorithm["" + filter.getName() + ']';
    }"
at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm.equals,"    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ResampleAlgorithm that = (ResampleAlgorithm) o;

        return filter != null ? filter.equals(that.filter) : that.filter == null;

    }"
at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm.hashCode,"    public int hashCode() {
        return filter != null ? filter.hashCode() : 0;
    }
"
at.favre.tools.dconvert.converters.scaling.ImageHandler.saveToFile,"    public List<File> saveToFile(File targetFile, LoadedImage imageData, Dimension targetDimension, boolean isNinePatch) throws Exception {

        List<File> files = new ArrayList<>(2);
        List<ImageType.ECompression> compressionList = Arguments.getOutCompressionForType(args.outputCompressionMode, Arguments.getImageType(imageData.getSourceFile()));
        for (ImageType.ECompression compression : compressionList) {
            File imageFile = new File(targetFile.getAbsolutePath() + ""."" + compression.extension);

            if (imageFile.exists() && args.skipExistingFiles) {
                break;
            }

            List<ScaleAlgorithm> algorithms = getScaleAlgorithm(getScalingAlgorithm(getScalingType(imageData, targetDimension)), getScalingType(imageData, targetDimension));

            for (ScaleAlgorithm scaleAlgorithm : algorithms) {

                if (!traceMap.containsKey(scaleAlgorithm)) {
                    traceMap.put(scaleAlgorithm, 0L);
                }

                BufferedImage scaledImage;
                if (isNinePatch && compression == ImageType.ECompression.PNG) {
                    scaledImage = new NinePatchScaler().scale(imageData.getImage(), targetDimension, getAsScalingAlgorithm(scaleAlgorithm, compression));
                } else {
                    long startNanos = System.nanoTime();
                    scaledImage = scale(scaleAlgorithm, imageData.getImage(), targetDimension.width, targetDimension.height, compression, DEFAULT_COLOR);
                    traceMap.put(scaleAlgorithm, traceMap.get(scaleAlgorithm) + (System.nanoTime() - startNanos));
                }

                File fileToSave = imageFile;

                if (algorithms.size() > 1) {
                    fileToSave = new File(imageFile.getParentFile(), MiscUtil.getFileNameWithoutExtension(imageFile) + ""."" + scaleAlgorithm.toString() + ""."" + MiscUtil.getFileExtension(imageFile));
                }

                if (compression == ImageType.ECompression.JPG) {
                    compressJpeg(scaledImage, null, args.compressionQuality, fileToSave);
                } else {
                    ImageIO.write(scaledImage, compression.name().toLowerCase(), fileToSave);
                }
                scaledImage.flush();
                files.add(imageFile);
            }
        }
        return files;
    }"
at.favre.tools.dconvert.converters.scaling.ImageHandler.compressJpeg,"    private void compressJpeg(BufferedImage bufferedImage, CompoundDirectory exif, float quality, File targetFile) throws IOException {
        ImageWriter jpgWriter = ImageIO.getImageWritersByFormatName(""jpg"").next();
        ImageWriteParam jpgWriteParam = jpgWriter.getDefaultWriteParam();
        jpgWriteParam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
        jpgWriteParam.setCompressionQuality(quality);

        ImageWriter writer = null;
        try (ImageOutputStream outputStream = new FileImageOutputStream(targetFile)) {
            writer = ImageIO.getImageWritersByFormatName(""jpg"").next();
            writer.setOutput(outputStream);
            writer.write(null, new IIOImage(bufferedImage, null, null), jpgWriteParam);
        } finally {
            if (writer != null) writer.dispose();
        }
    }"
at.favre.tools.dconvert.converters.scaling.ImageHandler.getScalingAlgorithm,"    private EScalingAlgorithm getScalingAlgorithm(EScalingAlgorithm.Type type) {
        return type == EScalingAlgorithm.Type.UPSCALING ? args.upScalingAlgorithm : args.downScalingAlgorithm;
    }"
at.favre.tools.dconvert.converters.scaling.ImageHandler.getScalingType,"    private EScalingAlgorithm.Type getScalingType(LoadedImage imageData, Dimension targetDimension) {
        long targetSize = targetDimension.height * targetDimension.width;
        long sourceSize = imageData.getImage().getHeight() * imageData.getImage().getWidth();
        return targetSize >= sourceSize ? EScalingAlgorithm.Type.UPSCALING : EScalingAlgorithm.Type.DOWNSCALING;
    }"
at.favre.tools.dconvert.converters.scaling.ImageHandler.getScaleAlgorithm,"    private List<ScaleAlgorithm> getScaleAlgorithm(EScalingAlgorithm algorithm, EScalingAlgorithm.Type type) {
        if (TEST_MODE) {
            return EScalingAlgorithm.getAllEnabled().stream().filter(eScalingAlgorithm -> eScalingAlgorithm.getSupportedForType().contains(type)).map(EScalingAlgorithm::getImplementation).collect(Collectors.toList());
        } else {
            return Collections.singletonList(algorithm.getImplementation());
        }
    }"
at.favre.tools.dconvert.converters.scaling.ImageHandler.scale,"    private BufferedImage scale(ScaleAlgorithm scaleAlgorithm, BufferedImage imageToScale, int dWidth, int dHeight, ImageType.ECompression compression, Color background) {

        BufferedImage scaledImage;

        if (dWidth == imageToScale.getWidth() && dHeight == imageToScale.getHeight()) {
            scaledImage = imageToScale;
        } else {
            scaledImage = scaleAlgorithm.scale(imageToScale, dWidth, dHeight);
        }

        if (!compression.hasTransparency) {
            BufferedImage convertedImg = new BufferedImage(scaledImage.getWidth(), scaledImage.getHeight(), BufferedImage.TYPE_INT_RGB);
            convertedImg.getGraphics().drawImage(scaledImage, 0, 0, background, null);
            scaledImage = convertedImg;
        }

        if (args.enableAntiAliasing) {
            scaledImage = OP_ANTIALIAS.filter(scaledImage, null);
        }

        return scaledImage;
    }"
at.favre.tools.dconvert.converters.scaling.ImageHandler.getAsScalingAlgorithm,"    private ScaleAlgorithm getAsScalingAlgorithm(final ScaleAlgorithm algorithm, ImageType.ECompression compression) {
        return (imageToScale, dWidth, dHeight) -> ImageHandler.this.scale(algorithm, imageToScale, dWidth, dHeight, compression, DEFAULT_COLOR);
    }
"
at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm.scale,"    public BufferedImage scale(BufferedImage imageToScale, int dWidth, int dHeight) {

        int imageType = BufferedImage.TYPE_INT_RGB;
        if (imageToScale.getType() != BufferedImage.TYPE_INT_RGB) {
            imageType = BufferedImage.TYPE_INT_ARGB;
        }

        BufferedImage scaledImage = new BufferedImage(dWidth, dHeight, imageType);
        Graphics2D graphics2D = scaledImage.createGraphics();
        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, interpolationValue);
        graphics2D.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
        graphics2D.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
        graphics2D.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        graphics2D.drawImage(imageToScale, 0, 0, dWidth, dHeight, null);

        graphics2D.dispose();

        return scaledImage;
    }"
at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm.toString,"    public String toString() {
        return ""NaiveGraphics2d["" + interpolationValue + ']';
    }"
at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm.equals,"    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        NaiveGraphics2dAlgorithm that = (NaiveGraphics2dAlgorithm) o;

        return interpolationValue != null ? interpolationValue.equals(that.interpolationValue) : that.interpolationValue == null;

    }"
at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm.hashCode,"    public int hashCode() {
        return interpolationValue != null ? interpolationValue.hashCode() : 0;
    }
"
at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm.scale,"    BufferedImage scale(BufferedImage imageToScale, int dWidth, int dHeight);
"
at.favre.tools.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm.scale,"    public BufferedImage scale(BufferedImage imageToScale, int dWidth, int dHeight) {
        return new FixedSizeThumbnailMaker(dWidth, dHeight, false, true)
                .resizer(new ProgressiveResizer(interpolationValue)).make(imageToScale);
    }"
at.favre.tools.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm.checkArg,"        private void checkArg(Object interpolationValue) {
            if (interpolationValue != RenderingHints.VALUE_INTERPOLATION_BICUBIC &&
                    interpolationValue != RenderingHints.VALUE_INTERPOLATION_BILINEAR &&
                    interpolationValue != RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR)
                throw new IllegalArgumentException(""wrong argument passed muts be one of RenderingHints.VALUE_INTERPOLATION_BICUBIC, "" +
                        ""RenderingHints.VALUE_INTERPOLATION_BILINEAR or RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR"");
        }"
at.favre.tools.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm.resize,"        public void resize(BufferedImage srcImage, BufferedImage destImage)
                throws NullPointerException {
            super.performChecks(srcImage, destImage);

            int currentWidth = srcImage.getWidth();
            int currentHeight = srcImage.getHeight();

            final int targetWidth = destImage.getWidth();
            final int targetHeight = destImage.getHeight();

            // If multi-step downscaling is not required, perform one-step.
            if ((targetWidth * 2 >= currentWidth) && (targetHeight * 2 >= currentHeight)) {
                super.resize(srcImage, destImage);
                return;
            }

            // Temporary image used for in-place resizing of image.
            BufferedImage tempImage = new BufferedImage(
                    currentWidth,
                    currentHeight,
                    destImage.getType()
            );

            Graphics2D g = tempImage.createGraphics();
            g.setRenderingHints(RENDERING_HINTS);
            g.setComposite(AlphaComposite.Src);

            /*
             * Determine the size of the first resize step should be.
             * 1) Beginning from the target size
             * 2) Increase each dimension by 2
             * 3) Until reaching the original size
             */

            int startWidth = targetWidth;
            int startHeight = targetHeight;

            while (startWidth < currentWidth && startHeight < currentHeight) {
                startWidth *= 2;
                startHeight *= 2;
            }

            currentWidth = startWidth / 2;
            currentHeight = startHeight / 2;

            // Perform first resize step.
            g.drawImage(srcImage, 0, 0, currentWidth, currentHeight, null);

            // Perform an in-place progressive bilinear resize.
            while ((currentWidth >= targetWidth * 2) && (currentHeight >= targetHeight * 2)) {
                currentWidth /= 2;
                currentHeight /= 2;

                if (currentWidth < targetWidth) {
                    currentWidth = targetWidth;
                }
                if (currentHeight < targetHeight) {
                    currentHeight = targetHeight;
                }

                g.drawImage(
                        tempImage,
                        0, 0, currentWidth, currentHeight,
                        0, 0, currentWidth * 2, currentHeight * 2,
                        null
                );
            }

            g.dispose();

            // Draw the resized image onto the destination image.
            Graphics2D destg = destImage.createGraphics();
            destg.drawImage(tempImage, 0, 0, targetWidth, targetHeight, 0, 0, currentWidth, currentHeight, null);
            destg.dispose();
        }
    }

    @Override
    public String toString() {
        return ""ThumbnailnatorProgressiveAlgorithm{"" +
                ""interpolationValue="" + interpolationValue +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ThumbnailnatorProgressiveAlgorithm that = (ThumbnailnatorProgressiveAlgorithm) o;

        return interpolationValue != null ? interpolationValue.equals(that.interpolationValue) : that.interpolationValue == null;

    }

    @Override
    public int hashCode() {
        return interpolationValue != null ? interpolationValue.hashCode() : 0;
    "
at.favre.tools.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm.toString,"    public String toString() {
        return ""ThumbnailnatorProgressiveAlgorithm{"" +
                ""interpolationValue="" + interpolationValue +
                '}';
    }"
at.favre.tools.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm.equals,"    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ThumbnailnatorProgressiveAlgorithm that = (ThumbnailnatorProgressiveAlgorithm) o;

        return interpolationValue != null ? interpolationValue.equals(that.interpolationValue) : that.interpolationValue == null;

    }"
at.favre.tools.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm.hashCode,"    public int hashCode() {
        return interpolationValue != null ? interpolationValue.hashCode() : 0;
    }
"
at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm.scale,"    public BufferedImage scale(BufferedImage imageToScale, int dWidth, int dHeight) {
        switch (type) {
            case NOBEL_BILINEAR:
                return new MultiStepRescaleOp(dWidth, dHeight, RenderingHints.VALUE_INTERPOLATION_BILINEAR)
                        .filter(imageToScale, null);
            case NOBEL_BICUBUC:
                return new MultiStepRescaleOp(dWidth, dHeight, RenderingHints.VALUE_INTERPOLATION_BICUBIC)
                        .filter(imageToScale, null);
            case NOBEL_NEAREST_NEIGHBOR:
                return new MultiStepRescaleOp(dWidth, dHeight, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR)
                        .filter(imageToScale, null);
            case NOBEL_LANCZOS3:
                return new MultiStepLanczos3RescaleOp(dWidth, dHeight).filter(imageToScale, null);
            case PROGRESSIVE_BILINEAR_AND_LANCZOS2:
                return scaleProgressiveLanczos(imageToScale, dWidth, dHeight, 2);
            case PROGRESSIVE_BILINEAR_AND_LANCZOS3:
                return scaleProgressiveLanczos(imageToScale, dWidth, dHeight, 3);
            case THUMBNAILATOR_BILINEAR:
                return new ThumbnailnatorProgressiveAlgorithm(RenderingHints.VALUE_INTERPOLATION_BILINEAR).scale(imageToScale, dWidth, dHeight);
            case THUMBNAILATOR_BICUBUC:
                return new ThumbnailnatorProgressiveAlgorithm(RenderingHints.VALUE_INTERPOLATION_BICUBIC).scale(imageToScale, dWidth, dHeight);
            case IMGSCALR_SEVENTH_STEP:
                return Scalr.resize(imageToScale, Scalr.Method.ULTRA_QUALITY, Scalr.Mode.FIT_EXACT, dWidth, dHeight, null);
            case IMGSCALR_HALF_STEP:
                return Scalr.resize(imageToScale, Scalr.Method.QUALITY, Scalr.Mode.FIT_EXACT, dWidth, dHeight, null);
            default:
                throw new IllegalArgumentException(""unknown algorithm"");
        }
    }"
at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm.scaleProgressiveLanczos,"    private BufferedImage scaleProgressiveLanczos(BufferedImage imageToScale, int dstWidth, int dstHeight, float radius) {
        if (dstWidth < (imageToScale.getWidth() / 2) && dstHeight < (imageToScale.getHeight() / 2)) {
            return new ThumbnailnatorProgressiveAlgorithm(RenderingHints.VALUE_INTERPOLATION_BILINEAR).scale(imageToScale, dstWidth, dstHeight);
        } else {
            return new ResampleAlgorithm(new ResampleAlgorithm.LanczosFilter(radius)).scale(imageToScale, dstWidth, dstHeight);
        }
    }"
at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm.doFilter,"        public BufferedImage doFilter(BufferedImage img, BufferedImage dest, int dstWidth, int dstHeight) {
            BufferedImage ret = img;
            int w, h;

            w = img.getWidth();
            h = img.getHeight();

            do {
                if (w > dstWidth) {
                    w /= 2;
                    if (w < dstWidth) {
                        w = dstWidth;
                    }
                } else {
                    w = dstWidth;
                }

                if (h > dstHeight) {
                    h /= 2;
                    if (h < dstHeight) {
                        h = dstHeight;
                    }
                } else {
                    h = dstHeight;
                }

                ResampleOp resizeOp = new ResampleOp(w, h);
                resizeOp.setFilter(ResampleFilters.getLanczos3Filter());
                ret = resizeOp.filter(ret, null);
            } while (w != dstWidth || h != dstHeight);

            return ret;
        }
    }

    @Override
    public String toString() {
        return ""ProgressiveAlgorithm["" + type + ']';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ProgressiveAlgorithm that = (ProgressiveAlgorithm) o;

        return type == that.type;

    }

    @Override
    public int hashCode() {
        return type != null ? type.hashCode() : 0;
    "
at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm.toString,"    public String toString() {
        return ""ProgressiveAlgorithm["" + type + ']';
    }"
at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm.equals,"    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ProgressiveAlgorithm that = (ProgressiveAlgorithm) o;

        return type == that.type;

    }"
at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm.hashCode,"    public int hashCode() {
        return type != null ? type.hashCode() : 0;
    }
"
at.favre.tools.dconvert.converters.postprocessing.PngCrushProcessor.synchronizedProcess,"    public Result synchronizedProcess(File rawFile, boolean keepOriginal) {
        try {
            String[] args = MiscUtil.concat(MiscUtil.concat(new String[]{""pngcrush""}, additionalArgs), new String[]{""%%sourceFilePath%%"", ""%%outFilePath%%""});
            return PostProcessorUtil.runImageOptimizer(rawFile, ImageType.PNG, args, keepOriginal);
        } catch (Exception e) {
            return new Result(""could not execute post processor "" + getClass().getSimpleName(), e, Collections.singletonList(rawFile));
        }
    }"
at.favre.tools.dconvert.converters.postprocessing.PngCrushProcessor.isSupported,"    public boolean isSupported() {
        return PostProcessorUtil.canRunCmd(new String[]{""pngcrush"", ""-h""});
    }
"
at.favre.tools.dconvert.converters.postprocessing.MozJpegProcessor.synchronizedProcess,"    public Result synchronizedProcess(File rawFile, boolean keepOriginal) {
        try {
            String[] args = new String[]{""jpegtran"", ""-outfile"", ""%%outFilePath%%"", ""-optimise"", ""-progressive"", ""-copy"", ""none"", ""%%sourceFilePath%%""};
            return PostProcessorUtil.runImageOptimizer(rawFile, ImageType.JPG, args, keepOriginal);
        } catch (Exception e) {
            return new Result(""could not execute post processor "" + getClass().getSimpleName(), e, Collections.singletonList(rawFile));
        }
    }"
at.favre.tools.dconvert.converters.postprocessing.MozJpegProcessor.isSupported,"    public boolean isSupported() {
        return PostProcessorUtil.canRunCmd(new String[]{""jpegtran"", ""-h""});
    }
"
at.favre.tools.dconvert.converters.postprocessing.APostProcessor.process,"    public Result process(File rawFile, boolean keepOriginal) {
        try {

            administrationLock.lock();
            if (!lockMap.containsKey(rawFile)) {
                lockMap.put(rawFile, new ReentrantLock(true));
            }

            administrationLock.unlock();

            lockMap.get(rawFile).lock();

            return synchronizedProcess(rawFile, keepOriginal);
        } finally {
            lockMap.get(rawFile).unlock();
        }
    }

    /**
     * This is the thread safe version of {@link #process(File, boolean)}"
at.favre.tools.dconvert.converters.postprocessing.APostProcessor.synchronizedProcess,"/**
* This is the thread safe version of {@link #process(File, boolean)}
*
* @param rawFile
* @param keepOriginal
* @return
*/
    protected abstract Result synchronizedProcess(File rawFile, boolean keepOriginal);
"
at.favre.tools.dconvert.converters.postprocessing.WebpProcessor.synchronizedProcess,"    public Result synchronizedProcess(File rawFile, boolean keepOriginal) {
        try {
            ImageType compression = Arguments.getImageType(rawFile);
            String[] additionalArgs;
            if (compression == ImageType.PNG || compression == ImageType.GIF) {
                additionalArgs = new String[]{""-lossless"", ""-alpha_filter"", ""best"", ""-m"", ""6""};
            } else if (compression == ImageType.JPG) {
                additionalArgs = new String[]{""-m"", ""6"", ""-q"", ""90""};
            } else {
                return null;
            }

            String[] finalArg = MiscUtil.concat(MiscUtil.concat(new String[]{""cwebp""}, additionalArgs), new String[]{""%%sourceFilePath%%"", ""-o"", ""%%outFilePath%%""});

            return PostProcessorUtil.runImageOptimizer(rawFile, compression, finalArg, keepOriginal, ""webp"");
        } catch (Exception e) {
            return new Result(""could not execute post processor "" + getClass().getSimpleName(), e, Collections.singletonList(rawFile));
        }
    }"
at.favre.tools.dconvert.converters.postprocessing.WebpProcessor.isSupported,"    public boolean isSupported() {
        return PostProcessorUtil.canRunCmd(new String[]{""cwebp"", ""-h""});
    }
"
at.favre.tools.dconvert.converters.postprocessing.IPostProcessor.process,"/**
* Will process the given file. It is not necessary to spawn another thread for exectution
*
* @param rawFile      to process
* @param keepOriginal if true will not delete unprocessed file, but renames it to (filename)_orig.(extension)
* @return optional log or output
*/
"
at.favre.tools.dconvert.converters.postprocessing.IPostProcessor.isSupported,"/**
* @return true if this processor is supported with the current setup (e.g. tool is set in PATH)
*/
    boolean isSupported();
"
at.favre.tools.dconvert.converters.descriptors.AndroidDensityDescriptor.toString,"    public String toString() {
        return ""AndroidDensityDescription{"" +
                ""folderName='"" + folderName + '\'' +
                '}';
    }"
at.favre.tools.dconvert.converters.descriptors.AndroidDensityDescriptor.equals,"    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;

        AndroidDensityDescriptor that = (AndroidDensityDescriptor) o;

        return !(folderName != null ? !folderName.equals(that.folderName) : that.folderName != null);

    }"
at.favre.tools.dconvert.converters.descriptors.AndroidDensityDescriptor.hashCode,"    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (folderName != null ? folderName.hashCode() : 0);
        return result;
    }
"
at.favre.tools.dconvert.converters.descriptors.DensityDescriptor.equals,"    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        DensityDescriptor that = (DensityDescriptor) o;

        if (Float.compare(that.scale, scale) != 0) return false;
        return !(name != null ? !name.equals(that.name) : that.name != null);

    }"
at.favre.tools.dconvert.converters.descriptors.DensityDescriptor.hashCode,"    public int hashCode() {
        int result = (scale != +0.0f ? Float.floatToIntBits(scale) : 0);
        result = 31 * result + (name != null ? name.hashCode() : 0);
        return result;
    }"
at.favre.tools.dconvert.converters.descriptors.DensityDescriptor.compareTo,"    public int compareTo(DensityDescriptor o) {
        return Float.compare(scale, o.scale);
    }
"
