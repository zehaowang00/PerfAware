Method Signature,Method Body
test.java.DefaultInstancesTest.testcatenaHorseflyReduced,"    public void testcatenaHorseflyReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initHorsefly();
        c.setGHigh(13);
        c.setGLow(13);
        JSONArray jsonObj = this.helper.jsonParserArr(this.filecatenaHorseflyReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult.toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testcatenaLanternflyReduced,"    public void testcatenaLanternflyReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initLanternfly();
        c.setGHigh(9);
        c.setGLow(9);
        JSONArray jsonObj = this.helper.jsonParserArr(this.filecatenaLanternflyReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult.toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testcatenaMydasflyReduced,"    public void testcatenaMydasflyReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initMydasfly();
        c.setGHigh(9);
        c.setGLow(9);
        JSONArray jsonObj = this.helper.jsonParserArr(this.filecatenaMydasflyReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult.toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testcatenaStoneflyReduced,"    public void testcatenaStoneflyReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initStonefly();
        c.setGHigh(9);
        c.setGLow(9);
        JSONArray jsonObj = this.helper.jsonParserArr(this.filecatenaStoneflyReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult.toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testcatenaHorseflyFullReduced,"    public void testcatenaHorseflyFullReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initHorseflyFull();
        c.setGHigh(13);
        c.setGLow(13);
        JSONArray jsonObj = this.helper.jsonParserArr(this.filecatenaHorseflyFullReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult.toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testcatenaLanternflyFullReduced,"    public void testcatenaLanternflyFullReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initLanternflyFull();
        c.setGHigh(9);
        c.setGLow(9);
        JSONArray jsonObj = this.helper.jsonParserArr(this.filecatenaLanternflyFullReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult.toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testcatenaMydasflyFullReduced,"    public void testcatenaMydasflyFullReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initMydasflyFull();
        c.setGHigh(9);
        c.setGLow(9);
        JSONArray jsonObj = this.helper.jsonParserArr(this.filecatenaMydasflyFullReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult.toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testcatenaStoneflyFullReduced,"    public void testcatenaStoneflyFullReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initStoneflyFull();
        c.setGHigh(9);
        c.setGLow(9);
        JSONArray jsonObj = this.helper.jsonParserArr(this.filecatenaStoneflyFullReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult);
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testButterflyReduced,"    public void testButterflyReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initButterfly();
        c.setGLow(9);
        c.setGHigh(9);
        JSONArray jsonObj = this.helper.jsonParserArr(this.butterflyFileReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult.toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testButterflyFullReduced,"    public void testButterflyFullReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initButterflyFull();
        c.setGLow(9);
        c.setGHigh(9);
        JSONArray jsonObj = this.helper.jsonParserArr(this.butterflyFileFullReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gamma = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] aData = this.helper.hex2bytes(inputs.getString(""aData""));
            int outputLength = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
            Assert.assertEquals(expectedResult, actualResult.toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testDragonflyReduced,"    public void testDragonflyReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initDragonfly();
        c.setGLow(14);
        c.setGHigh(14);
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileDragonflyReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gammaValue = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] publicInput = this.helper.hex2bytes(inputs.getString(""aData""));
            int m = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            byte[] actualResult = c.catena(pwd, salt, publicInput, gammaValue, m);
            Assert.assertEquals(expectedResult, this.helper.bytes2hex(actualResult).toLowerCase());
            ++i;
        }
    }"
test.java.DefaultInstancesTest.testDragonflyFullReduced,"    public void testDragonflyFullReduced() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initDragonflyFull();
        c.setGLow(14);
        c.setGHigh(14);
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileDragonflyFullReduced);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            byte[] pwd = this.helper.hex2bytes(inputs.getString(""pwd""));
            byte[] salt = this.helper.hex2bytes(inputs.getString(""salt""));
            byte[] gammaValue = this.helper.hex2bytes(inputs.getString(""gamma""));
            byte[] publicInput = this.helper.hex2bytes(inputs.getString(""aData""));
            int m = inputs.getInt(""outputLength"");
            String expectedResult = outputs.getString(""res"");
            byte[] actualResult = c.catena(pwd, salt, publicInput, gammaValue, m);
            Assert.assertEquals(expectedResult, this.helper.bytes2hex(actualResult).toLowerCase());
            ++i;
        }
    }
"
test.java.HelperTest.testConcateByteArrays,"    public void testConcateByteArrays() {
        byte[] a = new byte[2];
        byte[] b = new byte[3];
        byte[] c = this.helper.concateByteArrays(a, b);
        Assert.assertEquals(c.length, a.length + b.length);
    }"
test.java.HelperTest.testoneDimByteArrToTwoDim,"    public void testoneDimByteArrToTwoDim() {
        int len = 64;
        byte[] b = this.helper.hex2bytes(""3d6d5d5b1b159210437827d4956b9775bfd3dab68f98e958cff9f64f62155168b432f1e248b415739187dc7894e2c53167e0c3142dea5a8e4faac7d29fdac127b77b4f34758083a59b44e9c22917d6ee598485f414500bbd069c142177fba6b7815ab47fe7a6a01e7ab20f9217a5549af3aaba255957bb979f46db5e2014cbb733e161e765fa20642ef4e1c18a8b7fee7339cd547aaf9bdbdbe5f11739118bb3f6c9abce48337e6cfaff168d7910fbcb0aa3c265ba426ff71ff5d2c2d74c5f769716a0ee29b7bf4ad1f1f9eab0a458cf222a89f0a1822c5d21b3d7db9092aacabaee9cd97b6870987b9fddf97180cbd496c2e459eca027eae9f9798acc255835"");
        byte[][] expected = new byte[4][64];
        expected[0] = this.helper.hex2bytes(""3d6d5d5b1b159210437827d4956b9775bfd3dab68f98e958cff9f64f62155168b432f1e248b415739187dc7894e2c53167e0c3142dea5a8e4faac7d29fdac127"");
        expected[1] = this.helper.hex2bytes(""b77b4f34758083a59b44e9c22917d6ee598485f414500bbd069c142177fba6b7815ab47fe7a6a01e7ab20f9217a5549af3aaba255957bb979f46db5e2014cbb7"");
        expected[2] = this.helper.hex2bytes(""33e161e765fa20642ef4e1c18a8b7fee7339cd547aaf9bdbdbe5f11739118bb3f6c9abce48337e6cfaff168d7910fbcb0aa3c265ba426ff71ff5d2c2d74c5f76"");
        expected[3] = this.helper.hex2bytes(""9716a0ee29b7bf4ad1f1f9eab0a458cf222a89f0a1822c5d21b3d7db9092aacabaee9cd97b6870987b9fddf97180cbd496c2e459eca027eae9f9798acc255835"");
        byte[][] out = this.helper.oneDimByteArrToTwoDim(b, len);
        int i = 0;
        while (i < expected.length) {
            Assert.assertArrayEquals(expected[i], out[i]);
            ++i;
        }
    }"
test.java.HelperTest.testXor,"    public void testXor() {
        byte[] byArray = new byte[4];
        byArray[1] = 1;
        byArray[3] = 1;
        byte[] a = byArray;
        byte[] byArray2 = new byte[4];
        byArray2[0] = 1;
        byArray2[1] = 1;
        byArray2[3] = 1;
        byte[] b = byArray2;
        byte[] byArray3 = new byte[4];
        byArray3[0] = 1;
        byte[] res = byArray3;
        byte[] c = this.helper.xor(a, b);
        int i = 0;
        while (i < res.length) {
            Assert.assertEquals(res[i], c[i]);
            ++i;
        }
    }"
test.java.HelperTest.testXorHash,"    public void testXorHash() {
        byte[] a = this.helper.hex2bytes(this.hash1XORING);
        byte[] b = this.helper.hex2bytes(this.hash1XORING);
        byte[] c = this.helper.hex2bytes(this.hash2XORING);
        byte[] x = this.helper.xor(a, b);
        byte[] y = this.helper.xor(a, c);
        byte[] resAB = this.helper.hex2bytes(""0000"");
        byte[] resAC = this.helper.hex2bytes(""05c3"");
        Assert.assertArrayEquals(resAB, x);
        Assert.assertArrayEquals(resAC, y);
    }"
test.java.HelperTest.testIntToByteArray2,"    public void testIntToByteArray2() {
        int input = 12;
        byte[] byArray = new byte[2];
        byArray[1] = 12;
        byte[] exp = byArray;
        byte[] act = this.helper.intToByteArray(input, 2);
        Assert.assertArrayEquals(exp, act);
    }"
test.java.HelperTest.testIntToByteArray4,"    public void testIntToByteArray4() {
        int input = 12;
        byte[] byArray = new byte[4];
        byArray[3] = 12;
        byte[] exp = byArray;
        byte[] act = this.helper.intToByteArray(input, 4);
        Assert.assertArrayEquals(exp, act);
    }"
test.java.HelperTest.testIntToByteArray0,"    public void testIntToByteArray0() {
        int input = 12;
        byte[] exp = new byte[1];
        byte[] act = this.helper.intToByteArray(input, 0);
        Assert.assertArrayEquals(exp, act);
    }"
test.java.HelperTest.testBytesToInt,"    public void testBytesToInt() {
        byte[] byArray = new byte[4];
        byArray[3] = 12;
        byte[] bytes = byArray;
        int act = this.helper.bytesToInt(bytes);
        int exp = 12;
        Assert.assertEquals(exp, act);
    }"
test.java.HelperTest.testIntToBytes,"    public void testIntToBytes() {
        byte[] byArray = new byte[4];
        byArray[3] = 12;
        byte[] exp = byArray;
        byte[] act = this.helper.intToBytes(12);
        Assert.assertArrayEquals(exp, act);
    }"
test.java.HelperTest.testBytesToLong,"    public void testBytesToLong() {
        byte[] byArray = new byte[8];
        byArray[7] = 12;
        byte[] bytes = byArray;
        long act = this.helper.bytesToLong(bytes);
        long exp = 12L;
        Assert.assertEquals(exp, act);
    }"
test.java.HelperTest.testLongToBytes,"    public void testLongToBytes() {
        byte[] byArray = new byte[8];
        byArray[7] = 12;
        byte[] exp = byArray;
        byte[] act = this.helper.longToBytes(12L);
        Assert.assertArrayEquals(exp, act);
    }"
test.java.HelperTest.testPaddWithZero,"    public void testPaddWithZero() {
        byte[] inp = new byte[]{12, 13, 14};
        int l = 10;
        byte[] act = this.helper.paddWithZero(inp, l);
        byte[] byArray = new byte[10];
        byArray[0] = 12;
        byArray[1] = 13;
        byArray[2] = 14;
        byte[] exp = byArray;
        Assert.assertArrayEquals(exp, act);
    }"
test.java.HelperTest.testintToByteArrayLittleEndian,"    public void testintToByteArrayLittleEndian() {
        int input = 12;
        int bytes = 4;
        byte[] actual = this.helper.intToByteArrayLittleEndian(input, bytes);
        byte[] byArray = new byte[4];
        byArray[0] = 12;
        byte[] expected = byArray;
        Assert.assertArrayEquals(expected, actual);
    }"
test.java.HelperTest.testintToByteArrayLittleEndian0,"    public void testintToByteArrayLittleEndian0() {
        int input = 12;
        int bytes = 1;
        byte[] actual = this.helper.intToByteArrayLittleEndian(input, bytes);
        byte[] expected = new byte[1];
        Assert.assertArrayEquals(expected, actual);
    }
"
test.java.components.gamma.algorithms.SaltMixTest.testSaltMix,"    public void testSaltMix() {
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        SaltMix gamma = new SaltMix();
        gamma.setH(h);
        gamma.setHPrime(hPrime);
        JSONArray jsonObj = this.helper.jsonParserArr(this.testFileSaltMix);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            String hashIn = inputs.getString(""hash"");
            byte[][] in = this.helper.oneDimByteArrToTwoDim(this.helper.hex2bytes(hashIn), 64);
            int garlic = inputs.getInt(""garlic"");
            String salt = inputs.getString(""salt"");
            String exp = outputs.getString(""output_hash"");
            byte[] s = this.helper.hex2bytes(salt);
            byte[][] output = gamma.gamma(garlic, in, s);
            Assert.assertTrue(exp.equals(this.helper.bytes2hex(this.helper.twoDimByteArrayToOne(output)).toLowerCase()));
            ++i;
        }
    }
"
test.java.components.hash.algorithms.Argon2CFTest.testGL,"    public void testGL() {
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileGL);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            String func = inputs.getString(""mixFunc"");
            String dataString = inputs.getString(""data"");
            String res = outputs.getString(""res"");
            boolean useGL = true;
            useGL = func.equals(""G_{L}"");
            Argon2CF h = new Argon2CF(useGL);
            h.update(this.helper.hex2bytes(dataString));
            byte[] output = h.doFinal();
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }"
test.java.components.hash.algorithms.Argon2CFTest.testGB,"    public void testGB() {
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileGB);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            String func = inputs.getString(""mixFunc"");
            String dataString = inputs.getString(""data"");
            String res = outputs.getString(""res"");
            boolean useGL = false;
            useGL = !func.equals(""G_{B}"");
            Argon2CF h = new Argon2CF(useGL);
            h.update(this.helper.hex2bytes(dataString));
            byte[] output = h.doFinal();
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }
"
test.java.components.hash.algorithms.Blake2b_1Test.testAllVectors,"    public void testAllVectors() {
        Helper helper = new Helper();
        Blake2b_1 hPrime = new Blake2b_1();
        byte[] actualResult = new byte[64];
        boolean reset = false;
        int r = 0;
        JSONArray jsonObj = this.jsonParser(file);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            reset = inputs.getBoolean(""reset"");
            byte[] input = helper.hex2bytes(inputs.getString(""data""));
            r = inputs.getInt(""r"");
            byte[] output = helper.hex2bytes(outputs.getString(""res""));
            if (reset) {
                hPrime.reset();
            }
            hPrime.setVertexIndex(r);
            hPrime.update(input);
            actualResult = hPrime.doFinal();
            Assert.assertTrue(helper.bytes2hex(actualResult).equals(helper.bytes2hex(output)));
            ++i;
        }
    }"
test.java.components.hash.algorithms.Blake2b_1Test.jsonParser,"    private JSONArray jsonParser(File f) {
        String all = """";
        try {
            String line;
            BufferedReader br = new BufferedReader(new FileReader(f));
            while ((line = br.readLine()) != null) {
                all = String.valueOf(all) + line;
            }
        }
        catch (Exception exception) {
            // empty catch block
        }
        return new JSONArray(all);
    }
"
test.java.components.hash.algorithms.Blake2bTest.testsimple,"    public void testsimple() {
        byte[] anyByteArray1 = this.helper.hex2bytes(this.input1);
        byte[] exp = this.helper.hex2bytes(this.hash1);
        byte[] keyInBytes = this.helper.hex2bytes(this.key);
        Blake2b b = new Blake2b(keyInBytes);
        b.update(anyByteArray1);
        byte[] hash = new byte[64];
        hash = b.doFinal();
        Assert.assertTrue(this.helper.bytes2hex(hash).equals(this.helper.bytes2hex(exp)));
    }"
test.java.components.hash.algorithms.Blake2bTest.testsimple2,"    public void testsimple2() {
        byte[] anyByteArray1 = this.helper.hex2bytes(this.input1);
        byte[] exp = this.helper.hex2bytes(this.hash1);
        byte[] keyInBytes = this.helper.hex2bytes(this.key);
        Blake2b b = new Blake2b(keyInBytes);
        b.update(anyByteArray1);
        byte[] hash = new byte[64];
        hash = b.doFinal();
        Assert.assertTrue(this.helper.bytes2hex(hash).equals(this.helper.bytes2hex(exp)));
    }"
test.java.components.hash.algorithms.Blake2bTest.testZeroes,"    public void testZeroes() {
        byte[] anyByteArray1 = this.helper.hex2bytes(this.zeroes);
        byte[] exp = this.helper.hex2bytes(this.zeroesRes);
        Blake2b b = new Blake2b();
        b.update(anyByteArray1);
        byte[] hash = new byte[64];
        hash = b.doFinal();
        Assert.assertTrue(this.helper.bytes2hex(hash).equals(this.helper.bytes2hex(exp)));
    }"
test.java.components.hash.algorithms.Blake2bTest.testZeroes2,"    public void testZeroes2() {
        byte[] anyByteArray1 = this.helper.hex2bytes(this.zeroes2);
        byte[] exp = this.helper.hex2bytes(this.zeroesRes2);
        Blake2b b = new Blake2b();
        b.update(anyByteArray1);
        byte[] hash = new byte[64];
        hash = b.doFinal();
        Assert.assertTrue(this.helper.bytes2hex(hash).equals(this.helper.bytes2hex(exp)));
    }"
test.java.components.hash.algorithms.Blake2bTest.testAllVectors,"    public void testAllVectors() {
        JSONArray jsonObj = this.jsonParser(fileBlake2b);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            String in = inputs.getString(""in"");
            String k = inputs.getString(""key"");
            String res = outputs.getString(""res"");
            byte[] input = this.helper.hex2bytes(in);
            byte[] key = this.helper.hex2bytes(k);
            byte[] hash = this.helper.hex2bytes(res);
            Blake2b b = new Blake2b(key);
            b.update(input);
            byte[] output = new byte[64];
            output = b.doFinal();
            Assert.assertTrue(this.helper.bytes2hex(hash).equals(this.helper.bytes2hex(output)));
            ++i;
        }
    }"
test.java.components.hash.algorithms.Blake2bTest.testOutputLength1,"    public void testOutputLength1() {
        byte[] anyByteArray1 = this.helper.hex2bytes(this.input1);
        byte[] keyInBytes = this.helper.hex2bytes(this.key);
        Blake2b b = new Blake2b(keyInBytes);
        b.update(anyByteArray1);
        byte[] hash = new byte[64];
        hash = b.doFinal();
        Assert.assertTrue(hash.length == b.getOutputSize());
    }"
test.java.components.hash.algorithms.Blake2bTest.testOutputLength2,"    public void testOutputLength2() {
        byte[] anyByteArray1 = this.helper.hex2bytes(this.input1);
        Blake2b b = new Blake2b();
        b.update(anyByteArray1);
        byte[] hash = new byte[64];
        hash = b.doFinal();
        Assert.assertTrue(hash.length == b.getOutputSize());
    }"
test.java.components.hash.algorithms.Blake2bTest.testOutputLength3,"    public void testOutputLength3() {
        Blake2b b = new Blake2b();
        byte[] hash = new byte[64];
        hash = b.doFinal();
        Assert.assertTrue(hash.length == b.getOutputSize());
    }"
test.java.components.hash.algorithms.Blake2bTest.testBlake2bConstructor,"    public void testBlake2bConstructor() {
        byte[] key = new byte[]{};
        byte[] _salt = new byte[16];
        int _digestLength = 1;
        byte[] _personalization = new byte[16];
        new Blake2b(key, _digestLength, _salt, _personalization);
        byte[] act = new byte[]{};
        byte[] exp = new byte[]{};
        Assert.assertArrayEquals(exp, act);
    }"
test.java.components.hash.algorithms.Blake2bTest.jsonParser,"    private JSONArray jsonParser(File f) {
        String all = """";
        try {
            String line;
            BufferedReader br = new BufferedReader(new FileReader(f));
            while ((line = br.readLine()) != null) {
                all = String.valueOf(all) + line;
            }
        }
        catch (Exception exception) {
            // empty catch block
        }
        return new JSONArray(all);
    }"
test.java.components.graph.algorithms.index.IndexSBRGTest.testIndexing,"    public void testIndexing() {
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileSbrgIndex);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            long index = inputs.getLong(""index"");
            int g = inputs.getInt(""g"");
            int c = inputs.getInt(""c"");
            long exp = outputs.getLong(""res"");
            IndexGRG idx = new IndexGRG(c);
            long act = idx.getIndex(index, g);
            Assert.assertEquals(exp, act);
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexSBRGTest.testGrgAny,"    public void testGrgAny() {
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileSbrgAny);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int garlic = inputs.getInt(""garlic"");
            String state = inputs.getString(""state"");
            int lambda = inputs.getInt(""lambda"");
            int c = inputs.getInt(""c"");
            GenericGraph graph = new GenericGraph();
            Blake2b h = new Blake2b();
            Blake2b_1 hPrime = new Blake2b_1();
            IndexSBRG idx = new IndexSBRG(c);
            graph.setH(h);
            graph.setHPrime(hPrime);
            graph.setIndexing(idx);
            byte[] stateArr = this.helper.hex2bytes(state);
            byte[][] twoDimStateArr = this.helper.oneDimByteArrToTwoDim(stateArr, 64);
            String res = outputs.getString(""res"");
            byte[][] graphOutput = graph.graph(garlic, twoDimStateArr, lambda);
            byte[] output = this.helper.twoDimByteArrayToOne(graphOutput);
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexSBRGTest.testGrgAnyFull,"    public void testGrgAnyFull() {
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileSbrgAnyFull);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int garlic = inputs.getInt(""garlic"");
            String state = inputs.getString(""state"");
            int lambda = inputs.getInt(""lambda"");
            int c = inputs.getInt(""c"");
            GenericGraph graph = new GenericGraph();
            Blake2b h = new Blake2b();
            Blake2b hPrime = new Blake2b();
            IndexSBRG idx = new IndexSBRG(c);
            graph.setH(h);
            graph.setHPrime(hPrime);
            graph.setIndexing(idx);
            byte[] stateArr = this.helper.hex2bytes(state);
            byte[][] twoDimStateArr = this.helper.oneDimByteArrToTwoDim(stateArr, 64);
            String res = outputs.getString(""res"");
            byte[][] graphOutput = graph.graph(garlic, twoDimStateArr, lambda);
            byte[] output = this.helper.twoDimByteArrayToOne(graphOutput);
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexSBRGTest.testIndexSBRG0,"    public void testIndexSBRG0() {
        int inpint = 0;
        long inplong = 0L;
        IndexSBRG idx = new IndexSBRG(2);
        long actual = idx.getIndex(inplong, inpint);
        long expected = 0L;
        Assert.assertEquals(expected, actual);
    }"
test.java.components.graph.algorithms.index.IndexSBRGTest.testIndexSBRG1,"    public void testIndexSBRG1() {
        int input1 = 0;
        int input2 = 0;
        int input3 = 0;
        IndexSBRG idx = new IndexSBRG(2);
        long actual = idx.getIndex(input1, input2, input3);
        long expected = 0L;
        Assert.assertEquals(expected, actual);
    }"
test.java.components.graph.algorithms.index.IndexSBRGTest.testIndexSBRG2,"    public void testIndexSBRG2() {
        long input1 = 0L;
        long input2 = 0L;
        int input3 = 0;
        IndexSBRG idx = new IndexSBRG(2);
        long actual = idx.getIndex(input1, input2, input3);
        long expected = 0L;
        Assert.assertEquals(expected, actual);
    }
"
test.java.components.graph.algorithms.index.IndexBRGTest.testBRGAny,"    public void testBRGAny() {
        GenericGraph graph = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        Blake2b h = new Blake2b();
        Blake2b_1 hPrime = new Blake2b_1();
        graph.setH(h);
        graph.setHPrime(hPrime);
        graph.setIndexing(idx);
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileBrgAny);
        int i = 0;
        while (i < jsonObj.length()) {
            hPrime.reset();
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int garlic = inputs.getInt(""garlic"");
            String state = inputs.getString(""state"");
            int lambda = inputs.getInt(""lambda"");
            byte[] stateArr = this.helper.hex2bytes(state);
            byte[][] twoDimStateArr = this.helper.oneDimByteArrToTwoDim(stateArr, 64);
            String res = outputs.getString(""res"");
            byte[][] graphOutput = graph.graph(garlic, twoDimStateArr, lambda);
            byte[] output = this.helper.twoDimByteArrayToOne(graphOutput);
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexBRGTest.testBRGAnyFull,"    public void testBRGAnyFull() {
        GenericGraph graph = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        graph.setH(h);
        graph.setHPrime(hPrime);
        graph.setIndexing(idx);
        JSONArray jsonObj = this.helper.jsonParserArr(this.filebrgAnyFull);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int garlic = inputs.getInt(""garlic"");
            String state = inputs.getString(""state"");
            int lambda = inputs.getInt(""lambda"");
            byte[] stateArr = this.helper.hex2bytes(state);
            byte[][] twoDimStateArr = this.helper.oneDimByteArrToTwoDim(stateArr, 64);
            String res = outputs.getString(""res"");
            byte[][] graphOutput = graph.graph(garlic, twoDimStateArr, lambda);
            byte[] output = this.helper.twoDimByteArrayToOne(graphOutput);
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexBRGTest.testBRGIndex,"    public void testBRGIndex() {
        JSONArray jsonObj = this.helper.jsonParserArr(this.filebrgIndex);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int index = inputs.getInt(""index"");
            int g = inputs.getInt(""g"");
            int exp = outputs.getInt(""res"");
            int act = this.idxBrg.getIndex(index, g);
            Assert.assertEquals(exp, act);
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexBRGTest.test,"    public void test() {
        Assert.assertEquals(12L, this.idxBrg.getIndex(3, 4));
        Assert.assertEquals(0L, this.idxBrg.getIndex(0, 4));
        Assert.assertEquals(1L, this.idxBrg.getIndex(1, 1));
        Assert.assertEquals(15L, this.idxBrg.getIndex(15, 4));
        Assert.assertEquals(1L, this.idxBrg.getIndex(8, 4));
        Assert.assertEquals(4L, this.idxBrg.getIndex(4, 5));
        Assert.assertEquals(86L, this.idxBrg.getIndex(53, 7));
        Assert.assertEquals(2688L, this.idxBrg.getIndex(42, 13));
        Assert.assertEquals(12L, this.idxBrg.getIndex(3L, 4));
        Assert.assertEquals(0L, this.idxBrg.getIndex(0L, 4));
        Assert.assertEquals(1L, this.idxBrg.getIndex(1L, 1));
        Assert.assertEquals(15L, this.idxBrg.getIndex(15L, 4));
        Assert.assertEquals(1L, this.idxBrg.getIndex(8L, 4));
        Assert.assertEquals(4L, this.idxBrg.getIndex(4L, 5));
        Assert.assertEquals(86L, this.idxBrg.getIndex(53L, 7));
        Assert.assertEquals(2688L, this.idxBrg.getIndex(42L, 13));
    }"
test.java.components.graph.algorithms.index.IndexBRGTest.testIndexBRG1,"    public void testIndexBRG1() {
        int input1 = 0;
        int input2 = 0;
        int input3 = 0;
        IndexBRG idx = new IndexBRG();
        long actual = idx.getIndex(input1, input2, input3);
        long expected = -1L;
        Assert.assertEquals(expected, actual);
    }"
test.java.components.graph.algorithms.index.IndexBRGTest.testIndexBRG2,"    public void testIndexBRG2() {
        long input1 = 0L;
        long input2 = 0L;
        int input3 = 0;
        IndexBRG idx = new IndexBRG();
        long actual = idx.getIndex(input1, input2, input3);
        long expected = -1L;
        Assert.assertEquals(expected, actual);
    }
"
test.java.components.graph.algorithms.index.IndexGRGTest.testIndexGRG,"    public void testIndexGRG() {
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileGrgIndex);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            long index = inputs.getLong(""index"");
            int g = inputs.getInt(""g"");
            int l = inputs.getInt(""l"");
            long exp = outputs.getLong(""res"");
            IndexGRG idx = new IndexGRG(l);
            long act = idx.getIndex(index, g);
            Assert.assertEquals(exp, act);
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexGRGTest.testGrgAny,"    public void testGrgAny() {
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileGrgAny);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int garlic = inputs.getInt(""garlic"");
            String state = inputs.getString(""state"");
            int lambda = inputs.getInt(""lambda"");
            int l = inputs.getInt(""l"");
            GenericGraph graph = new GenericGraph();
            Blake2b h = new Blake2b();
            Blake2b_1 hPrime = new Blake2b_1();
            IndexGRG idx = new IndexGRG(l);
            graph.setH(h);
            graph.setHPrime(hPrime);
            graph.setIndexing(idx);
            byte[] stateArr = this.helper.hex2bytes(state);
            byte[][] twoDimStateArr = this.helper.oneDimByteArrToTwoDim(stateArr, 64);
            String res = outputs.getString(""res"");
            byte[][] graphOutput = graph.graph(garlic, twoDimStateArr, lambda);
            byte[] output = this.helper.twoDimByteArrayToOne(graphOutput);
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexGRGTest.testGrgAnyFull,"    public void testGrgAnyFull() {
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileGrgAnyFull);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int garlic = inputs.getInt(""garlic"");
            String state = inputs.getString(""state"");
            int lambda = inputs.getInt(""lambda"");
            int l = inputs.getInt(""l"");
            GenericGraph graph = new GenericGraph();
            Blake2b h = new Blake2b();
            Blake2b hPrime = new Blake2b();
            IndexGRG idx = new IndexGRG(l);
            graph.setH(h);
            graph.setHPrime(hPrime);
            graph.setIndexing(idx);
            byte[] stateArr = this.helper.hex2bytes(state);
            byte[][] twoDimStateArr = this.helper.oneDimByteArrToTwoDim(stateArr, 64);
            String res = outputs.getString(""res"");
            byte[][] graphOutput = graph.graph(garlic, twoDimStateArr, lambda);
            byte[] output = this.helper.twoDimByteArrayToOne(graphOutput);
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexGRGTest.testIndexGRG1,"    public void testIndexGRG1() {
        int input1 = 0;
        int input2 = 0;
        int input3 = 0;
        IndexGRG idx = new IndexGRG(2);
        long actual = idx.getIndex(input1, input2, input3);
        long expected = -1L;
        Assert.assertEquals(expected, actual);
    }"
test.java.components.graph.algorithms.index.IndexGRGTest.testIndexGRG2,"    public void testIndexGRG2() {
        long input1 = 0L;
        long input2 = 0L;
        int input3 = 0;
        IndexGRG idx = new IndexGRG(2);
        long actual = idx.getIndex(input1, input2, input3);
        long expected = -1L;
        Assert.assertEquals(expected, actual);
    }
"
test.java.components.graph.algorithms.index.IndexDBGTest.testDbhAny,"    public void testDbhAny() {
        DoubleButterflyGraph graph = new DoubleButterflyGraph();
        Blake2b h = new Blake2b();
        Blake2b_1 hPrime = new Blake2b_1();
        IndexDBG idx = new IndexDBG();
        graph.setH(h);
        graph.setHPrime(hPrime);
        graph.setIndexing(idx);
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileDbhAny);
        int i = 0;
        while (i < jsonObj.length()) {
            hPrime.reset();
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int garlic = inputs.getInt(""garlic"");
            String state = inputs.getString(""state"");
            int lambda = inputs.getInt(""lambda"");
            byte[] stateArr = this.helper.hex2bytes(state);
            byte[][] twoDimStateArr = this.helper.oneDimByteArrToTwoDim(stateArr, 64);
            String res = outputs.getString(""res"");
            byte[][] graphOutput = graph.graph(garlic, twoDimStateArr, lambda);
            byte[] output = this.helper.twoDimByteArrayToOne(graphOutput);
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexDBGTest.testDbhAnyFull,"    public void testDbhAnyFull() {
        DoubleButterflyGraph graph = new DoubleButterflyGraph();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        IndexDBG idx = new IndexDBG();
        graph.setH(h);
        graph.setHPrime(hPrime);
        graph.setIndexing(idx);
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileDbhAnyFull);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int garlic = inputs.getInt(""garlic"");
            String state = inputs.getString(""state"");
            int lambda = inputs.getInt(""lambda"");
            byte[] stateArr = this.helper.hex2bytes(state);
            byte[][] twoDimStateArr = this.helper.oneDimByteArrToTwoDim(stateArr, 64);
            String res = outputs.getString(""res"");
            byte[][] graphOutput = graph.graph(garlic, twoDimStateArr, lambda);
            byte[] output = this.helper.twoDimByteArrayToOne(graphOutput);
            Assert.assertTrue(res.equals(this.helper.bytes2hex(output).toLowerCase()));
            ++i;
        }
    }"
test.java.components.graph.algorithms.index.IndexDBGTest.testDBHIndexing,"    public void testDBHIndexing() {
        IndexDBG idx = new IndexDBG();
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileDbhIndex);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            int g = inputs.getInt(""g"");
            int j = inputs.getInt(""j"");
            int i_in = inputs.getInt(""i"");
            long exp = outputs.getLong(""res"");
            long act = idx.getIndex(g, j, i_in);
            Assert.assertEquals(exp, act);
            ++i;
        }
    }
"
test.java.components.phi.algorithms.CatenaPhiTest.test,"    public void test() {
        Assert.assertTrue(true);
    }
"
test.java.components.phi.algorithms.index.LSBIndexTest.test,"    public void test() {
        LSBIndex idx = new LSBIndex();
        JSONArray jsonObj = this.helper.jsonParserArr(this.fileLSBIndex);
        int i = 0;
        while (i < jsonObj.length()) {
            JSONObject o = (JSONObject)jsonObj.get(i);
            JSONObject inputs = o.getJSONObject(""inputs"");
            JSONObject outputs = o.getJSONObject(""outputs"");
            String state = inputs.getString(""state"");
            int numBits = inputs.getInt(""num_bits"");
            byte[] stateArr = this.helper.hex2bytes(state);
            int expRes = outputs.getInt(""res"");
            int actRes = idx.getLsbIndex(stateArr, numBits);
            Assert.assertEquals(expRes, actRes);
            ++i;
        }
    }
"
test.java.performance.ButterflyTest.testButterfly10x,"    public void testButterfly10x() {
        DefaultInstances instance = new DefaultInstances();
        Catena c = instance.initButterfly();
        Helper helper = new Helper();
        byte[] pwd = helper.hex2bytes(""012345"");
        byte[] salt = helper.hex2bytes(""6789ab"");
        byte[] gamma = helper.hex2bytes(""6789ab"");
        byte[] aData = helper.hex2bytes(""000000"");
        int outputLength = 64;
        long start = System.currentTimeMillis();
        long current = 0L;
        int i = 0;
        while (i < 10) {
            c.catena(pwd, salt, aData, gamma, outputLength);
            current = System.currentTimeMillis();
            System.out.println(""Time used for Butterfly "" + i + "" times: "" + (current - start));
            start = current;
            ++i;
        }
        Assert.assertTrue(true);
    }
"
test.java.performance.DragonflyFullTest.testDragonflyFull10x,"    public void testDragonflyFull10x() {
        DefaultInstances instance = new DefaultInstances();
        Catena c = instance.initDragonflyFull();
        Helper helper = new Helper();
        byte[] pwd = helper.hex2bytes(""012345"");
        byte[] salt = helper.hex2bytes(""6789ab"");
        byte[] gamma = helper.hex2bytes(""6789ab"");
        byte[] aData = helper.hex2bytes(""000000"");
        int outputLength = 64;
        long start = System.currentTimeMillis();
        long current = 0L;
        int i = 0;
        while (i < 10) {
            c.catena(pwd, salt, aData, gamma, outputLength);
            current = System.currentTimeMillis();
            System.out.println(""Time used for Dragonfly Full "" + i + "" times: "" + (current - start));
            start = current;
            ++i;
        }
        Assert.assertTrue(true);
    }
"
test.java.performance.ButterflyFullTest.testButterflyFull10x,"    public void testButterflyFull10x() {
        DefaultInstances instance = new DefaultInstances();
        Catena c = instance.initButterflyFull();
        Helper helper = new Helper();
        byte[] pwd = helper.hex2bytes(""012345"");
        byte[] salt = helper.hex2bytes(""6789ab"");
        byte[] gamma = helper.hex2bytes(""6789ab"");
        byte[] aData = helper.hex2bytes(""000000"");
        int outputLength = 64;
        long start = System.currentTimeMillis();
        long current = 0L;
        int i = 0;
        while (i < 10) {
            c.catena(pwd, salt, aData, gamma, outputLength);
            current = System.currentTimeMillis();
            System.out.println(""Time used for Butterfly Full "" + i + "" times: "" + (current - start));
            start = current;
            ++i;
        }
        Assert.assertTrue(true);
    }
"
test.java.performance.DragonflyTest.testDragonfly10x,"    public void testDragonfly10x() {
        DefaultInstances instance = new DefaultInstances();
        Catena c = instance.initDragonfly();
        Helper helper = new Helper();
        byte[] pwd = helper.hex2bytes(""012345"");
        byte[] salt = helper.hex2bytes(""6789ab"");
        byte[] gamma = helper.hex2bytes(""6789ab"");
        byte[] aData = helper.hex2bytes(""000000"");
        int outputLength = 64;
        long start = System.currentTimeMillis();
        long current = 0L;
        int i = 0;
        while (i < 10) {
            c.catena(pwd, salt, aData, gamma, outputLength);
            current = System.currentTimeMillis();
            System.out.println(""Time used for Dragonfly "" + i + "" times: "" + (current - start));
            start = current;
            ++i;
        }
        Assert.assertTrue(true);
    }
"
junit.textui.TestRunner.run,"    public static void run(Class<? extends TestCase> testClass) {
        TestRunner.run(new TestSuite((Class<?>)testClass));
    }"
junit.textui.TestRunner.run,"    public static TestResult run(Test test) {
        TestRunner runner = new TestRunner();
        return runner.doRun(test);
    }"
junit.textui.TestRunner.runAndWait,"    public static void runAndWait(Test suite) {
        TestRunner aTestRunner = new TestRunner();
        aTestRunner.doRun(suite, true);
    }"
junit.textui.TestRunner.testFailed,"    public void testFailed(int status, Test test, Throwable t) {
    }"
junit.textui.TestRunner.testStarted,"    public void testStarted(String testName) {
    }"
junit.textui.TestRunner.testEnded,"    public void testEnded(String testName) {
    }"
junit.textui.TestRunner.createTestResult,"    protected TestResult createTestResult() {
        return new TestResult();
    }"
junit.textui.TestRunner.doRun,"    public TestResult doRun(Test test) {
        return this.doRun(test, false);
    }"
junit.textui.TestRunner.doRun,"    public TestResult doRun(Test suite, boolean wait) {
        TestResult result = this.createTestResult();
        result.addListener(this.fPrinter);
        long startTime = System.currentTimeMillis();
        suite.run(result);
        long endTime = System.currentTimeMillis();
        long runTime = endTime - startTime;
        this.fPrinter.print(result, runTime);
        this.pause(wait);
        return result;
    }"
junit.textui.TestRunner.pause,"    protected void pause(boolean wait) {
        if (!wait) {
            return;
        }
        this.fPrinter.printWaitPrompt();
        try {
            System.in.read();
        }
        catch (Exception exception) {
            // empty catch block
        }
    }"
junit.textui.TestRunner.main,"    public static void main(String[] args) {
        TestRunner aTestRunner = new TestRunner();
        try {
            TestResult r = aTestRunner.start(args);
            if (!r.wasSuccessful()) {
                System.exit(1);
            }
            System.exit(0);
        }
        catch (Exception e) {
            System.err.println(e.getMessage());
            System.exit(2);
        }
    }"
junit.textui.TestRunner.start,"    public TestResult start(String[] args) throws Exception {
        String testCase = """";
        String method = """";
        boolean wait = false;
        for (int i = 0; i < args.length; ++i) {
            if (args[i].equals(""-wait"")) {
                wait = true;
                continue;
            }
            if (args[i].equals(""-c"")) {
                testCase = this.extractClassName(args[++i]);
                continue;
            }
            if (args[i].equals(""-m"")) {
                String arg = args[++i];
                int lastIndex = arg.lastIndexOf(46);
                testCase = arg.substring(0, lastIndex);
                method = arg.substring(lastIndex + 1);
                continue;
            }
            if (args[i].equals(""-v"")) {
                System.err.println(""JUnit "" + Version.id() + "" by Kent Beck and Erich Gamma"");
                continue;
            }
            testCase = args[i];
        }
        if (testCase.equals("""")) {
            throw new Exception(""Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class"");
        }
        try {
            if (!method.equals("""")) {
                return this.runSingleMethod(testCase, method, wait);
            }
            Test suite = this.getTest(testCase);
            return this.doRun(suite, wait);
        }
        catch (Exception e) {
            throw new Exception(""Could not create and run test suite: "" + e);
        }
    }"
junit.textui.TestRunner.runSingleMethod,"    protected TestResult runSingleMethod(String testCase, String method, boolean wait) throws Exception {
        Class<TestCase> testClass = this.loadSuiteClass(testCase).asSubclass(TestCase.class);
        Test test = TestSuite.createTest(testClass, method);
        return this.doRun(test, wait);
    }"
junit.textui.TestRunner.runFailed,"    protected void runFailed(String message) {
        System.err.println(message);
        System.exit(1);
    }"
junit.textui.TestRunner.setPrinter,"    public void setPrinter(ResultPrinter printer) {
        this.fPrinter = printer;
    }
"
junit.textui.ResultPrinter.print,"    synchronized void print(TestResult result, long runTime) {
        this.printHeader(runTime);
        this.printErrors(result);
        this.printFailures(result);
        this.printFooter(result);
    }"
junit.textui.ResultPrinter.printWaitPrompt,"    void printWaitPrompt() {
        this.getWriter().println();
        this.getWriter().println(""<RETURN> to continue"");
    }"
junit.textui.ResultPrinter.printHeader,"    protected void printHeader(long runTime) {
        this.getWriter().println();
        this.getWriter().println(""Time: "" + this.elapsedTimeAsString(runTime));
    }"
junit.textui.ResultPrinter.printErrors,"    protected void printErrors(TestResult result) {
        this.printDefects(result.errors(), result.errorCount(), ""error"");
    }"
junit.textui.ResultPrinter.printFailures,"    protected void printFailures(TestResult result) {
        this.printDefects(result.failures(), result.failureCount(), ""failure"");
    }"
junit.textui.ResultPrinter.printDefects,"    protected void printDefects(Enumeration<TestFailure> booBoos, int count, String type) {
        if (count == 0) {
            return;
        }
        if (count == 1) {
            this.getWriter().println(""There was "" + count + "" "" + type + "":"");
        } else {
            this.getWriter().println(""There were "" + count + "" "" + type + ""s:"");
        }
        int i = 1;
        while (booBoos.hasMoreElements()) {
            this.printDefect(booBoos.nextElement(), i);
            ++i;
        }
    }"
junit.textui.ResultPrinter.printDefect,"    public void printDefect(TestFailure booBoo, int count) {
        this.printDefectHeader(booBoo, count);
        this.printDefectTrace(booBoo);
    }"
junit.textui.ResultPrinter.printDefectHeader,"    protected void printDefectHeader(TestFailure booBoo, int count) {
        this.getWriter().print(count + "") "" + booBoo.failedTest());
    }"
junit.textui.ResultPrinter.printDefectTrace,"    protected void printDefectTrace(TestFailure booBoo) {
        this.getWriter().print(BaseTestRunner.getFilteredTrace(booBoo.trace()));
    }"
junit.textui.ResultPrinter.printFooter,"    protected void printFooter(TestResult result) {
        if (result.wasSuccessful()) {
            this.getWriter().println();
            this.getWriter().print(""OK"");
            this.getWriter().println("" ("" + result.runCount() + "" test"" + (result.runCount() == 1 ? """" : ""s"") + "")"");
        } else {
            this.getWriter().println();
            this.getWriter().println(""FAILURES!!!"");
            this.getWriter().println(""Tests run: "" + result.runCount() + "",  Failures: "" + result.failureCount() + "",  Errors: "" + result.errorCount());
        }
        this.getWriter().println();
    }"
junit.textui.ResultPrinter.elapsedTimeAsString,"    protected String elapsedTimeAsString(long runTime) {
        return NumberFormat.getInstance().format((double)runTime / 1000.0);
    }"
junit.textui.ResultPrinter.getWriter,"    public PrintStream getWriter() {
        return this.fWriter;
    }"
junit.textui.ResultPrinter.addError,"    public void addError(Test test, Throwable t) {
        this.getWriter().print(""E"");
    }"
junit.textui.ResultPrinter.addFailure,"    public void addFailure(Test test, AssertionFailedError t) {
        this.getWriter().print(""F"");
    }"
junit.textui.ResultPrinter.endTest,"    public void endTest(Test test) {
    }"
junit.textui.ResultPrinter.startTest,"    public void startTest(Test test) {
        this.getWriter().print(""."");
        if (this.fColumn++ >= 40) {
            this.getWriter().println();
            this.fColumn = 0;
        }
    }
"
junit.framework.ComparisonCompactor.compact,"    public String compact(String message) {
        if (this.fExpected == null || this.fActual == null || this.areStringsEqual()) {
            return Assert.format(message, this.fExpected, this.fActual);
        }
        this.findCommonPrefix();
        this.findCommonSuffix();
        String expected = this.compactString(this.fExpected);
        String actual = this.compactString(this.fActual);
        return Assert.format(message, expected, actual);
    }"
junit.framework.ComparisonCompactor.compactString,"    private String compactString(String source) {
        String result = DELTA_START + source.substring(this.fPrefix, source.length() - this.fSuffix + 1) + DELTA_END;
        if (this.fPrefix > 0) {
            result = this.computeCommonPrefix() + result;
        }
        if (this.fSuffix > 0) {
            result = result + this.computeCommonSuffix();
        }
        return result;
    }"
junit.framework.ComparisonCompactor.findCommonPrefix,"    private void findCommonPrefix() {
        this.fPrefix = 0;
        int end = Math.min(this.fExpected.length(), this.fActual.length());
        while (this.fPrefix < end && this.fExpected.charAt(this.fPrefix) == this.fActual.charAt(this.fPrefix)) {
            ++this.fPrefix;
        }
    }"
junit.framework.ComparisonCompactor.findCommonSuffix,"    private void findCommonSuffix() {
        int expectedSuffix = this.fExpected.length() - 1;
        for (int actualSuffix = this.fActual.length() - 1; actualSuffix >= this.fPrefix && expectedSuffix >= this.fPrefix && this.fExpected.charAt(expectedSuffix) == this.fActual.charAt(actualSuffix); --actualSuffix, --expectedSuffix) {
        }
        this.fSuffix = this.fExpected.length() - expectedSuffix;
    }"
junit.framework.ComparisonCompactor.computeCommonPrefix,"    private String computeCommonPrefix() {
        return (this.fPrefix > this.fContextLength ? ELLIPSIS : """") + this.fExpected.substring(Math.max(0, this.fPrefix - this.fContextLength), this.fPrefix);
    }"
junit.framework.ComparisonCompactor.computeCommonSuffix,"    private String computeCommonSuffix() {
        int end = Math.min(this.fExpected.length() - this.fSuffix + 1 + this.fContextLength, this.fExpected.length());
        return this.fExpected.substring(this.fExpected.length() - this.fSuffix + 1, end) + (this.fExpected.length() - this.fSuffix + 1 < this.fExpected.length() - this.fContextLength ? ELLIPSIS : """");
    }"
junit.framework.ComparisonCompactor.areStringsEqual,"    private boolean areStringsEqual() {
        return this.fExpected.equals(this.fActual);
    }
"
junit.framework.JUnit4TestCaseFacade.toString,"    public String toString() {
        return this.getDescription().toString();
    }"
junit.framework.JUnit4TestCaseFacade.countTestCases,"    public int countTestCases() {
        return 1;
    }"
junit.framework.JUnit4TestCaseFacade.run,"    public void run(TestResult result) {
        throw new RuntimeException(""This test stub created only for informational purposes."");
    }"
junit.framework.JUnit4TestCaseFacade.getDescription,"    public Description getDescription() {
        return this.fDescription;
    }
"
junit.framework.JUnit4TestAdapter.countTestCases,"    public int countTestCases() {
        return this.fRunner.testCount();
    }"
junit.framework.JUnit4TestAdapter.run,"    public void run(TestResult result) {
        this.fRunner.run(this.fCache.getNotifier(result, this));
    }"
junit.framework.JUnit4TestAdapter.getTests,"    public List<Test> getTests() {
        return this.fCache.asTestList(this.getDescription());
    }"
junit.framework.JUnit4TestAdapter.getTestClass,"    public Class<?> getTestClass() {
        return this.fNewTestClass;
    }"
junit.framework.JUnit4TestAdapter.getDescription,"    public Description getDescription() {
        Description description = this.fRunner.getDescription();
        return this.removeIgnored(description);
    }"
junit.framework.JUnit4TestAdapter.removeIgnored,"    private Description removeIgnored(Description description) {
        if (this.isIgnored(description)) {
            return Description.EMPTY;
        }
        Description result = description.childlessCopy();
        for (Description each : description.getChildren()) {
            Description child = this.removeIgnored(each);
            if (child.isEmpty()) continue;
            result.addChild(child);
        }
        return result;
    }"
junit.framework.JUnit4TestAdapter.isIgnored,"    private boolean isIgnored(Description description) {
        return description.getAnnotation(Ignore.class) != null;
    }"
junit.framework.JUnit4TestAdapter.toString,"    public String toString() {
        return this.fNewTestClass.getName();
    }"
junit.framework.JUnit4TestAdapter.filter,"    public void filter(Filter filter) throws NoTestsRemainException {
        filter.apply(this.fRunner);
    }"
junit.framework.JUnit4TestAdapter.sort,"    public void sort(Sorter sorter) {
        sorter.apply(this.fRunner);
    }
"
junit.framework.TestListener.addError,
junit.framework.TestListener.addFailure,
junit.framework.TestListener.endTest,
junit.framework.TestListener.startTest,"    public void startTest(Test var1);
"
junit.framework.ComparisonFailure.getMessage,"    public String getMessage() {
        return new ComparisonCompactor(20, this.fExpected, this.fActual).compact(super.getMessage());
    }"
junit.framework.ComparisonFailure.getActual,"    public String getActual() {
        return this.fActual;
    }"
junit.framework.ComparisonFailure.getExpected,"    public String getExpected() {
        return this.fExpected;
    }
"
junit.framework.TestFailure.failedTest,"    public Test failedTest() {
        return this.fFailedTest;
    }"
junit.framework.TestFailure.thrownException,"    public Throwable thrownException() {
        return this.fThrownException;
    }"
junit.framework.TestFailure.toString,"    public String toString() {
        StringBuffer buffer = new StringBuffer();
        buffer.append(this.fFailedTest + "": "" + this.fThrownException.getMessage());
        return buffer.toString();
    }"
junit.framework.TestFailure.trace,"    public String trace() {
        StringWriter stringWriter = new StringWriter();
        PrintWriter writer = new PrintWriter(stringWriter);
        this.thrownException().printStackTrace(writer);
        StringBuffer buffer = stringWriter.getBuffer();
        return buffer.toString();
    }"
junit.framework.TestFailure.exceptionMessage,"    public String exceptionMessage() {
        return this.thrownException().getMessage();
    }"
junit.framework.TestFailure.isFailure,"    public boolean isFailure() {
        return this.thrownException() instanceof AssertionFailedError;
    }
"
junit.framework.Assert.assertTrue,"    public static void assertTrue(String message, boolean condition) {
        if (!condition) {
            Assert.fail(message);
        }
    }"
junit.framework.Assert.assertTrue,"    public static void assertTrue(boolean condition) {
        Assert.assertTrue(null, condition);
    }"
junit.framework.Assert.assertFalse,"    public static void assertFalse(String message, boolean condition) {
        Assert.assertTrue(message, !condition);
    }"
junit.framework.Assert.assertFalse,"    public static void assertFalse(boolean condition) {
        Assert.assertFalse(null, condition);
    }"
junit.framework.Assert.fail,"    public static void fail(String message) {
        throw new AssertionFailedError(message);
    }"
junit.framework.Assert.fail,"    public static void fail() {
        Assert.fail(null);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, Object expected, Object actual) {
        if (expected == null && actual == null) {
            return;
        }
        if (expected != null && expected.equals(actual)) {
            return;
        }
        Assert.failNotEquals(message, expected, actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(Object expected, Object actual) {
        Assert.assertEquals(null, expected, actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, String expected, String actual) {
        if (expected == null && actual == null) {
            return;
        }
        if (expected != null && expected.equals(actual)) {
            return;
        }
        throw new ComparisonFailure(message, expected, actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String expected, String actual) {
        Assert.assertEquals(null, expected, actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, double expected, double actual, double delta) {
        if (Double.compare(expected, actual) == 0) {
            return;
        }
        if (!(Math.abs(expected - actual) <= delta)) {
            Assert.failNotEquals(message, new Double(expected), new Double(actual));
        }
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(double expected, double actual, double delta) {
        Assert.assertEquals(null, expected, actual, delta);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, float expected, float actual, float delta) {
        if (Float.compare(expected, actual) == 0) {
            return;
        }
        if (!(Math.abs(expected - actual) <= delta)) {
            Assert.failNotEquals(message, new Float(expected), new Float(actual));
        }
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(float expected, float actual, float delta) {
        Assert.assertEquals(null, expected, actual, delta);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, long expected, long actual) {
        Assert.assertEquals(message, new Long(expected), new Long(actual));
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(long expected, long actual) {
        Assert.assertEquals(null, expected, actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, boolean expected, boolean actual) {
        Assert.assertEquals(message, (Object)expected, (Object)actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(boolean expected, boolean actual) {
        Assert.assertEquals(null, expected, actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, byte expected, byte actual) {
        Assert.assertEquals(message, new Byte(expected), new Byte(actual));
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(byte expected, byte actual) {
        Assert.assertEquals(null, expected, actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, char expected, char actual) {
        Assert.assertEquals(message, new Character(expected), new Character(actual));
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(char expected, char actual) {
        Assert.assertEquals(null, expected, actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, short expected, short actual) {
        Assert.assertEquals(message, new Short(expected), new Short(actual));
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(short expected, short actual) {
        Assert.assertEquals(null, expected, actual);
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(String message, int expected, int actual) {
        Assert.assertEquals(message, new Integer(expected), new Integer(actual));
    }"
junit.framework.Assert.assertEquals,"    public static void assertEquals(int expected, int actual) {
        Assert.assertEquals(null, expected, actual);
    }"
junit.framework.Assert.assertNotNull,"    public static void assertNotNull(Object object) {
        Assert.assertNotNull(null, object);
    }"
junit.framework.Assert.assertNotNull,"    public static void assertNotNull(String message, Object object) {
        Assert.assertTrue(message, object != null);
    }"
junit.framework.Assert.assertNull,"    public static void assertNull(Object object) {
        String message = ""Expected: <null> but was: "" + String.valueOf(object);
        Assert.assertNull(message, object);
    }"
junit.framework.Assert.assertNull,"    public static void assertNull(String message, Object object) {
        Assert.assertTrue(message, object == null);
    }"
junit.framework.Assert.assertSame,"    public static void assertSame(String message, Object expected, Object actual) {
        if (expected == actual) {
            return;
        }
        Assert.failNotSame(message, expected, actual);
    }"
junit.framework.Assert.assertSame,"    public static void assertSame(Object expected, Object actual) {
        Assert.assertSame(null, expected, actual);
    }"
junit.framework.Assert.assertNotSame,"    public static void assertNotSame(String message, Object expected, Object actual) {
        if (expected == actual) {
            Assert.failSame(message);
        }
    }"
junit.framework.Assert.assertNotSame,"    public static void assertNotSame(Object expected, Object actual) {
        Assert.assertNotSame(null, expected, actual);
    }"
junit.framework.Assert.failSame,"    public static void failSame(String message) {
        String formatted = """";
        if (message != null) {
            formatted = message + "" "";
        }
        Assert.fail(formatted + ""expected not same"");
    }"
junit.framework.Assert.failNotSame,"    public static void failNotSame(String message, Object expected, Object actual) {
        String formatted = """";
        if (message != null) {
            formatted = message + "" "";
        }
        Assert.fail(formatted + ""expected same:<"" + expected + ""> was not:<"" + actual + "">"");
    }"
junit.framework.Assert.failNotEquals,"    public static void failNotEquals(String message, Object expected, Object actual) {
        Assert.fail(Assert.format(message, expected, actual));
    }"
junit.framework.Assert.format,"    public static String format(String message, Object expected, Object actual) {
        String formatted = """";
        if (message != null) {
            formatted = message + "" "";
        }
        return formatted + ""expected:<"" + expected + ""> but was:<"" + actual + "">"";
    }
"
junit.framework.Test.countTestCases,
junit.framework.Test.run,"    public void run(TestResult var1);
"
junit.framework.Protectable.protect,"    public void protect() throws Throwable;
"
junit.framework.TestResult.addError,"    public synchronized void addError(Test test, Throwable t) {
        this.fErrors.add(new TestFailure(test, t));
        for (TestListener each : this.cloneListeners()) {
            each.addError(test, t);
        }
    }"
junit.framework.TestResult.addFailure,"    public synchronized void addFailure(Test test, AssertionFailedError t) {
        this.fFailures.add(new TestFailure(test, (Throwable)((Object)t)));
        for (TestListener each : this.cloneListeners()) {
            each.addFailure(test, t);
        }
    }"
junit.framework.TestResult.addListener,"    public synchronized void addListener(TestListener listener) {
        this.fListeners.add(listener);
    }"
junit.framework.TestResult.removeListener,"    public synchronized void removeListener(TestListener listener) {
        this.fListeners.remove(listener);
    }"
junit.framework.TestResult.cloneListeners,"    private synchronized List<TestListener> cloneListeners() {
        ArrayList<TestListener> result = new ArrayList<TestListener>();
        result.addAll(this.fListeners);
        return result;
    }"
junit.framework.TestResult.endTest,"    public void endTest(Test test) {
        for (TestListener each : this.cloneListeners()) {
            each.endTest(test);
        }
    }"
junit.framework.TestResult.errorCount,"    public synchronized int errorCount() {
        return this.fErrors.size();
    }"
junit.framework.TestResult.errors,"    public synchronized Enumeration<TestFailure> errors() {
        return Collections.enumeration(this.fErrors);
    }"
junit.framework.TestResult.failureCount,"    public synchronized int failureCount() {
        return this.fFailures.size();
    }"
junit.framework.TestResult.failures,"    public synchronized Enumeration<TestFailure> failures() {
        return Collections.enumeration(this.fFailures);
    }"
junit.framework.TestResult.run,"    protected void run(final TestCase test) {
        this.startTest(test);
        Protectable p = new Protectable(){

            public void protect() throws Throwable {
                test.runBare();
            }
        };
        this.runProtected(test, p);
        this.endTest(test);
    }"
junit.framework.TestResult.protect,"            public void protect() throws Throwable {
                test.runBare();
            }
        "
junit.framework.TestResult.runCount,"    public synchronized int runCount() {
        return this.fRunTests;
    }"
junit.framework.TestResult.runProtected,"    public void runProtected(Test test, Protectable p) {
        try {
            p.protect();
        }
        catch (AssertionFailedError e) {
            this.addFailure(test, e);
        }
        catch (ThreadDeath e) {
            throw e;
        }
        catch (Throwable e) {
            this.addError(test, e);
        }
    }"
junit.framework.TestResult.shouldStop,"    public synchronized boolean shouldStop() {
        return this.fStop;
    }"
junit.framework.TestResult.startTest,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public void startTest(Test test) {
        int count = test.countTestCases();
        TestResult testResult = this;
        synchronized (testResult) {
            this.fRunTests += count;
        }
        for (TestListener each : this.cloneListeners()) {
            each.startTest(test);
        }
    }"
junit.framework.TestResult.stop,"    public synchronized void stop() {
        this.fStop = true;
    }"
junit.framework.TestResult.wasSuccessful,"    public synchronized boolean wasSuccessful() {
        return this.failureCount() == 0 && this.errorCount() == 0;
    }
"
junit.framework.TestCase.countTestCases,"    public int countTestCases() {
        return 1;
    }"
junit.framework.TestCase.createResult,"    protected TestResult createResult() {
        return new TestResult();
    }"
junit.framework.TestCase.run,"    public TestResult run() {
        TestResult result = this.createResult();
        this.run(result);
        return result;
    }"
junit.framework.TestCase.run,"    public void run(TestResult result) {
        result.run(this);
    }"
junit.framework.TestCase.runBare,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public void runBare() throws Throwable {
        Throwable exception = null;
        this.setUp();
        try {
            this.runTest();
        }
        catch (Throwable running) {
            exception = running;
        }
        finally {
            block13: {
                try {
                    this.tearDown();
                }
                catch (Throwable tearingDown) {
                    if (exception != null) break block13;
                    exception = tearingDown;
                }
            }
        }
        if (exception != null) {
            throw exception;
        }
    }"
junit.framework.TestCase.runTest,"    protected void runTest() throws Throwable {
        TestCase.assertNotNull(""TestCase.fName cannot be null"", this.fName);
        Method runMethod = null;
        try {
            runMethod = this.getClass().getMethod(this.fName, null);
        }
        catch (NoSuchMethodException e) {
            TestCase.fail(""Method \"""" + this.fName + ""\"" not found"");
        }
        if (!Modifier.isPublic(runMethod.getModifiers())) {
            TestCase.fail(""Method \"""" + this.fName + ""\"" should be public"");
        }
        try {
            runMethod.invoke(this, new Object[0]);
        }
        catch (InvocationTargetException e) {
            e.fillInStackTrace();
            throw e.getTargetException();
        }
        catch (IllegalAccessException e) {
            e.fillInStackTrace();
            throw e;
        }
    }"
junit.framework.TestCase.setUp,"    protected void setUp() throws Exception {
    }"
junit.framework.TestCase.tearDown,"    protected void tearDown() throws Exception {
    }"
junit.framework.TestCase.toString,"    public String toString() {
        return this.getName() + ""("" + this.getClass().getName() + "")"";
    }"
junit.framework.TestCase.getName,"    public String getName() {
        return this.fName;
    }"
junit.framework.TestCase.setName,"    public void setName(String name) {
        this.fName = name;
    }
"
junit.framework.JUnit4TestAdapterCache.getDefault,"    public static JUnit4TestAdapterCache getDefault() {
        return fInstance;
    }"
junit.framework.JUnit4TestAdapterCache.asTest,"    public Test asTest(Description description) {
        if (description.isSuite()) {
            return this.createTest(description);
        }
        if (!this.containsKey(description)) {
            this.put(description, this.createTest(description));
        }
        return (Test)this.get(description);
    }"
junit.framework.JUnit4TestAdapterCache.createTest,"    Test createTest(Description description) {
        if (description.isTest()) {
            return new JUnit4TestCaseFacade(description);
        }
        TestSuite suite = new TestSuite(description.getDisplayName());
        for (Description child : description.getChildren()) {
            suite.addTest(this.asTest(child));
        }
        return suite;
    }"
junit.framework.JUnit4TestAdapterCache.getNotifier,"    public RunNotifier getNotifier(final TestResult result, JUnit4TestAdapter adapter) {
        RunNotifier notifier = new RunNotifier();
        notifier.addListener(new RunListener(){

            public void testFailure(Failure failure) throws Exception {
                result.addError(JUnit4TestAdapterCache.this.asTest(failure.getDescription()), failure.getException());
            }

            public void testFinished(Description description) throws Exception {
                result.endTest(JUnit4TestAdapterCache.this.asTest(description));
            }

            public void testStarted(Description description) throws Exception {
                result.startTest(JUnit4TestAdapterCache.this.asTest(description));
            }
        });
        return notifier;
    }"
junit.framework.JUnit4TestAdapterCache.testFailure,"            public void testFailure(Failure failure) throws Exception {
                result.addError(JUnit4TestAdapterCache.this.asTest(failure.getDescription()), failure.getException());
            }"
junit.framework.JUnit4TestAdapterCache.testFinished,"            public void testFinished(Description description) throws Exception {
                result.endTest(JUnit4TestAdapterCache.this.asTest(description));
            }"
junit.framework.JUnit4TestAdapterCache.testStarted,"            public void testStarted(Description description) throws Exception {
                result.startTest(JUnit4TestAdapterCache.this.asTest(description));
            }
        "
junit.framework.JUnit4TestAdapterCache.asTestList,"    public List<Test> asTestList(Description description) {
        if (description.isTest()) {
            return Arrays.asList(this.asTest(description));
        }
        ArrayList<Test> returnThis = new ArrayList<Test>();
        for (Description child : description.getChildren()) {
            returnThis.add(this.asTest(child));
        }
        return returnThis;
    }
"
junit.runner.BaseTestRunner.startTest,"    public synchronized void startTest(Test test) {
        this.testStarted(test.toString());
    }"
junit.runner.BaseTestRunner.setPreferences,"    protected static void setPreferences(Properties preferences) {
        fPreferences = preferences;
    }"
junit.runner.BaseTestRunner.getPreferences,"    protected static Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties();
            fPreferences.put(""loading"", ""true"");
            fPreferences.put(""filterstack"", ""true"");
            BaseTestRunner.readPreferences();
        }
        return fPreferences;
    }"
junit.runner.BaseTestRunner.savePreferences,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public static void savePreferences() throws IOException {
        FileOutputStream fos = new FileOutputStream(BaseTestRunner.getPreferencesFile());
        try {
            BaseTestRunner.getPreferences().store(fos, """");
        }
        finally {
            fos.close();
        }
    }"
junit.runner.BaseTestRunner.setPreference,"    public static void setPreference(String key, String value) {
        BaseTestRunner.getPreferences().put(key, value);
    }"
junit.runner.BaseTestRunner.endTest,"    public synchronized void endTest(Test test) {
        this.testEnded(test.toString());
    }"
junit.runner.BaseTestRunner.addError,"    public synchronized void addError(Test test, Throwable t) {
        this.testFailed(1, test, t);
    }"
junit.runner.BaseTestRunner.addFailure,"    public synchronized void addFailure(Test test, AssertionFailedError t) {
        this.testFailed(2, test, (Throwable)((Object)t));
    }"
junit.runner.BaseTestRunner.testStarted,
junit.runner.BaseTestRunner.testEnded,
junit.runner.BaseTestRunner.testFailed,
junit.runner.BaseTestRunner.getTest,"    public Test getTest(String suiteClassName) {
        if (suiteClassName.length() <= 0) {
            this.clearStatus();
            return null;
        }
        Class<?> testClass = null;
        try {
            testClass = this.loadSuiteClass(suiteClassName);
        }
        catch (ClassNotFoundException e) {
            String clazz = e.getMessage();
            if (clazz == null) {
                clazz = suiteClassName;
            }
            this.runFailed(""Class not found \"""" + clazz + ""\"""");
            return null;
        }
        catch (Exception e) {
            this.runFailed(""Error: "" + e.toString());
            return null;
        }
        Method suiteMethod = null;
        try {
            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);
        }
        catch (Exception e) {
            this.clearStatus();
            return new TestSuite(testClass);
        }
        if (!Modifier.isStatic(suiteMethod.getModifiers())) {
            this.runFailed(""Suite() method must be static"");
            return null;
        }
        Test test = null;
        try {
            test = (Test)suiteMethod.invoke(null, new Class[0]);
            if (test == null) {
                return test;
            }
        }
        catch (InvocationTargetException e) {
            this.runFailed(""Failed to invoke suite():"" + e.getTargetException().toString());
            return null;
        }
        catch (IllegalAccessException e) {
            this.runFailed(""Failed to invoke suite():"" + e.toString());
            return null;
        }
        this.clearStatus();
        return test;
    }"
junit.runner.BaseTestRunner.elapsedTimeAsString,"    public String elapsedTimeAsString(long runTime) {
        return NumberFormat.getInstance().format((double)runTime / 1000.0);
    }"
junit.runner.BaseTestRunner.processArguments,"    protected String processArguments(String[] args) {
        String suiteName = null;
        for (int i = 0; i < args.length; ++i) {
            if (args[i].equals(""-noloading"")) {
                this.setLoading(false);
                continue;
            }
            if (args[i].equals(""-nofilterstack"")) {
                fgFilterStack = false;
                continue;
            }
            if (args[i].equals(""-c"")) {
                if (args.length > i + 1) {
                    suiteName = this.extractClassName(args[i + 1]);
                } else {
                    System.out.println(""Missing Test class name"");
                }
                ++i;
                continue;
            }
            suiteName = args[i];
        }
        return suiteName;
    }"
junit.runner.BaseTestRunner.setLoading,"    public void setLoading(boolean enable) {
        this.fLoading = enable;
    }"
junit.runner.BaseTestRunner.extractClassName,"    public String extractClassName(String className) {
        if (className.startsWith(""Default package for"")) {
            return className.substring(className.lastIndexOf(""."") + 1);
        }
        return className;
    }"
junit.runner.BaseTestRunner.truncate,"    public static String truncate(String s) {
        if (fgMaxMessageLength != -1 && s.length() > fgMaxMessageLength) {
            s = s.substring(0, fgMaxMessageLength) + ""..."";
        }
        return s;
    }"
junit.runner.BaseTestRunner.runFailed,
junit.runner.BaseTestRunner.loadSuiteClass,"    protected Class<?> loadSuiteClass(String suiteClassName) throws ClassNotFoundException {
        return Class.forName(suiteClassName);
    }"
junit.runner.BaseTestRunner.clearStatus,"    protected void clearStatus() {
    }"
junit.runner.BaseTestRunner.useReloadingTestSuiteLoader,"    protected boolean useReloadingTestSuiteLoader() {
        return BaseTestRunner.getPreference(""loading"").equals(""true"") && this.fLoading;
    }"
junit.runner.BaseTestRunner.getPreferencesFile,"    private static File getPreferencesFile() {
        String home = System.getProperty(""user.home"");
        return new File(home, ""junit.properties"");
    }"
junit.runner.BaseTestRunner.readPreferences,"    private static void readPreferences() {
        FileInputStream is = null;
        try {
            is = new FileInputStream(BaseTestRunner.getPreferencesFile());
            BaseTestRunner.setPreferences(new Properties(BaseTestRunner.getPreferences()));
            BaseTestRunner.getPreferences().load(is);
        }
        catch (IOException e) {
            try {
                if (is != null) {
                    ((InputStream)is).close();
                }
            }
            catch (IOException iOException) {
                // empty catch block
            }
        }
    }"
junit.runner.BaseTestRunner.getPreference,"    public static String getPreference(String key) {
        return BaseTestRunner.getPreferences().getProperty(key);
    }"
junit.runner.BaseTestRunner.getPreference,"    public static int getPreference(String key, int dflt) {
        String value = BaseTestRunner.getPreference(key);
        int intValue = dflt;
        if (value == null) {
            return intValue;
        }
        try {
            intValue = Integer.parseInt(value);
        }
        catch (NumberFormatException ne) {
            // empty catch block
        }
        return intValue;
    }"
junit.runner.BaseTestRunner.getFilteredTrace,"    public static String getFilteredTrace(Throwable t) {
        StringWriter stringWriter = new StringWriter();
        PrintWriter writer = new PrintWriter(stringWriter);
        t.printStackTrace(writer);
        StringBuffer buffer = stringWriter.getBuffer();
        String trace = buffer.toString();
        return BaseTestRunner.getFilteredTrace(trace);
    }"
junit.runner.BaseTestRunner.getFilteredTrace,"    public static String getFilteredTrace(String stack) {
        if (BaseTestRunner.showStackRaw()) {
            return stack;
        }
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        StringReader sr = new StringReader(stack);
        BufferedReader br = new BufferedReader(sr);
        try {
            String line;
            while ((line = br.readLine()) != null) {
                if (BaseTestRunner.filterLine(line)) continue;
                pw.println(line);
            }
        }
        catch (Exception IOException2) {
            return stack;
        }
        return sw.toString();
    }"
junit.runner.BaseTestRunner.showStackRaw,"    protected static boolean showStackRaw() {
        return !BaseTestRunner.getPreference(""filterstack"").equals(""true"") || !fgFilterStack;
    }"
junit.runner.BaseTestRunner.filterLine,"    static boolean filterLine(String line) {
        String[] patterns = new String[]{""junit.framework.TestCase"", ""junit.framework.TestResult"", ""junit.framework.TestSuite"", ""junit.framework.Assert."", ""junit.swingui.TestRunner"", ""junit.awtui.TestRunner"", ""junit.textui.TestRunner"", ""java.lang.reflect.Method.invoke(""};
        for (int i = 0; i < patterns.length; ++i) {
            if (line.indexOf(patterns[i]) <= 0) continue;
            return true;
        }
        return false;
    }"
junit.runner.TestRunListener.testRunStarted,
junit.runner.TestRunListener.testRunEnded,
junit.runner.TestRunListener.testRunStopped,
junit.runner.TestRunListener.testStarted,
junit.runner.TestRunListener.testEnded,
junit.runner.TestRunListener.testFailed,"    public void testFailed(int var1, String var2, String var3);
"
junit.runner.Version.id,"    public static String id() {
        return ""4.8.2"";
    }"
junit.runner.Version.main,"    public static void main(String[] args) {
        System.out.println(Version.id());
    }
"
junit.extensions.ActiveTestSuite.run,"    public void run(TestResult result) {
        this.fActiveTestDeathCount = 0;
        super.run(result);
        this.waitUntilFinished();
    }"
junit.extensions.ActiveTestSuite.runTest,"    public void runTest(final Test test, final TestResult result) {
        Thread t = new Thread(){

            /*
             * WARNING - Removed try catching itself - possible behaviour change.
             */
            public void run() {
                try {
                    test.run(result);
                }
                finally {
                    ActiveTestSuite.this.runFinished();
                }
            }
        };
        t.start();
    }"
junit.extensions.ActiveTestSuite.run,"* WARNING - Removed try catching itself - possible behaviour change.
*/
            public void run() {
                try {
                    test.run(result);
                }
                finally {
                    ActiveTestSuite.this.runFinished();
                }
            }
        "
junit.extensions.ActiveTestSuite.waitUntilFinished,"    synchronized void waitUntilFinished() {
        while (this.fActiveTestDeathCount < this.testCount()) {
            try {
                this.wait();
            }
            catch (InterruptedException e) {
                return;
            }
        }
    }"
junit.extensions.ActiveTestSuite.runFinished,"    public synchronized void runFinished() {
        ++this.fActiveTestDeathCount;
        this.notifyAll();
    }
"
junit.extensions.RepeatedTest.countTestCases,"    public int countTestCases() {
        return super.countTestCases() * this.fTimesRepeat;
    }"
junit.extensions.RepeatedTest.run,"    public void run(TestResult result) {
        for (int i = 0; i < this.fTimesRepeat && !result.shouldStop(); ++i) {
            super.run(result);
        }
    }"
junit.extensions.RepeatedTest.toString,"    public String toString() {
        return super.toString() + ""(repeated)"";
    }
"
junit.extensions.TestSetup.run,"    public void run(final TestResult result) {
        Protectable p = new Protectable(){

            public void protect() throws Exception {
                TestSetup.this.setUp();
                TestSetup.this.basicRun(result);
                TestSetup.this.tearDown();
            }
        };
        result.runProtected(this, p);
    }"
junit.extensions.TestSetup.protect,"            public void protect() throws Exception {
                TestSetup.this.setUp();
                TestSetup.this.basicRun(result);
                TestSetup.this.tearDown();
            }
        "
junit.extensions.TestSetup.setUp,"    protected void setUp() throws Exception {
    }"
junit.extensions.TestSetup.tearDown,"    protected void tearDown() throws Exception {
    }
"
junit.extensions.TestDecorator.basicRun,"    public void basicRun(TestResult result) {
        this.fTest.run(result);
    }"
junit.extensions.TestDecorator.countTestCases,"    public int countTestCases() {
        return this.fTest.countTestCases();
    }"
junit.extensions.TestDecorator.run,"    public void run(TestResult result) {
        this.basicRun(result);
    }"
junit.extensions.TestDecorator.toString,"    public String toString() {
        return this.fTest.toString();
    }"
junit.extensions.TestDecorator.getTest,"    public Test getTest() {
        return this.fTest;
    }
"
org.hamcrest.BaseMatcher._dont_implement_Matcher___instead_extend_BaseMatcher_,"    public final void _dont_implement_Matcher___instead_extend_BaseMatcher_() {
    }"
org.hamcrest.BaseMatcher.toString,"    public String toString() {
        return StringDescription.toString(this);
    }
"
org.hamcrest.Matcher.matches,
org.hamcrest.Matcher._dont_implement_Matcher___instead_extend_BaseMatcher_,"    public void _dont_implement_Matcher___instead_extend_BaseMatcher_();
"
org.hamcrest.SelfDescribing.describeTo,"    public void describeTo(Description var1);
"
org.hamcrest.BaseDescription.appendText,"    public Description appendText(String text) {
        this.append(text);
        return this;
    }"
org.hamcrest.BaseDescription.appendDescriptionOf,"    public Description appendDescriptionOf(SelfDescribing value) {
        value.describeTo(this);
        return this;
    }"
org.hamcrest.BaseDescription.appendValue,"    public Description appendValue(Object value) {
        if (value == null) {
            this.append(""null"");
        } else if (value instanceof String) {
            this.toJavaSyntax((String)value);
        } else if (value instanceof Character) {
            this.append('\""');
            this.toJavaSyntax(((Character)value).charValue());
            this.append('\""');
        } else if (value instanceof Short) {
            this.append('<');
            this.append(String.valueOf(value));
            this.append(""s>"");
        } else if (value instanceof Long) {
            this.append('<');
            this.append(String.valueOf(value));
            this.append(""L>"");
        } else if (value instanceof Float) {
            this.append('<');
            this.append(String.valueOf(value));
            this.append(""F>"");
        } else if (value.getClass().isArray()) {
            this.appendValueList(""["", "", "", ""]"", new ArrayIterator(value));
        } else {
            this.append('<');
            this.append(String.valueOf(value));
            this.append('>');
        }
        return this;
    }"
org.hamcrest.BaseDescription.appendValueList,"    public <T> Description appendValueList(String start, String separator, String end, T ... values) {
        return this.appendValueList(start, separator, end, (Iterable<T>)Arrays.asList(values));
    }"
org.hamcrest.BaseDescription.appendValueList,"    public <T> Description appendValueList(String start, String separator, String end, Iterable<T> values) {
        return this.appendValueList(start, separator, end, values.iterator());
    }"
org.hamcrest.BaseDescription.appendValueList,"    private <T> Description appendValueList(String start, String separator, String end, Iterator<T> values) {
        return this.appendList(start, separator, end, new SelfDescribingValueIterator<T>(values));
    }"
org.hamcrest.BaseDescription.appendList,"    public Description appendList(String start, String separator, String end, Iterable<? extends SelfDescribing> values) {
        return this.appendList(start, separator, end, values.iterator());
    }"
org.hamcrest.BaseDescription.appendList,"    private Description appendList(String start, String separator, String end, Iterator<? extends SelfDescribing> i) {
        boolean separate = false;
        this.append(start);
        while (i.hasNext()) {
            if (separate) {
                this.append(separator);
            }
            this.appendDescriptionOf(i.next());
            separate = true;
        }
        this.append(end);
        return this;
    }"
org.hamcrest.BaseDescription.append,"    protected void append(String str) {
        for (int i = 0; i < str.length(); ++i) {
            this.append(str.charAt(i));
        }
    }"
org.hamcrest.BaseDescription.append,
org.hamcrest.BaseDescription.toJavaSyntax,"    private void toJavaSyntax(String unformatted) {
        this.append('\""');
        for (int i = 0; i < unformatted.length(); ++i) {
            this.toJavaSyntax(unformatted.charAt(i));
        }
        this.append('\""');
    }"
org.hamcrest.BaseDescription.toJavaSyntax,"    private void toJavaSyntax(char ch) {
        switch (ch) {
            case '\""': {
                this.append(""\\\"""");
                break;
            }
            case '\n': {
                this.append(""\\n"");
                break;
            }
            case '\r': {
                this.append(""\\r"");
                break;
            }
            case '\t': {
                this.append(""\\t"");
                break;
            }
            default: {
                this.append(ch);
            }
        }
    }
"
org.hamcrest.StringDescription.toString,"    public static String toString(SelfDescribing value) {
        return new StringDescription().appendDescriptionOf(value).toString();
    }"
org.hamcrest.StringDescription.asString,"    public static String asString(SelfDescribing selfDescribing) {
        return StringDescription.toString(selfDescribing);
    }"
org.hamcrest.StringDescription.append,"    protected void append(String str) {
        try {
            this.out.append(str);
        }
        catch (IOException e) {
            throw new RuntimeException(""Could not write description"", e);
        }
    }"
org.hamcrest.StringDescription.append,"    protected void append(char c) {
        try {
            this.out.append(c);
        }
        catch (IOException e) {
            throw new RuntimeException(""Could not write description"", e);
        }
    }"
org.hamcrest.StringDescription.toString,"    public String toString() {
        return this.out.toString();
    }
"
org.hamcrest.CoreMatchers.is,"    public static <T> Matcher<T> is(Matcher<T> matcher) {
        return Is.is(matcher);
    }"
org.hamcrest.CoreMatchers.is,"    public static <T> Matcher<T> is(T value) {
        return Is.is(value);
    }"
org.hamcrest.CoreMatchers.is,"    public static Matcher<Object> is(Class<?> type) {
        return Is.is(type);
    }"
org.hamcrest.CoreMatchers.not,"    public static <T> Matcher<T> not(Matcher<T> matcher) {
        return IsNot.not(matcher);
    }"
org.hamcrest.CoreMatchers.not,"    public static <T> Matcher<T> not(T value) {
        return IsNot.not(value);
    }"
org.hamcrest.CoreMatchers.equalTo,"    public static <T> Matcher<T> equalTo(T operand) {
        return IsEqual.equalTo(operand);
    }"
org.hamcrest.CoreMatchers.instanceOf,"    public static Matcher<Object> instanceOf(Class<?> type) {
        return IsInstanceOf.instanceOf(type);
    }"
org.hamcrest.CoreMatchers.allOf,"    public static <T> Matcher<T> allOf(Matcher<? extends T> ... matchers) {
        return AllOf.allOf(matchers);
    }"
org.hamcrest.CoreMatchers.allOf,"    public static <T> Matcher<T> allOf(Iterable<Matcher<? extends T>> matchers) {
        return AllOf.allOf(matchers);
    }"
org.hamcrest.CoreMatchers.anyOf,"    public static <T> Matcher<T> anyOf(Matcher<? extends T> ... matchers) {
        return AnyOf.anyOf(matchers);
    }"
org.hamcrest.CoreMatchers.anyOf,"    public static <T> Matcher<T> anyOf(Iterable<Matcher<? extends T>> matchers) {
        return AnyOf.anyOf(matchers);
    }"
org.hamcrest.CoreMatchers.sameInstance,"    public static <T> Matcher<T> sameInstance(T object) {
        return IsSame.sameInstance(object);
    }"
org.hamcrest.CoreMatchers.anything,"    public static <T> Matcher<T> anything() {
        return IsAnything.anything();
    }"
org.hamcrest.CoreMatchers.anything,"    public static <T> Matcher<T> anything(String description) {
        return IsAnything.anything(description);
    }"
org.hamcrest.CoreMatchers.any,"    public static <T> Matcher<T> any(Class<T> type) {
        return IsAnything.any(type);
    }"
org.hamcrest.CoreMatchers.nullValue,"    public static <T> Matcher<T> nullValue() {
        return IsNull.nullValue();
    }"
org.hamcrest.CoreMatchers.nullValue,"    public static <T> Matcher<T> nullValue(Class<T> type) {
        return IsNull.nullValue(type);
    }"
org.hamcrest.CoreMatchers.notNullValue,"    public static <T> Matcher<T> notNullValue() {
        return IsNull.notNullValue();
    }"
org.hamcrest.CoreMatchers.notNullValue,"    public static <T> Matcher<T> notNullValue(Class<T> type) {
        return IsNull.notNullValue(type);
    }"
org.hamcrest.CoreMatchers.describedAs,"    public static <T> Matcher<T> describedAs(String description, Matcher<T> matcher, Object ... values) {
        return DescribedAs.describedAs(description, matcher, values);
    }
"
org.hamcrest.Description.appendText,
org.hamcrest.Description.appendDescriptionOf,
org.hamcrest.Description.appendValue,
org.hamcrest.Description.appendValueList,
org.hamcrest.Description.appendValueList,
org.hamcrest.Description.appendList,"    public Description appendList(String var1, String var2, String var3, Iterable<? extends SelfDescribing> var4);
"
org.hamcrest.core.DescribedAs.matches,"    public boolean matches(Object o) {
        return this.matcher.matches(o);
    }"
org.hamcrest.core.DescribedAs.describeTo,"    public void describeTo(Description description) {
        java.util.regex.Matcher arg = ARG_PATTERN.matcher(this.descriptionTemplate);
        int textStart = 0;
        while (arg.find()) {
            description.appendText(this.descriptionTemplate.substring(textStart, arg.start()));
            int argIndex = Integer.parseInt(arg.group(1));
            description.appendValue(this.values[argIndex]);
            textStart = arg.end();
        }
        if (textStart < this.descriptionTemplate.length()) {
            description.appendText(this.descriptionTemplate.substring(textStart));
        }
    }"
org.hamcrest.core.DescribedAs.describedAs,"    public static <T> Matcher<T> describedAs(String description, Matcher<T> matcher, Object ... values) {
        return new DescribedAs<T>(description, matcher, values);
    }
"
org.hamcrest.core.IsInstanceOf.matches,"    public boolean matches(Object item) {
        return this.theClass.isInstance(item);
    }"
org.hamcrest.core.IsInstanceOf.describeTo,"    public void describeTo(Description description) {
        description.appendText(""an instance of "").appendText(this.theClass.getName());
    }"
org.hamcrest.core.IsInstanceOf.instanceOf,"    public static Matcher<Object> instanceOf(Class<?> type) {
        return new IsInstanceOf(type);
    }
"
org.hamcrest.core.AllOf.matches,"    public boolean matches(Object o) {
        for (Matcher<T> matcher : this.matchers) {
            if (matcher.matches(o)) continue;
            return false;
        }
        return true;
    }"
org.hamcrest.core.AllOf.describeTo,"    public void describeTo(Description description) {
        description.appendList(""("", "" and "", "")"", this.matchers);
    }"
org.hamcrest.core.AllOf.allOf,"    public static <T> Matcher<T> allOf(Matcher<? extends T> ... matchers) {
        return AllOf.allOf(Arrays.asList(matchers));
    }"
org.hamcrest.core.AllOf.allOf,"    public static <T> Matcher<T> allOf(Iterable<Matcher<? extends T>> matchers) {
        return new AllOf<T>(matchers);
    }
"
org.hamcrest.core.IsEqual.matches,"    public boolean matches(Object arg) {
        return IsEqual.areEqual(this.object, arg);
    }"
org.hamcrest.core.IsEqual.describeTo,"    public void describeTo(Description description) {
        description.appendValue(this.object);
    }"
org.hamcrest.core.IsEqual.areEqual,"    private static boolean areEqual(Object o1, Object o2) {
        if (o1 == null || o2 == null) {
            return o1 == null && o2 == null;
        }
        if (IsEqual.isArray(o1)) {
            return IsEqual.isArray(o2) && IsEqual.areArraysEqual(o1, o2);
        }
        return o1.equals(o2);
    }"
org.hamcrest.core.IsEqual.areArraysEqual,"    private static boolean areArraysEqual(Object o1, Object o2) {
        return IsEqual.areArrayLengthsEqual(o1, o2) && IsEqual.areArrayElementsEqual(o1, o2);
    }"
org.hamcrest.core.IsEqual.areArrayLengthsEqual,"    private static boolean areArrayLengthsEqual(Object o1, Object o2) {
        return Array.getLength(o1) == Array.getLength(o2);
    }"
org.hamcrest.core.IsEqual.areArrayElementsEqual,"    private static boolean areArrayElementsEqual(Object o1, Object o2) {
        for (int i = 0; i < Array.getLength(o1); ++i) {
            if (IsEqual.areEqual(Array.get(o1, i), Array.get(o2, i))) continue;
            return false;
        }
        return true;
    }"
org.hamcrest.core.IsEqual.isArray,"    private static boolean isArray(Object o) {
        return o.getClass().isArray();
    }"
org.hamcrest.core.IsEqual.equalTo,"    public static <T> Matcher<T> equalTo(T operand) {
        return new IsEqual<T>(operand);
    }
"
org.hamcrest.core.IsSame.matches,"    public boolean matches(Object arg) {
        return arg == this.object;
    }"
org.hamcrest.core.IsSame.describeTo,"    public void describeTo(Description description) {
        description.appendText(""same("").appendValue(this.object).appendText("")"");
    }"
org.hamcrest.core.IsSame.sameInstance,"    public static <T> Matcher<T> sameInstance(T object) {
        return new IsSame<T>(object);
    }
"
org.hamcrest.core.IsNot.matches,"    public boolean matches(Object arg) {
        return !this.matcher.matches(arg);
    }"
org.hamcrest.core.IsNot.describeTo,"    public void describeTo(Description description) {
        description.appendText(""not "").appendDescriptionOf(this.matcher);
    }"
org.hamcrest.core.IsNot.not,"    public static <T> Matcher<T> not(Matcher<T> matcher) {
        return new IsNot<T>(matcher);
    }"
org.hamcrest.core.IsNot.not,"    public static <T> Matcher<T> not(T value) {
        return IsNot.not(IsEqual.equalTo(value));
    }
"
org.hamcrest.core.IsAnything.matches,"    public boolean matches(Object o) {
        return true;
    }"
org.hamcrest.core.IsAnything.describeTo,"    public void describeTo(Description description) {
        description.appendText(this.description);
    }"
org.hamcrest.core.IsAnything.anything,"    public static <T> Matcher<T> anything() {
        return new IsAnything<T>();
    }"
org.hamcrest.core.IsAnything.anything,"    public static <T> Matcher<T> anything(String description) {
        return new IsAnything<T>(description);
    }"
org.hamcrest.core.IsAnything.any,"    public static <T> Matcher<T> any(Class<T> type) {
        return new IsAnything<T>();
    }
"
org.hamcrest.core.IsNull.matches,"    public boolean matches(Object o) {
        return o == null;
    }"
org.hamcrest.core.IsNull.describeTo,"    public void describeTo(Description description) {
        description.appendText(""null"");
    }"
org.hamcrest.core.IsNull.nullValue,"    public static <T> Matcher<T> nullValue() {
        return new IsNull<T>();
    }"
org.hamcrest.core.IsNull.notNullValue,"    public static <T> Matcher<T> notNullValue() {
        return IsNot.not(IsNull.<T>nullValue());
    }"
org.hamcrest.core.IsNull.nullValue,"    public static <T> Matcher<T> nullValue(Class<T> type) {
        return IsNull.nullValue();
    }"
org.hamcrest.core.IsNull.notNullValue,"    public static <T> Matcher<T> notNullValue(Class<T> type) {
        return IsNull.notNullValue();
    }
"
org.hamcrest.core.AnyOf.matches,"    public boolean matches(Object o) {
        for (Matcher<T> matcher : this.matchers) {
            if (!matcher.matches(o)) continue;
            return true;
        }
        return false;
    }"
org.hamcrest.core.AnyOf.describeTo,"    public void describeTo(Description description) {
        description.appendList(""("", "" or "", "")"", this.matchers);
    }"
org.hamcrest.core.AnyOf.anyOf,"    public static <T> Matcher<T> anyOf(Matcher<? extends T> ... matchers) {
        return AnyOf.anyOf(Arrays.asList(matchers));
    }"
org.hamcrest.core.AnyOf.anyOf,"    public static <T> Matcher<T> anyOf(Iterable<Matcher<? extends T>> matchers) {
        return new AnyOf<T>(matchers);
    }
"
org.hamcrest.core.Is.matches,"    public boolean matches(Object arg) {
        return this.matcher.matches(arg);
    }"
org.hamcrest.core.Is.describeTo,"    public void describeTo(Description description) {
        description.appendText(""is "").appendDescriptionOf(this.matcher);
    }"
org.hamcrest.core.Is.is,"    public static <T> Matcher<T> is(Matcher<T> matcher) {
        return new Is<T>(matcher);
    }"
org.hamcrest.core.Is.is,"    public static <T> Matcher<T> is(T value) {
        return Is.is(IsEqual.equalTo(value));
    }"
org.hamcrest.core.Is.is,"    public static Matcher<Object> is(Class<?> type) {
        return Is.is(IsInstanceOf.instanceOf(type));
    }
"
org.hamcrest.internal.SelfDescribingValue.describeTo,"    public void describeTo(Description description) {
        description.appendValue(this.value);
    }
"
org.hamcrest.internal.ArrayIterator.hasNext,"    public boolean hasNext() {
        return this.currentIndex < Array.getLength(this.array);
    }"
org.hamcrest.internal.ArrayIterator.next,"    public Object next() {
        return Array.get(this.array, this.currentIndex++);
    }"
org.hamcrest.internal.ArrayIterator.remove,"    public void remove() {
        throw new UnsupportedOperationException(""cannot remove items from an array"");
    }
"
org.hamcrest.internal.SelfDescribingValueIterator.hasNext,"    public boolean hasNext() {
        return this.values.hasNext();
    }"
org.hamcrest.internal.SelfDescribingValueIterator.next,"    public SelfDescribing next() {
        return new SelfDescribingValue<T>(this.values.next());
    }"
org.hamcrest.internal.SelfDescribingValueIterator.remove,"    public void remove() {
        this.values.remove();
    }
"
org.junit.ComparisonFailure.getMessage,"    public String getMessage() {
        return new ComparisonCompactor(20, this.fExpected, this.fActual).compact(super.getMessage());
    }"
org.junit.ComparisonFailure.getActual,"    public String getActual() {
        return this.fActual;
    }"
org.junit.ComparisonFailure.getExpected,"    public String getExpected() {
        return this.fExpected;
    }"
org.junit.ComparisonFailure.compact,"        private String compact(String message) {
            if (this.fExpected == null || this.fActual == null || this.areStringsEqual()) {
                return Assert.format(message, this.fExpected, this.fActual);
            }
            this.findCommonPrefix();
            this.findCommonSuffix();
            String expected = this.compactString(this.fExpected);
            String actual = this.compactString(this.fActual);
            return Assert.format(message, expected, actual);
        }"
org.junit.ComparisonFailure.compactString,"        private String compactString(String source) {
            String result = DELTA_START + source.substring(this.fPrefix, source.length() - this.fSuffix + 1) + DELTA_END;
            if (this.fPrefix > 0) {
                result = this.computeCommonPrefix() + result;
            }
            if (this.fSuffix > 0) {
                result = result + this.computeCommonSuffix();
            }
            return result;
        }"
org.junit.ComparisonFailure.findCommonPrefix,"        private void findCommonPrefix() {
            this.fPrefix = 0;
            int end = Math.min(this.fExpected.length(), this.fActual.length());
            while (this.fPrefix < end && this.fExpected.charAt(this.fPrefix) == this.fActual.charAt(this.fPrefix)) {
                ++this.fPrefix;
            }
        }"
org.junit.ComparisonFailure.findCommonSuffix,"        private void findCommonSuffix() {
            int expectedSuffix = this.fExpected.length() - 1;
            for (int actualSuffix = this.fActual.length() - 1; actualSuffix >= this.fPrefix && expectedSuffix >= this.fPrefix && this.fExpected.charAt(expectedSuffix) == this.fActual.charAt(actualSuffix); --actualSuffix, --expectedSuffix) {
            }
            this.fSuffix = this.fExpected.length() - expectedSuffix;
        }"
org.junit.ComparisonFailure.computeCommonPrefix,"        private String computeCommonPrefix() {
            return (this.fPrefix > this.fContextLength ? ELLIPSIS : """") + this.fExpected.substring(Math.max(0, this.fPrefix - this.fContextLength), this.fPrefix);
        }"
org.junit.ComparisonFailure.computeCommonSuffix,"        private String computeCommonSuffix() {
            int end = Math.min(this.fExpected.length() - this.fSuffix + 1 + this.fContextLength, this.fExpected.length());
            return this.fExpected.substring(this.fExpected.length() - this.fSuffix + 1, end) + (this.fExpected.length() - this.fSuffix + 1 < this.fExpected.length() - this.fContextLength ? ELLIPSIS : """");
        }"
org.junit.ComparisonFailure.areStringsEqual,"        private boolean areStringsEqual() {
            return this.fExpected.equals(this.fActual);
        }
    "
org.junit.Assert.assertTrue,"    public static void assertTrue(String message, boolean condition) {
        if (!condition) {
            Assert.fail(message);
        }
    }"
org.junit.Assert.assertTrue,"    public static void assertTrue(boolean condition) {
        Assert.assertTrue(null, condition);
    }"
org.junit.Assert.assertFalse,"    public static void assertFalse(String message, boolean condition) {
        Assert.assertTrue(message, !condition);
    }"
org.junit.Assert.assertFalse,"    public static void assertFalse(boolean condition) {
        Assert.assertFalse(null, condition);
    }"
org.junit.Assert.fail,"    public static void fail(String message) {
        throw new AssertionError((Object)(message == null ? """" : message));
    }"
org.junit.Assert.fail,"    public static void fail() {
        Assert.fail(null);
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(String message, Object expected, Object actual) {
        if (expected == null && actual == null) {
            return;
        }
        if (expected != null && Assert.isEquals(expected, actual)) {
            return;
        }
        if (expected instanceof String && actual instanceof String) {
            String cleanMessage = message == null ? """" : message;
            throw new ComparisonFailure(cleanMessage, (String)expected, (String)actual);
        }
        Assert.failNotEquals(message, expected, actual);
    }"
org.junit.Assert.isEquals,"    private static boolean isEquals(Object expected, Object actual) {
        return expected.equals(actual);
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(Object expected, Object actual) {
        Assert.assertEquals(null, expected, actual);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure {
        Assert.internalArrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(Object[] expecteds, Object[] actuals) {
        Assert.assertArrayEquals(null, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure {
        Assert.internalArrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(byte[] expecteds, byte[] actuals) {
        Assert.assertArrayEquals(null, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure {
        Assert.internalArrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(char[] expecteds, char[] actuals) {
        Assert.assertArrayEquals(null, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure {
        Assert.internalArrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(short[] expecteds, short[] actuals) {
        Assert.assertArrayEquals(null, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure {
        Assert.internalArrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(int[] expecteds, int[] actuals) {
        Assert.assertArrayEquals(null, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure {
        Assert.internalArrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(long[] expecteds, long[] actuals) {
        Assert.assertArrayEquals(null, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure {
        new InexactComparisonCriteria(delta).arrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta) {
        Assert.assertArrayEquals(null, expecteds, actuals, delta);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure {
        new InexactComparisonCriteria(delta).arrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertArrayEquals,"    public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta) {
        Assert.assertArrayEquals(null, expecteds, actuals, delta);
    }"
org.junit.Assert.internalArrayEquals,"    private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure {
        new ExactComparisonCriteria().arrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(String message, double expected, double actual, double delta) {
        if (Double.compare(expected, actual) == 0) {
            return;
        }
        if (!(Math.abs(expected - actual) <= delta)) {
            Assert.failNotEquals(message, new Double(expected), new Double(actual));
        }
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(long expected, long actual) {
        Assert.assertEquals(null, expected, actual);
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(String message, long expected, long actual) {
        Assert.assertEquals(message, (Object)expected, (Object)actual);
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(double expected, double actual) {
        Assert.assertEquals(null, expected, actual);
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(String message, double expected, double actual) {
        Assert.fail(""Use assertEquals(expected, actual, delta) to compare floating-point numbers"");
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(double expected, double actual, double delta) {
        Assert.assertEquals(null, expected, actual, delta);
    }"
org.junit.Assert.assertNotNull,"    public static void assertNotNull(String message, Object object) {
        Assert.assertTrue(message, object != null);
    }"
org.junit.Assert.assertNotNull,"    public static void assertNotNull(Object object) {
        Assert.assertNotNull(null, object);
    }"
org.junit.Assert.assertNull,"    public static void assertNull(String message, Object object) {
        Assert.assertTrue(message, object == null);
    }"
org.junit.Assert.assertNull,"    public static void assertNull(Object object) {
        Assert.assertNull(null, object);
    }"
org.junit.Assert.assertSame,"    public static void assertSame(String message, Object expected, Object actual) {
        if (expected == actual) {
            return;
        }
        Assert.failNotSame(message, expected, actual);
    }"
org.junit.Assert.assertSame,"    public static void assertSame(Object expected, Object actual) {
        Assert.assertSame(null, expected, actual);
    }"
org.junit.Assert.assertNotSame,"    public static void assertNotSame(String message, Object unexpected, Object actual) {
        if (unexpected == actual) {
            Assert.failSame(message);
        }
    }"
org.junit.Assert.assertNotSame,"    public static void assertNotSame(Object unexpected, Object actual) {
        Assert.assertNotSame(null, unexpected, actual);
    }"
org.junit.Assert.failSame,"    private static void failSame(String message) {
        String formatted = """";
        if (message != null) {
            formatted = message + "" "";
        }
        Assert.fail(formatted + ""expected not same"");
    }"
org.junit.Assert.failNotSame,"    private static void failNotSame(String message, Object expected, Object actual) {
        String formatted = """";
        if (message != null) {
            formatted = message + "" "";
        }
        Assert.fail(formatted + ""expected same:<"" + expected + ""> was not:<"" + actual + "">"");
    }"
org.junit.Assert.failNotEquals,"    private static void failNotEquals(String message, Object expected, Object actual) {
        Assert.fail(Assert.format(message, expected, actual));
    }"
org.junit.Assert.format,"    static String format(String message, Object expected, Object actual) {
        String actualString;
        String expectedString;
        String formatted = """";
        if (message != null && !message.equals("""")) {
            formatted = message + "" "";
        }
        if ((expectedString = String.valueOf(expected)).equals(actualString = String.valueOf(actual))) {
            return formatted + ""expected: "" + Assert.formatClassAndValue(expected, expectedString) + "" but was: "" + Assert.formatClassAndValue(actual, actualString);
        }
        return formatted + ""expected:<"" + expectedString + ""> but was:<"" + actualString + "">"";
    }"
org.junit.Assert.formatClassAndValue,"    private static String formatClassAndValue(Object value, String valueString) {
        String className = value == null ? ""null"" : value.getClass().getName();
        return className + ""<"" + valueString + "">"";
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(String message, Object[] expecteds, Object[] actuals) {
        Assert.assertArrayEquals(message, expecteds, actuals);
    }"
org.junit.Assert.assertEquals,"    public static void assertEquals(Object[] expecteds, Object[] actuals) {
        Assert.assertArrayEquals(expecteds, actuals);
    }"
org.junit.Assert.assertThat,"    public static <T> void assertThat(T actual, Matcher<T> matcher) {
        Assert.assertThat("""", actual, matcher);
    }"
org.junit.Assert.assertThat,"    public static <T> void assertThat(String reason, T actual, Matcher<T> matcher) {
        if (!matcher.matches(actual)) {
            StringDescription description = new StringDescription();
            description.appendText(reason);
            description.appendText(""\nExpected: "");
            description.appendDescriptionOf(matcher);
            description.appendText(""\n     got: "");
            description.appendValue(actual);
            description.appendText(""\n"");
            throw new AssertionError((Object)((Object)description).toString());
        }
    }
"
org.junit.Assume.assumeTrue,"    public static void assumeTrue(boolean b) {
        Assume.assumeThat(b, CoreMatchers.is(true));
    }"
org.junit.Assume.assumeNotNull,"    public static void assumeNotNull(Object ... objects) {
        Assume.assumeThat(Arrays.asList(objects), Each.each(CoreMatchers.notNullValue()));
    }"
org.junit.Assume.assumeThat,"    public static <T> void assumeThat(T actual, Matcher<T> matcher) {
        if (!matcher.matches(actual)) {
            throw new AssumptionViolatedException(actual, matcher);
        }
    }"
org.junit.Assume.assumeNoException,"    public static void assumeNoException(Throwable t) {
        Assume.assumeThat(t, CoreMatchers.nullValue());
    }
"
org.junit.experimental.ParallelComputer.classes,"    public static Computer classes() {
        return new ParallelComputer(true, false);
    }"
org.junit.experimental.ParallelComputer.methods,"    public static Computer methods() {
        return new ParallelComputer(false, true);
    }"
org.junit.experimental.ParallelComputer.parallelize,"    private static <T> Runner parallelize(Runner runner) {
        if (runner instanceof ParentRunner) {
            ((ParentRunner)runner).setScheduler(new RunnerScheduler(){
                private final List<Future<Object>> fResults = new ArrayList<Future<Object>>();
                private final ExecutorService fService = Executors.newCachedThreadPool();

                public void schedule(final Runnable childStatement) {
                    this.fResults.add(this.fService.submit(new Callable<Object>(){

                        @Override
                        public Object call() throws Exception {
                            childStatement.run();
                            return null;
                        }
                    }));
                }

                public void finished() {
                    for (Future<Object> each : this.fResults) {
                        try {
                            each.get();
                        }
                        catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            });
        }
        return runner;
    }"
org.junit.experimental.ParallelComputer.getSuite,"    public Runner getSuite(RunnerBuilder builder, Class<?>[] classes) throws InitializationError {
        Runner suite = super.getSuite(builder, classes);
        return this.fClasses ? ParallelComputer.parallelize(suite) : suite;
    }"
org.junit.experimental.ParallelComputer.getRunner,"    protected Runner getRunner(RunnerBuilder builder, Class<?> testClass) throws Throwable {
        Runner runner = super.getRunner(builder, testClass);
        return this.fMethods ? ParallelComputer.parallelize(runner) : runner;
    }
"
org.junit.experimental.theories.PotentialAssignment.forValue,"    public static PotentialAssignment forValue(final String name, final Object value) {
        return new PotentialAssignment(){

            public Object getValue() throws CouldNotGenerateValueException {
                return value;
            }

            public String toString() {
                return String.format(""[%s]"", value);
            }

            public String getDescription() throws CouldNotGenerateValueException {
                return name;
            }
        };
    }"
org.junit.experimental.theories.PotentialAssignment.getValue,"            public Object getValue() throws CouldNotGenerateValueException {
                return value;
            }"
org.junit.experimental.theories.PotentialAssignment.toString,"            public String toString() {
                return String.format(""[%s]"", value);
            }"
org.junit.experimental.theories.PotentialAssignment.getDescription,"            public String getDescription() throws CouldNotGenerateValueException {
                return name;
            }
        "
org.junit.experimental.theories.PotentialAssignment.getValue,
org.junit.experimental.theories.PotentialAssignment.getDescription,
org.junit.experimental.theories.Theories.collectInitializationErrors,"    protected void collectInitializationErrors(List<Throwable> errors) {
        super.collectInitializationErrors(errors);
        this.validateDataPointFields(errors);
    }"
org.junit.experimental.theories.Theories.validateDataPointFields,"    private void validateDataPointFields(List<Throwable> errors) {
        Field[] fields;
        for (Field each : fields = this.getTestClass().getJavaClass().getDeclaredFields()) {
            if (each.getAnnotation(DataPoint.class) == null || Modifier.isStatic(each.getModifiers())) continue;
            errors.add(new Error(""DataPoint field "" + each.getName() + "" must be static""));
        }
    }"
org.junit.experimental.theories.Theories.validateConstructor,"    protected void validateConstructor(List<Throwable> errors) {
        this.validateOnlyOneConstructor(errors);
    }"
org.junit.experimental.theories.Theories.validateTestMethods,"    protected void validateTestMethods(List<Throwable> errors) {
        for (FrameworkMethod each : this.computeTestMethods()) {
            if (each.getAnnotation(Theory.class) != null) {
                each.validatePublicVoid(false, errors);
                continue;
            }
            each.validatePublicVoidNoArg(false, errors);
        }
    }"
org.junit.experimental.theories.Theories.computeTestMethods,"    protected List<FrameworkMethod> computeTestMethods() {
        List<FrameworkMethod> testMethods = super.computeTestMethods();
        List<FrameworkMethod> theoryMethods = this.getTestClass().getAnnotatedMethods(Theory.class);
        testMethods.removeAll(theoryMethods);
        testMethods.addAll(theoryMethods);
        return testMethods;
    }"
org.junit.experimental.theories.Theories.methodBlock,"    public Statement methodBlock(FrameworkMethod method) {
        return new TheoryAnchor(method, this.getTestClass());
    }"
org.junit.experimental.theories.Theories.getTestClass,"        private TestClass getTestClass() {
            return this.fTestClass;
        }"
org.junit.experimental.theories.Theories.evaluate,"        public void evaluate() throws Throwable {
            this.runWithAssignment(Assignments.allUnassigned(this.fTestMethod.getMethod(), this.getTestClass()));
            if (this.successes == 0) {
                Assert.fail(""Never found parameters that satisfied method assumptions.  Violated assumptions: "" + this.fInvalidParameters);
            }
        }"
org.junit.experimental.theories.Theories.runWithAssignment,"        protected void runWithAssignment(Assignments parameterAssignment) throws Throwable {
            if (!parameterAssignment.isComplete()) {
                this.runWithIncompleteAssignment(parameterAssignment);
            } else {
                this.runWithCompleteAssignment(parameterAssignment);
            }
        }"
org.junit.experimental.theories.Theories.runWithIncompleteAssignment,"        protected void runWithIncompleteAssignment(Assignments incomplete) throws InstantiationException, IllegalAccessException, Throwable {
            for (PotentialAssignment source : incomplete.potentialsForNextUnassigned()) {
                this.runWithAssignment(incomplete.assignNext(source));
            }
        }"
org.junit.experimental.theories.Theories.runWithCompleteAssignment,"        protected void runWithCompleteAssignment(final Assignments complete) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, Throwable {
            new BlockJUnit4ClassRunner(this.getTestClass().getJavaClass()){

                @Override
                protected void collectInitializationErrors(List<Throwable> errors) {
                }

                @Override
                public Statement methodBlock(FrameworkMethod method) {
                    final Statement statement = super.methodBlock(method);
                    return new Statement(){

                        public void evaluate() throws Throwable {
                            try {
                                statement.evaluate();
                                TheoryAnchor.this.handleDataPointSuccess();
                            }
                            catch (AssumptionViolatedException e) {
                                TheoryAnchor.this.handleAssumptionViolation(e);
                            }
                            catch (Throwable e) {
                                TheoryAnchor.this.reportParameterizedError(e, complete.getArgumentStrings(TheoryAnchor.this.nullsOk()));
                            }
                        }
                    };
                }

                @Override
                protected Statement methodInvoker(FrameworkMethod method, Object test) {
                    return TheoryAnchor.this.methodCompletesWithParameters(method, complete, test);
                }

                @Override
                public Object createTest() throws Exception {
                    return this.getTestClass().getOnlyConstructor().newInstance(complete.getConstructorArguments(TheoryAnchor.this.nullsOk()));
                }
            }.methodBlock(this.fTestMethod).evaluate();
        }"
org.junit.experimental.theories.Theories.collectInitializationErrors,"                protected void collectInitializationErrors(List<Throwable> errors) {
                }"
org.junit.experimental.theories.Theories.methodBlock,"                public Statement methodBlock(FrameworkMethod method) {
                    final Statement statement = super.methodBlock(method);
                    return new Statement(){

                        public void evaluate() throws Throwable {
                            try {
                                statement.evaluate();
                                TheoryAnchor.this.handleDataPointSuccess();
                            }
                            catch (AssumptionViolatedException e) {
                                TheoryAnchor.this.handleAssumptionViolation(e);
                            }
                            catch (Throwable e) {
                                TheoryAnchor.this.reportParameterizedError(e, complete.getArgumentStrings(TheoryAnchor.this.nullsOk()));
                            }
                        }
                    };
                }"
org.junit.experimental.theories.Theories.evaluate,"                        public void evaluate() throws Throwable {
                            try {
                                statement.evaluate();
                                TheoryAnchor.this.handleDataPointSuccess();
                            }
                            catch (AssumptionViolatedException e) {
                                TheoryAnchor.this.handleAssumptionViolation(e);
                            }
                            catch (Throwable e) {
                                TheoryAnchor.this.reportParameterizedError(e, complete.getArgumentStrings(TheoryAnchor.this.nullsOk()));
                            }
                        }
                    "
org.junit.experimental.theories.Theories.methodInvoker,"                protected Statement methodInvoker(FrameworkMethod method, Object test) {
                    return TheoryAnchor.this.methodCompletesWithParameters(method, complete, test);
                }"
org.junit.experimental.theories.Theories.createTest,"                public Object createTest() throws Exception {
                    return this.getTestClass().getOnlyConstructor().newInstance(complete.getConstructorArguments(TheoryAnchor.this.nullsOk()));
                }
            "
org.junit.experimental.theories.Theories.methodCompletesWithParameters,"        private Statement methodCompletesWithParameters(final FrameworkMethod method, final Assignments complete, final Object freshInstance) {
            return new Statement(){

                public void evaluate() throws Throwable {
                    try {
                        Object[] values = complete.getMethodArguments(TheoryAnchor.this.nullsOk());
                        method.invokeExplosively(freshInstance, values);
                    }
                    catch (PotentialAssignment.CouldNotGenerateValueException couldNotGenerateValueException) {
                        // empty catch block
                    }
                }
            };
        }"
org.junit.experimental.theories.Theories.evaluate,"                public void evaluate() throws Throwable {
                    try {
                        Object[] values = complete.getMethodArguments(TheoryAnchor.this.nullsOk());
                        method.invokeExplosively(freshInstance, values);
                    }
                    catch (PotentialAssignment.CouldNotGenerateValueException couldNotGenerateValueException) {
                        // empty catch block
                    }
                }
            "
org.junit.experimental.theories.Theories.handleAssumptionViolation,"        protected void handleAssumptionViolation(AssumptionViolatedException e) {
            this.fInvalidParameters.add(e);
        }"
org.junit.experimental.theories.Theories.reportParameterizedError,"        protected void reportParameterizedError(Throwable e, Object ... params) throws Throwable {
            if (params.length == 0) {
                throw e;
            }
            throw new ParameterizedAssertionError(e, this.fTestMethod.getName(), params);
        }"
org.junit.experimental.theories.Theories.nullsOk,"        private boolean nullsOk() {
            Theory annotation = this.fTestMethod.getMethod().getAnnotation(Theory.class);
            if (annotation == null) {
                return false;
            }
            return annotation.nullsAccepted();
        }"
org.junit.experimental.theories.Theories.handleDataPointSuccess,"        protected void handleDataPointSuccess() {
            ++this.successes;
        }
    "
org.junit.experimental.theories.ParameterSupplier.getValueSources,"    public abstract List<PotentialAssignment> getValueSources(ParameterSignature var1);
"
org.junit.experimental.theories.ParameterSignature.signatures,"    public static ArrayList<ParameterSignature> signatures(Method method) {
        return ParameterSignature.signatures(method.getParameterTypes(), method.getParameterAnnotations());
    }"
org.junit.experimental.theories.ParameterSignature.signatures,"    public static List<ParameterSignature> signatures(Constructor<?> constructor) {
        return ParameterSignature.signatures(constructor.getParameterTypes(), constructor.getParameterAnnotations());
    }"
org.junit.experimental.theories.ParameterSignature.signatures,"    private static ArrayList<ParameterSignature> signatures(Class<?>[] parameterTypes, Annotation[][] parameterAnnotations) {
        ArrayList<ParameterSignature> sigs = new ArrayList<ParameterSignature>();
        for (int i = 0; i < parameterTypes.length; ++i) {
            sigs.add(new ParameterSignature(parameterTypes[i], parameterAnnotations[i]));
        }
        return sigs;
    }"
org.junit.experimental.theories.ParameterSignature.canAcceptType,"    public boolean canAcceptType(Class<?> candidate) {
        return this.type.isAssignableFrom(candidate);
    }"
org.junit.experimental.theories.ParameterSignature.getType,"    public Class<?> getType() {
        return this.type;
    }"
org.junit.experimental.theories.ParameterSignature.getAnnotations,"    public List<Annotation> getAnnotations() {
        return Arrays.asList(this.annotations);
    }"
org.junit.experimental.theories.ParameterSignature.canAcceptArrayType,"    public boolean canAcceptArrayType(Class<?> type) {
        return type.isArray() && this.canAcceptType(type.getComponentType());
    }"
org.junit.experimental.theories.ParameterSignature.hasAnnotation,"    public boolean hasAnnotation(Class<? extends Annotation> type) {
        return this.getAnnotation(type) != null;
    }"
org.junit.experimental.theories.ParameterSignature.findDeepAnnotation,"    public <T extends Annotation> T findDeepAnnotation(Class<T> annotationType) {
        Annotation[] annotations2 = this.annotations;
        return this.findDeepAnnotation(annotations2, annotationType, 3);
    }"
org.junit.experimental.theories.ParameterSignature.findDeepAnnotation,"    private <T extends Annotation> T findDeepAnnotation(Annotation[] annotations, Class<T> annotationType, int depth) {
        if (depth == 0) {
            return null;
        }
        for (Annotation each : annotations) {
            if (annotationType.isInstance(each)) {
                return (T)((Annotation)annotationType.cast(each));
            }
            T candidate = this.findDeepAnnotation(each.annotationType().getAnnotations(), annotationType, depth - 1);
            if (candidate == null) continue;
            return (T)((Annotation)annotationType.cast(candidate));
        }
        return null;
    }"
org.junit.experimental.theories.ParameterSignature.getAnnotation,"    public <T extends Annotation> T getAnnotation(Class<T> annotationType) {
        for (Annotation each : this.getAnnotations()) {
            if (!annotationType.isInstance(each)) continue;
            return (T)((Annotation)annotationType.cast(each));
        }
        return null;
    }
"
org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources,"    public List<PotentialAssignment> getValueSources(ParameterSignature sig) {
        int[] ints;
        ArrayList<PotentialAssignment> list = new ArrayList<PotentialAssignment>();
        TestedOn testedOn = sig.getAnnotation(TestedOn.class);
        for (int i : ints = testedOn.ints()) {
            list.add(PotentialAssignment.forValue(Arrays.asList(new int[][]{ints}).toString(), i));
        }
        return list;
    }
"
org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources,"    public List<PotentialAssignment> getValueSources(ParameterSignature sig) {
        ArrayList<PotentialAssignment> list = new ArrayList<PotentialAssignment>();
        this.addFields(sig, list);
        this.addSinglePointMethods(sig, list);
        this.addMultiPointMethods(list);
        return list;
    }"
org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods,"    private void addMultiPointMethods(List<PotentialAssignment> list) {
        for (FrameworkMethod dataPointsMethod : this.fClass.getAnnotatedMethods(DataPoints.class)) {
            try {
                this.addArrayValues(dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null, new Object[0]));
            }
            catch (Throwable e) {}
        }
    }"
org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods,"    private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list) {
        for (FrameworkMethod dataPointMethod : this.fClass.getAnnotatedMethods(DataPoint.class)) {
            Class<?> type;
            if (!dataPointMethod.producesType(type = sig.getType())) continue;
            list.add(new MethodParameterValue(dataPointMethod));
        }
    }"
org.junit.experimental.theories.internal.AllMembersSupplier.addFields,"    private void addFields(ParameterSignature sig, List<PotentialAssignment> list) {
        for (Field field : this.fClass.getJavaClass().getFields()) {
            if (!Modifier.isStatic(field.getModifiers())) continue;
            Class<?> type = field.getType();
            if (sig.canAcceptArrayType(type) && field.getAnnotation(DataPoints.class) != null) {
                this.addArrayValues(field.getName(), list, this.getStaticFieldValue(field));
                continue;
            }
            if (!sig.canAcceptType(type) || field.getAnnotation(DataPoint.class) == null) continue;
            list.add(PotentialAssignment.forValue(field.getName(), this.getStaticFieldValue(field)));
        }
    }"
org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues,"    private void addArrayValues(String name, List<PotentialAssignment> list, Object array) {
        for (int i = 0; i < Array.getLength(array); ++i) {
            list.add(PotentialAssignment.forValue(name + ""["" + i + ""]"", Array.get(array, i)));
        }
    }"
org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue,"    private Object getStaticFieldValue(Field field) {
        try {
            return field.get(null);
        }
        catch (IllegalArgumentException e) {
            throw new RuntimeException(""unexpected: field from getClass doesn't exist on object"");
        }
        catch (IllegalAccessException e) {
            throw new RuntimeException(""unexpected: getFields returned an inaccessible field"");
        }
    }"
org.junit.experimental.theories.internal.AllMembersSupplier.getValue,"        public Object getValue() throws PotentialAssignment.CouldNotGenerateValueException {
            try {
                return this.fMethod.invokeExplosively(null, new Object[0]);
            }
            catch (IllegalArgumentException e) {
                throw new RuntimeException(""unexpected: argument length is checked"");
            }
            catch (IllegalAccessException e) {
                throw new RuntimeException(""unexpected: getMethods returned an inaccessible method"");
            }
            catch (Throwable e) {
                throw new PotentialAssignment.CouldNotGenerateValueException();
            }
        }"
org.junit.experimental.theories.internal.AllMembersSupplier.getDescription,"        public String getDescription() throws PotentialAssignment.CouldNotGenerateValueException {
            return this.fMethod.getName();
        }
    "
org.junit.experimental.theories.internal.ParameterizedAssertionError.equals,"    public boolean equals(Object obj) {
        return this.toString().equals(obj.toString());
    }"
org.junit.experimental.theories.internal.ParameterizedAssertionError.join,"    public static String join(String delimiter, Object ... params) {
        return ParameterizedAssertionError.join(delimiter, Arrays.asList(params));
    }"
org.junit.experimental.theories.internal.ParameterizedAssertionError.join,"    public static String join(String delimiter, Collection<Object> values) {
        StringBuffer buffer = new StringBuffer();
        Iterator<Object> iter = values.iterator();
        while (iter.hasNext()) {
            Object next = iter.next();
            buffer.append(ParameterizedAssertionError.stringValueOf(next));
            if (!iter.hasNext()) continue;
            buffer.append(delimiter);
        }
        return buffer.toString();
    }"
org.junit.experimental.theories.internal.ParameterizedAssertionError.stringValueOf,"    private static String stringValueOf(Object next) {
        try {
            return String.valueOf(next);
        }
        catch (Throwable e) {
            return ""[toString failed]"";
        }
    }
"
org.junit.experimental.theories.internal.Assignments.allUnassigned,"    public static Assignments allUnassigned(Method testMethod, TestClass testClass) throws Exception {
        List<ParameterSignature> signatures = ParameterSignature.signatures(testClass.getOnlyConstructor());
        signatures.addAll(ParameterSignature.signatures(testMethod));
        return new Assignments(new ArrayList<PotentialAssignment>(), signatures, testClass);
    }"
org.junit.experimental.theories.internal.Assignments.isComplete,"    public boolean isComplete() {
        return this.fUnassigned.size() == 0;
    }"
org.junit.experimental.theories.internal.Assignments.nextUnassigned,"    public ParameterSignature nextUnassigned() {
        return this.fUnassigned.get(0);
    }"
org.junit.experimental.theories.internal.Assignments.assignNext,"    public Assignments assignNext(PotentialAssignment source) {
        ArrayList<PotentialAssignment> assigned = new ArrayList<PotentialAssignment>(this.fAssigned);
        assigned.add(source);
        return new Assignments(assigned, this.fUnassigned.subList(1, this.fUnassigned.size()), this.fClass);
    }"
org.junit.experimental.theories.internal.Assignments.getActualValues,"    public Object[] getActualValues(int start, int stop, boolean nullsOk) throws PotentialAssignment.CouldNotGenerateValueException {
        Object[] values = new Object[stop - start];
        for (int i = start; i < stop; ++i) {
            Object value = this.fAssigned.get(i).getValue();
            if (value == null && !nullsOk) {
                throw new PotentialAssignment.CouldNotGenerateValueException();
            }
            values[i - start] = value;
        }
        return values;
    }"
org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned,"    public List<PotentialAssignment> potentialsForNextUnassigned() throws InstantiationException, IllegalAccessException {
        ParameterSignature unassigned = this.nextUnassigned();
        return this.getSupplier(unassigned).getValueSources(unassigned);
    }"
org.junit.experimental.theories.internal.Assignments.getSupplier,"    public ParameterSupplier getSupplier(ParameterSignature unassigned) throws InstantiationException, IllegalAccessException {
        ParameterSupplier supplier = this.getAnnotatedSupplier(unassigned);
        if (supplier != null) {
            return supplier;
        }
        return new AllMembersSupplier(this.fClass);
    }"
org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier,"    public ParameterSupplier getAnnotatedSupplier(ParameterSignature unassigned) throws InstantiationException, IllegalAccessException {
        ParametersSuppliedBy annotation = unassigned.findDeepAnnotation(ParametersSuppliedBy.class);
        if (annotation == null) {
            return null;
        }
        return annotation.value().newInstance();
    }"
org.junit.experimental.theories.internal.Assignments.getConstructorArguments,"    public Object[] getConstructorArguments(boolean nullsOk) throws PotentialAssignment.CouldNotGenerateValueException {
        return this.getActualValues(0, this.getConstructorParameterCount(), nullsOk);
    }"
org.junit.experimental.theories.internal.Assignments.getMethodArguments,"    public Object[] getMethodArguments(boolean nullsOk) throws PotentialAssignment.CouldNotGenerateValueException {
        return this.getActualValues(this.getConstructorParameterCount(), this.fAssigned.size(), nullsOk);
    }"
org.junit.experimental.theories.internal.Assignments.getAllArguments,"    public Object[] getAllArguments(boolean nullsOk) throws PotentialAssignment.CouldNotGenerateValueException {
        return this.getActualValues(0, this.fAssigned.size(), nullsOk);
    }"
org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount,"    private int getConstructorParameterCount() {
        List<ParameterSignature> signatures = ParameterSignature.signatures(this.fClass.getOnlyConstructor());
        int constructorParameterCount = signatures.size();
        return constructorParameterCount;
    }"
org.junit.experimental.theories.internal.Assignments.getArgumentStrings,"    public Object[] getArgumentStrings(boolean nullsOk) throws PotentialAssignment.CouldNotGenerateValueException {
        Object[] values = new Object[this.fAssigned.size()];
        for (int i = 0; i < values.length; ++i) {
            values[i] = this.fAssigned.get(i).getDescription();
        }
        return values;
    }
"
org.junit.experimental.max.MaxCore.forFolder,"    public static MaxCore forFolder(String folderName) {
        return MaxCore.storedLocally(new File(folderName));
    }"
org.junit.experimental.max.MaxCore.storedLocally,"    public static MaxCore storedLocally(File storedResults) {
        return new MaxCore(storedResults);
    }"
org.junit.experimental.max.MaxCore.run,"    public Result run(Class<?> testClass) {
        return this.run(Request.aClass(testClass));
    }"
org.junit.experimental.max.MaxCore.run,"    public Result run(Request request) {
        return this.run(request, new JUnitCore());
    }"
org.junit.experimental.max.MaxCore.run,"    public Result run(Request request, JUnitCore core) {
        core.addListener(this.fHistory.listener());
        return core.run(this.sortRequest(request).getRunner());
    }"
org.junit.experimental.max.MaxCore.sortRequest,"    public Request sortRequest(Request request) {
        if (request instanceof SortingRequest) {
            return request;
        }
        List<Description> leaves = this.findLeaves(request);
        Collections.sort(leaves, this.fHistory.testComparator());
        return this.constructLeafRequest(leaves);
    }"
org.junit.experimental.max.MaxCore.constructLeafRequest,"    private Request constructLeafRequest(List<Description> leaves) {
        final ArrayList<Runner> runners = new ArrayList<Runner>();
        for (Description each : leaves) {
            runners.add(this.buildRunner(each));
        }
        return new Request(){

            public Runner getRunner() {
                try {
                    return new Suite((Class)null, runners){};
                }
                catch (InitializationError e) {
                    return new ErrorReportingRunner(null, e);
                }
            }
        };
    }"
org.junit.experimental.max.MaxCore.getRunner,"            public Runner getRunner() {
                try {
                    return new Suite((Class)null, runners){};
                }
                catch (InitializationError e) {
                    return new ErrorReportingRunner(null, e);
                }
            }
        "
org.junit.experimental.max.MaxCore.buildRunner,"    private Runner buildRunner(Description each) {
        if (each.toString().equals(""TestSuite with 0 tests"")) {
            return Suite.emptySuite();
        }
        if (each.toString().startsWith(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX)) {
            return new JUnit38ClassRunner(new TestSuite(this.getMalformedTestClass(each)));
        }
        Class<?> type = each.getTestClass();
        if (type == null) {
            throw new RuntimeException(""Can't build a runner from description ["" + each + ""]"");
        }
        String methodName = each.getMethodName();
        if (methodName == null) {
            return Request.aClass(type).getRunner();
        }
        return Request.method(type, methodName).getRunner();
    }"
org.junit.experimental.max.MaxCore.getMalformedTestClass,"    private Class<?> getMalformedTestClass(Description each) {
        try {
            return Class.forName(each.toString().replace(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX, """"));
        }
        catch (ClassNotFoundException e) {
            return null;
        }
    }"
org.junit.experimental.max.MaxCore.sortedLeavesForTest,"    public List<Description> sortedLeavesForTest(Request request) {
        return this.findLeaves(this.sortRequest(request));
    }"
org.junit.experimental.max.MaxCore.findLeaves,"    private List<Description> findLeaves(Request request) {
        ArrayList<Description> results = new ArrayList<Description>();
        this.findLeaves(null, request.getRunner().getDescription(), results);
        return results;
    }"
org.junit.experimental.max.MaxCore.findLeaves,"    private void findLeaves(Description parent, Description description, List<Description> results) {
        if (description.getChildren().isEmpty()) {
            if (description.toString().equals(""warning(junit.framework.TestSuite$1)"")) {
                results.add(Description.createSuiteDescription(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX + parent, new Annotation[0]));
            } else {
                results.add(description);
            }
        } else {
            for (Description each : description.getChildren()) {
                this.findLeaves(description, each, results);
            }
        }
    }
"
org.junit.experimental.max.MaxHistory.forFolder,"    public static MaxHistory forFolder(File file) {
        if (file.exists()) {
            try {
                return MaxHistory.readHistory(file);
            }
            catch (CouldNotReadCoreException e) {
                e.printStackTrace();
                file.delete();
            }
        }
        return new MaxHistory(file);
    }"
org.junit.experimental.max.MaxHistory.readHistory,"* WARNING - Removed try catching itself - possible behaviour change.
* Enabled aggressive exception aggregation
*/
    private static MaxHistory readHistory(File storedResults) throws CouldNotReadCoreException {
        try {
            FileInputStream file = new FileInputStream(storedResults);
            try {
                MaxHistory maxHistory;
                ObjectInputStream stream = new ObjectInputStream(file);
                try {
                    maxHistory = (MaxHistory)stream.readObject();
                }
                catch (Throwable throwable) {
                    stream.close();
                    throw throwable;
                }
                stream.close();
                return maxHistory;
            }
            finally {
                file.close();
            }
        }
        catch (Exception e) {
            throw new CouldNotReadCoreException(e);
        }
    }"
org.junit.experimental.max.MaxHistory.save,"    private void save() throws IOException {
        ObjectOutputStream stream = new ObjectOutputStream(new FileOutputStream(this.fHistoryStore));
        stream.writeObject(this);
        stream.close();
    }"
org.junit.experimental.max.MaxHistory.getFailureTimestamp,"    Long getFailureTimestamp(Description key) {
        return this.fFailureTimestamps.get(key.toString());
    }"
org.junit.experimental.max.MaxHistory.putTestFailureTimestamp,"    void putTestFailureTimestamp(Description key, long end) {
        this.fFailureTimestamps.put(key.toString(), end);
    }"
org.junit.experimental.max.MaxHistory.isNewTest,"    boolean isNewTest(Description key) {
        return !this.fDurations.containsKey(key.toString());
    }"
org.junit.experimental.max.MaxHistory.getTestDuration,"    Long getTestDuration(Description key) {
        return this.fDurations.get(key.toString());
    }"
org.junit.experimental.max.MaxHistory.putTestDuration,"    void putTestDuration(Description description, long duration) {
        this.fDurations.put(description.toString(), duration);
    }"
org.junit.experimental.max.MaxHistory.listener,"    public RunListener listener() {
        return new RememberingListener();
    }"
org.junit.experimental.max.MaxHistory.testComparator,"    public Comparator<Description> testComparator() {
        return new TestComparator();
    }"
org.junit.experimental.max.MaxHistory.compare,"        public int compare(Description o1, Description o2) {
            if (MaxHistory.this.isNewTest(o1)) {
                return -1;
            }
            if (MaxHistory.this.isNewTest(o2)) {
                return 1;
            }
            int result = this.getFailure(o2).compareTo(this.getFailure(o1));
            return result != 0 ? result : MaxHistory.this.getTestDuration(o1).compareTo(MaxHistory.this.getTestDuration(o2));
        }"
org.junit.experimental.max.MaxHistory.getFailure,"        private Long getFailure(Description key) {
            Long result = MaxHistory.this.getFailureTimestamp(key);
            if (result == null) {
                return 0L;
            }
            return result;
        }
    }

    private final class RememberingListener
    extends RunListener {
        private long overallStart = System.currentTimeMillis();
        private Map<Description, Long> starts = new HashMap<Description, Long>();

        private RememberingListener() {
        }

        public void testStarted(Description description) throws Exception {
            this.starts.put(description, System.nanoTime());
        }

        public void testFinished(Description description) throws Exception {
            long end = System.nanoTime();
            long start = this.starts.get(description);
            MaxHistory.this.putTestDuration(description, end - start);
        }

        public void testFailure(Failure failure) throws Exception {
            MaxHistory.this.putTestFailureTimestamp(failure.getDescription(), this.overallStart);
        }

        public void testRunFinished(Result result) throws Exception {
            MaxHistory.this.save();
        }
    "
org.junit.experimental.max.MaxHistory.testStarted,"        public void testStarted(Description description) throws Exception {
            this.starts.put(description, System.nanoTime());
        }"
org.junit.experimental.max.MaxHistory.testFinished,"        public void testFinished(Description description) throws Exception {
            long end = System.nanoTime();
            long start = this.starts.get(description);
            MaxHistory.this.putTestDuration(description, end - start);
        }"
org.junit.experimental.max.MaxHistory.testFailure,"        public void testFailure(Failure failure) throws Exception {
            MaxHistory.this.putTestFailureTimestamp(failure.getDescription(), this.overallStart);
        }"
org.junit.experimental.max.MaxHistory.testRunFinished,"        public void testRunFinished(Result result) throws Exception {
            MaxHistory.this.save();
        }
    "
org.junit.experimental.results.PrintableResult.testResult,"    public static PrintableResult testResult(Class<?> type) {
        return new PrintableResult(type);
    }"
org.junit.experimental.results.PrintableResult.toString,"    public String toString() {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        new TextListener(new PrintStream(stream)).testRunFinished(this.result);
        return stream.toString();
    }"
org.junit.experimental.results.PrintableResult.failureCount,"    public int failureCount() {
        return this.result.getFailures().size();
    }
"
org.junit.experimental.results.FailureList.result,"    public Result result() {
        Result result = new Result();
        RunListener listener = result.createListener();
        for (Failure failure : this.failures) {
            try {
                listener.testFailure(failure);
            }
            catch (Exception e) {
                throw new RuntimeException(""I can't believe this happened"");
            }
        }
        return result;
    }
"
org.junit.experimental.results.ResultMatchers.isSuccessful,"    public static Matcher<PrintableResult> isSuccessful() {
        return ResultMatchers.failureCountIs(0);
    }"
org.junit.experimental.results.ResultMatchers.failureCountIs,"    public static Matcher<PrintableResult> failureCountIs(final int count) {
        return new TypeSafeMatcher<PrintableResult>(){

            @Override
            public void describeTo(Description description) {
                description.appendText(""has "" + count + "" failures"");
            }

            @Override
            public boolean matchesSafely(PrintableResult item) {
                return item.failureCount() == count;
            }
        };
    }"
org.junit.experimental.results.ResultMatchers.describeTo,"            public void describeTo(Description description) {
                description.appendText(""has "" + count + "" failures"");
            }"
org.junit.experimental.results.ResultMatchers.matchesSafely,"            public boolean matchesSafely(PrintableResult item) {
                return item.failureCount() == count;
            }
        "
org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining,"    public static Matcher<Object> hasSingleFailureContaining(final String string) {
        return new BaseMatcher<Object>(){

            @Override
            public boolean matches(Object item) {
                return item.toString().contains(string) && ResultMatchers.failureCountIs(1).matches(item);
            }

            @Override
            public void describeTo(Description description) {
                description.appendText(""has single failure containing "" + string);
            }
        };
    }"
org.junit.experimental.results.ResultMatchers.matches,"            public boolean matches(Object item) {
                return item.toString().contains(string) && ResultMatchers.failureCountIs(1).matches(item);
            }"
org.junit.experimental.results.ResultMatchers.describeTo,"            public void describeTo(Description description) {
                description.appendText(""has single failure containing "" + string);
            }
        "
org.junit.experimental.results.ResultMatchers.hasFailureContaining,"    public static Matcher<PrintableResult> hasFailureContaining(final String string) {
        return new BaseMatcher<PrintableResult>(){

            @Override
            public boolean matches(Object item) {
                return item.toString().contains(string);
            }

            @Override
            public void describeTo(Description description) {
                description.appendText(""has failure containing "" + string);
            }
        };
    }
"
org.junit.experimental.results.ResultMatchers.matches,"            public boolean matches(Object item) {
                return item.toString().contains(string);
            }"
org.junit.experimental.results.ResultMatchers.describeTo,"            public void describeTo(Description description) {
                description.appendText(""has failure containing "" + string);
            }
        "
org.junit.experimental.categories.Categories.getIncludedCategory,"    private Class<?> getIncludedCategory(Class<?> klass) {
        IncludeCategory annotation = klass.getAnnotation(IncludeCategory.class);
        return annotation == null ? null : annotation.value();
    }"
org.junit.experimental.categories.Categories.getExcludedCategory,"    private Class<?> getExcludedCategory(Class<?> klass) {
        ExcludeCategory annotation = klass.getAnnotation(ExcludeCategory.class);
        return annotation == null ? null : annotation.value();
    }"
org.junit.experimental.categories.Categories.include,"        public static CategoryFilter include(Class<?> categoryType) {
            return new CategoryFilter(categoryType, null);
        }"
org.junit.experimental.categories.Categories.describe,"        public String describe() {
            return ""category "" + this.fIncluded;
        }"
org.junit.experimental.categories.Categories.shouldRun,"        public boolean shouldRun(Description description) {
            if (this.hasCorrectCategoryAnnotation(description)) {
                return true;
            }
            for (Description each : description.getChildren()) {
                if (!this.shouldRun(each)) continue;
                return true;
            }
            return false;
        }"
org.junit.experimental.categories.Categories.hasCorrectCategoryAnnotation,"        private boolean hasCorrectCategoryAnnotation(Description description) {
            List<Class<?>> categories = this.categories(description);
            if (categories.isEmpty()) {
                return this.fIncluded == null;
            }
            for (Class<?> each : categories) {
                if (this.fExcluded == null || !this.fExcluded.isAssignableFrom(each)) continue;
                return false;
            }
            for (Class<?> each : categories) {
                if (this.fIncluded != null && !this.fIncluded.isAssignableFrom(each)) continue;
                return true;
            }
            return false;
        }"
org.junit.experimental.categories.Categories.categories,"        private List<Class<?>> categories(Description description) {
            ArrayList categories = new ArrayList();
            categories.addAll(Arrays.asList(this.directCategories(description)));
            categories.addAll(Arrays.asList(this.directCategories(this.parentDescription(description))));
            return categories;
        }"
org.junit.experimental.categories.Categories.parentDescription,"        private Description parentDescription(Description description) {
            return Description.createSuiteDescription(description.getTestClass());
        }"
org.junit.experimental.categories.Categories.directCategories,"        private Class<?>[] directCategories(Description description) {
            Category annotation = description.getAnnotation(Category.class);
            if (annotation == null) {
                return new Class[0];
            }
            return annotation.value();
        }
    }

    /*
     * This class specifies class file version 49.0 but uses Java 6 signatures.  Assumed Java 6.
     */
    @Retention(value=RetentionPolicy.RUNTIME)
    public static @interface ExcludeCategory {
        public Class<?> value();
    }

    /*
     * This class specifies class file version 49.0 but uses Java 6 signatures.  Assumed Java 6.
     */
    @Retention(value=RetentionPolicy.RUNTIME)
    public static @interface IncludeCategory {
        public Class<?> value();
    "
org.junit.runner.Runner.getDescription,
org.junit.runner.Runner.run,
org.junit.runner.Runner.testCount,"    public int testCount() {
        return this.getDescription().testCount();
    }
"
org.junit.runner.Computer.serial,"    public static Computer serial() {
        return new Computer();
    }"
org.junit.runner.Computer.getSuite,"    public Runner getSuite(final RunnerBuilder builder, Class<?>[] classes) throws InitializationError {
        return new Suite(new RunnerBuilder(){

            @Override
            public Runner runnerForClass(Class<?> testClass) throws Throwable {
                return Computer.this.getRunner(builder, testClass);
            }
        }, classes);
    }"
org.junit.runner.Computer.runnerForClass,"            public Runner runnerForClass(Class<?> testClass) throws Throwable {
                return Computer.this.getRunner(builder, testClass);
            }"
org.junit.runner.Computer.getRunner,"    protected Runner getRunner(RunnerBuilder builder, Class<?> testClass) throws Throwable {
        return builder.runnerForClass(testClass);
    }
"
org.junit.runner.Description.createSuiteDescription,"    public static Description createSuiteDescription(String name, Annotation ... annotations) {
        if (name.length() == 0) {
            throw new IllegalArgumentException(""name must have non-zero length"");
        }
        return new Description(name, annotations);
    }"
org.junit.runner.Description.createTestDescription,"    public static Description createTestDescription(Class<?> clazz, String name, Annotation ... annotations) {
        return new Description(String.format(""%s(%s)"", name, clazz.getName()), annotations);
    }"
org.junit.runner.Description.createTestDescription,"    public static Description createTestDescription(Class<?> clazz, String name) {
        return Description.createTestDescription(clazz, name, new Annotation[0]);
    }"
org.junit.runner.Description.createSuiteDescription,"    public static Description createSuiteDescription(Class<?> testClass) {
        return new Description(testClass.getName(), testClass.getAnnotations());
    }"
org.junit.runner.Description.getDisplayName,"    public String getDisplayName() {
        return this.fDisplayName;
    }"
org.junit.runner.Description.addChild,"    public void addChild(Description description) {
        this.getChildren().add(description);
    }"
org.junit.runner.Description.getChildren,"    public ArrayList<Description> getChildren() {
        return this.fChildren;
    }"
org.junit.runner.Description.isSuite,"    public boolean isSuite() {
        return !this.isTest();
    }"
org.junit.runner.Description.isTest,"    public boolean isTest() {
        return this.getChildren().isEmpty();
    }"
org.junit.runner.Description.testCount,"    public int testCount() {
        if (this.isTest()) {
            return 1;
        }
        int result = 0;
        for (Description child : this.getChildren()) {
            result += child.testCount();
        }
        return result;
    }"
org.junit.runner.Description.hashCode,"    public int hashCode() {
        return this.getDisplayName().hashCode();
    }"
org.junit.runner.Description.equals,"    public boolean equals(Object obj) {
        if (!(obj instanceof Description)) {
            return false;
        }
        Description d = (Description)obj;
        return this.getDisplayName().equals(d.getDisplayName()) && this.getChildren().equals(d.getChildren());
    }"
org.junit.runner.Description.toString,"    public String toString() {
        return this.getDisplayName();
    }"
org.junit.runner.Description.isEmpty,"    public boolean isEmpty() {
        return this.equals(EMPTY);
    }"
org.junit.runner.Description.childlessCopy,"    public Description childlessCopy() {
        return new Description(this.fDisplayName, this.fAnnotations);
    }"
org.junit.runner.Description.getAnnotation,"    public <T extends Annotation> T getAnnotation(Class<T> annotationType) {
        for (Annotation each : this.fAnnotations) {
            if (!each.annotationType().equals(annotationType)) continue;
            return (T)((Annotation)annotationType.cast(each));
        }
        return null;
    }"
org.junit.runner.Description.getAnnotations,"    public Collection<Annotation> getAnnotations() {
        return Arrays.asList(this.fAnnotations);
    }"
org.junit.runner.Description.getTestClass,"    public Class<?> getTestClass() {
        String name = this.getClassName();
        if (name == null) {
            return null;
        }
        try {
            return Class.forName(name);
        }
        catch (ClassNotFoundException e) {
            return null;
        }
    }"
org.junit.runner.Description.getClassName,"    public String getClassName() {
        Matcher matcher = this.methodStringMatcher();
        return matcher.matches() ? matcher.group(2) : this.toString();
    }"
org.junit.runner.Description.getMethodName,"    public String getMethodName() {
        return this.parseMethod();
    }"
org.junit.runner.Description.parseMethod,"    private String parseMethod() {
        Matcher matcher = this.methodStringMatcher();
        if (matcher.matches()) {
            return matcher.group(1);
        }
        return null;
    }"
org.junit.runner.Description.methodStringMatcher,"    private Matcher methodStringMatcher() {
        return Pattern.compile(""(.*)\\((.*)\\)"").matcher(this.toString());
    }
"
org.junit.runner.Describable.getDescription,"    public Description getDescription();
"
org.junit.runner.JUnitCore.main,"    public static void main(String ... args) {
        JUnitCore.runMainAndExit(new RealSystem(), args);
    }"
org.junit.runner.JUnitCore.runMainAndExit,"    public static void runMainAndExit(JUnitSystem system, String ... args) {
        Result result = new JUnitCore().runMain(system, args);
        system.exit(result.wasSuccessful() ? 0 : 1);
    }"
org.junit.runner.JUnitCore.runClasses,"    public static Result runClasses(Computer computer, Class<?> ... classes) {
        return new JUnitCore().run(computer, classes);
    }"
org.junit.runner.JUnitCore.runClasses,"    public static Result runClasses(Class<?> ... classes) {
        return new JUnitCore().run(JUnitCore.defaultComputer(), classes);
    }"
org.junit.runner.JUnitCore.runMain,"    public Result runMain(JUnitSystem system, String ... args) {
        system.out().println(""JUnit version "" + Version.id());
        ArrayList classes = new ArrayList();
        ArrayList<Failure> missingClasses = new ArrayList<Failure>();
        for (String string : args) {
            try {
                classes.add(Class.forName(string));
            }
            catch (ClassNotFoundException e) {
                system.out().println(""Could not find class: "" + string);
                Description description = Description.createSuiteDescription(string, new Annotation[0]);
                Failure failure = new Failure(description, e);
                missingClasses.add(failure);
            }
        }
        TextListener listener = new TextListener(system);
        this.addListener(listener);
        Result result = this.run(classes.toArray(new Class[0]));
        for (Failure failure : missingClasses) {
            result.getFailures().add(failure);
        }
        return result;
    }"
org.junit.runner.JUnitCore.getVersion,"    public String getVersion() {
        return Version.id();
    }"
org.junit.runner.JUnitCore.run,"    public Result run(Class<?> ... classes) {
        return this.run(Request.classes(JUnitCore.defaultComputer(), classes));
    }"
org.junit.runner.JUnitCore.run,"    public Result run(Computer computer, Class<?> ... classes) {
        return this.run(Request.classes(computer, classes));
    }"
org.junit.runner.JUnitCore.run,"    public Result run(Request request) {
        return this.run(request.getRunner());
    }"
org.junit.runner.JUnitCore.run,"    public Result run(Test test) {
        return this.run(new JUnit38ClassRunner(test));
    }"
org.junit.runner.JUnitCore.run,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public Result run(Runner runner) {
        Result result = new Result();
        RunListener listener = result.createListener();
        this.fNotifier.addFirstListener(listener);
        try {
            this.fNotifier.fireTestRunStarted(runner.getDescription());
            runner.run(this.fNotifier);
            this.fNotifier.fireTestRunFinished(result);
        }
        finally {
            this.removeListener(listener);
        }
        return result;
    }"
org.junit.runner.JUnitCore.addListener,"    public void addListener(RunListener listener) {
        this.fNotifier.addListener(listener);
    }"
org.junit.runner.JUnitCore.removeListener,"    public void removeListener(RunListener listener) {
        this.fNotifier.removeListener(listener);
    }"
org.junit.runner.JUnitCore.defaultComputer,"    static Computer defaultComputer() {
        return new Computer();
    }
"
org.junit.runner.Result.getRunCount,"    public int getRunCount() {
        return this.fCount.get();
    }"
org.junit.runner.Result.getFailureCount,"    public int getFailureCount() {
        return this.fFailures.size();
    }"
org.junit.runner.Result.getRunTime,"    public long getRunTime() {
        return this.fRunTime;
    }"
org.junit.runner.Result.getFailures,"    public List<Failure> getFailures() {
        return this.fFailures;
    }"
org.junit.runner.Result.getIgnoreCount,"    public int getIgnoreCount() {
        return this.fIgnoreCount.get();
    }"
org.junit.runner.Result.wasSuccessful,"    public boolean wasSuccessful() {
        return this.getFailureCount() == 0;
    }"
org.junit.runner.Result.createListener,"    public RunListener createListener() {
        return new Listener();
    }"
org.junit.runner.Result.testRunStarted,"        public void testRunStarted(Description description) throws Exception {
            Result.this.fStartTime = System.currentTimeMillis();
        }"
org.junit.runner.Result.testRunFinished,"        public void testRunFinished(Result result) throws Exception {
            long endTime = System.currentTimeMillis();
            Result.this.fRunTime += endTime - Result.this.fStartTime;
        }"
org.junit.runner.Result.testFinished,"        public void testFinished(Description description) throws Exception {
            Result.this.fCount.getAndIncrement();
        }"
org.junit.runner.Result.testFailure,"        public void testFailure(Failure failure) throws Exception {
            Result.this.fFailures.add(failure);
        }"
org.junit.runner.Result.testIgnored,"        public void testIgnored(Description description) throws Exception {
            Result.this.fIgnoreCount.getAndIncrement();
        }"
org.junit.runner.Result.testAssumptionFailure,"        public void testAssumptionFailure(Failure failure) {
        }
    "
org.junit.runner.Request.method,"    public static Request method(Class<?> clazz, String methodName) {
        Description method = Description.createTestDescription(clazz, methodName);
        return Request.aClass(clazz).filterWith(method);
    }"
org.junit.runner.Request.aClass,"    public static Request aClass(Class<?> clazz) {
        return new ClassRequest(clazz);
    }"
org.junit.runner.Request.classWithoutSuiteMethod,"    public static Request classWithoutSuiteMethod(Class<?> clazz) {
        return new ClassRequest(clazz, false);
    }"
org.junit.runner.Request.classes,"    public static Request classes(Computer computer, Class<?> ... classes) {
        try {
            AllDefaultPossibilitiesBuilder builder = new AllDefaultPossibilitiesBuilder(true);
            Runner suite = computer.getSuite(builder, classes);
            return Request.runner(suite);
        }
        catch (InitializationError e) {
            throw new RuntimeException(""Bug in saff's brain: Suite constructor, called as above, should always complete"");
        }
    }"
org.junit.runner.Request.classes,"    public static Request classes(Class<?> ... classes) {
        return Request.classes(JUnitCore.defaultComputer(), classes);
    }"
org.junit.runner.Request.errorReport,"    public static Request errorReport(Class<?> klass, Throwable cause) {
        return Request.runner(new ErrorReportingRunner(klass, cause));
    }"
org.junit.runner.Request.runner,"    public static Request runner(final Runner runner) {
        return new Request(){

            public Runner getRunner() {
                return runner;
            }
        };
    }"
org.junit.runner.Request.getRunner,"            public Runner getRunner() {
                return runner;
            }
        "
org.junit.runner.Request.getRunner,
org.junit.runner.Request.filterWith,"    public Request filterWith(Filter filter) {
        return new FilterRequest(this, filter);
    }"
org.junit.runner.Request.filterWith,"    public Request filterWith(Description desiredDescription) {
        return this.filterWith(Filter.matchMethodDescription(desiredDescription));
    }"
org.junit.runner.Request.sortWith,"    public Request sortWith(Comparator<Description> comparator) {
        return new SortingRequest(this, comparator);
    }
"
org.junit.runner.manipulation.Filterable.filter,"    public void filter(Filter var1) throws NoTestsRemainException;
"
org.junit.runner.manipulation.Sortable.sort,"    public void sort(Sorter var1);
"
org.junit.runner.manipulation.Sorter.compare,"        public int compare(Description o1, Description o2) {
            return 0;
        }
    "
org.junit.runner.manipulation.Sorter.apply,"    public void apply(Object object) {
        if (object instanceof Sortable) {
            Sortable sortable = (Sortable)object;
            sortable.sort(this);
        }
    }"
org.junit.runner.manipulation.Sorter.compare,"    public int compare(Description o1, Description o2) {
        return this.fComparator.compare(o1, o2);
    }
"
org.junit.runner.manipulation.Filter.shouldRun,"        public boolean shouldRun(Description description) {
            return true;
        }"
org.junit.runner.manipulation.Filter.describe,"        public String describe() {
            return ""all tests"";
        }
    "
org.junit.runner.manipulation.Filter.matchMethodDescription,"    public static Filter matchMethodDescription(final Description desiredDescription) {
        return new Filter(){

            public boolean shouldRun(Description description) {
                if (description.isTest()) {
                    return desiredDescription.equals(description);
                }
                for (Description each : description.getChildren()) {
                    if (!this.shouldRun(each)) continue;
                    return true;
                }
                return false;
            }

            public String describe() {
                return String.format(""Method %s"", desiredDescription.getDisplayName());
            }
        };
    }"
org.junit.runner.manipulation.Filter.shouldRun,"            public boolean shouldRun(Description description) {
                if (description.isTest()) {
                    return desiredDescription.equals(description);
                }
                for (Description each : description.getChildren()) {
                    if (!this.shouldRun(each)) continue;
                    return true;
                }
                return false;
            }"
org.junit.runner.manipulation.Filter.describe,"            public String describe() {
                return String.format(""Method %s"", desiredDescription.getDisplayName());
            }
        "
org.junit.runner.manipulation.Filter.shouldRun,
org.junit.runner.manipulation.Filter.describe,
org.junit.runner.manipulation.Filter.apply,"    public void apply(Object child) throws NoTestsRemainException {
        if (!(child instanceof Filterable)) {
            return;
        }
        Filterable filterable = (Filterable)child;
        filterable.filter(this);
    }
"
org.junit.runner.notification.Failure.getTestHeader,"    public String getTestHeader() {
        return this.fDescription.getDisplayName();
    }"
org.junit.runner.notification.Failure.getDescription,"    public Description getDescription() {
        return this.fDescription;
    }"
org.junit.runner.notification.Failure.getException,"    public Throwable getException() {
        return this.fThrownException;
    }"
org.junit.runner.notification.Failure.toString,"    public String toString() {
        StringBuffer buffer = new StringBuffer();
        buffer.append(this.getTestHeader() + "": "" + this.fThrownException.getMessage());
        return buffer.toString();
    }"
org.junit.runner.notification.Failure.getTrace,"    public String getTrace() {
        StringWriter stringWriter = new StringWriter();
        PrintWriter writer = new PrintWriter(stringWriter);
        this.getException().printStackTrace(writer);
        StringBuffer buffer = stringWriter.getBuffer();
        return buffer.toString();
    }"
org.junit.runner.notification.Failure.getMessage,"    public String getMessage() {
        return this.getException().getMessage();
    }
"
org.junit.runner.notification.RunListener.testRunStarted,"    public void testRunStarted(Description description) throws Exception {
    }"
org.junit.runner.notification.RunListener.testRunFinished,"    public void testRunFinished(Result result) throws Exception {
    }"
org.junit.runner.notification.RunListener.testStarted,"    public void testStarted(Description description) throws Exception {
    }"
org.junit.runner.notification.RunListener.testFinished,"    public void testFinished(Description description) throws Exception {
    }"
org.junit.runner.notification.RunListener.testFailure,"    public void testFailure(Failure failure) throws Exception {
    }"
org.junit.runner.notification.RunListener.testAssumptionFailure,"    public void testAssumptionFailure(Failure failure) {
    }"
org.junit.runner.notification.RunListener.testIgnored,"    public void testIgnored(Description description) throws Exception {
    }
"
org.junit.runner.notification.RunNotifier.addListener,"    public void addListener(RunListener listener) {
        this.fListeners.add(listener);
    }"
org.junit.runner.notification.RunNotifier.removeListener,"    public void removeListener(RunListener listener) {
        this.fListeners.remove(listener);
    }"
org.junit.runner.notification.RunNotifier.fireTestRunStarted,"    public void fireTestRunStarted(final Description description) {
        new SafeNotifier(){

            protected void notifyListener(RunListener each) throws Exception {
                each.testRunStarted(description);
            }
        }.run();
    }"
org.junit.runner.notification.RunNotifier.notifyListener,"            protected void notifyListener(RunListener each) throws Exception {
                each.testRunStarted(description);
            }
        "
org.junit.runner.notification.RunNotifier.fireTestRunFinished,"    public void fireTestRunFinished(final Result result) {
        new SafeNotifier(){

            protected void notifyListener(RunListener each) throws Exception {
                each.testRunFinished(result);
            }
        }.run();
    }"
org.junit.runner.notification.RunNotifier.notifyListener,"            protected void notifyListener(RunListener each) throws Exception {
                each.testRunFinished(result);
            }
        "
org.junit.runner.notification.RunNotifier.fireTestStarted,"    public void fireTestStarted(final Description description) throws StoppedByUserException {
        if (this.fPleaseStop) {
            throw new StoppedByUserException();
        }
        new SafeNotifier(){

            protected void notifyListener(RunListener each) throws Exception {
                each.testStarted(description);
            }
        }.run();
    }"
org.junit.runner.notification.RunNotifier.notifyListener,"            protected void notifyListener(RunListener each) throws Exception {
                each.testStarted(description);
            }
        "
org.junit.runner.notification.RunNotifier.fireTestFailure,"    public void fireTestFailure(final Failure failure) {
        new SafeNotifier(){

            protected void notifyListener(RunListener each) throws Exception {
                each.testFailure(failure);
            }
        }.run();
    }"
org.junit.runner.notification.RunNotifier.notifyListener,"            protected void notifyListener(RunListener each) throws Exception {
                each.testFailure(failure);
            }
        "
org.junit.runner.notification.RunNotifier.fireTestAssumptionFailed,"    public void fireTestAssumptionFailed(final Failure failure) {
        new SafeNotifier(){

            protected void notifyListener(RunListener each) throws Exception {
                each.testAssumptionFailure(failure);
            }
        }.run();
    }"
org.junit.runner.notification.RunNotifier.notifyListener,"            protected void notifyListener(RunListener each) throws Exception {
                each.testAssumptionFailure(failure);
            }
        "
org.junit.runner.notification.RunNotifier.fireTestIgnored,"    public void fireTestIgnored(final Description description) {
        new SafeNotifier(){

            protected void notifyListener(RunListener each) throws Exception {
                each.testIgnored(description);
            }
        }.run();
    }"
org.junit.runner.notification.RunNotifier.notifyListener,"            protected void notifyListener(RunListener each) throws Exception {
                each.testIgnored(description);
            }
        "
org.junit.runner.notification.RunNotifier.fireTestFinished,"    public void fireTestFinished(final Description description) {
        new SafeNotifier(){

            protected void notifyListener(RunListener each) throws Exception {
                each.testFinished(description);
            }
        }.run();
    }"
org.junit.runner.notification.RunNotifier.notifyListener,"            protected void notifyListener(RunListener each) throws Exception {
                each.testFinished(description);
            }
        "
org.junit.runner.notification.RunNotifier.pleaseStop,"    public void pleaseStop() {
        this.fPleaseStop = true;
    }"
org.junit.runner.notification.RunNotifier.addFirstListener,"    public void addFirstListener(RunListener listener) {
        this.fListeners.add(0, listener);
    }"
org.junit.runner.notification.RunNotifier.run,"* WARNING - Removed try catching itself - possible behaviour change.
*/
        void run() {
            List list = RunNotifier.this.fListeners;
            synchronized (list) {
                Iterator all = RunNotifier.this.fListeners.iterator();
                while (all.hasNext()) {
                    try {
                        this.notifyListener((RunListener)all.next());
                    }
                    catch (Exception e) {
                        all.remove();
                        RunNotifier.this.fireTestFailure(new Failure(Description.TEST_MECHANISM, e));
                    }
                }
            }
        }"
org.junit.runner.notification.RunNotifier.notifyListener,"        protected abstract void notifyListener(RunListener var1) throws Exception;
    "
org.junit.internal.InexactComparisonCriteria.assertElementsEqual,"    protected void assertElementsEqual(Object expected, Object actual) {
        if (expected instanceof Double) {
            Assert.assertEquals((Double)expected, (double)((Double)actual), this.fDelta);
        } else {
            Assert.assertEquals(((Float)expected).floatValue(), (double)((Float)actual).floatValue(), this.fDelta);
        }
    }
"
org.junit.internal.ArrayComparisonFailure.addDimension,"    public void addDimension(int index) {
        this.fIndices.add(0, index);
    }"
org.junit.internal.ArrayComparisonFailure.getMessage,"    public String getMessage() {
        StringBuilder builder = new StringBuilder();
        if (this.fMessage != null) {
            builder.append(this.fMessage);
        }
        builder.append(""arrays first differed at element "");
        for (int each : this.fIndices) {
            builder.append(""["");
            builder.append(each);
            builder.append(""]"");
        }
        builder.append(""; "");
        builder.append(((Throwable)((Object)this.fCause)).getMessage());
        return builder.toString();
    }"
org.junit.internal.ArrayComparisonFailure.toString,"    public String toString() {
        return this.getMessage();
    }
"
org.junit.internal.JUnitSystem.exit,
org.junit.internal.JUnitSystem.out,"    public PrintStream out();
"
org.junit.internal.RealSystem.exit,"    public void exit(int code) {
        System.exit(code);
    }"
org.junit.internal.RealSystem.out,"    public PrintStream out() {
        return System.out;
    }
"
org.junit.internal.ComparisonCriteria.arrayEquals,"    public void arrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure {
        if (expecteds == actuals) {
            return;
        }
        String header = message == null ? """" : message + "": "";
        int expectedsLength = this.assertArraysAreSameLength(expecteds, actuals, header);
        for (int i = 0; i < expectedsLength; ++i) {
            Object expected = Array.get(expecteds, i);
            Object actual = Array.get(actuals, i);
            if (this.isArray(expected) && this.isArray(actual)) {
                try {
                    this.arrayEquals(message, expected, actual);
                    continue;
                }
                catch (ArrayComparisonFailure e) {
                    e.addDimension(i);
                    throw e;
                }
            }
            try {
                this.assertElementsEqual(expected, actual);
                continue;
            }
            catch (AssertionError e) {
                throw new ArrayComparisonFailure(header, e, i);
            }
        }
    }"
org.junit.internal.ComparisonCriteria.isArray,"    private boolean isArray(Object expected) {
        return expected != null && expected.getClass().isArray();
    }"
org.junit.internal.ComparisonCriteria.assertArraysAreSameLength,"    private int assertArraysAreSameLength(Object expecteds, Object actuals, String header) {
        int expectedsLength;
        int actualsLength;
        if (expecteds == null) {
            Assert.fail(header + ""expected array was null"");
        }
        if (actuals == null) {
            Assert.fail(header + ""actual array was null"");
        }
        if ((actualsLength = Array.getLength(actuals)) != (expectedsLength = Array.getLength(expecteds))) {
            Assert.fail(header + ""array lengths differed, expected.length="" + expectedsLength + "" actual.length="" + actualsLength);
        }
        return expectedsLength;
    }"
org.junit.internal.ComparisonCriteria.assertElementsEqual,"    protected abstract void assertElementsEqual(Object var1, Object var2);
"
org.junit.internal.TextListener.testRunFinished,"    public void testRunFinished(Result result) {
        this.printHeader(result.getRunTime());
        this.printFailures(result);
        this.printFooter(result);
    }"
org.junit.internal.TextListener.testStarted,"    public void testStarted(Description description) {
        this.fWriter.append('.');
    }"
org.junit.internal.TextListener.testFailure,"    public void testFailure(Failure failure) {
        this.fWriter.append('E');
    }"
org.junit.internal.TextListener.testIgnored,"    public void testIgnored(Description description) {
        this.fWriter.append('I');
    }"
org.junit.internal.TextListener.getWriter,"    private PrintStream getWriter() {
        return this.fWriter;
    }"
org.junit.internal.TextListener.printHeader,"    protected void printHeader(long runTime) {
        this.getWriter().println();
        this.getWriter().println(""Time: "" + this.elapsedTimeAsString(runTime));
    }"
org.junit.internal.TextListener.printFailures,"    protected void printFailures(Result result) {
        List<Failure> failures = result.getFailures();
        if (failures.size() == 0) {
            return;
        }
        if (failures.size() == 1) {
            this.getWriter().println(""There was "" + failures.size() + "" failure:"");
        } else {
            this.getWriter().println(""There were "" + failures.size() + "" failures:"");
        }
        int i = 1;
        for (Failure each : failures) {
            this.printFailure(each, """" + i++);
        }
    }"
org.junit.internal.TextListener.printFailure,"    protected void printFailure(Failure each, String prefix) {
        this.getWriter().println(prefix + "") "" + each.getTestHeader());
        this.getWriter().print(each.getTrace());
    }"
org.junit.internal.TextListener.printFooter,"    protected void printFooter(Result result) {
        if (result.wasSuccessful()) {
            this.getWriter().println();
            this.getWriter().print(""OK"");
            this.getWriter().println("" ("" + result.getRunCount() + "" test"" + (result.getRunCount() == 1 ? """" : ""s"") + "")"");
        } else {
            this.getWriter().println();
            this.getWriter().println(""FAILURES!!!"");
            this.getWriter().println(""Tests run: "" + result.getRunCount() + "",  Failures: "" + result.getFailureCount());
        }
        this.getWriter().println();
    }"
org.junit.internal.TextListener.elapsedTimeAsString,"    protected String elapsedTimeAsString(long runTime) {
        return NumberFormat.getInstance().format((double)runTime / 1000.0);
    }
"
org.junit.internal.AssumptionViolatedException.getMessage,"    public String getMessage() {
        return StringDescription.asString(this);
    }"
org.junit.internal.AssumptionViolatedException.describeTo,"    public void describeTo(Description description) {
        if (this.fMatcher != null) {
            description.appendText(""got: "");
            description.appendValue(this.fValue);
            description.appendText("", expected: "");
            description.appendDescriptionOf(this.fMatcher);
        } else {
            description.appendText(""failed assumption: "" + this.fValue);
        }
    }
"
org.junit.internal.ExactComparisonCriteria.assertElementsEqual,"    protected void assertElementsEqual(Object expected, Object actual) {
        Assert.assertEquals(expected, actual);
    }
"
org.junit.internal.builders.JUnit4Builder.runnerForClass,"    public Runner runnerForClass(Class<?> testClass) throws Throwable {
        return new BlockJUnit4ClassRunner(testClass);
    }
"
org.junit.internal.builders.IgnoredClassRunner.run,"    public void run(RunNotifier notifier) {
        notifier.fireTestIgnored(this.getDescription());
    }"
org.junit.internal.builders.IgnoredClassRunner.getDescription,"    public Description getDescription() {
        return Description.createSuiteDescription(this.fTestClass);
    }
"
org.junit.internal.builders.AnnotatedBuilder.runnerForClass,"    public Runner runnerForClass(Class<?> testClass) throws Exception {
        RunWith annotation = testClass.getAnnotation(RunWith.class);
        if (annotation != null) {
            return this.buildRunner(annotation.value(), testClass);
        }
        return null;
    }"
org.junit.internal.builders.AnnotatedBuilder.buildRunner,"    public Runner buildRunner(Class<? extends Runner> runnerClass, Class<?> testClass) throws Exception {
        try {
            return runnerClass.getConstructor(Class.class).newInstance(testClass);
        }
        catch (NoSuchMethodException e) {
            try {
                return runnerClass.getConstructor(Class.class, RunnerBuilder.class).newInstance(testClass, this.fSuiteBuilder);
            }
            catch (NoSuchMethodException e2) {
                String simpleName = runnerClass.getSimpleName();
                throw new InitializationError(String.format(CONSTRUCTOR_ERROR_FORMAT, simpleName, simpleName));
            }
        }
    }
"
org.junit.internal.builders.NullBuilder.runnerForClass,"    public Runner runnerForClass(Class<?> each) throws Throwable {
        return null;
    }
"
org.junit.internal.builders.IgnoredBuilder.runnerForClass,"    public Runner runnerForClass(Class<?> testClass) {
        if (testClass.getAnnotation(Ignore.class) != null) {
            return new IgnoredClassRunner(testClass);
        }
        return null;
    }
"
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass,"    public Runner runnerForClass(Class<?> testClass) throws Throwable {
        List<RunnerBuilder> builders = Arrays.asList(this.ignoredBuilder(), this.annotatedBuilder(), this.suiteMethodBuilder(), this.junit3Builder(), this.junit4Builder());
        for (RunnerBuilder each : builders) {
            Runner runner = each.safeRunnerForClass(testClass);
            if (runner == null) continue;
            return runner;
        }
        return null;
    }"
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder,"    protected JUnit4Builder junit4Builder() {
        return new JUnit4Builder();
    }"
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder,"    protected JUnit3Builder junit3Builder() {
        return new JUnit3Builder();
    }"
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder,"    protected AnnotatedBuilder annotatedBuilder() {
        return new AnnotatedBuilder(this);
    }"
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder,"    protected IgnoredBuilder ignoredBuilder() {
        return new IgnoredBuilder();
    }"
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder,"    protected RunnerBuilder suiteMethodBuilder() {
        if (this.fCanUseSuiteMethod) {
            return new SuiteMethodBuilder();
        }
        return new NullBuilder();
    }
"
org.junit.internal.builders.JUnit3Builder.runnerForClass,"    public Runner runnerForClass(Class<?> testClass) throws Throwable {
        if (this.isPre4Test(testClass)) {
            return new JUnit38ClassRunner(testClass);
        }
        return null;
    }"
org.junit.internal.builders.JUnit3Builder.isPre4Test,"    boolean isPre4Test(Class<?> testClass) {
        return TestCase.class.isAssignableFrom(testClass);
    }
"
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass,"    public Runner runnerForClass(Class<?> each) throws Throwable {
        if (this.hasSuiteMethod(each)) {
            return new SuiteMethod(each);
        }
        return null;
    }"
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod,"    public boolean hasSuiteMethod(Class<?> testClass) {
        try {
            testClass.getMethod(""suite"", new Class[0]);
        }
        catch (NoSuchMethodException e) {
            return false;
        }
        return true;
    }
"
org.junit.internal.requests.ClassRequest.getRunner,"    public Runner getRunner() {
        return new AllDefaultPossibilitiesBuilder(this.fCanUseSuiteMethod).safeRunnerForClass(this.fTestClass);
    }
"
org.junit.internal.requests.SortingRequest.getRunner,"    public Runner getRunner() {
        Runner runner = this.fRequest.getRunner();
        new Sorter(this.fComparator).apply(runner);
        return runner;
    }
"
org.junit.internal.requests.FilterRequest.getRunner,"    public Runner getRunner() {
        try {
            Runner runner = this.fRequest.getRunner();
            this.fFilter.apply(runner);
            return runner;
        }
        catch (NoTestsRemainException e) {
            return new ErrorReportingRunner(Filter.class, new Exception(String.format(""No tests found matching %s from %s"", this.fFilter.describe(), this.fRequest.toString())));
        }
    }
"
org.junit.internal.runners.TestClass.getTestMethods,"    public List<Method> getTestMethods() {
        return this.getAnnotatedMethods(Test.class);
    }"
org.junit.internal.runners.TestClass.getBefores,"    List<Method> getBefores() {
        return this.getAnnotatedMethods(BeforeClass.class);
    }"
org.junit.internal.runners.TestClass.getAfters,"    List<Method> getAfters() {
        return this.getAnnotatedMethods(AfterClass.class);
    }"
org.junit.internal.runners.TestClass.getAnnotatedMethods,"    public List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {
        ArrayList<Method> results = new ArrayList<Method>();
        for (Class<?> eachClass : this.getSuperClasses(this.fClass)) {
            Method[] methods;
            for (Method eachMethod : methods = eachClass.getDeclaredMethods()) {
                Annotation annotation = eachMethod.getAnnotation(annotationClass);
                if (annotation == null || this.isShadowed(eachMethod, results)) continue;
                results.add(eachMethod);
            }
        }
        if (this.runsTopToBottom(annotationClass)) {
            Collections.reverse(results);
        }
        return results;
    }"
org.junit.internal.runners.TestClass.runsTopToBottom,"    private boolean runsTopToBottom(Class<? extends Annotation> annotation) {
        return annotation.equals(Before.class) || annotation.equals(BeforeClass.class);
    }"
org.junit.internal.runners.TestClass.isShadowed,"    private boolean isShadowed(Method method, List<Method> results) {
        for (Method each : results) {
            if (!this.isShadowed(method, each)) continue;
            return true;
        }
        return false;
    }"
org.junit.internal.runners.TestClass.isShadowed,"    private boolean isShadowed(Method current, Method previous) {
        if (!previous.getName().equals(current.getName())) {
            return false;
        }
        if (previous.getParameterTypes().length != current.getParameterTypes().length) {
            return false;
        }
        for (int i = 0; i < previous.getParameterTypes().length; ++i) {
            if (previous.getParameterTypes()[i].equals(current.getParameterTypes()[i])) continue;
            return false;
        }
        return true;
    }"
org.junit.internal.runners.TestClass.getSuperClasses,"    private List<Class<?>> getSuperClasses(Class<?> testClass) {
        ArrayList results = new ArrayList();
        for (Class<?> current = testClass; current != null; current = current.getSuperclass()) {
            results.add(current);
        }
        return results;
    }"
org.junit.internal.runners.TestClass.getConstructor,"    public Constructor<?> getConstructor() throws SecurityException, NoSuchMethodException {
        return this.fClass.getConstructor(new Class[0]);
    }"
org.junit.internal.runners.TestClass.getJavaClass,"    public Class<?> getJavaClass() {
        return this.fClass;
    }"
org.junit.internal.runners.TestClass.getName,"    public String getName() {
        return this.fClass.getName();
    }
"
org.junit.internal.runners.TestMethod.isIgnored,"    public boolean isIgnored() {
        return this.fMethod.getAnnotation(Ignore.class) != null;
    }"
org.junit.internal.runners.TestMethod.getTimeout,"    public long getTimeout() {
        Test annotation = this.fMethod.getAnnotation(Test.class);
        if (annotation == null) {
            return 0L;
        }
        long timeout = annotation.timeout();
        return timeout;
    }"
org.junit.internal.runners.TestMethod.getExpectedException,"    protected Class<? extends Throwable> getExpectedException() {
        Test annotation = this.fMethod.getAnnotation(Test.class);
        if (annotation == null || annotation.expected() == Test.None.class) {
            return null;
        }
        return annotation.expected();
    }"
org.junit.internal.runners.TestMethod.isUnexpected,"    boolean isUnexpected(Throwable exception) {
        return !this.getExpectedException().isAssignableFrom(exception.getClass());
    }"
org.junit.internal.runners.TestMethod.expectsException,"    boolean expectsException() {
        return this.getExpectedException() != null;
    }"
org.junit.internal.runners.TestMethod.getBefores,"    List<Method> getBefores() {
        return this.fTestClass.getAnnotatedMethods(Before.class);
    }"
org.junit.internal.runners.TestMethod.getAfters,"    List<Method> getAfters() {
        return this.fTestClass.getAnnotatedMethods(After.class);
    }"
org.junit.internal.runners.TestMethod.invoke,"    public void invoke(Object test) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
        this.fMethod.invoke(test, new Object[0]);
    }
"
org.junit.internal.runners.MethodRoadie.run,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public void run() {
        if (this.fTestMethod.isIgnored()) {
            this.fNotifier.fireTestIgnored(this.fDescription);
            return;
        }
        this.fNotifier.fireTestStarted(this.fDescription);
        try {
            long timeout = this.fTestMethod.getTimeout();
            if (timeout > 0L) {
                this.runWithTimeout(timeout);
            } else {
                this.runTest();
            }
        }
        finally {
            this.fNotifier.fireTestFinished(this.fDescription);
        }
    }"
org.junit.internal.runners.MethodRoadie.runWithTimeout,"    private void runWithTimeout(final long timeout) {
        this.runBeforesThenTestThenAfters(new Runnable(){

            public void run() {
                ExecutorService service = Executors.newSingleThreadExecutor();
                Callable<Object> callable = new Callable<Object>(){

                    @Override
                    public Object call() throws Exception {
                        MethodRoadie.this.runTestMethod();
                        return null;
                    }
                };
                Future<Object> result = service.submit(callable);
                service.shutdown();
                try {
                    boolean terminated = service.awaitTermination(timeout, TimeUnit.MILLISECONDS);
                    if (!terminated) {
                        service.shutdownNow();
                    }
                    result.get(0L, TimeUnit.MILLISECONDS);
                }
                catch (TimeoutException e) {
                    MethodRoadie.this.addFailure(new Exception(String.format(""test timed out after %d milliseconds"", timeout)));
                }
                catch (Exception e) {
                    MethodRoadie.this.addFailure(e);
                }
            }
        });
    }"
org.junit.internal.runners.MethodRoadie.run,"            public void run() {
                ExecutorService service = Executors.newSingleThreadExecutor();
                Callable<Object> callable = new Callable<Object>(){

                    @Override
                    public Object call() throws Exception {
                        MethodRoadie.this.runTestMethod();
                        return null;
                    }
                };
                Future<Object> result = service.submit(callable);
                service.shutdown();
                try {
                    boolean terminated = service.awaitTermination(timeout, TimeUnit.MILLISECONDS);
                    if (!terminated) {
                        service.shutdownNow();
                    }
                    result.get(0L, TimeUnit.MILLISECONDS);
                }
                catch (TimeoutException e) {
                    MethodRoadie.this.addFailure(new Exception(String.format(""test timed out after %d milliseconds"", timeout)));
                }
                catch (Exception e) {
                    MethodRoadie.this.addFailure(e);
                }
            }
        "
org.junit.internal.runners.MethodRoadie.call,"                    public Object call() throws Exception {
                        MethodRoadie.this.runTestMethod();
                        return null;
                    }
                "
org.junit.internal.runners.MethodRoadie.runTest,"    public void runTest() {
        this.runBeforesThenTestThenAfters(new Runnable(){

            public void run() {
                MethodRoadie.this.runTestMethod();
            }
        });
    }"
org.junit.internal.runners.MethodRoadie.run,"            public void run() {
                MethodRoadie.this.runTestMethod();
            }
        "
org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters,"    public void runBeforesThenTestThenAfters(Runnable test) {
        try {
            this.runBefores();
            test.run();
        }
        catch (FailedBefore e) {
        }
        catch (Exception e) {
            throw new RuntimeException(""test should never throw an exception to this level"");
        }
        finally {
            this.runAfters();
        }
    }"
org.junit.internal.runners.MethodRoadie.runTestMethod,"    protected void runTestMethod() {
        try {
            this.fTestMethod.invoke(this.fTest);
            if (this.fTestMethod.expectsException()) {
                this.addFailure((Throwable)((Object)new AssertionError((Object)(""Expected exception: "" + this.fTestMethod.getExpectedException().getName()))));
            }
        }
        catch (InvocationTargetException e) {
            Throwable actual = e.getTargetException();
            if (actual instanceof AssumptionViolatedException) {
                return;
            }
            if (!this.fTestMethod.expectsException()) {
                this.addFailure(actual);
            } else if (this.fTestMethod.isUnexpected(actual)) {
                String message = ""Unexpected exception, expected<"" + this.fTestMethod.getExpectedException().getName() + ""> but was<"" + actual.getClass().getName() + "">"";
                this.addFailure(new Exception(message, actual));
            }
        }
        catch (Throwable e) {
            this.addFailure(e);
        }
    }"
org.junit.internal.runners.MethodRoadie.runBefores,"    private void runBefores() throws FailedBefore {
        try {
            try {
                List<Method> befores = this.fTestMethod.getBefores();
                for (Method before : befores) {
                    before.invoke(this.fTest, new Object[0]);
                }
            }
            catch (InvocationTargetException e) {
                throw e.getTargetException();
            }
        }
        catch (AssumptionViolatedException e) {
            throw new FailedBefore();
        }
        catch (Throwable e) {
            this.addFailure(e);
            throw new FailedBefore();
        }
    }"
org.junit.internal.runners.MethodRoadie.runAfters,"    private void runAfters() {
        List<Method> afters = this.fTestMethod.getAfters();
        for (Method after : afters) {
            try {
                after.invoke(this.fTest, new Object[0]);
            }
            catch (InvocationTargetException e) {
                this.addFailure(e.getTargetException());
            }
            catch (Throwable e) {
                this.addFailure(e);
            }
        }
    }"
org.junit.internal.runners.MethodRoadie.addFailure,"    protected void addFailure(Throwable e) {
        this.fNotifier.fireTestFailure(new Failure(this.fDescription, e));
    }
"
org.junit.internal.runners.JUnit38ClassRunner.run,"    public void run(RunNotifier notifier) {
        TestResult result = new TestResult();
        result.addListener(this.createAdaptingListener(notifier));
        this.getTest().run(result);
    }"
org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener,"    public TestListener createAdaptingListener(RunNotifier notifier) {
        return new OldTestClassAdaptingListener(notifier);
    }"
org.junit.internal.runners.JUnit38ClassRunner.getDescription,"    public Description getDescription() {
        return JUnit38ClassRunner.makeDescription(this.getTest());
    }"
org.junit.internal.runners.JUnit38ClassRunner.makeDescription,"    private static Description makeDescription(Test test) {
        if (test instanceof TestCase) {
            TestCase tc = (TestCase)test;
            return Description.createTestDescription(tc.getClass(), tc.getName());
        }
        if (test instanceof TestSuite) {
            TestSuite ts = (TestSuite)test;
            String name = ts.getName() == null ? JUnit38ClassRunner.createSuiteDescription(ts) : ts.getName();
            Description description = Description.createSuiteDescription(name, new Annotation[0]);
            int n = ts.testCount();
            for (int i = 0; i < n; ++i) {
                Description made = JUnit38ClassRunner.makeDescription(ts.testAt(i));
                description.addChild(made);
            }
            return description;
        }
        if (test instanceof Describable) {
            Describable adapter = (Describable)((Object)test);
            return adapter.getDescription();
        }
        if (test instanceof TestDecorator) {
            TestDecorator decorator = (TestDecorator)test;
            return JUnit38ClassRunner.makeDescription(decorator.getTest());
        }
        return Description.createSuiteDescription(test.getClass());
    }"
org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription,"    private static String createSuiteDescription(TestSuite ts) {
        int count = ts.countTestCases();
        String example = count == 0 ? """" : String.format("" [example: %s]"", ts.testAt(0));
        return String.format(""TestSuite with %s tests%s"", count, example);
    }"
org.junit.internal.runners.JUnit38ClassRunner.filter,"    public void filter(Filter filter) throws NoTestsRemainException {
        if (this.getTest() instanceof Filterable) {
            Filterable adapter = (Filterable)((Object)this.getTest());
            adapter.filter(filter);
        } else if (this.getTest() instanceof TestSuite) {
            TestSuite suite = (TestSuite)this.getTest();
            TestSuite filtered = new TestSuite(suite.getName());
            int n = suite.testCount();
            for (int i = 0; i < n; ++i) {
                Test test = suite.testAt(i);
                if (!filter.shouldRun(JUnit38ClassRunner.makeDescription(test))) continue;
                filtered.addTest(test);
            }
            this.setTest(filtered);
        }
    }"
org.junit.internal.runners.JUnit38ClassRunner.sort,"    public void sort(Sorter sorter) {
        if (this.getTest() instanceof Sortable) {
            Sortable adapter = (Sortable)((Object)this.getTest());
            adapter.sort(sorter);
        }
    }"
org.junit.internal.runners.JUnit38ClassRunner.setTest,"    private void setTest(Test test) {
        this.fTest = test;
    }"
org.junit.internal.runners.JUnit38ClassRunner.getTest,"    private Test getTest() {
        return this.fTest;
    }"
org.junit.internal.runners.JUnit38ClassRunner.endTest,"        public void endTest(Test test) {
            this.fNotifier.fireTestFinished(this.asDescription(test));
        }"
org.junit.internal.runners.JUnit38ClassRunner.startTest,"        public void startTest(Test test) {
            this.fNotifier.fireTestStarted(this.asDescription(test));
        }"
org.junit.internal.runners.JUnit38ClassRunner.addError,"        public void addError(Test test, Throwable t) {
            Failure failure = new Failure(this.asDescription(test), t);
            this.fNotifier.fireTestFailure(failure);
        }"
org.junit.internal.runners.JUnit38ClassRunner.asDescription,"        private Description asDescription(Test test) {
            if (test instanceof Describable) {
                Describable facade = (Describable)((Object)test);
                return facade.getDescription();
            }
            return Description.createTestDescription(this.getEffectiveClass(test), this.getName(test));
        }"
org.junit.internal.runners.JUnit38ClassRunner.getEffectiveClass,"        private Class<? extends Test> getEffectiveClass(Test test) {
            return test.getClass();
        }"
org.junit.internal.runners.JUnit38ClassRunner.getName,"        private String getName(Test test) {
            if (test instanceof TestCase) {
                return ((TestCase)test).getName();
            }
            return test.toString();
        }"
org.junit.internal.runners.JUnit38ClassRunner.addFailure,"        public void addFailure(Test test, AssertionFailedError t) {
            this.addError(test, (Throwable)((Object)t));
        }
    "
org.junit.internal.runners.JUnit4ClassRunner.getTestMethods,"    protected List<Method> getTestMethods() {
        return this.fTestClass.getTestMethods();
    }"
org.junit.internal.runners.JUnit4ClassRunner.validate,"    protected void validate() throws InitializationError {
        MethodValidator methodValidator = new MethodValidator(this.fTestClass);
        methodValidator.validateMethodsForDefaultRunner();
        methodValidator.assertValid();
    }"
org.junit.internal.runners.JUnit4ClassRunner.run,"    public void run(final RunNotifier notifier) {
        new ClassRoadie(notifier, this.fTestClass, this.getDescription(), new Runnable(){

            public void run() {
                JUnit4ClassRunner.this.runMethods(notifier);
            }
        }).runProtected();
    }"
org.junit.internal.runners.JUnit4ClassRunner.run,"            public void run() {
                JUnit4ClassRunner.this.runMethods(notifier);
            }
        "
org.junit.internal.runners.JUnit4ClassRunner.runMethods,"    protected void runMethods(RunNotifier notifier) {
        for (Method method : this.fTestMethods) {
            this.invokeTestMethod(method, notifier);
        }
    }"
org.junit.internal.runners.JUnit4ClassRunner.getDescription,"    public Description getDescription() {
        Description spec = Description.createSuiteDescription(this.getName(), this.classAnnotations());
        List<Method> testMethods = this.fTestMethods;
        for (Method method : testMethods) {
            spec.addChild(this.methodDescription(method));
        }
        return spec;
    }"
org.junit.internal.runners.JUnit4ClassRunner.classAnnotations,"    protected Annotation[] classAnnotations() {
        return this.fTestClass.getJavaClass().getAnnotations();
    }"
org.junit.internal.runners.JUnit4ClassRunner.getName,"    protected String getName() {
        return this.getTestClass().getName();
    }"
org.junit.internal.runners.JUnit4ClassRunner.createTest,"    protected Object createTest() throws Exception {
        return this.getTestClass().getConstructor().newInstance(new Object[0]);
    }"
org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod,"    protected void invokeTestMethod(Method method, RunNotifier notifier) {
        Object test;
        Description description = this.methodDescription(method);
        try {
            test = this.createTest();
        }
        catch (InvocationTargetException e) {
            this.testAborted(notifier, description, e.getCause());
            return;
        }
        catch (Exception e) {
            this.testAborted(notifier, description, e);
            return;
        }
        TestMethod testMethod = this.wrapMethod(method);
        new MethodRoadie(test, testMethod, notifier, description).run();
    }"
org.junit.internal.runners.JUnit4ClassRunner.testAborted,"    private void testAborted(RunNotifier notifier, Description description, Throwable e) {
        notifier.fireTestStarted(description);
        notifier.fireTestFailure(new Failure(description, e));
        notifier.fireTestFinished(description);
    }"
org.junit.internal.runners.JUnit4ClassRunner.wrapMethod,"    protected TestMethod wrapMethod(Method method) {
        return new TestMethod(method, this.fTestClass);
    }"
org.junit.internal.runners.JUnit4ClassRunner.testName,"    protected String testName(Method method) {
        return method.getName();
    }"
org.junit.internal.runners.JUnit4ClassRunner.methodDescription,"    protected Description methodDescription(Method method) {
        return Description.createTestDescription(this.getTestClass().getJavaClass(), this.testName(method), this.testAnnotations(method));
    }"
org.junit.internal.runners.JUnit4ClassRunner.testAnnotations,"    protected Annotation[] testAnnotations(Method method) {
        return method.getAnnotations();
    }"
org.junit.internal.runners.JUnit4ClassRunner.filter,"    public void filter(Filter filter) throws NoTestsRemainException {
        Iterator<Method> iter = this.fTestMethods.iterator();
        while (iter.hasNext()) {
            Method method = iter.next();
            if (filter.shouldRun(this.methodDescription(method))) continue;
            iter.remove();
        }
        if (this.fTestMethods.isEmpty()) {
            throw new NoTestsRemainException();
        }
    }"
org.junit.internal.runners.JUnit4ClassRunner.sort,"    public void sort(final Sorter sorter) {
        Collections.sort(this.fTestMethods, new Comparator<Method>(){

            @Override
            public int compare(Method o1, Method o2) {
                return sorter.compare(JUnit4ClassRunner.this.methodDescription(o1), JUnit4ClassRunner.this.methodDescription(o2));
            }
        });
    }"
org.junit.internal.runners.JUnit4ClassRunner.compare,"            public int compare(Method o1, Method o2) {
                return sorter.compare(JUnit4ClassRunner.this.methodDescription(o1), JUnit4ClassRunner.this.methodDescription(o2));
            }
        "
org.junit.internal.runners.JUnit4ClassRunner.getTestClass,"    protected TestClass getTestClass() {
        return this.fTestClass;
    }
"
org.junit.internal.runners.MethodValidator.validateInstanceMethods,"    public void validateInstanceMethods() {
        this.validateTestMethods(After.class, false);
        this.validateTestMethods(Before.class, false);
        this.validateTestMethods(Test.class, false);
        List<Method> methods = this.fTestClass.getAnnotatedMethods(Test.class);
        if (methods.size() == 0) {
            this.fErrors.add(new Exception(""No runnable methods""));
        }
    }"
org.junit.internal.runners.MethodValidator.validateStaticMethods,"    public void validateStaticMethods() {
        this.validateTestMethods(BeforeClass.class, true);
        this.validateTestMethods(AfterClass.class, true);
    }"
org.junit.internal.runners.MethodValidator.validateMethodsForDefaultRunner,"    public List<Throwable> validateMethodsForDefaultRunner() {
        this.validateNoArgConstructor();
        this.validateStaticMethods();
        this.validateInstanceMethods();
        return this.fErrors;
    }"
org.junit.internal.runners.MethodValidator.assertValid,"    public void assertValid() throws InitializationError {
        if (!this.fErrors.isEmpty()) {
            throw new InitializationError(this.fErrors);
        }
    }"
org.junit.internal.runners.MethodValidator.validateNoArgConstructor,"    public void validateNoArgConstructor() {
        try {
            this.fTestClass.getConstructor();
        }
        catch (Exception e) {
            this.fErrors.add(new Exception(""Test class should have public zero-argument constructor"", e));
        }
    }"
org.junit.internal.runners.MethodValidator.validateTestMethods,"    private void validateTestMethods(Class<? extends Annotation> annotation, boolean isStatic) {
        List<Method> methods = this.fTestClass.getAnnotatedMethods(annotation);
        for (Method each : methods) {
            if (Modifier.isStatic(each.getModifiers()) != isStatic) {
                String state = isStatic ? ""should"" : ""should not"";
                this.fErrors.add(new Exception(""Method "" + each.getName() + ""() "" + state + "" be static""));
            }
            if (!Modifier.isPublic(each.getDeclaringClass().getModifiers())) {
                this.fErrors.add(new Exception(""Class "" + each.getDeclaringClass().getName() + "" should be public""));
            }
            if (!Modifier.isPublic(each.getModifiers())) {
                this.fErrors.add(new Exception(""Method "" + each.getName() + "" should be public""));
            }
            if (each.getReturnType() != Void.TYPE) {
                this.fErrors.add(new Exception(""Method "" + each.getName() + "" should be void""));
            }
            if (each.getParameterTypes().length == 0) continue;
            this.fErrors.add(new Exception(""Method "" + each.getName() + "" should have no parameters""));
        }
    }
"
org.junit.internal.runners.ErrorReportingRunner.getDescription,"    public Description getDescription() {
        Description description = Description.createSuiteDescription(this.fTestClass);
        for (Throwable each : this.fCauses) {
            description.addChild(this.describeCause(each));
        }
        return description;
    }"
org.junit.internal.runners.ErrorReportingRunner.run,"    public void run(RunNotifier notifier) {
        for (Throwable each : this.fCauses) {
            this.runCause(each, notifier);
        }
    }"
org.junit.internal.runners.ErrorReportingRunner.getCauses,"    private List<Throwable> getCauses(Throwable cause) {
        if (cause instanceof InvocationTargetException) {
            return this.getCauses(cause.getCause());
        }
        if (cause instanceof org.junit.runners.model.InitializationError) {
            return ((org.junit.runners.model.InitializationError)cause).getCauses();
        }
        if (cause instanceof InitializationError) {
            return ((InitializationError)cause).getCauses();
        }
        return Arrays.asList(cause);
    }"
org.junit.internal.runners.ErrorReportingRunner.describeCause,"    private Description describeCause(Throwable child) {
        return Description.createTestDescription(this.fTestClass, ""initializationError"");
    }"
org.junit.internal.runners.ErrorReportingRunner.runCause,"    private void runCause(Throwable child, RunNotifier notifier) {
        Description description = this.describeCause(child);
        notifier.fireTestStarted(description);
        notifier.fireTestFailure(new Failure(description, child));
        notifier.fireTestFinished(description);
    }
"
org.junit.internal.runners.ClassRoadie.runUnprotected,"    protected void runUnprotected() {
        this.fRunnable.run();
    }"
org.junit.internal.runners.ClassRoadie.addFailure,"    protected void addFailure(Throwable targetException) {
        this.fNotifier.fireTestFailure(new Failure(this.fDescription, targetException));
    }"
org.junit.internal.runners.ClassRoadie.runProtected,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public void runProtected() {
        try {
            this.runBefores();
            this.runUnprotected();
        }
        catch (FailedBefore failedBefore) {
        }
        finally {
            this.runAfters();
        }
    }"
org.junit.internal.runners.ClassRoadie.runBefores,"    private void runBefores() throws FailedBefore {
        try {
            try {
                List<Method> befores = this.fTestClass.getBefores();
                for (Method before : befores) {
                    before.invoke(null, new Object[0]);
                }
            }
            catch (InvocationTargetException e) {
                throw e.getTargetException();
            }
        }
        catch (AssumptionViolatedException e) {
            throw new FailedBefore();
        }
        catch (Throwable e) {
            this.addFailure(e);
            throw new FailedBefore();
        }
    }"
org.junit.internal.runners.ClassRoadie.runAfters,"    private void runAfters() {
        List<Method> afters = this.fTestClass.getAfters();
        for (Method after : afters) {
            try {
                after.invoke(null, new Object[0]);
            }
            catch (InvocationTargetException e) {
                this.addFailure(e.getTargetException());
            }
            catch (Throwable e) {
                this.addFailure(e);
            }
        }
    }
"
org.junit.internal.runners.SuiteMethod.testFromSuiteMethod,"    public static Test testFromSuiteMethod(Class<?> klass) throws Throwable {
        Method suiteMethod = null;
        Test suite = null;
        try {
            suiteMethod = klass.getMethod(""suite"", new Class[0]);
            if (!Modifier.isStatic(suiteMethod.getModifiers())) {
                throw new Exception(klass.getName() + "".suite() must be static"");
            }
            suite = (Test)suiteMethod.invoke(null, new Object[0]);
        }
        catch (InvocationTargetException e) {
            throw e.getCause();
        }
        return suite;
    }
"
org.junit.internal.runners.InitializationError.getCauses,"    public List<Throwable> getCauses() {
        return this.fErrors;
    }
"
org.junit.internal.runners.statements.Fail.evaluate,"    public void evaluate() throws Throwable {
        throw this.fError;
    }
"
org.junit.internal.runners.statements.FailOnTimeout.evaluate,"    public void evaluate() throws Throwable {
        Thread thread = new Thread(){

            public void run() {
                try {
                    FailOnTimeout.this.fNext.evaluate();
                    FailOnTimeout.this.fFinished = true;
                }
                catch (Throwable e) {
                    FailOnTimeout.this.fThrown = e;
                }
            }
        };
        thread.start();
        thread.join(this.fTimeout);
        if (this.fFinished) {
            return;
        }
        if (this.fThrown != null) {
            throw this.fThrown;
        }
        Exception exception = new Exception(String.format(""test timed out after %d milliseconds"", this.fTimeout));
        exception.setStackTrace(thread.getStackTrace());
        throw exception;
    }
"
org.junit.internal.runners.statements.FailOnTimeout.run,"            public void run() {
                try {
                    FailOnTimeout.this.fNext.evaluate();
                    FailOnTimeout.this.fFinished = true;
                }
                catch (Throwable e) {
                    FailOnTimeout.this.fThrown = e;
                }
            }
        "
org.junit.internal.runners.statements.RunBefores.evaluate,"    public void evaluate() throws Throwable {
        for (FrameworkMethod before : this.fBefores) {
            before.invokeExplosively(this.fTarget, new Object[0]);
        }
        this.fNext.evaluate();
    }
"
org.junit.internal.runners.statements.InvokeMethod.evaluate,"    public void evaluate() throws Throwable {
        this.fTestMethod.invokeExplosively(this.fTarget, new Object[0]);
    }
"
org.junit.internal.runners.statements.ExpectException.evaluate,"    public void evaluate() throws Exception {
        boolean complete;
        block3: {
            complete = false;
            try {
                this.fNext.evaluate();
                complete = true;
            }
            catch (Throwable e) {
                if (this.fExpected.isAssignableFrom(e.getClass())) break block3;
                String message = ""Unexpected exception, expected<"" + this.fExpected.getName() + ""> but was<"" + e.getClass().getName() + "">"";
                throw new Exception(message, e);
            }
        }
        if (complete) {
            throw new AssertionError((Object)(""Expected exception: "" + this.fExpected.getName()));
        }
    }
"
org.junit.internal.runners.statements.RunAfters.evaluate,"    public void evaluate() throws Throwable {
        ArrayList<Throwable> errors = new ArrayList<Throwable>();
        errors.clear();
        try {
            this.fNext.evaluate();
        }
        catch (Throwable e) {
            errors.add(e);
        }
        finally {
            for (FrameworkMethod each : this.fAfters) {
                try {
                    each.invokeExplosively(this.fTarget, new Object[0]);
                }
                catch (Throwable e) {
                    errors.add(e);
                }
            }
        }
        MultipleFailureException.assertEmpty(errors);
    }
"
org.junit.internal.runners.model.ReflectiveCallable.run,"    public Object run() throws Throwable {
        try {
            return this.runReflectiveCall();
        }
        catch (InvocationTargetException e) {
            throw e.getTargetException();
        }
    }"
org.junit.internal.runners.model.ReflectiveCallable.runReflectiveCall,"    protected abstract Object runReflectiveCall() throws Throwable;
"
org.junit.internal.runners.model.EachTestNotifier.addFailure,"    public void addFailure(Throwable targetException) {
        if (targetException instanceof MultipleFailureException) {
            this.addMultipleFailureException((MultipleFailureException)targetException);
        } else {
            this.fNotifier.fireTestFailure(new Failure(this.fDescription, targetException));
        }
    }"
org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException,"    private void addMultipleFailureException(MultipleFailureException mfe) {
        for (Throwable each : mfe.getFailures()) {
            this.addFailure(each);
        }
    }"
org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption,"    public void addFailedAssumption(AssumptionViolatedException e) {
        this.fNotifier.fireTestAssumptionFailed(new Failure(this.fDescription, e));
    }"
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished,"    public void fireTestFinished() {
        this.fNotifier.fireTestFinished(this.fDescription);
    }"
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted,"    public void fireTestStarted() {
        this.fNotifier.fireTestStarted(this.fDescription);
    }"
org.junit.internal.runners.model.EachTestNotifier.fireTestIgnored,"    public void fireTestIgnored() {
        this.fNotifier.fireTestIgnored(this.fDescription);
    }
"
org.junit.internal.runners.model.MultipleFailureException.getFailures,"    public List<Throwable> getFailures() {
        return this.fErrors;
    }"
org.junit.internal.runners.model.MultipleFailureException.assertEmpty,"    public static void assertEmpty(List<Throwable> errors) throws Throwable {
        if (errors.isEmpty()) {
            return;
        }
        if (errors.size() == 1) {
            throw errors.get(0);
        }
        throw new MultipleFailureException(errors);
    }
"
org.junit.internal.matchers.Each.each,"    public static <T> Matcher<Iterable<T>> each(final Matcher<T> individual) {
        final Matcher<Matcher<Iterable<Matcher<Matcher<T>>>>> allItemsAre = CoreMatchers.not(IsCollectionContaining.hasItem(CoreMatchers.not(individual)));
        return new BaseMatcher<Iterable<T>>(){

            @Override
            public boolean matches(Object item) {
                return allItemsAre.matches(item);
            }

            @Override
            public void describeTo(Description description) {
                description.appendText(""each "");
                individual.describeTo(description);
            }
        };
    }
"
org.junit.internal.matchers.Each.matches,"            public boolean matches(Object item) {
                return allItemsAre.matches(item);
            }"
org.junit.internal.matchers.Each.describeTo,"            public void describeTo(Description description) {
                description.appendText(""each "");
                individual.describeTo(description);
            }
        "
org.junit.internal.matchers.SubstringMatcher.matchesSafely,"    public boolean matchesSafely(String item) {
        return this.evalSubstringOf(item);
    }"
org.junit.internal.matchers.SubstringMatcher.describeTo,"    public void describeTo(Description description) {
        description.appendText(""a string "").appendText(this.relationship()).appendText("" "").appendValue(this.substring);
    }"
org.junit.internal.matchers.SubstringMatcher.evalSubstringOf,
org.junit.internal.matchers.SubstringMatcher.relationship,"    protected abstract String relationship();
"
org.junit.internal.matchers.CombinableMatcher.matches,"    public boolean matches(Object item) {
        return this.fMatcher.matches(item);
    }"
org.junit.internal.matchers.CombinableMatcher.describeTo,"    public void describeTo(Description description) {
        description.appendDescriptionOf(this.fMatcher);
    }"
org.junit.internal.matchers.CombinableMatcher.and,"    public CombinableMatcher<T> and(Matcher<? extends T> matcher) {
        return new CombinableMatcher(CoreMatchers.allOf(matcher, this.fMatcher));
    }"
org.junit.internal.matchers.CombinableMatcher.or,"    public CombinableMatcher<T> or(Matcher<? extends T> matcher) {
        return new CombinableMatcher(CoreMatchers.anyOf(matcher, this.fMatcher));
    }
"
org.junit.internal.matchers.IsCollectionContaining.matchesSafely,"    public boolean matchesSafely(Iterable<T> collection) {
        for (T item : collection) {
            if (!this.elementMatcher.matches(item)) continue;
            return true;
        }
        return false;
    }"
org.junit.internal.matchers.IsCollectionContaining.describeTo,"    public void describeTo(Description description) {
        description.appendText(""a collection containing "").appendDescriptionOf(this.elementMatcher);
    }"
org.junit.internal.matchers.IsCollectionContaining.hasItem,"    public static <T> Matcher<Iterable<T>> hasItem(Matcher<? extends T> elementMatcher) {
        return new IsCollectionContaining<T>(elementMatcher);
    }"
org.junit.internal.matchers.IsCollectionContaining.hasItem,"    public static <T> Matcher<Iterable<T>> hasItem(T element) {
        return IsCollectionContaining.hasItem(IsEqual.equalTo(element));
    }"
org.junit.internal.matchers.IsCollectionContaining.hasItems,"    public static <T> Matcher<Iterable<T>> hasItems(Matcher<? extends T> ... elementMatchers) {
        ArrayList all = new ArrayList(elementMatchers.length);
        for (Matcher<? extends T> elementMatcher : elementMatchers) {
            all.add(IsCollectionContaining.hasItem(elementMatcher));
        }
        return AllOf.allOf(all);
    }"
org.junit.internal.matchers.IsCollectionContaining.hasItems,"    public static <T> Matcher<Iterable<T>> hasItems(T ... elements) {
        ArrayList all = new ArrayList(elements.length);
        for (T element : elements) {
            all.add(IsCollectionContaining.hasItem(element));
        }
        return AllOf.allOf(all);
    }
"
org.junit.internal.matchers.TypeSafeMatcher.matchesSafely,
org.junit.internal.matchers.TypeSafeMatcher.findExpectedType,"    private static Class<?> findExpectedType(Class<?> fromClass) {
        for (Class<?> c = fromClass; c != Object.class; c = c.getSuperclass()) {
            for (Method method : c.getDeclaredMethods()) {
                if (!TypeSafeMatcher.isMatchesSafelyMethod(method)) continue;
                return method.getParameterTypes()[0];
            }
        }
        throw new Error(""Cannot determine correct type for matchesSafely() method."");
    }"
org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod,"    private static boolean isMatchesSafelyMethod(Method method) {
        return method.getName().equals(""matchesSafely"") && method.getParameterTypes().length == 1 && !method.isSynthetic();
    }"
org.junit.internal.matchers.TypeSafeMatcher.matches,"    public final boolean matches(Object item) {
        return item != null && this.expectedType.isInstance(item) && this.matchesSafely(item);
    }
"
org.junit.internal.matchers.StringContains.evalSubstringOf,"    protected boolean evalSubstringOf(String s) {
        return s.indexOf(this.substring) >= 0;
    }"
org.junit.internal.matchers.StringContains.relationship,"    protected String relationship() {
        return ""containing"";
    }"
org.junit.internal.matchers.StringContains.containsString,"    public static Matcher<String> containsString(String substring) {
        return new StringContains(substring);
    }
"
org.junit.rules.Verifier.apply,"    public Statement apply(final Statement base, FrameworkMethod method, Object target) {
        return new Statement(){

            public void evaluate() throws Throwable {
                base.evaluate();
                Verifier.this.verify();
            }
        };
    }"
org.junit.rules.Verifier.evaluate,"            public void evaluate() throws Throwable {
                base.evaluate();
                Verifier.this.verify();
            }
        "
org.junit.rules.Verifier.verify,"    protected void verify() throws Throwable {
    }
"
org.junit.rules.TestName.starting,"    public void starting(FrameworkMethod method) {
        this.fName = method.getName();
    }"
org.junit.rules.TestName.getMethodName,"    public String getMethodName() {
        return this.fName;
    }
"
org.junit.rules.ErrorCollector.verify,"    protected void verify() throws Throwable {
        MultipleFailureException.assertEmpty(this.errors);
    }"
org.junit.rules.ErrorCollector.addError,"    public void addError(Throwable error) {
        this.errors.add(error);
    }"
org.junit.rules.ErrorCollector.checkThat,"    public <T> void checkThat(final T value, final Matcher<T> matcher) {
        this.checkSucceeds(new Callable<Object>(){

            @Override
            public Object call() throws Exception {
                Assert.assertThat(value, matcher);
                return value;
            }
        });
    }"
org.junit.rules.ErrorCollector.call,"            public Object call() throws Exception {
                Assert.assertThat(value, matcher);
                return value;
            }
        "
org.junit.rules.ErrorCollector.checkSucceeds,"    public Object checkSucceeds(Callable<Object> callable) {
        try {
            return callable.call();
        }
        catch (Throwable e) {
            this.addError(e);
            return null;
        }
    }
"
org.junit.rules.Timeout.apply,"    public Statement apply(Statement base, FrameworkMethod method, Object target) {
        return new FailOnTimeout(base, this.fMillis);
    }
"
org.junit.rules.TestWatchman.apply,"    public Statement apply(final Statement base, final FrameworkMethod method, Object target) {
        return new Statement(){

            public void evaluate() throws Throwable {
                TestWatchman.this.starting(method);
                try {
                    base.evaluate();
                    TestWatchman.this.succeeded(method);
                }
                catch (Throwable t) {
                    TestWatchman.this.failed(t, method);
                    throw t;
                }
                finally {
                    TestWatchman.this.finished(method);
                }
            }
        };
    }"
org.junit.rules.TestWatchman.evaluate,"            public void evaluate() throws Throwable {
                TestWatchman.this.starting(method);
                try {
                    base.evaluate();
                    TestWatchman.this.succeeded(method);
                }
                catch (Throwable t) {
                    TestWatchman.this.failed(t, method);
                    throw t;
                }
                finally {
                    TestWatchman.this.finished(method);
                }
            }
        "
org.junit.rules.TestWatchman.succeeded,"    public void succeeded(FrameworkMethod method) {
    }"
org.junit.rules.TestWatchman.failed,"    public void failed(Throwable e, FrameworkMethod method) {
    }"
org.junit.rules.TestWatchman.starting,"    public void starting(FrameworkMethod method) {
    }"
org.junit.rules.TestWatchman.finished,"    public void finished(FrameworkMethod method) {
    }
"
org.junit.rules.TemporaryFolder.before,"    protected void before() throws Throwable {
        this.create();
    }"
org.junit.rules.TemporaryFolder.after,"    protected void after() {
        this.delete();
    }"
org.junit.rules.TemporaryFolder.create,"    public void create() throws IOException {
        this.folder = File.createTempFile(""junit"", """");
        this.folder.delete();
        this.folder.mkdir();
    }"
org.junit.rules.TemporaryFolder.newFile,"    public File newFile(String fileName) throws IOException {
        File file = new File(this.folder, fileName);
        file.createNewFile();
        return file;
    }"
org.junit.rules.TemporaryFolder.newFolder,"    public File newFolder(String folderName) {
        File file = new File(this.folder, folderName);
        file.mkdir();
        return file;
    }"
org.junit.rules.TemporaryFolder.getRoot,"    public File getRoot() {
        return this.folder;
    }"
org.junit.rules.TemporaryFolder.delete,"    public void delete() {
        this.recursiveDelete(this.folder);
    }"
org.junit.rules.TemporaryFolder.recursiveDelete,"    private void recursiveDelete(File file) {
        File[] files = file.listFiles();
        if (files != null) {
            for (File each : files) {
                this.recursiveDelete(each);
            }
        }
        file.delete();
    }
"
org.junit.rules.ExpectedException.none,"    public static ExpectedException none() {
        return new ExpectedException();
    }"
org.junit.rules.ExpectedException.apply,"    public Statement apply(Statement base, FrameworkMethod method, Object target) {
        return new ExpectedExceptionStatement(base);
    }"
org.junit.rules.ExpectedException.expect,"    public void expect(Matcher<?> matcher) {
        this.fMatcher = this.fMatcher == null ? matcher : JUnitMatchers.both(this.fMatcher).and(matcher);
    }"
org.junit.rules.ExpectedException.expect,"    public void expect(Class<? extends Throwable> type) {
        this.expect(CoreMatchers.instanceOf(type));
    }"
org.junit.rules.ExpectedException.expectMessage,"    public void expectMessage(String substring) {
        this.expectMessage(JUnitMatchers.containsString(substring));
    }"
org.junit.rules.ExpectedException.expectMessage,"    public void expectMessage(Matcher<String> matcher) {
        this.expect(this.hasMessage(matcher));
    }"
org.junit.rules.ExpectedException.hasMessage,"    private Matcher<Throwable> hasMessage(final Matcher<String> matcher) {
        return new TypeSafeMatcher<Throwable>(){

            @Override
            public void describeTo(Description description) {
                description.appendText(""exception with message "");
                description.appendDescriptionOf(matcher);
            }

            @Override
            public boolean matchesSafely(Throwable item) {
                return matcher.matches(item.getMessage());
            }
        };
    }"
org.junit.rules.ExpectedException.describeTo,"            public void describeTo(Description description) {
                description.appendText(""exception with message "");
                description.appendDescriptionOf(matcher);
            }"
org.junit.rules.ExpectedException.matchesSafely,"            public boolean matchesSafely(Throwable item) {
                return matcher.matches(item.getMessage());
            }
        "
org.junit.rules.ExpectedException.evaluate,"        public void evaluate() throws Throwable {
            try {
                this.fNext.evaluate();
            }
            catch (Throwable e) {
                if (ExpectedException.this.fMatcher == null) {
                    throw e;
                }
                Assert.assertThat(e, ExpectedException.this.fMatcher);
                return;
            }
            if (ExpectedException.this.fMatcher != null) {
                throw new AssertionError((Object)(""Expected test to throw "" + StringDescription.toString(ExpectedException.this.fMatcher)));
            }
        }
    "
org.junit.rules.MethodRule.apply,"    public Statement apply(Statement var1, FrameworkMethod var2, Object var3);
"
org.junit.rules.ExternalResource.apply,"    public final Statement apply(final Statement base, FrameworkMethod method, Object target) {
        return new Statement(){

            /*
             * WARNING - Removed try catching itself - possible behaviour change.
             */
            public void evaluate() throws Throwable {
                ExternalResource.this.before();
                try {
                    base.evaluate();
                }
                finally {
                    ExternalResource.this.after();
                }
            }
        };
    }"
org.junit.rules.ExternalResource.evaluate,"* WARNING - Removed try catching itself - possible behaviour change.
*/
            public void evaluate() throws Throwable {
                ExternalResource.this.before();
                try {
                    base.evaluate();
                }
                finally {
                    ExternalResource.this.after();
                }
            }
        "
org.junit.rules.ExternalResource.before,"    protected void before() throws Throwable {
    }"
org.junit.rules.ExternalResource.after,"    protected void after() {
    }
"
org.junit.runners.Parameterized.getChildren,"    protected List<Runner> getChildren() {
        return this.runners;
    }"
org.junit.runners.Parameterized.getParametersList,"    private List<Object[]> getParametersList(TestClass klass) throws Throwable {
        return (List)this.getParametersMethod(klass).invokeExplosively(null, new Object[0]);
    }"
org.junit.runners.Parameterized.getParametersMethod,"    private FrameworkMethod getParametersMethod(TestClass testClass) throws Exception {
        List<FrameworkMethod> methods = testClass.getAnnotatedMethods(Parameters.class);
        for (FrameworkMethod each : methods) {
            int modifiers = each.getMethod().getModifiers();
            if (!Modifier.isStatic(modifiers) || !Modifier.isPublic(modifiers)) continue;
            return each;
        }
        throw new Exception(""No public static parameters method on class "" + testClass.getName());
    }"
org.junit.runners.Parameterized.createTest,"        public Object createTest() throws Exception {
            return this.getTestClass().getOnlyConstructor().newInstance(this.computeParams());
        }"
org.junit.runners.Parameterized.computeParams,"        private Object[] computeParams() throws Exception {
            try {
                return this.fParameterList.get(this.fParameterSetNumber);
            }
            catch (ClassCastException e) {
                throw new Exception(String.format(""%s.%s() must return a Collection of arrays."", this.getTestClass().getName(), Parameterized.this.getParametersMethod(this.getTestClass()).getName()));
            }
        }"
org.junit.runners.Parameterized.getName,"        protected String getName() {
            return String.format(""[%s]"", this.fParameterSetNumber);
        }"
org.junit.runners.Parameterized.testName,"        protected String testName(FrameworkMethod method) {
            return String.format(""%s[%s]"", method.getName(), this.fParameterSetNumber);
        }"
org.junit.runners.Parameterized.validateConstructor,"        protected void validateConstructor(List<Throwable> errors) {
            this.validateOnlyOneConstructor(errors);
        }"
org.junit.runners.Parameterized.classBlock,"        protected Statement classBlock(RunNotifier notifier) {
            return this.childrenInvoker(notifier);
        }
    }

    @Retention(value=RetentionPolicy.RUNTIME)
    @Target(value={ElementType.METHOD})
    public static @interface Parameters {
    "
org.junit.runners.Suite.emptySuite,"    public static Runner emptySuite() {
        try {
            return new Suite((Class)null, new Class[0]);
        }
        catch (InitializationError e) {
            throw new RuntimeException(""This shouldn't be possible"");
        }
    }"
org.junit.runners.Suite.getAnnotatedClasses,"    private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError {
        SuiteClasses annotation = klass.getAnnotation(SuiteClasses.class);
        if (annotation == null) {
            throw new InitializationError(String.format(""class '%s' must have a SuiteClasses annotation"", klass.getName()));
        }
        return annotation.value();
    }"
org.junit.runners.Suite.getChildren,"    protected List<Runner> getChildren() {
        return this.fRunners;
    }"
org.junit.runners.Suite.describeChild,"    protected Description describeChild(Runner child) {
        return child.getDescription();
    }"
org.junit.runners.Suite.runChild,"    protected void runChild(Runner runner, RunNotifier notifier) {
        runner.run(notifier);
    }

    /*
     * This class specifies class file version 49.0 but uses Java 6 signatures.  Assumed Java 6.
     */
    @Retention(value=RetentionPolicy.RUNTIME)
    @Target(value={ElementType.TYPE}"
org.junit.runners.BlockJUnit4ClassRunner.runChild,"    protected void runChild(FrameworkMethod method, RunNotifier notifier) {
        EachTestNotifier eachNotifier = this.makeNotifier(method, notifier);
        if (method.getAnnotation(Ignore.class) != null) {
            this.runIgnored(eachNotifier);
        } else {
            this.runNotIgnored(method, eachNotifier);
        }
    }"
org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    private void runNotIgnored(FrameworkMethod method, EachTestNotifier eachNotifier) {
        eachNotifier.fireTestStarted();
        try {
            this.methodBlock(method).evaluate();
        }
        catch (AssumptionViolatedException e) {
            eachNotifier.addFailedAssumption(e);
        }
        catch (Throwable e) {
            eachNotifier.addFailure(e);
        }
        finally {
            eachNotifier.fireTestFinished();
        }
    }"
org.junit.runners.BlockJUnit4ClassRunner.runIgnored,"    private void runIgnored(EachTestNotifier eachNotifier) {
        eachNotifier.fireTestIgnored();
    }"
org.junit.runners.BlockJUnit4ClassRunner.describeChild,"    protected Description describeChild(FrameworkMethod method) {
        return Description.createTestDescription(this.getTestClass().getJavaClass(), this.testName(method), method.getAnnotations());
    }"
org.junit.runners.BlockJUnit4ClassRunner.getChildren,"    protected List<FrameworkMethod> getChildren() {
        return this.computeTestMethods();
    }"
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods,"    protected List<FrameworkMethod> computeTestMethods() {
        return this.getTestClass().getAnnotatedMethods(Test.class);
    }"
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors,"    protected void collectInitializationErrors(List<Throwable> errors) {
        super.collectInitializationErrors(errors);
        this.validateConstructor(errors);
        this.validateInstanceMethods(errors);
        this.validateFields(errors);
    }"
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor,"    protected void validateConstructor(List<Throwable> errors) {
        this.validateOnlyOneConstructor(errors);
        this.validateZeroArgConstructor(errors);
    }"
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor,"    protected void validateOnlyOneConstructor(List<Throwable> errors) {
        if (!this.hasOneConstructor()) {
            String gripe = ""Test class should have exactly one public constructor"";
            errors.add(new Exception(gripe));
        }
    }"
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor,"    protected void validateZeroArgConstructor(List<Throwable> errors) {
        if (this.hasOneConstructor() && this.getTestClass().getOnlyConstructor().getParameterTypes().length != 0) {
            String gripe = ""Test class should have exactly one public zero-argument constructor"";
            errors.add(new Exception(gripe));
        }
    }"
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor,"    private boolean hasOneConstructor() {
        return this.getTestClass().getJavaClass().getConstructors().length == 1;
    }"
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods,"    protected void validateInstanceMethods(List<Throwable> errors) {
        this.validatePublicVoidNoArgMethods(After.class, false, errors);
        this.validatePublicVoidNoArgMethods(Before.class, false, errors);
        this.validateTestMethods(errors);
        if (this.computeTestMethods().size() == 0) {
            errors.add(new Exception(""No runnable methods""));
        }
    }"
org.junit.runners.BlockJUnit4ClassRunner.validateFields,"    private void validateFields(List<Throwable> errors) {
        for (FrameworkField each : this.getTestClass().getAnnotatedFields(Rule.class)) {
            this.validateRuleField(each.getField(), errors);
        }
    }"
org.junit.runners.BlockJUnit4ClassRunner.validateRuleField,"    private void validateRuleField(Field field, List<Throwable> errors) {
        if (!MethodRule.class.isAssignableFrom(field.getType())) {
            errors.add(new Exception(""Field "" + field.getName() + "" must implement MethodRule""));
        }
        if (!Modifier.isPublic(field.getModifiers())) {
            errors.add(new Exception(""Field "" + field.getName() + "" must be public""));
        }
    }"
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods,"    protected void validateTestMethods(List<Throwable> errors) {
        this.validatePublicVoidNoArgMethods(Test.class, false, errors);
    }"
org.junit.runners.BlockJUnit4ClassRunner.createTest,"    protected Object createTest() throws Exception {
        return this.getTestClass().getOnlyConstructor().newInstance(new Object[0]);
    }"
org.junit.runners.BlockJUnit4ClassRunner.testName,"    protected String testName(FrameworkMethod method) {
        return method.getName();
    }"
org.junit.runners.BlockJUnit4ClassRunner.methodBlock,"    protected Statement methodBlock(FrameworkMethod method) {
        Object test;
        try {
            test = new ReflectiveCallable(){

                protected Object runReflectiveCall() throws Throwable {
                    return BlockJUnit4ClassRunner.this.createTest();
                }
            }.run();
        }
        catch (Throwable e) {
            return new Fail(e);
        }
        Statement statement = this.methodInvoker(method, test);
        statement = this.possiblyExpectingExceptions(method, test, statement);
        statement = this.withPotentialTimeout(method, test, statement);
        statement = this.withBefores(method, test, statement);
        statement = this.withAfters(method, test, statement);
        statement = this.withRules(method, test, statement);
        return statement;
    }"
org.junit.runners.BlockJUnit4ClassRunner.runReflectiveCall,"                protected Object runReflectiveCall() throws Throwable {
                    return BlockJUnit4ClassRunner.this.createTest();
                }
            }.run();
        }
        catch (Throwable e) {
            return new Fail(e);
        }
        Statement statement = this.methodInvoker(method, test);
        statement = this.possiblyExpectingExceptions(method, test, statement);
        statement = this.withPotentialTimeout(method, test, statement);
        statement = this.withBefores(method, test, statement);
        statement = this.withAfters(method, test, statement);
        statement = this.withRules(method, test, statement);
        return statement;
    }

    protected Statement methodInvoker(FrameworkMethod method, Object test) {
        return new InvokeMethod(method, test);
    }

    @Deprecated
    protected Statement possiblyExpectingExceptions(FrameworkMethod method, Object test, Statement next) {
        Test annotation = method.getAnnotation(Test.class);
        return this.expectsException(annotation) ? new ExpectException(next, this.getExpectedException(annotation)) : next;
    }

    @Deprecated
    protected Statement withPotentialTimeout(FrameworkMethod method, Object test, Statement next) {
        long timeout = this.getTimeout(method.getAnnotation(Test.class));
        return timeout > 0L ? new FailOnTimeout(next, timeout) : next;
    }

    @Deprecated
    protected Statement withBefores(FrameworkMethod method, Object target, Statement statement) {
        List<FrameworkMethod> befores = this.getTestClass().getAnnotatedMethods(Before.class);
        return befores.isEmpty() ? statement : new RunBefores(statement, befores, target);
    }

    @Deprecated
    protected Statement withAfters(FrameworkMethod method, Object target, Statement statement) {
        List<FrameworkMethod> afters = this.getTestClass().getAnnotatedMethods(After.class);
        return afters.isEmpty() ? statement : new RunAfters(statement, afters, target);
    }

    private Statement withRules(FrameworkMethod method, Object target, Statement statement) {
        Statement result = statement;
        for (MethodRule each : this.getTestClass().getAnnotatedFieldValues(target, Rule.class, MethodRule.class)) {
            result = each.apply(result, method, target);
        }
        return result;
    }

    private EachTestNotifier makeNotifier(FrameworkMethod method, RunNotifier notifier) {
        Description description = this.describeChild(method);
        return new EachTestNotifier(notifier, description);
    }

    private Class<? extends Throwable> getExpectedException(Test annotation) {
        if (annotation == null || annotation.expected() == Test.None.class) {
            return null;
        }
        return annotation.expected();
    }

    private boolean expectsException(Test annotation) {
        return this.getExpectedException(annotation) != null;
    "
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker,"    protected Statement methodInvoker(FrameworkMethod method, Object test) {
        return new InvokeMethod(method, test);
    }"
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions,"    protected Statement possiblyExpectingExceptions(FrameworkMethod method, Object test, Statement next) {
        Test annotation = method.getAnnotation(Test.class);
        return this.expectsException(annotation) ? new ExpectException(next, this.getExpectedException(annotation)) : next;
    }"
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout,"    protected Statement withPotentialTimeout(FrameworkMethod method, Object test, Statement next) {
        long timeout = this.getTimeout(method.getAnnotation(Test.class));
        return timeout > 0L ? new FailOnTimeout(next, timeout) : next;
    }"
org.junit.runners.BlockJUnit4ClassRunner.withBefores,"    protected Statement withBefores(FrameworkMethod method, Object target, Statement statement) {
        List<FrameworkMethod> befores = this.getTestClass().getAnnotatedMethods(Before.class);
        return befores.isEmpty() ? statement : new RunBefores(statement, befores, target);
    }"
org.junit.runners.BlockJUnit4ClassRunner.withAfters,"    protected Statement withAfters(FrameworkMethod method, Object target, Statement statement) {
        List<FrameworkMethod> afters = this.getTestClass().getAnnotatedMethods(After.class);
        return afters.isEmpty() ? statement : new RunAfters(statement, afters, target);
    }"
org.junit.runners.BlockJUnit4ClassRunner.withRules,"    private Statement withRules(FrameworkMethod method, Object target, Statement statement) {
        Statement result = statement;
        for (MethodRule each : this.getTestClass().getAnnotatedFieldValues(target, Rule.class, MethodRule.class)) {
            result = each.apply(result, method, target);
        }
        return result;
    }"
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier,"    private EachTestNotifier makeNotifier(FrameworkMethod method, RunNotifier notifier) {
        Description description = this.describeChild(method);
        return new EachTestNotifier(notifier, description);
    }"
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException,"    private Class<? extends Throwable> getExpectedException(Test annotation) {
        if (annotation == null || annotation.expected() == Test.None.class) {
            return null;
        }
        return annotation.expected();
    }"
org.junit.runners.BlockJUnit4ClassRunner.expectsException,"    private boolean expectsException(Test annotation) {
        return this.getExpectedException(annotation) != null;
    }"
org.junit.runners.BlockJUnit4ClassRunner.getTimeout,"    private long getTimeout(Test annotation) {
        if (annotation == null) {
            return 0L;
        }
        return annotation.timeout();
    }
"
org.junit.runners.ParentRunner.schedule,"        public void schedule(Runnable childStatement) {
            childStatement.run();
        }"
org.junit.runners.ParentRunner.finished,"        public void finished() {
        }
    "
org.junit.runners.ParentRunner.getChildren,
org.junit.runners.ParentRunner.describeChild,
org.junit.runners.ParentRunner.runChild,
org.junit.runners.ParentRunner.collectInitializationErrors,"    protected void collectInitializationErrors(List<Throwable> errors) {
        this.validatePublicVoidNoArgMethods(BeforeClass.class, true, errors);
        this.validatePublicVoidNoArgMethods(AfterClass.class, true, errors);
    }"
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods,"    protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors) {
        List<FrameworkMethod> methods = this.getTestClass().getAnnotatedMethods(annotation);
        for (FrameworkMethod eachTestMethod : methods) {
            eachTestMethod.validatePublicVoidNoArg(isStatic, errors);
        }
    }"
org.junit.runners.ParentRunner.classBlock,"    protected Statement classBlock(RunNotifier notifier) {
        Statement statement = this.childrenInvoker(notifier);
        statement = this.withBeforeClasses(statement);
        statement = this.withAfterClasses(statement);
        return statement;
    }"
org.junit.runners.ParentRunner.withBeforeClasses,"    protected Statement withBeforeClasses(Statement statement) {
        List<FrameworkMethod> befores = this.fTestClass.getAnnotatedMethods(BeforeClass.class);
        return befores.isEmpty() ? statement : new RunBefores(statement, befores, null);
    }"
org.junit.runners.ParentRunner.withAfterClasses,"    protected Statement withAfterClasses(Statement statement) {
        List<FrameworkMethod> afters = this.fTestClass.getAnnotatedMethods(AfterClass.class);
        return afters.isEmpty() ? statement : new RunAfters(statement, afters, null);
    }"
org.junit.runners.ParentRunner.childrenInvoker,"    protected Statement childrenInvoker(final RunNotifier notifier) {
        return new Statement(){

            public void evaluate() {
                ParentRunner.this.runChildren(notifier);
            }
        };
    }"
org.junit.runners.ParentRunner.evaluate,"            public void evaluate() {
                ParentRunner.this.runChildren(notifier);
            }
        "
org.junit.runners.ParentRunner.runChildren,"    private void runChildren(final RunNotifier notifier) {
        for (final T each : this.getFilteredChildren()) {
            this.fScheduler.schedule(new Runnable(){

                public void run() {
                    ParentRunner.this.runChild(each, notifier);
                }
            });
        }
        this.fScheduler.finished();
    }"
org.junit.runners.ParentRunner.run,"                public void run() {
                    ParentRunner.this.runChild(each, notifier);
                }
            "
org.junit.runners.ParentRunner.getName,"    protected String getName() {
        return this.fTestClass.getName();
    }"
org.junit.runners.ParentRunner.getTestClass,"    public final TestClass getTestClass() {
        return this.fTestClass;
    }"
org.junit.runners.ParentRunner.getDescription,"    public Description getDescription() {
        Description description = Description.createSuiteDescription(this.getName(), this.fTestClass.getAnnotations());
        for (T child : this.getFilteredChildren()) {
            description.addChild(this.describeChild(child));
        }
        return description;
    }"
org.junit.runners.ParentRunner.run,"    public void run(RunNotifier notifier) {
        EachTestNotifier testNotifier = new EachTestNotifier(notifier, this.getDescription());
        try {
            Statement statement = this.classBlock(notifier);
            statement.evaluate();
        }
        catch (AssumptionViolatedException e) {
            testNotifier.fireTestIgnored();
        }
        catch (StoppedByUserException e) {
            throw e;
        }
        catch (Throwable e) {
            testNotifier.addFailure(e);
        }
    }"
org.junit.runners.ParentRunner.filter,"    public void filter(Filter filter) throws NoTestsRemainException {
        this.fFilter = filter;
        for (T each : this.getChildren()) {
            if (!this.shouldRun(each)) continue;
            return;
        }
        throw new NoTestsRemainException();
    }"
org.junit.runners.ParentRunner.sort,"    public void sort(Sorter sorter) {
        this.fSorter = sorter;
    }"
org.junit.runners.ParentRunner.validate,"    private void validate() throws InitializationError {
        ArrayList<Throwable> errors = new ArrayList<Throwable>();
        this.collectInitializationErrors(errors);
        if (!errors.isEmpty()) {
            throw new InitializationError(errors);
        }
    }"
org.junit.runners.ParentRunner.getFilteredChildren,"    private List<T> getFilteredChildren() {
        ArrayList<T> filtered = new ArrayList<T>();
        for (T each : this.getChildren()) {
            if (!this.shouldRun(each)) continue;
            try {
                this.filterChild(each);
                this.sortChild(each);
                filtered.add(each);
            }
            catch (NoTestsRemainException e) {}
        }
        Collections.sort(filtered, this.comparator());
        return filtered;
    }"
org.junit.runners.ParentRunner.sortChild,"    private void sortChild(T child) {
        this.fSorter.apply(child);
    }"
org.junit.runners.ParentRunner.filterChild,"    private void filterChild(T child) throws NoTestsRemainException {
        if (this.fFilter != null) {
            this.fFilter.apply(child);
        }
    }"
org.junit.runners.ParentRunner.shouldRun,"    private boolean shouldRun(T each) {
        return this.fFilter == null || this.fFilter.shouldRun(this.describeChild(each));
    }"
org.junit.runners.ParentRunner.comparator,"    private Comparator<? super T> comparator() {
        return new Comparator<T>(){

            @Override
            public int compare(T o1, T o2) {
                return ParentRunner.this.fSorter.compare(ParentRunner.this.describeChild(o1), ParentRunner.this.describeChild(o2));
            }
        };
    }"
org.junit.runners.ParentRunner.compare,"            public int compare(T o1, T o2) {
                return ParentRunner.this.fSorter.compare(ParentRunner.this.describeChild(o1), ParentRunner.this.describeChild(o2));
            }
        "
org.junit.runners.ParentRunner.setScheduler,"    public void setScheduler(RunnerScheduler scheduler) {
        this.fScheduler = scheduler;
    }
"
org.junit.runners.model.TestClass.addToAnnotationLists,"    private <T extends FrameworkMember<T>> void addToAnnotationLists(T member, Map<Class<?>, List<T>> map) {
        for (Annotation each : ((FrameworkMember)member).getAnnotations()) {
            Class<? extends Annotation> type = each.annotationType();
            List<T> members = this.getAnnotatedMembers(map, type);
            if (((FrameworkMember)member).isShadowedBy(members)) {
                return;
            }
            if (this.runsTopToBottom(type)) {
                members.add(0, member);
                continue;
            }
            members.add(member);
        }
    }"
org.junit.runners.model.TestClass.getAnnotatedMethods,"    public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {
        return this.getAnnotatedMembers(this.fMethodsForAnnotations, annotationClass);
    }"
org.junit.runners.model.TestClass.getAnnotatedFields,"    public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass) {
        return this.getAnnotatedMembers(this.fFieldsForAnnotations, annotationClass);
    }"
org.junit.runners.model.TestClass.getAnnotatedMembers,"    private <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map, Class<? extends Annotation> type) {
        if (!map.containsKey(type)) {
            map.put(type, new ArrayList());
        }
        return map.get(type);
    }"
org.junit.runners.model.TestClass.runsTopToBottom,"    private boolean runsTopToBottom(Class<? extends Annotation> annotation) {
        return annotation.equals(Before.class) || annotation.equals(BeforeClass.class);
    }"
org.junit.runners.model.TestClass.getSuperClasses,"    private List<Class<?>> getSuperClasses(Class<?> testClass) {
        ArrayList results = new ArrayList();
        for (Class<?> current = testClass; current != null; current = current.getSuperclass()) {
            results.add(current);
        }
        return results;
    }"
org.junit.runners.model.TestClass.getJavaClass,"    public Class<?> getJavaClass() {
        return this.fClass;
    }"
org.junit.runners.model.TestClass.getName,"    public String getName() {
        if (this.fClass == null) {
            return ""null"";
        }
        return this.fClass.getName();
    }"
org.junit.runners.model.TestClass.getOnlyConstructor,"    public Constructor<?> getOnlyConstructor() {
        Constructor<?>[] constructors = this.fClass.getConstructors();
        Assert.assertEquals(1L, constructors.length);
        return constructors[0];
    }"
org.junit.runners.model.TestClass.getAnnotations,"    public Annotation[] getAnnotations() {
        if (this.fClass == null) {
            return new Annotation[0];
        }
        return this.fClass.getAnnotations();
    }"
org.junit.runners.model.TestClass.getAnnotatedFieldValues,"    public <T> List<T> getAnnotatedFieldValues(Object test, Class<? extends Annotation> annotationClass, Class<T> valueClass) {
        ArrayList<T> results = new ArrayList<T>();
        for (FrameworkField each : this.getAnnotatedFields(annotationClass)) {
            try {
                results.add(valueClass.cast(each.get(test)));
            }
            catch (IllegalAccessException e) {
                throw new RuntimeException(""How did getFields return a field we couldn't access?"");
            }
        }
        return results;
    }
"
org.junit.runners.model.FrameworkMember.getAnnotations,
org.junit.runners.model.FrameworkMember.isShadowedBy,
org.junit.runners.model.FrameworkMember.isShadowedBy,"    boolean isShadowedBy(List<T> members) {
        for (FrameworkMember each : members) {
            if (!this.isShadowedBy(each)) continue;
            return true;
        }
        return false;
    }
"
org.junit.runners.model.Statement.evaluate,"    public abstract void evaluate() throws Throwable;
"
org.junit.runners.model.FrameworkField.getAnnotations,"    public Annotation[] getAnnotations() {
        return this.fField.getAnnotations();
    }"
org.junit.runners.model.FrameworkField.isShadowedBy,"    public boolean isShadowedBy(FrameworkField otherMember) {
        return otherMember.getField().getName().equals(this.getField().getName());
    }"
org.junit.runners.model.FrameworkField.getField,"    public Field getField() {
        return this.fField;
    }"
org.junit.runners.model.FrameworkField.get,"    public Object get(Object target) throws IllegalArgumentException, IllegalAccessException {
        return this.fField.get(target);
    }
"
org.junit.runners.model.FrameworkMethod.getMethod,"    public Method getMethod() {
        return this.fMethod;
    }"
org.junit.runners.model.FrameworkMethod.invokeExplosively,"    public Object invokeExplosively(final Object target, final Object ... params) throws Throwable {
        return new ReflectiveCallable(){

            protected Object runReflectiveCall() throws Throwable {
                return FrameworkMethod.this.fMethod.invoke(target, params);
            }
        }.run();
    }"
org.junit.runners.model.FrameworkMethod.runReflectiveCall,"            protected Object runReflectiveCall() throws Throwable {
                return FrameworkMethod.this.fMethod.invoke(target, params);
            }
        "
org.junit.runners.model.FrameworkMethod.getName,"    public String getName() {
        return this.fMethod.getName();
    }"
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg,"    public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors) {
        this.validatePublicVoid(isStatic, errors);
        if (this.fMethod.getParameterTypes().length != 0) {
            errors.add(new Exception(""Method "" + this.fMethod.getName() + "" should have no parameters""));
        }
    }"
org.junit.runners.model.FrameworkMethod.validatePublicVoid,"    public void validatePublicVoid(boolean isStatic, List<Throwable> errors) {
        if (Modifier.isStatic(this.fMethod.getModifiers()) != isStatic) {
            String state = isStatic ? ""should"" : ""should not"";
            errors.add(new Exception(""Method "" + this.fMethod.getName() + ""() "" + state + "" be static""));
        }
        if (!Modifier.isPublic(this.fMethod.getDeclaringClass().getModifiers())) {
            errors.add(new Exception(""Class "" + this.fMethod.getDeclaringClass().getName() + "" should be public""));
        }
        if (!Modifier.isPublic(this.fMethod.getModifiers())) {
            errors.add(new Exception(""Method "" + this.fMethod.getName() + ""() should be public""));
        }
        if (this.fMethod.getReturnType() != Void.TYPE) {
            errors.add(new Exception(""Method "" + this.fMethod.getName() + ""() should be void""));
        }
    }"
org.junit.runners.model.FrameworkMethod.isShadowedBy,"    public boolean isShadowedBy(FrameworkMethod other) {
        if (!other.getName().equals(this.getName())) {
            return false;
        }
        if (other.getParameterTypes().length != this.getParameterTypes().length) {
            return false;
        }
        for (int i = 0; i < other.getParameterTypes().length; ++i) {
            if (other.getParameterTypes()[i].equals(this.getParameterTypes()[i])) continue;
            return false;
        }
        return true;
    }"
org.junit.runners.model.FrameworkMethod.equals,"    public boolean equals(Object obj) {
        if (!FrameworkMethod.class.isInstance(obj)) {
            return false;
        }
        return ((FrameworkMethod)obj).fMethod.equals(this.fMethod);
    }"
org.junit.runners.model.FrameworkMethod.hashCode,"    public int hashCode() {
        return this.fMethod.hashCode();
    }"
org.junit.runners.model.FrameworkMethod.producesType,"    public boolean producesType(Class<?> type) {
        return this.getParameterTypes().length == 0 && type.isAssignableFrom(this.fMethod.getReturnType());
    }"
org.junit.runners.model.FrameworkMethod.getParameterTypes,"    private Class<?>[] getParameterTypes() {
        return this.fMethod.getParameterTypes();
    }"
org.junit.runners.model.FrameworkMethod.getAnnotations,"    public Annotation[] getAnnotations() {
        return this.fMethod.getAnnotations();
    }"
org.junit.runners.model.FrameworkMethod.getAnnotation,"    public <T extends Annotation> T getAnnotation(Class<T> annotationType) {
        return this.fMethod.getAnnotation(annotationType);
    }
"
org.junit.runners.model.InitializationError.getCauses,"    public List<Throwable> getCauses() {
        return this.fErrors;
    }
"
org.junit.runners.model.RunnerBuilder.runnerForClass,
org.junit.runners.model.RunnerBuilder.safeRunnerForClass,"    public Runner safeRunnerForClass(Class<?> testClass) {
        try {
            return this.runnerForClass(testClass);
        }
        catch (Throwable e) {
            return new ErrorReportingRunner(testClass, e);
        }
    }"
org.junit.runners.model.RunnerBuilder.addParent,"    Class<?> addParent(Class<?> parent) throws InitializationError {
        if (!this.parents.add(parent)) {
            throw new InitializationError(String.format(""class '%s' (possibly indirectly) contains itself as a SuiteClass"", parent.getName()));
        }
        return parent;
    }"
org.junit.runners.model.RunnerBuilder.removeParent,"    void removeParent(Class<?> klass) {
        this.parents.remove(klass);
    }"
org.junit.runners.model.RunnerBuilder.runners,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public List<Runner> runners(Class<?> parent, Class<?>[] children) throws InitializationError {
        this.addParent(parent);
        try {
            List<Runner> list = this.runners(children);
            return list;
        }
        finally {
            this.removeParent(parent);
        }
    }"
org.junit.runners.model.RunnerBuilder.runners,"    private List<Runner> runners(Class<?>[] children) {
        ArrayList<Runner> runners = new ArrayList<Runner>();
        for (Class<?> each : children) {
            Runner childRunner = this.safeRunnerForClass(each);
            if (childRunner == null) continue;
            runners.add(childRunner);
        }
        return runners;
    }
"
org.junit.runners.model.RunnerScheduler.schedule,
org.junit.runners.model.RunnerScheduler.finished,"    public void finished();
"
org.junit.matchers.JUnitMatchers.hasItem,"    public static <T> Matcher<Iterable<T>> hasItem(T element) {
        return IsCollectionContaining.hasItem(element);
    }"
org.junit.matchers.JUnitMatchers.hasItem,"    public static <T> Matcher<Iterable<T>> hasItem(Matcher<? extends T> elementMatcher) {
        return IsCollectionContaining.hasItem(elementMatcher);
    }"
org.junit.matchers.JUnitMatchers.hasItems,"    public static <T> Matcher<Iterable<T>> hasItems(T ... elements) {
        return IsCollectionContaining.hasItems(elements);
    }"
org.junit.matchers.JUnitMatchers.hasItems,"    public static <T> Matcher<Iterable<T>> hasItems(Matcher<? extends T> ... elementMatchers) {
        return IsCollectionContaining.hasItems(elementMatchers);
    }"
org.junit.matchers.JUnitMatchers.everyItem,"    public static <T> Matcher<Iterable<T>> everyItem(Matcher<T> elementMatcher) {
        return Each.each(elementMatcher);
    }"
org.junit.matchers.JUnitMatchers.containsString,"    public static Matcher<String> containsString(String substring) {
        return StringContains.containsString(substring);
    }"
org.junit.matchers.JUnitMatchers.both,"    public static <T> CombinableMatcher<T> both(Matcher<T> matcher) {
        return new CombinableMatcher<T>(matcher);
    }"
org.junit.matchers.JUnitMatchers.either,"    public static <T> CombinableMatcher<T> either(Matcher<T> matcher) {
        return new CombinableMatcher<T>(matcher);
    }
"
org.json.JSONArray.iterator,"    public Iterator<Object> iterator() {
        return this.myArrayList.iterator();
    }"
org.json.JSONArray.get,"    public Object get(int index) throws JSONException {
        Object object = this.opt(index);
        if (object == null) {
            throw new JSONException(""JSONArray["" + index + ""] not found."");
        }
        return object;
    }"
org.json.JSONArray.getBoolean,"    public boolean getBoolean(int index) throws JSONException {
        Object object = this.get(index);
        if (object.equals(Boolean.FALSE) || object instanceof String && ((String)object).equalsIgnoreCase(""false"")) {
            return false;
        }
        if (object.equals(Boolean.TRUE) || object instanceof String && ((String)object).equalsIgnoreCase(""true"")) {
            return true;
        }
        throw new JSONException(""JSONArray["" + index + ""] is not a boolean."");
    }"
org.json.JSONArray.getDouble,"    public double getDouble(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number)object).doubleValue() : Double.parseDouble((String)object);
        }
        catch (Exception e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }"
org.json.JSONArray.getEnum,"    public <E extends Enum<E>> E getEnum(Class<E> clazz, int index) throws JSONException {
        E val = this.optEnum(clazz, index);
        if (val == null) {
            throw new JSONException(""JSONObject["" + JSONObject.quote(Integer.toString(index)) + ""] is not an enum of type "" + JSONObject.quote(clazz.getSimpleName()) + ""."");
        }
        return val;
    }"
org.json.JSONArray.getBigDecimal,"    public BigDecimal getBigDecimal(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return new BigDecimal(object.toString());
        }
        catch (Exception e) {
            throw new JSONException(""JSONArray["" + index + ""] could not convert to BigDecimal."");
        }
    }"
org.json.JSONArray.getBigInteger,"    public BigInteger getBigInteger(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return new BigInteger(object.toString());
        }
        catch (Exception e) {
            throw new JSONException(""JSONArray["" + index + ""] could not convert to BigInteger."");
        }
    }"
org.json.JSONArray.getInt,"    public int getInt(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number)object).intValue() : Integer.parseInt((String)object);
        }
        catch (Exception e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }"
org.json.JSONArray.getJSONArray,"    public JSONArray getJSONArray(int index) throws JSONException {
        Object object = this.get(index);
        if (object instanceof JSONArray) {
            return (JSONArray)object;
        }
        throw new JSONException(""JSONArray["" + index + ""] is not a JSONArray."");
    }"
org.json.JSONArray.getJSONObject,"    public JSONObject getJSONObject(int index) throws JSONException {
        Object object = this.get(index);
        if (object instanceof JSONObject) {
            return (JSONObject)object;
        }
        throw new JSONException(""JSONArray["" + index + ""] is not a JSONObject."");
    }"
org.json.JSONArray.getLong,"    public long getLong(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number)object).longValue() : Long.parseLong((String)object);
        }
        catch (Exception e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }"
org.json.JSONArray.getString,"    public String getString(int index) throws JSONException {
        Object object = this.get(index);
        if (object instanceof String) {
            return (String)object;
        }
        throw new JSONException(""JSONArray["" + index + ""] not a string."");
    }"
org.json.JSONArray.isNull,"    public boolean isNull(int index) {
        return JSONObject.NULL.equals(this.opt(index));
    }"
org.json.JSONArray.join,"    public String join(String separator) throws JSONException {
        int len = this.length();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; ++i) {
            if (i > 0) {
                sb.append(separator);
            }
            sb.append(JSONObject.valueToString(this.myArrayList.get(i)));
        }
        return sb.toString();
    }"
org.json.JSONArray.length,"    public int length() {
        return this.myArrayList.size();
    }"
org.json.JSONArray.opt,"    public Object opt(int index) {
        return index < 0 || index >= this.length() ? null : this.myArrayList.get(index);
    }"
org.json.JSONArray.optBoolean,"    public boolean optBoolean(int index) {
        return this.optBoolean(index, false);
    }"
org.json.JSONArray.optBoolean,"    public boolean optBoolean(int index, boolean defaultValue) {
        try {
            return this.getBoolean(index);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONArray.optDouble,"    public double optDouble(int index) {
        return this.optDouble(index, Double.NaN);
    }"
org.json.JSONArray.optDouble,"    public double optDouble(int index, double defaultValue) {
        try {
            return this.getDouble(index);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONArray.optInt,"    public int optInt(int index) {
        return this.optInt(index, 0);
    }"
org.json.JSONArray.optInt,"    public int optInt(int index, int defaultValue) {
        try {
            return this.getInt(index);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONArray.optEnum,"    public <E extends Enum<E>> E optEnum(Class<E> clazz, int index) {
        return this.optEnum(clazz, index, null);
    }"
org.json.JSONArray.optEnum,"    public <E extends Enum<E>> E optEnum(Class<E> clazz, int index, E defaultValue) {
        try {
            Object val = this.opt(index);
            if (JSONObject.NULL.equals(val)) {
                return defaultValue;
            }
            if (clazz.isAssignableFrom(val.getClass())) {
                Enum myE = (Enum)val;
                return (E)myE;
            }
            return Enum.valueOf(clazz, val.toString());
        }
        catch (IllegalArgumentException e) {
            return defaultValue;
        }
        catch (NullPointerException e) {
            return defaultValue;
        }
    }"
org.json.JSONArray.optBigInteger,"    public BigInteger optBigInteger(int index, BigInteger defaultValue) {
        try {
            return this.getBigInteger(index);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONArray.optBigDecimal,"    public BigDecimal optBigDecimal(int index, BigDecimal defaultValue) {
        try {
            return this.getBigDecimal(index);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONArray.optJSONArray,"    public JSONArray optJSONArray(int index) {
        Object o = this.opt(index);
        return o instanceof JSONArray ? (JSONArray)o : null;
    }"
org.json.JSONArray.optJSONObject,"    public JSONObject optJSONObject(int index) {
        Object o = this.opt(index);
        return o instanceof JSONObject ? (JSONObject)o : null;
    }"
org.json.JSONArray.optLong,"    public long optLong(int index) {
        return this.optLong(index, 0L);
    }"
org.json.JSONArray.optLong,"    public long optLong(int index, long defaultValue) {
        try {
            return this.getLong(index);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONArray.optString,"    public String optString(int index) {
        return this.optString(index, """");
    }"
org.json.JSONArray.optString,"    public String optString(int index, String defaultValue) {
        Object object = this.opt(index);
        return JSONObject.NULL.equals(object) ? defaultValue : object.toString();
    }"
org.json.JSONArray.put,"    public JSONArray put(boolean value) {
        this.put(value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(Collection<?> value) {
        this.put(new JSONArray(value));
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(double value) throws JSONException {
        Double d = new Double(value);
        JSONObject.testValidity(d);
        this.put(d);
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(int value) {
        this.put(new Integer(value));
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(long value) {
        this.put(new Long(value));
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(Map<?, ?> value) {
        this.put(new JSONObject(value));
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(Object value) {
        this.myArrayList.add(value);
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(int index, boolean value) throws JSONException {
        this.put(index, value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(int index, Collection<?> value) throws JSONException {
        this.put(index, new JSONArray(value));
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(int index, double value) throws JSONException {
        this.put(index, new Double(value));
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(int index, int value) throws JSONException {
        this.put(index, new Integer(value));
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(int index, long value) throws JSONException {
        this.put(index, new Long(value));
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(int index, Map<?, ?> value) throws JSONException {
        this.put(index, new JSONObject(value));
        return this;
    }"
org.json.JSONArray.put,"    public JSONArray put(int index, Object value) throws JSONException {
        JSONObject.testValidity(value);
        if (index < 0) {
            throw new JSONException(""JSONArray["" + index + ""] not found."");
        }
        if (index < this.length()) {
            this.myArrayList.set(index, value);
        } else {
            while (index != this.length()) {
                this.put(JSONObject.NULL);
            }
            this.put(value);
        }
        return this;
    }"
org.json.JSONArray.query,"    public Object query(String jsonPointer) {
        return this.query(new JSONPointer(jsonPointer));
    }"
org.json.JSONArray.query,"    public Object query(JSONPointer jsonPointer) {
        return jsonPointer.queryFrom(this);
    }"
org.json.JSONArray.optQuery,"    public Object optQuery(String jsonPointer) {
        return this.optQuery(new JSONPointer(jsonPointer));
    }"
org.json.JSONArray.optQuery,"    public Object optQuery(JSONPointer jsonPointer) {
        try {
            return jsonPointer.queryFrom(this);
        }
        catch (JSONPointerException e) {
            return null;
        }
    }"
org.json.JSONArray.remove,"    public Object remove(int index) {
        return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;
    }"
org.json.JSONArray.similar,"    public boolean similar(Object other) {
        if (!(other instanceof JSONArray)) {
            return false;
        }
        int len = this.length();
        if (len != ((JSONArray)other).length()) {
            return false;
        }
        for (int i = 0; i < len; ++i) {
            Object valueThis = this.get(i);
            Object valueOther = ((JSONArray)other).get(i);
            if (!(valueThis instanceof JSONObject ? !((JSONObject)valueThis).similar(valueOther) : (valueThis instanceof JSONArray ? !((JSONArray)valueThis).similar(valueOther) : !valueThis.equals(valueOther)))) continue;
            return false;
        }
        return true;
    }"
org.json.JSONArray.toJSONObject,"    public JSONObject toJSONObject(JSONArray names) throws JSONException {
        if (names == null || names.length() == 0 || this.length() == 0) {
            return null;
        }
        JSONObject jo = new JSONObject();
        for (int i = 0; i < names.length(); ++i) {
            jo.put(names.getString(i), this.opt(i));
        }
        return jo;
    }"
org.json.JSONArray.toString,"    public String toString() {
        try {
            return this.toString(0);
        }
        catch (Exception e) {
            return null;
        }
    }"
org.json.JSONArray.toString,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public String toString(int indentFactor) throws JSONException {
        StringWriter sw = new StringWriter();
        StringBuffer stringBuffer = sw.getBuffer();
        synchronized (stringBuffer) {
            return this.write(sw, indentFactor, 0).toString();
        }
    }"
org.json.JSONArray.write,"    public Writer write(Writer writer) throws JSONException {
        return this.write(writer, 0, 0);
    }"
org.json.JSONArray.write,"    public Writer write(Writer writer, int indentFactor, int indent) throws JSONException {
        try {
            boolean commanate = false;
            int length = this.length();
            writer.write(91);
            if (length == 1) {
                JSONObject.writeValue(writer, this.myArrayList.get(0), indentFactor, indent);
            } else if (length != 0) {
                int newindent = indent + indentFactor;
                for (int i = 0; i < length; ++i) {
                    if (commanate) {
                        writer.write(44);
                    }
                    if (indentFactor > 0) {
                        writer.write(10);
                    }
                    JSONObject.indent(writer, newindent);
                    JSONObject.writeValue(writer, this.myArrayList.get(i), indentFactor, newindent);
                    commanate = true;
                }
                if (indentFactor > 0) {
                    writer.write(10);
                }
                JSONObject.indent(writer, indent);
            }
            writer.write(93);
            return writer;
        }
        catch (IOException e) {
            throw new JSONException(e);
        }
    }"
org.json.JSONArray.toList,"    public List<Object> toList() {
        ArrayList<Object> results = new ArrayList<Object>(this.myArrayList.size());
        for (Object element : this.myArrayList) {
            if (element == null || JSONObject.NULL.equals(element)) {
                results.add(null);
                continue;
            }
            if (element instanceof JSONArray) {
                results.add(((JSONArray)element).toList());
                continue;
            }
            if (element instanceof JSONObject) {
                results.add(((JSONObject)element).toMap());
                continue;
            }
            results.add(element);
        }
        return results;
    }
"
org.json.JSONStringer.toString,"    public String toString() {
        return this.mode == 'd' ? this.writer.toString() : null;
    }
"
org.json.JSONPointer.builder,"    public static Builder builder() {
        return new Builder();
    }"
org.json.JSONPointer.unescape,"    private String unescape(String token) {
        return token.replace(""~1"", ""/"").replace(""~0"", ""~"").replace(""\\\"""", ""\"""").replace(""\\\\"", ""\\"");
    }"
org.json.JSONPointer.queryFrom,"    public Object queryFrom(Object document) {
        if (this.refTokens.isEmpty()) {
            return document;
        }
        Object current = document;
        for (String token : this.refTokens) {
            if (current instanceof JSONObject) {
                current = ((JSONObject)current).opt(this.unescape(token));
                continue;
            }
            if (current instanceof JSONArray) {
                current = this.readByIndexToken(current, token);
                continue;
            }
            throw new JSONPointerException(String.format(""value [%s] is not an array or object therefore its key %s cannot be resolved"", current, token));
        }
        return current;
    }"
org.json.JSONPointer.readByIndexToken,"    private Object readByIndexToken(Object current, String indexToken) {
        try {
            int index = Integer.parseInt(indexToken);
            JSONArray currentArr = (JSONArray)current;
            if (index >= currentArr.length()) {
                throw new JSONPointerException(String.format(""index %d is out of bounds - the array has %d elements"", index, currentArr.length()));
            }
            return currentArr.get(index);
        }
        catch (NumberFormatException e) {
            throw new JSONPointerException(String.format(""%s is not an array index"", indexToken), e);
        }
    }"
org.json.JSONPointer.toString,"    public String toString() {
        StringBuilder rval = new StringBuilder("""");
        for (String token : this.refTokens) {
            rval.append('/').append(this.escape(token));
        }
        return rval.toString();
    }"
org.json.JSONPointer.escape,"    private String escape(String token) {
        return token.replace(""~"", ""~0"").replace(""/"", ""~1"").replace(""\\"", ""\\\\"").replace(""\"""", ""\\\"""");
    }"
org.json.JSONPointer.toURIFragment,"    public String toURIFragment() {
        try {
            StringBuilder rval = new StringBuilder(""#"");
            for (String token : this.refTokens) {
                rval.append('/').append(URLEncoder.encode(token, ENCODING));
            }
            return rval.toString();
        }
        catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }"
org.json.JSONPointer.build,"        public JSONPointer build() {
            return new JSONPointer(this.refTokens);
        }"
org.json.JSONPointer.append,"        public Builder append(String token) {
            if (token == null) {
                throw new NullPointerException(""token cannot be null"");
            }
            this.refTokens.add(token);
            return this;
        }"
org.json.JSONPointer.append,"        public Builder append(int arrayIndex) {
            this.refTokens.add(String.valueOf(arrayIndex));
            return this;
        }
    "
org.json.Property.toJSONObject,"    public static JSONObject toJSONObject(Properties properties) throws JSONException {
        JSONObject jo = new JSONObject();
        if (properties != null && !properties.isEmpty()) {
            Enumeration<?> enumProperties = properties.propertyNames();
            while (enumProperties.hasMoreElements()) {
                String name = (String)enumProperties.nextElement();
                jo.put(name, properties.getProperty(name));
            }
        }
        return jo;
    }"
org.json.Property.toProperties,"    public static Properties toProperties(JSONObject jo) throws JSONException {
        Properties properties = new Properties();
        if (jo != null) {
            Iterator<String> keys = jo.keys();
            while (keys.hasNext()) {
                String name = keys.next();
                properties.put(name, jo.getString(name));
            }
        }
        return properties;
    }
"
org.json.JSONTokener.back,"    public void back() throws JSONException {
        if (this.usePrevious || this.index <= 0L) {
            throw new JSONException(""Stepping back two steps is not supported"");
        }
        --this.index;
        --this.character;
        this.usePrevious = true;
        this.eof = false;
    }"
org.json.JSONTokener.dehexchar,"    public static int dehexchar(char c) {
        if (c >= '0' && c <= '9') {
            return c - 48;
        }
        if (c >= 'A' && c <= 'F') {
            return c - 55;
        }
        if (c >= 'a' && c <= 'f') {
            return c - 87;
        }
        return -1;
    }"
org.json.JSONTokener.end,"    public boolean end() {
        return this.eof && !this.usePrevious;
    }"
org.json.JSONTokener.more,"    public boolean more() throws JSONException {
        this.next();
        if (this.end()) {
            return false;
        }
        this.back();
        return true;
    }"
org.json.JSONTokener.next,"    public char next() throws JSONException {
        int c;
        if (this.usePrevious) {
            this.usePrevious = false;
            c = this.previous;
        } else {
            try {
                c = this.reader.read();
            }
            catch (IOException exception) {
                throw new JSONException(exception);
            }
            if (c <= 0) {
                this.eof = true;
                c = 0;
            }
        }
        ++this.index;
        if (this.previous == '\r') {
            ++this.line;
            this.character = c == 10 ? 0L : 1L;
        } else if (c == 10) {
            ++this.line;
            this.character = 0L;
        } else {
            ++this.character;
        }
        this.previous = (char)c;
        return this.previous;
    }"
org.json.JSONTokener.next,"    public char next(char c) throws JSONException {
        char n = this.next();
        if (n != c) {
            throw this.syntaxError(""Expected '"" + c + ""' and instead saw '"" + n + ""'"");
        }
        return n;
    }"
org.json.JSONTokener.next,"    public String next(int n) throws JSONException {
        if (n == 0) {
            return """";
        }
        char[] chars = new char[n];
        for (int pos = 0; pos < n; ++pos) {
            chars[pos] = this.next();
            if (!this.end()) continue;
            throw this.syntaxError(""Substring bounds error"");
        }
        return new String(chars);
    }"
org.json.JSONTokener.nextClean,"    public char nextClean() throws JSONException {
        char c;
        while ((c = this.next()) != '\u0000' && c <= ' ') {
        }
        return c;
    }"
org.json.JSONTokener.nextString,"    public String nextString(char quote) throws JSONException {
        StringBuilder sb = new StringBuilder();
        block15: while (true) {
            char c = this.next();
            switch (c) {
                case '\u0000': 
                case '\n': 
                case '\r': {
                    throw this.syntaxError(""Unterminated string"");
                }
                case '\\': {
                    c = this.next();
                    switch (c) {
                        case 'b': {
                            sb.append('\b');
                            continue block15;
                        }
                        case 't': {
                            sb.append('\t');
                            continue block15;
                        }
                        case 'n': {
                            sb.append('\n');
                            continue block15;
                        }
                        case 'f': {
                            sb.append('\f');
                            continue block15;
                        }
                        case 'r': {
                            sb.append('\r');
                            continue block15;
                        }
                        case 'u': {
                            try {
                                sb.append((char)Integer.parseInt(this.next(4), 16));
                                continue block15;
                            }
                            catch (NumberFormatException e) {
                                throw this.syntaxError(""Illegal escape."", e);
                            }
                        }
                        case '\""': 
                        case '\'': 
                        case '/': 
                        case '\\': {
                            sb.append(c);
                            continue block15;
                        }
                    }
                    throw this.syntaxError(""Illegal escape."");
                }
            }
            if (c == quote) {
                return sb.toString();
            }
            sb.append(c);
        }
    }"
org.json.JSONTokener.nextTo,"    public String nextTo(char delimiter) throws JSONException {
        StringBuilder sb = new StringBuilder();
        while (true) {
            char c;
            if ((c = this.next()) == delimiter || c == '\u0000' || c == '\n' || c == '\r') {
                if (c != '\u0000') {
                    this.back();
                }
                return sb.toString().trim();
            }
            sb.append(c);
        }
    }"
org.json.JSONTokener.nextTo,"    public String nextTo(String delimiters) throws JSONException {
        StringBuilder sb = new StringBuilder();
        while (true) {
            char c;
            if (delimiters.indexOf(c = this.next()) >= 0 || c == '\u0000' || c == '\n' || c == '\r') {
                if (c != '\u0000') {
                    this.back();
                }
                return sb.toString().trim();
            }
            sb.append(c);
        }
    }"
org.json.JSONTokener.nextValue,"    public Object nextValue() throws JSONException {
        char c = this.nextClean();
        switch (c) {
            case '\""': 
            case '\'': {
                return this.nextString(c);
            }
            case '{': {
                this.back();
                return new JSONObject(this);
            }
            case '[': {
                this.back();
                return new JSONArray(this);
            }
        }
        StringBuilder sb = new StringBuilder();
        while (c >= ' ' && "",:]}/\\\""[{;=#"".indexOf(c) < 0) {
            sb.append(c);
            c = this.next();
        }
        this.back();
        String string = sb.toString().trim();
        if ("""".equals(string)) {
            throw this.syntaxError(""Missing value"");
        }
        return JSONObject.stringToValue(string);
    "
org.json.JSONTokener.skipTo,"    public char skipTo(char to) throws JSONException {
        char c;
        try {
            long startIndex = this.index;
            long startCharacter = this.character;
            long startLine = this.line;
            this.reader.mark(1000000);
            do {
                if ((c = this.next()) != '\u0000') continue;
                this.reader.reset();
                this.index = startIndex;
                this.character = startCharacter;
                this.line = startLine;
                return c;
            } while (c != to);
        }
        catch (IOException exception) {
            throw new JSONException(exception);
        }
        this.back();
        return c;
    }"
org.json.JSONTokener.syntaxError,"    public JSONException syntaxError(String message) {
        return new JSONException(message + this.toString());
    }"
org.json.JSONTokener.syntaxError,"    public JSONException syntaxError(String message, Throwable causedBy) {
        return new JSONException(message + this.toString(), causedBy);
    }"
org.json.JSONTokener.toString,"    public String toString() {
        return "" at "" + this.index + "" [character "" + this.character + "" line "" + this.line + ""]"";
    }
"
org.json.CookieList.toJSONObject,"    public static JSONObject toJSONObject(String string) throws JSONException {
        JSONObject jo = new JSONObject();
        JSONTokener x = new JSONTokener(string);
        while (x.more()) {
            String name = Cookie.unescape(x.nextTo('='));
            x.next('=');
            jo.put(name, Cookie.unescape(x.nextTo(';')));
            x.next();
        }
        return jo;
    }"
org.json.CookieList.toString,"    public static String toString(JSONObject jo) throws JSONException {
        boolean b = false;
        Iterator<String> keys = jo.keys();
        StringBuilder sb = new StringBuilder();
        while (keys.hasNext()) {
            String string = keys.next();
            if (jo.isNull(string)) continue;
            if (b) {
                sb.append(';');
            }
            sb.append(Cookie.escape(string));
            sb.append(""="");
            sb.append(Cookie.escape(jo.getString(string)));
            b = true;
        }
        return sb.toString();
    }
"
org.json.HTTPTokener.nextToken,"    public String nextToken() throws JSONException {
        char c;
        StringBuilder sb = new StringBuilder();
        while (Character.isWhitespace(c = this.next())) {
        }
        if (c == '\""' || c == '\'') {
            char q = c;
            while (true) {
                if ((c = this.next()) < ' ') {
                    throw this.syntaxError(""Unterminated string."");
                }
                if (c == q) {
                    return sb.toString();
                }
                sb.append(c);
            }
        }
        while (c != '\u0000' && !Character.isWhitespace(c)) {
            sb.append(c);
            c = this.next();
        }
        return sb.toString();
    }
"
org.json.JSONObject.accumulate,"    public JSONObject accumulate(String key, Object value) throws JSONException {
        JSONObject.testValidity(value);
        Object object = this.opt(key);
        if (object == null) {
            this.put(key, value instanceof JSONArray ? new JSONArray().put(value) : value);
        } else if (object instanceof JSONArray) {
            ((JSONArray)object).put(value);
        } else {
            this.put(key, new JSONArray().put(object).put(value));
        }
        return this;
    }"
org.json.JSONObject.append,"    public JSONObject append(String key, Object value) throws JSONException {
        JSONObject.testValidity(value);
        Object object = this.opt(key);
        if (object == null) {
            this.put(key, new JSONArray().put(value));
        } else if (object instanceof JSONArray) {
            this.put(key, ((JSONArray)object).put(value));
        } else {
            throw new JSONException(""JSONObject["" + key + ""] is not a JSONArray."");
        }
        return this;
    }"
org.json.JSONObject.doubleToString,"    public static String doubleToString(double d) {
        if (Double.isInfinite(d) || Double.isNaN(d)) {
            return ""null"";
        }
        String string = Double.toString(d);
        if (string.indexOf(46) > 0 && string.indexOf(101) < 0 && string.indexOf(69) < 0) {
            while (string.endsWith(""0"")) {
                string = string.substring(0, string.length() - 1);
            }
            if (string.endsWith(""."")) {
                string = string.substring(0, string.length() - 1);
            }
        }
        return string;
    }"
org.json.JSONObject.get,"    public Object get(String key) throws JSONException {
        if (key == null) {
            throw new JSONException(""Null key."");
        }
        Object object = this.opt(key);
        if (object == null) {
            throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] not found."");
        }
        return object;
    }"
org.json.JSONObject.getEnum,"    public <E extends Enum<E>> E getEnum(Class<E> clazz, String key) throws JSONException {
        E val = this.optEnum(clazz, key);
        if (val == null) {
            throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] is not an enum of type "" + JSONObject.quote(clazz.getSimpleName()) + ""."");
        }
        return val;
    }"
org.json.JSONObject.getBoolean,"    public boolean getBoolean(String key) throws JSONException {
        Object object = this.get(key);
        if (object.equals(Boolean.FALSE) || object instanceof String && ((String)object).equalsIgnoreCase(""false"")) {
            return false;
        }
        if (object.equals(Boolean.TRUE) || object instanceof String && ((String)object).equalsIgnoreCase(""true"")) {
            return true;
        }
        throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] is not a Boolean."");
    }"
org.json.JSONObject.getBigInteger,"    public BigInteger getBigInteger(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return new BigInteger(object.toString());
        }
        catch (Exception e) {
            throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] could not be converted to BigInteger."");
        }
    }"
org.json.JSONObject.getBigDecimal,"    public BigDecimal getBigDecimal(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return new BigDecimal(object.toString());
        }
        catch (Exception e) {
            throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] could not be converted to BigDecimal."");
        }
    }"
org.json.JSONObject.getDouble,"    public double getDouble(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return object instanceof Number ? ((Number)object).doubleValue() : Double.parseDouble((String)object);
        }
        catch (Exception e) {
            throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] is not a number."");
        }
    }"
org.json.JSONObject.getInt,"    public int getInt(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return object instanceof Number ? ((Number)object).intValue() : Integer.parseInt((String)object);
        }
        catch (Exception e) {
            throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] is not an int."");
        }
    }"
org.json.JSONObject.getJSONArray,"    public JSONArray getJSONArray(String key) throws JSONException {
        Object object = this.get(key);
        if (object instanceof JSONArray) {
            return (JSONArray)object;
        }
        throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] is not a JSONArray."");
    }"
org.json.JSONObject.getJSONObject,"    public JSONObject getJSONObject(String key) throws JSONException {
        Object object = this.get(key);
        if (object instanceof JSONObject) {
            return (JSONObject)object;
        }
        throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] is not a JSONObject."");
    }"
org.json.JSONObject.getLong,"    public long getLong(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return object instanceof Number ? ((Number)object).longValue() : Long.parseLong((String)object);
        }
        catch (Exception e) {
            throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] is not a long."");
        }
    }"
org.json.JSONObject.getNames,"    public static String[] getNames(JSONObject jo) {
        int length = jo.length();
        if (length == 0) {
            return null;
        }
        Iterator<String> iterator = jo.keys();
        String[] names = new String[length];
        int i = 0;
        while (iterator.hasNext()) {
            names[i] = iterator.next();
            ++i;
        }
        return names;
    }"
org.json.JSONObject.getNames,"    public static String[] getNames(Object object) {
        if (object == null) {
            return null;
        }
        Class<?> klass = object.getClass();
        Field[] fields = klass.getFields();
        int length = fields.length;
        if (length == 0) {
            return null;
        }
        String[] names = new String[length];
        for (int i = 0; i < length; ++i) {
            names[i] = fields[i].getName();
        }
        return names;
    }"
org.json.JSONObject.getString,"    public String getString(String key) throws JSONException {
        Object object = this.get(key);
        if (object instanceof String) {
            return (String)object;
        }
        throw new JSONException(""JSONObject["" + JSONObject.quote(key) + ""] not a string."");
    }"
org.json.JSONObject.has,"    public boolean has(String key) {
        return this.map.containsKey(key);
    }"
org.json.JSONObject.increment,"    public JSONObject increment(String key) throws JSONException {
        Object value = this.opt(key);
        if (value == null) {
            this.put(key, 1);
        } else if (value instanceof BigInteger) {
            this.put(key, ((BigInteger)value).add(BigInteger.ONE));
        } else if (value instanceof BigDecimal) {
            this.put(key, ((BigDecimal)value).add(BigDecimal.ONE));
        } else if (value instanceof Integer) {
            this.put(key, (Integer)value + 1);
        } else if (value instanceof Long) {
            this.put(key, (Long)value + 1L);
        } else if (value instanceof Double) {
            this.put(key, (Double)value + 1.0);
        } else if (value instanceof Float) {
            this.put(key, ((Float)value).floatValue() + 1.0f);
        } else {
            throw new JSONException(""Unable to increment ["" + JSONObject.quote(key) + ""]."");
        }
        return this;
    }"
org.json.JSONObject.isNull,"    public boolean isNull(String key) {
        return NULL.equals(this.opt(key));
    }"
org.json.JSONObject.keys,"    public Iterator<String> keys() {
        return this.keySet().iterator();
    }"
org.json.JSONObject.keySet,"    public Set<String> keySet() {
        return this.map.keySet();
    }"
org.json.JSONObject.length,"    public int length() {
        return this.map.size();
    }"
org.json.JSONObject.names,"    public JSONArray names() {
        JSONArray ja = new JSONArray();
        Iterator<String> keys = this.keys();
        while (keys.hasNext()) {
            ja.put(keys.next());
        }
        return ja.length() == 0 ? null : ja;
    }"
org.json.JSONObject.numberToString,"    public static String numberToString(Number number) throws JSONException {
        if (number == null) {
            throw new JSONException(""Null pointer"");
        }
        JSONObject.testValidity(number);
        String string = number.toString();
        if (string.indexOf(46) > 0 && string.indexOf(101) < 0 && string.indexOf(69) < 0) {
            while (string.endsWith(""0"")) {
                string = string.substring(0, string.length() - 1);
            }
            if (string.endsWith(""."")) {
                string = string.substring(0, string.length() - 1);
            }
        }
        return string;
    }"
org.json.JSONObject.opt,"    public Object opt(String key) {
        return key == null ? null : this.map.get(key);
    }"
org.json.JSONObject.optEnum,"    public <E extends Enum<E>> E optEnum(Class<E> clazz, String key) {
        return this.optEnum(clazz, key, null);
    }"
org.json.JSONObject.optEnum,"    public <E extends Enum<E>> E optEnum(Class<E> clazz, String key, E defaultValue) {
        try {
            Object val = this.opt(key);
            if (NULL.equals(val)) {
                return defaultValue;
            }
            if (clazz.isAssignableFrom(val.getClass())) {
                Enum myE = (Enum)val;
                return (E)myE;
            }
            return Enum.valueOf(clazz, val.toString());
        }
        catch (IllegalArgumentException e) {
            return defaultValue;
        }
        catch (NullPointerException e) {
            return defaultValue;
        }
    }"
org.json.JSONObject.optBoolean,"    public boolean optBoolean(String key) {
        return this.optBoolean(key, false);
    }"
org.json.JSONObject.optBoolean,"    public boolean optBoolean(String key, boolean defaultValue) {
        try {
            return this.getBoolean(key);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONObject.optDouble,"    public double optDouble(String key) {
        return this.optDouble(key, Double.NaN);
    }"
org.json.JSONObject.optBigInteger,"    public BigInteger optBigInteger(String key, BigInteger defaultValue) {
        try {
            return this.getBigInteger(key);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONObject.optBigDecimal,"    public BigDecimal optBigDecimal(String key, BigDecimal defaultValue) {
        try {
            return this.getBigDecimal(key);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONObject.optDouble,"    public double optDouble(String key, double defaultValue) {
        try {
            return this.getDouble(key);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONObject.optInt,"    public int optInt(String key) {
        return this.optInt(key, 0);
    }"
org.json.JSONObject.optInt,"    public int optInt(String key, int defaultValue) {
        try {
            return this.getInt(key);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONObject.optJSONArray,"    public JSONArray optJSONArray(String key) {
        Object o = this.opt(key);
        return o instanceof JSONArray ? (JSONArray)o : null;
    }"
org.json.JSONObject.optJSONObject,"    public JSONObject optJSONObject(String key) {
        Object object = this.opt(key);
        return object instanceof JSONObject ? (JSONObject)object : null;
    }"
org.json.JSONObject.optLong,"    public long optLong(String key) {
        return this.optLong(key, 0L);
    }"
org.json.JSONObject.optLong,"    public long optLong(String key, long defaultValue) {
        try {
            return this.getLong(key);
        }
        catch (Exception e) {
            return defaultValue;
        }
    }"
org.json.JSONObject.optString,"    public String optString(String key) {
        return this.optString(key, """");
    }"
org.json.JSONObject.optString,"    public String optString(String key, String defaultValue) {
        Object object = this.opt(key);
        return NULL.equals(object) ? defaultValue : object.toString();
    }"
org.json.JSONObject.populateMap,"    private void populateMap(Object bean) {
        Class<?> klass = bean.getClass();
        boolean includeSuperClass = klass.getClassLoader() != null;
        Method[] methods = includeSuperClass ? klass.getMethods() : klass.getDeclaredMethods();
        for (int i = 0; i < methods.length; ++i) {
            try {
                Method method = methods[i];
                if (!Modifier.isPublic(method.getModifiers())) continue;
                String name = method.getName();
                String key = """";
                if (name.startsWith(""get"")) {
                    key = ""getClass"".equals(name) || ""getDeclaringClass"".equals(name) ? """" : name.substring(3);
                } else if (name.startsWith(""is"")) {
                    key = name.substring(2);
                }
                if (key.length() <= 0 || !Character.isUpperCase(key.charAt(0)) || method.getParameterTypes().length != 0) continue;
                if (key.length() == 1) {
                    key = key.toLowerCase(Locale.ROOT);
                } else if (!Character.isUpperCase(key.charAt(1))) {
                    key = key.substring(0, 1).toLowerCase(Locale.ROOT) + key.substring(1);
                }
                Object result = method.invoke(bean, null);
                if (result == null) continue;
                this.map.put(key, JSONObject.wrap(result));
                continue;
            }
            catch (Exception ignore) {
                // empty catch block
            }
        }
    }"
org.json.JSONObject.put,"    public JSONObject put(String key, boolean value) throws JSONException {
        this.put(key, value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }"
org.json.JSONObject.put,"    public JSONObject put(String key, Collection<?> value) throws JSONException {
        this.put(key, new JSONArray(value));
        return this;
    }"
org.json.JSONObject.put,"    public JSONObject put(String key, double value) throws JSONException {
        this.put(key, new Double(value));
        return this;
    }"
org.json.JSONObject.put,"    public JSONObject put(String key, int value) throws JSONException {
        this.put(key, new Integer(value));
        return this;
    }"
org.json.JSONObject.put,"    public JSONObject put(String key, long value) throws JSONException {
        this.put(key, new Long(value));
        return this;
    }"
org.json.JSONObject.put,"    public JSONObject put(String key, Map<?, ?> value) throws JSONException {
        this.put(key, new JSONObject(value));
        return this;
    }"
org.json.JSONObject.put,"    public JSONObject put(String key, Object value) throws JSONException {
        if (key == null) {
            throw new NullPointerException(""Null key."");
        }
        if (value != null) {
            JSONObject.testValidity(value);
            this.map.put(key, value);
        } else {
            this.remove(key);
        }
        return this;
    }"
org.json.JSONObject.putOnce,"    public JSONObject putOnce(String key, Object value) throws JSONException {
        if (key != null && value != null) {
            if (this.opt(key) != null) {
                throw new JSONException(""Duplicate key \"""" + key + ""\"""");
            }
            this.put(key, value);
        }
        return this;
    }"
org.json.JSONObject.putOpt,"    public JSONObject putOpt(String key, Object value) throws JSONException {
        if (key != null && value != null) {
            this.put(key, value);
        }
        return this;
    }"
org.json.JSONObject.query,"    public Object query(String jsonPointer) {
        return this.query(new JSONPointer(jsonPointer));
    }"
org.json.JSONObject.query,"    public Object query(JSONPointer jsonPointer) {
        return jsonPointer.queryFrom(this);
    }"
org.json.JSONObject.optQuery,"    public Object optQuery(String jsonPointer) {
        return this.optQuery(new JSONPointer(jsonPointer));
    }"
org.json.JSONObject.optQuery,"    public Object optQuery(JSONPointer jsonPointer) {
        try {
            return jsonPointer.queryFrom(this);
        }
        catch (JSONPointerException e) {
            return null;
        }
    }"
org.json.JSONObject.quote,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public static String quote(String string) {
        StringWriter sw = new StringWriter();
        StringBuffer stringBuffer = sw.getBuffer();
        synchronized (stringBuffer) {
            try {
                return JSONObject.quote(string, sw).toString();
            }
            catch (IOException ignored) {
                return """";
            }
        }
    }"
org.json.JSONObject.quote,"    public static Writer quote(String string, Writer w) throws IOException {
        if (string == null || string.length() == 0) {
            w.write(""\""\"""");
            return w;
        }
        char c = '\u0000';
        int len = string.length();
        w.write(34);
        block9: for (int i = 0; i < len; ++i) {
            char b = c;
            c = string.charAt(i);
            switch (c) {
                case '\""': 
                case '\\': {
                    w.write(92);
                    w.write(c);
                    continue block9;
                }
                case '/': {
                    if (b == '<') {
                        w.write(92);
                    }
                    w.write(c);
                    continue block9;
                }
                case '\b': {
                    w.write(""\\b"");
                    continue block9;
                }
                case '\t': {
                    w.write(""\\t"");
                    continue block9;
                }
                case '\n': {
                    w.write(""\\n"");
                    continue block9;
                }
                case '\f': {
                    w.write(""\\f"");
                    continue block9;
                }
                case '\r': {
                    w.write(""\\r"");
                    continue block9;
                }
                default: {
                    if (c < ' ' || c >= '\u0080' && c < '\u00a0' || c >= '\u2000' && c < '\u2100') {
                        w.write(""\\u"");
                        String hhhh = Integer.toHexString(c);
                        w.write(""0000"", 0, 4 - hhhh.length());
                        w.write(hhhh);
                        continue block9;
                    }
                    w.write(c);
                }
            }
        }
        w.write(34);
        return w;
    }"
org.json.JSONObject.remove,"    public Object remove(String key) {
        return this.map.remove(key);
    }"
org.json.JSONObject.similar,"    public boolean similar(Object other) {
        try {
            if (!(other instanceof JSONObject)) {
                return false;
            }
            Set<String> set = this.keySet();
            if (!set.equals(((JSONObject)other).keySet())) {
                return false;
            }
            for (String name : set) {
                Object valueThis = this.get(name);
                Object valueOther = ((JSONObject)other).get(name);
                if (!(valueThis instanceof JSONObject ? !((JSONObject)valueThis).similar(valueOther) : (valueThis instanceof JSONArray ? !((JSONArray)valueThis).similar(valueOther) : !valueThis.equals(valueOther)))) continue;
                return false;
            }
            return true;
        }
        catch (Throwable exception) {
            return false;
        }
    }"
org.json.JSONObject.stringToValue,"    public static Object stringToValue(String string) {
        if (string.equals("""")) {
            return string;
        }
        if (string.equalsIgnoreCase(""true"")) {
            return Boolean.TRUE;
        }
        if (string.equalsIgnoreCase(""false"")) {
            return Boolean.FALSE;
        }
        if (string.equalsIgnoreCase(""null"")) {
            return NULL;
        }
        char initial = string.charAt(0);
        if (initial >= '0' && initial <= '9' || initial == '-') {
            try {
                if (string.indexOf(46) > -1 || string.indexOf(101) > -1 || string.indexOf(69) > -1 || ""-0"".equals(string)) {
                    Double d = Double.valueOf(string);
                    if (!d.isInfinite() && !d.isNaN()) {
                        return d;
                    }
                } else {
                    Long myLong = new Long(string);
                    if (string.equals(myLong.toString())) {
                        if (myLong == (long)myLong.intValue()) {
                            return myLong.intValue();
                        }
                        return myLong;
                    }
                }
            }
            catch (Exception exception) {
                // empty catch block
            }
        }
        return string;
    }"
org.json.JSONObject.testValidity,"    public static void testValidity(Object o) throws JSONException {
        if (o != null && (o instanceof Double ? ((Double)o).isInfinite() || ((Double)o).isNaN() : o instanceof Float && (((Float)o).isInfinite() || ((Float)o).isNaN()))) {
            throw new JSONException(""JSON does not allow non-finite numbers."");
        }
    }"
org.json.JSONObject.toJSONArray,"    public JSONArray toJSONArray(JSONArray names) throws JSONException {
        if (names == null || names.length() == 0) {
            return null;
        }
        JSONArray ja = new JSONArray();
        for (int i = 0; i < names.length(); ++i) {
            ja.put(this.opt(names.getString(i)));
        }
        return ja;
    }"
org.json.JSONObject.toString,"    public String toString() {
        try {
            return this.toString(0);
        }
        catch (Exception e) {
            return null;
        }
    }"
org.json.JSONObject.toString,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public String toString(int indentFactor) throws JSONException {
        StringWriter w = new StringWriter();
        StringBuffer stringBuffer = w.getBuffer();
        synchronized (stringBuffer) {
            return this.write(w, indentFactor, 0).toString();
        }
    }"
org.json.JSONObject.valueToString,"    public static String valueToString(Object value) throws JSONException {
        if (value == null || value.equals(null)) {
            return ""null"";
        }
        if (value instanceof JSONString) {
            String object;
            try {
                object = ((JSONString)value).toJSONString();
            }
            catch (Exception e) {
                throw new JSONException(e);
            }
            if (object instanceof String) {
                return object;
            }
            throw new JSONException(""Bad value from toJSONString: "" + object);
        }
        if (value instanceof Number) {
            String numberAsString = JSONObject.numberToString((Number)value);
            try {
                new BigDecimal(numberAsString);
                return numberAsString;
            }
            catch (NumberFormatException ex) {
                return JSONObject.quote(numberAsString);
            }
        }
        if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {
            return value.toString();
        }
        if (value instanceof Map) {
            Map map = (Map)value;
            return new JSONObject(map).toString();
        }
        if (value instanceof Collection) {
            Collection coll = (Collection)value;
            return new JSONArray(coll).toString();
        }
        if (value.getClass().isArray()) {
            return new JSONArray(value).toString();
        }
        if (value instanceof Enum) {
            return JSONObject.quote(((Enum)value).name());
        }
        return JSONObject.quote(value.toString());
    }"
org.json.JSONObject.wrap,"    public static Object wrap(Object object) {
        try {
            String objectPackageName;
            if (object == null) {
                return NULL;
            }
            if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object) || object instanceof JSONString || object instanceof Byte || object instanceof Character || object instanceof Short || object instanceof Integer || object instanceof Long || object instanceof Boolean || object instanceof Float || object instanceof Double || object instanceof String || object instanceof BigInteger || object instanceof BigDecimal || object instanceof Enum) {
                return object;
            }
            if (object instanceof Collection) {
                Collection coll = (Collection)object;
                return new JSONArray(coll);
            }
            if (object.getClass().isArray()) {
                return new JSONArray(object);
            }
            if (object instanceof Map) {
                Map map = (Map)object;
                return new JSONObject(map);
            }
            Package objectPackage = object.getClass().getPackage();
            String string = objectPackageName = objectPackage != null ? objectPackage.getName() : """";
            if (objectPackageName.startsWith(""java."") || objectPackageName.startsWith(""javax."") || object.getClass().getClassLoader() == null) {
                return object.toString();
            }
            return new JSONObject(object);
        }
        catch (Exception exception) {
            return null;
        }
    }"
org.json.JSONObject.write,"    public Writer write(Writer writer) throws JSONException {
        return this.write(writer, 0, 0);
    }"
org.json.JSONObject.writeValue,"    static final Writer writeValue(Writer writer, Object value, int indentFactor, int indent) throws JSONException, IOException {
        if (value == null || value.equals(null)) {
            writer.write(""null"");
        } else if (value instanceof JSONString) {
            String o;
            try {
                o = ((JSONString)value).toJSONString();
            }
            catch (Exception e) {
                throw new JSONException(e);
            }
            writer.write(o != null ? o.toString() : JSONObject.quote(value.toString()));
        } else if (value instanceof Number) {
            String numberAsString = JSONObject.numberToString((Number)value);
            try {
                BigDecimal testNum = new BigDecimal(numberAsString);
                writer.write(numberAsString);
            }
            catch (NumberFormatException ex) {
                JSONObject.quote(numberAsString, writer);
            }
        } else if (value instanceof Boolean) {
            writer.write(value.toString());
        } else if (value instanceof Enum) {
            writer.write(JSONObject.quote(((Enum)value).name()));
        } else if (value instanceof JSONObject) {
            ((JSONObject)value).write(writer, indentFactor, indent);
        } else if (value instanceof JSONArray) {
            ((JSONArray)value).write(writer, indentFactor, indent);
        } else if (value instanceof Map) {
            Map map = (Map)value;
            new JSONObject(map).write(writer, indentFactor, indent);
        } else if (value instanceof Collection) {
            Collection coll = (Collection)value;
            new JSONArray(coll).write(writer, indentFactor, indent);
        } else if (value.getClass().isArray()) {
            new JSONArray(value).write(writer, indentFactor, indent);
        } else {
            JSONObject.quote(value.toString(), writer);
        }
        return writer;
    }"
org.json.JSONObject.indent,"    static final void indent(Writer writer, int indent) throws IOException {
        for (int i = 0; i < indent; ++i) {
            writer.write(32);
        }
    }"
org.json.JSONObject.write,"    public Writer write(Writer writer, int indentFactor, int indent) throws JSONException {
        try {
            boolean commanate = false;
            int length = this.length();
            Iterator<String> keys = this.keys();
            writer.write(123);
            if (length == 1) {
                String key = keys.next();
                writer.write(JSONObject.quote(key.toString()));
                writer.write(58);
                if (indentFactor > 0) {
                    writer.write(32);
                }
                JSONObject.writeValue(writer, this.map.get(key), indentFactor, indent);
            } else if (length != 0) {
                int newindent = indent + indentFactor;
                while (keys.hasNext()) {
                    String key = keys.next();
                    if (commanate) {
                        writer.write(44);
                    }
                    if (indentFactor > 0) {
                        writer.write(10);
                    }
                    JSONObject.indent(writer, newindent);
                    writer.write(JSONObject.quote(key.toString()));
                    writer.write(58);
                    if (indentFactor > 0) {
                        writer.write(32);
                    }
                    JSONObject.writeValue(writer, this.map.get(key), indentFactor, newindent);
                    commanate = true;
                }
                if (indentFactor > 0) {
                    writer.write(10);
                }
                JSONObject.indent(writer, indent);
            }
            writer.write(125);
            return writer;
        }
        catch (IOException exception) {
            throw new JSONException(exception);
        }
    }"
org.json.JSONObject.toMap,"    public Map<String, Object> toMap() {
        HashMap<String, Object> results = new HashMap<String, Object>();
        for (Map.Entry<String, Object> entry : this.map.entrySet()) {
            Object value = entry.getValue() == null || NULL.equals(entry.getValue()) ? null : (entry.getValue() instanceof JSONObject ? ((JSONObject)entry.getValue()).toMap() : (entry.getValue() instanceof JSONArray ? ((JSONArray)entry.getValue()).toList() : entry.getValue()));
            results.put(entry.getKey(), value);
        }
        return results;
    }"
org.json.JSONObject.clone,"        protected final Object clone() {
            return this;
        }"
org.json.JSONObject.equals,"        public boolean equals(Object object) {
            return object == null || object == this;
        }"
org.json.JSONObject.toString,"        public String toString() {
            return ""null"";
        }
    "
org.json.JSONString.toJSONString,"    public String toJSONString();
"
org.json.JSONML.parse,"    private static Object parse(XMLTokener x, boolean arrayForm, JSONArray ja, boolean keepStrings) throws JSONException {
        String closeTag = null;
        JSONArray newja = null;
        JSONObject newjo = null;
        String tagName = null;
        while (true) {
            if (!x.more()) {
                throw x.syntaxError(""Bad XML"");
            }
            Object token = x.nextContent();
            if (token == XML.LT) {
                token = x.nextToken();
                if (token instanceof Character) {
                    if (token == XML.SLASH) {
                        token = x.nextToken();
                        if (!(token instanceof String)) {
                            throw new JSONException(""Expected a closing name instead of '"" + token + ""'."");
                        }
                        if (x.nextToken() != XML.GT) {
                            throw x.syntaxError(""Misshaped close tag"");
                        }
                        return token;
                    }
                    if (token == XML.BANG) {
                        char c = x.next();
                        if (c == '-') {
                            if (x.next() == '-') {
                                x.skipPast(""-->"");
                                continue;
                            }
                            x.back();
                            continue;
                        }
                        if (c == '[') {
                            token = x.nextToken();
                            if (token.equals(""CDATA"") && x.next() == '[') {
                                if (ja == null) continue;
                                ja.put(x.nextCDATA());
                                continue;
                            }
                            throw x.syntaxError(""Expected 'CDATA['"");
                        }
                        int i = 1;
                        do {
                            if ((token = x.nextMeta()) == null) {
                                throw x.syntaxError(""Missing '>' after '<!'."");
                            }
                            if (token == XML.LT) {
                                ++i;
                                continue;
                            }
                            if (token != XML.GT) continue;
                            --i;
                        } while (i > 0);
                        continue;
                    }
                    if (token == XML.QUEST) {
                        x.skipPast(""?>"");
                        continue;
                    }
                    throw x.syntaxError(""Misshaped tag"");
                }
                if (!(token instanceof String)) {
                    throw x.syntaxError(""Bad tagName '"" + token + ""'."");
                }
                tagName = (String)token;
                newja = new JSONArray();
                newjo = new JSONObject();
                if (arrayForm) {
                    newja.put(tagName);
                    if (ja != null) {
                        ja.put(newja);
                    }
                } else {
                    newjo.put(""tagName"", tagName);
                    if (ja != null) {
                        ja.put(newjo);
                    }
                }
                token = null;
                while (true) {
                    if (token == null) {
                        token = x.nextToken();
                    }
                    if (token == null) {
                        throw x.syntaxError(""Misshaped tag"");
                    }
                    if (!(token instanceof String)) break;
                    String attribute = (String)token;
                    if (!arrayForm && (""tagName"".equals(attribute) || ""childNode"".equals(attribute))) {
                        throw x.syntaxError(""Reserved attribute."");
                    }
                    token = x.nextToken();
                    if (token == XML.EQ) {
                        token = x.nextToken();
                        if (!(token instanceof String)) {
                            throw x.syntaxError(""Missing value"");
                        }
                        newjo.accumulate(attribute, keepStrings ? XML.unescape((String)token) : XML.stringToValue((String)token));
                        token = null;
                        continue;
                    }
                    newjo.accumulate(attribute, """");
                }
                if (arrayForm && newjo.length() > 0) {
                    newja.put(newjo);
                }
                if (token == XML.SLASH) {
                    if (x.nextToken() != XML.GT) {
                        throw x.syntaxError(""Misshaped tag"");
                    }
                    if (ja != null) continue;
                    if (arrayForm) {
                        return newja;
                    }
                    return newjo;
                }
                if (token != XML.GT) {
                    throw x.syntaxError(""Misshaped tag"");
                }
                closeTag = (String)JSONML.parse(x, arrayForm, newja, keepStrings);
                if (closeTag == null) continue;
                if (!closeTag.equals(tagName)) {
                    throw x.syntaxError(""Mismatched '"" + tagName + ""' and '"" + closeTag + ""'"");
                }
                tagName = null;
                if (!arrayForm && newja.length() > 0) {
                    newjo.put(""childNodes"", newja);
                }
                if (ja != null) continue;
                if (arrayForm) {
                    return newja;
                }
                return newjo;
            }
            if (ja == null) continue;
            ja.put(token instanceof String ? (keepStrings ? XML.unescape((String)token) : XML.stringToValue((String)token)) : token);
        }
    }"
org.json.JSONML.toJSONArray,"    public static JSONArray toJSONArray(String string) throws JSONException {
        return (JSONArray)JSONML.parse(new XMLTokener(string), true, null, false);
    }"
org.json.JSONML.toJSONArray,"    public static JSONArray toJSONArray(String string, boolean keepStrings) throws JSONException {
        return (JSONArray)JSONML.parse(new XMLTokener(string), true, null, keepStrings);
    }"
org.json.JSONML.toJSONArray,"    public static JSONArray toJSONArray(XMLTokener x, boolean keepStrings) throws JSONException {
        return (JSONArray)JSONML.parse(x, true, null, keepStrings);
    }"
org.json.JSONML.toJSONArray,"    public static JSONArray toJSONArray(XMLTokener x) throws JSONException {
        return (JSONArray)JSONML.parse(x, true, null, false);
    }"
org.json.JSONML.toJSONObject,"    public static JSONObject toJSONObject(String string) throws JSONException {
        return (JSONObject)JSONML.parse(new XMLTokener(string), false, null, false);
    }"
org.json.JSONML.toJSONObject,"    public static JSONObject toJSONObject(String string, boolean keepStrings) throws JSONException {
        return (JSONObject)JSONML.parse(new XMLTokener(string), false, null, keepStrings);
    }"
org.json.JSONML.toJSONObject,"    public static JSONObject toJSONObject(XMLTokener x) throws JSONException {
        return (JSONObject)JSONML.parse(x, false, null, false);
    }"
org.json.JSONML.toJSONObject,"    public static JSONObject toJSONObject(XMLTokener x, boolean keepStrings) throws JSONException {
        return (JSONObject)JSONML.parse(x, false, null, keepStrings);
    }"
org.json.JSONML.toString,"    public static String toString(JSONArray ja) throws JSONException {
        int length;
        int i;
        StringBuilder sb = new StringBuilder();
        String tagName = ja.getString(0);
        XML.noSpace(tagName);
        tagName = XML.escape(tagName);
        sb.append('<');
        sb.append(tagName);
        Object object = ja.opt(1);
        if (object instanceof JSONObject) {
            i = 2;
            JSONObject jo = (JSONObject)object;
            Iterator<String> keys = jo.keys();
            while (keys.hasNext()) {
                String key = keys.next();
                XML.noSpace(key);
                String value = jo.optString(key);
                if (value == null) continue;
                sb.append(' ');
                sb.append(XML.escape(key));
                sb.append('=');
                sb.append('\""');
                sb.append(XML.escape(value));
                sb.append('\""');
            }
        } else {
            i = 1;
        }
        if (i >= (length = ja.length())) {
            sb.append('/');
            sb.append('>');
        } else {
            sb.append('>');
            do {
                object = ja.get(i);
                ++i;
                if (object == null) continue;
                if (object instanceof String) {
                    sb.append(XML.escape(object.toString()));
                    continue;
                }
                if (object instanceof JSONObject) {
                    sb.append(JSONML.toString((JSONObject)object));
                    continue;
                }
                if (object instanceof JSONArray) {
                    sb.append(JSONML.toString((JSONArray)object));
                    continue;
                }
                sb.append(object.toString());
            } while (i < length);
            sb.append('<');
            sb.append('/');
            sb.append(tagName);
            sb.append('>');
        }
        return sb.toString();
    }"
org.json.JSONML.toString,"    public static String toString(JSONObject jo) throws JSONException {
        StringBuilder sb = new StringBuilder();
        String tagName = jo.optString(""tagName"");
        if (tagName == null) {
            return XML.escape(jo.toString());
        }
        XML.noSpace(tagName);
        tagName = XML.escape(tagName);
        sb.append('<');
        sb.append(tagName);
        Iterator<String> keys = jo.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            if (""tagName"".equals(key) || ""childNodes"".equals(key)) continue;
            XML.noSpace(key);
            String value = jo.optString(key);
            if (value == null) continue;
            sb.append(' ');
            sb.append(XML.escape(key));
            sb.append('=');
            sb.append('\""');
            sb.append(XML.escape(value));
            sb.append('\""');
        }
        JSONArray ja = jo.optJSONArray(""childNodes"");
        if (ja == null) {
            sb.append('/');
            sb.append('>');
        } else {
            sb.append('>');
            int length = ja.length();
            for (int i = 0; i < length; ++i) {
                Object object = ja.get(i);
                if (object == null) continue;
                if (object instanceof String) {
                    sb.append(XML.escape(object.toString()));
                    continue;
                }
                if (object instanceof JSONObject) {
                    sb.append(JSONML.toString((JSONObject)object));
                    continue;
                }
                if (object instanceof JSONArray) {
                    sb.append(JSONML.toString((JSONArray)object));
                    continue;
                }
                sb.append(object.toString());
            }
            sb.append('<');
            sb.append('/');
            sb.append(tagName);
            sb.append('>');
        }
        return sb.toString();
    }
"
org.json.HTTP.toJSONObject,"    public static JSONObject toJSONObject(String string) throws JSONException {
        JSONObject jo = new JSONObject();
        HTTPTokener x = new HTTPTokener(string);
        String token = x.nextToken();
        if (token.toUpperCase(Locale.ROOT).startsWith(""HTTP"")) {
            jo.put(""HTTP-Version"", token);
            jo.put(""Status-Code"", x.nextToken());
            jo.put(""Reason-Phrase"", x.nextTo('\u0000'));
            x.next();
        } else {
            jo.put(""Method"", token);
            jo.put(""Request-URI"", x.nextToken());
            jo.put(""HTTP-Version"", x.nextToken());
        }
        while (x.more()) {
            String name = x.nextTo(':');
            x.next(':');
            jo.put(name, x.nextTo('\u0000'));
            x.next();
        }
        return jo;
    }"
org.json.HTTP.toString,"    public static String toString(JSONObject jo) throws JSONException {
        Iterator<String> keys = jo.keys();
        StringBuilder sb = new StringBuilder();
        if (jo.has(""Status-Code"") && jo.has(""Reason-Phrase"")) {
            sb.append(jo.getString(""HTTP-Version""));
            sb.append(' ');
            sb.append(jo.getString(""Status-Code""));
            sb.append(' ');
            sb.append(jo.getString(""Reason-Phrase""));
        } else if (jo.has(""Method"") && jo.has(""Request-URI"")) {
            sb.append(jo.getString(""Method""));
            sb.append(' ');
            sb.append('\""');
            sb.append(jo.getString(""Request-URI""));
            sb.append('\""');
            sb.append(' ');
            sb.append(jo.getString(""HTTP-Version""));
        } else {
            throw new JSONException(""Not enough material for an HTTP header."");
        }
        sb.append(CRLF);
        while (keys.hasNext()) {
            String string = keys.next();
            if (""HTTP-Version"".equals(string) || ""Status-Code"".equals(string) || ""Reason-Phrase"".equals(string) || ""Method"".equals(string) || ""Request-URI"".equals(string) || jo.isNull(string)) continue;
            sb.append(string);
            sb.append("": "");
            sb.append(jo.getString(string));
            sb.append(CRLF);
        }
        sb.append(CRLF);
        return sb.toString();
    }
"
org.json.JSONWriter.append,"    private JSONWriter append(String string) throws JSONException {
        if (string == null) {
            throw new JSONException(""Null pointer"");
        }
        if (this.mode == 'o' || this.mode == 'a') {
            try {
                if (this.comma && this.mode == 'a') {
                    this.writer.append(',');
                }
                this.writer.append(string);
            }
            catch (IOException e) {
                throw new JSONException(e);
            }
            if (this.mode == 'o') {
                this.mode = (char)107;
            }
            this.comma = true;
            return this;
        }
        throw new JSONException(""Value out of sequence."");
    }"
org.json.JSONWriter.array,"    public JSONWriter array() throws JSONException {
        if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {
            this.push(null);
            this.append(""["");
            this.comma = false;
            return this;
        }
        throw new JSONException(""Misplaced array."");
    }"
org.json.JSONWriter.end,"    private JSONWriter end(char mode, char c) throws JSONException {
        if (this.mode != mode) {
            throw new JSONException(mode == 'a' ? ""Misplaced endArray."" : ""Misplaced endObject."");
        }
        this.pop(mode);
        try {
            this.writer.append(c);
        }
        catch (IOException e) {
            throw new JSONException(e);
        }
        this.comma = true;
        return this;
    }"
org.json.JSONWriter.endArray,"    public JSONWriter endArray() throws JSONException {
        return this.end('a', ']');
    }"
org.json.JSONWriter.endObject,"    public JSONWriter endObject() throws JSONException {
        return this.end('k', '}');
    "
org.json.JSONWriter.key,"    public JSONWriter key(String string) throws JSONException {
        if (string == null) {
            throw new JSONException(""Null key."");
        }
        if (this.mode == 'k') {
            try {
                this.stack[this.top - 1].putOnce(string, Boolean.TRUE);
                if (this.comma) {
                    this.writer.append(',');
                }
                this.writer.append(JSONObject.quote(string));
                this.writer.append(':');
                this.comma = false;
                this.mode = (char)111;
                return this;
            }
            catch (IOException e) {
                throw new JSONException(e);
            }
        }
        throw new JSONException(""Misplaced key."");
    }"
org.json.JSONWriter.object,"    public JSONWriter object() throws JSONException {
        if (this.mode == 'i') {
            this.mode = (char)111;
        }
        if (this.mode == 'o' || this.mode == 'a') {
            this.append(""{"");
            this.push(new JSONObject());
            this.comma = false;
            return this;
        }
        throw new JSONException(""Misplaced object."");
    "
org.json.JSONWriter.pop,"    private void pop(char c) throws JSONException {
        char m;
        if (this.top <= 0) {
            throw new JSONException(""Nesting error."");
        }
        char c2 = m = this.stack[this.top - 1] == null ? (char)'a' : 'k';
        if (m != c) {
            throw new JSONException(""Nesting error."");
        }
        --this.top;
        this.mode = (char)(this.top == 0 ? 100 : (this.stack[this.top - 1] == null ? 97 : 107));
    }"
org.json.JSONWriter.push,"    private void push(JSONObject jo) throws JSONException {
        if (this.top >= 200) {
            throw new JSONException(""Nesting too deep."");
        }
        this.stack[this.top] = jo;
        this.mode = (char)(jo == null ? 97 : 107);
        ++this.top;
    }"
org.json.JSONWriter.value,"    public JSONWriter value(boolean b) throws JSONException {
        return this.append(b ? ""true"" : ""false"");
    }"
org.json.JSONWriter.value,"    public JSONWriter value(double d) throws JSONException {
        return this.value(new Double(d));
    }"
org.json.JSONWriter.value,"    public JSONWriter value(long l) throws JSONException {
        return this.append(Long.toString(l));
    }"
org.json.JSONWriter.value,"    public JSONWriter value(Object object) throws JSONException {
        return this.append(JSONObject.valueToString(object));
    }
"
org.json.XML.codePointIterator,"    private static Iterable<Integer> codePointIterator(final String string) {
        return new Iterable<Integer>(){

            @Override
            public Iterator<Integer> iterator() {
                return new Iterator<Integer>(){
                    private int nextIndex = 0;
                    private int length;
                    {
                        this.length = string.length();
                    }

                    @Override
                    public boolean hasNext() {
                        return this.nextIndex < this.length;
                    }

                    @Override
                    public Integer next() {
                        int result = string.codePointAt(this.nextIndex);
                        this.nextIndex += Character.charCount(result);
                        return result;
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }
        };
    }"
org.json.XML.iterator,"            public Iterator<Integer> iterator() {
                return new Iterator<Integer>(){
                    private int nextIndex = 0;
                    private int length;
                    {
                        this.length = string.length();
                    }

                    @Override
                    public boolean hasNext() {
                        return this.nextIndex < this.length;
                    }

                    @Override
                    public Integer next() {
                        int result = string.codePointAt(this.nextIndex);
                        this.nextIndex += Character.charCount(result);
                        return result;
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }
        "
org.json.XML.hasNext,"                    public boolean hasNext() {
                        return this.nextIndex < this.length;
                    }"
org.json.XML.next,"                    public Integer next() {
                        int result = string.codePointAt(this.nextIndex);
                        this.nextIndex += Character.charCount(result);
                        return result;
                    }"
org.json.XML.remove,"                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                "
org.json.XML.escape,"    public static String escape(String string) {
        StringBuilder sb = new StringBuilder(string.length());
        block7: for (int cp : XML.codePointIterator(string)) {
            switch (cp) {
                case 38: {
                    sb.append(""&amp;"");
                    continue block7;
                }
                case 60: {
                    sb.append(""&lt;"");
                    continue block7;
                }
                case 62: {
                    sb.append(""&gt;"");
                    continue block7;
                }
                case 34: {
                    sb.append(""&quot;"");
                    continue block7;
                }
                case 39: {
                    sb.append(""&apos;"");
                    continue block7;
                }
            }
            if (XML.mustEscape(cp)) {
                sb.append(""&#x"");
                sb.append(Integer.toHexString(cp));
                sb.append("";"");
                continue;
            }
            sb.appendCodePoint(cp);
        }
        return sb.toString();
    }"
org.json.XML.mustEscape,"    private static boolean mustEscape(int cp) {
        return Character.isISOControl(cp) && cp != 9 && cp != 10 && cp != 13 || (cp < 32 || cp > 55295) && (cp < 57344 || cp > 65533) && (cp < 65536 || cp > 0x10FFFF);
    }"
org.json.XML.unescape,"    public static String unescape(String string) {
        StringBuilder sb = new StringBuilder(string.length());
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            if (c == '&') {
                int semic = string.indexOf(59, i);
                if (semic > i) {
                    String entity = string.substring(i + 1, semic);
                    if (entity.charAt(0) == '#') {
                        int cp = entity.charAt(1) == 'x' ? Integer.parseInt(entity.substring(2), 16) : Integer.parseInt(entity.substring(1));
                        sb.appendCodePoint(cp);
                    } else if (""quot"".equalsIgnoreCase(entity)) {
                        sb.append('\""');
                    } else if (""amp"".equalsIgnoreCase(entity)) {
                        sb.append('&');
                    } else if (""apos"".equalsIgnoreCase(entity)) {
                        sb.append('\'');
                    } else if (""lt"".equalsIgnoreCase(entity)) {
                        sb.append('<');
                    } else if (""gt"".equalsIgnoreCase(entity)) {
                        sb.append('>');
                    } else {
                        sb.append('&').append(entity).append(';');
                    }
                    i += entity.length() + 1;
                    continue;
                }
                sb.append(c);
                continue;
            }
            sb.append(c);
        }
        return sb.toString();
    }"
org.json.XML.noSpace,"    public static void noSpace(String string) throws JSONException {
        int length = string.length();
        if (length == 0) {
            throw new JSONException(""Empty string."");
        }
        for (int i = 0; i < length; ++i) {
            if (!Character.isWhitespace(string.charAt(i))) continue;
            throw new JSONException(""'"" + string + ""' contains a space character."");
        }
    }"
org.json.XML.parse,"    private static boolean parse(XMLTokener x, JSONObject context, String name, boolean keepStrings) throws JSONException {
        String string;
        JSONObject jsonobject = null;
        Object token = x.nextToken();
        if (token == BANG) {
            char c = x.next();
            if (c == '-') {
                if (x.next() == '-') {
                    x.skipPast(""-->"");
                    return false;
                }
                x.back();
            } else if (c == '[') {
                token = x.nextToken();
                if (""CDATA"".equals(token) && x.next() == '[') {
                    String string2 = x.nextCDATA();
                    if (string2.length() > 0) {
                        context.accumulate(""content"", string2);
                    }
                    return false;
                }
                throw x.syntaxError(""Expected 'CDATA['"");
            }
            int i = 1;
            do {
                if ((token = x.nextMeta()) == null) {
                    throw x.syntaxError(""Missing '>' after '<!'."");
                }
                if (token == LT) {
                    ++i;
                    continue;
                }
                if (token != GT) continue;
                --i;
            } while (i > 0);
            return false;
        }
        if (token == QUEST) {
            x.skipPast(""?>"");
            return false;
        }
        if (token == SLASH) {
            token = x.nextToken();
            if (name == null) {
                throw x.syntaxError(""Mismatched close tag "" + token);
            }
            if (!token.equals(name)) {
                throw x.syntaxError(""Mismatched "" + name + "" and "" + token);
            }
            if (x.nextToken() != GT) {
                throw x.syntaxError(""Misshaped close tag"");
            }
            return true;
        }
        if (token instanceof Character) {
            throw x.syntaxError(""Misshaped tag"");
        }
        String tagName = (String)token;
        token = null;
        jsonobject = new JSONObject();
        while (true) {
            if (token == null) {
                token = x.nextToken();
            }
            if (!(token instanceof String)) break;
            string = (String)token;
            token = x.nextToken();
            if (token == EQ) {
                token = x.nextToken();
                if (!(token instanceof String)) {
                    throw x.syntaxError(""Missing value"");
                }
                jsonobject.accumulate(string, keepStrings ? XML.unescape((String)token) : XML.stringToValue((String)token));
                token = null;
                continue;
            }
            jsonobject.accumulate(string, """");
        }
        if (token == SLASH) {
            if (x.nextToken() != GT) {
                throw x.syntaxError(""Misshaped tag"");
            }
            if (jsonobject.length() > 0) {
                context.accumulate(tagName, jsonobject);
            } else {
                context.accumulate(tagName, """");
            }
            return false;
        }
        if (token == GT) {
            while (true) {
                if ((token = x.nextContent()) == null) {
                    if (tagName != null) {
                        throw x.syntaxError(""Unclosed tag "" + tagName);
                    }
                    return false;
                }
                if (token instanceof String) {
                    string = (String)token;
                    if (string.length() <= 0) continue;
                    jsonobject.accumulate(""content"", keepStrings ? XML.unescape(string) : XML.stringToValue(string));
                    continue;
                }
                if (token == LT && XML.parse(x, jsonobject, tagName, keepStrings)) break;
            }
            if (jsonobject.length() == 0) {
                context.accumulate(tagName, """");
            } else if (jsonobject.length() == 1 && jsonobject.opt(""content"") != null) {
                context.accumulate(tagName, jsonobject.opt(""content""));
            } else {
                context.accumulate(tagName, jsonobject);
            }
            return false;
        }
        throw x.syntaxError(""Misshaped tag"");
    }"
org.json.XML.stringToValue,"    public static Object stringToValue(String string) {
        Object ret = JSONObject.stringToValue(string);
        if (ret instanceof String) {
            return XML.unescape((String)ret);
        }
        return ret;
    }"
org.json.XML.toJSONObject,"    public static JSONObject toJSONObject(String string) throws JSONException {
        return XML.toJSONObject(string, false);
    }"
org.json.XML.toJSONObject,"    public static JSONObject toJSONObject(String string, boolean keepStrings) throws JSONException {
        JSONObject jo = new JSONObject();
        XMLTokener x = new XMLTokener(string);
        while (x.more() && x.skipPast(""<"")) {
            XML.parse(x, jo, null, keepStrings);
        }
        return jo;
    }"
org.json.XML.toString,"    public static String toString(Object object) throws JSONException {
        return XML.toString(object, null);
    }"
org.json.XML.toString,"    public static String toString(Object object, String tagName) throws JSONException {
        String string;
        StringBuilder sb = new StringBuilder();
        if (object instanceof JSONObject) {
            if (tagName != null) {
                sb.append('<');
                sb.append(tagName);
                sb.append('>');
            }
            JSONObject jo = (JSONObject)object;
            Iterator<String> keys = jo.keys();
            while (keys.hasNext()) {
                JSONArray ja;
                String string2;
                String key = keys.next();
                Object value = jo.opt(key);
                if (value == null) {
                    value = """";
                } else if (value.getClass().isArray()) {
                    value = new JSONArray(value);
                }
                String string3 = string2 = value instanceof String ? (String)value : null;
                if (""content"".equals(key)) {
                    if (value instanceof JSONArray) {
                        ja = (JSONArray)value;
                        int i = 0;
                        for (Object val : ja) {
                            if (i > 0) {
                                sb.append('\n');
                            }
                            sb.append(XML.escape(val.toString()));
                            ++i;
                        }
                        continue;
                    }
                    sb.append(XML.escape(value.toString()));
                    continue;
                }
                if (value instanceof JSONArray) {
                    ja = (JSONArray)value;
                    for (Object val : ja) {
                        if (val instanceof JSONArray) {
                            sb.append('<');
                            sb.append(key);
                            sb.append('>');
                            sb.append(XML.toString(val));
                            sb.append(""</"");
                            sb.append(key);
                            sb.append('>');
                            continue;
                        }
                        sb.append(XML.toString(val, key));
                    }
                    continue;
                }
                if ("""".equals(value)) {
                    sb.append('<');
                    sb.append(key);
                    sb.append(""/>"");
                    continue;
                }
                sb.append(XML.toString(value, key));
            }
            if (tagName != null) {
                sb.append(""</"");
                sb.append(tagName);
                sb.append('>');
            }
            return sb.toString();
        }
        if (object != null) {
            if (object.getClass().isArray()) {
                object = new JSONArray(object);
            }
            if (object instanceof JSONArray) {
                JSONArray ja = (JSONArray)object;
                for (Object val : ja) {
                    sb.append(XML.toString(val, tagName == null ? ""array"" : tagName));
                }
                return sb.toString();
            }
        }
        String string4 = string = object == null ? ""null"" : XML.escape(object.toString());
        return tagName == null ? ""\"""" + string + ""\"""" : (string.length() == 0 ? ""<"" + tagName + ""/>"" : ""<"" + tagName + "">"" + string + ""</"" + tagName + "">"");
    }
"
org.json.XMLTokener.nextCDATA,"    public String nextCDATA() throws JSONException {
        int i;
        StringBuilder sb = new StringBuilder();
        do {
            char c = this.next();
            if (this.end()) {
                throw this.syntaxError(""Unclosed CDATA"");
            }
            sb.append(c);
        } while ((i = sb.length() - 3) < 0 || sb.charAt(i) != ']' || sb.charAt(i + 1) != ']' || sb.charAt(i + 2) != '>');
        sb.setLength(i);
        return sb.toString();
    }"
org.json.XMLTokener.nextContent,"    public Object nextContent() throws JSONException {
        char c;
        while (Character.isWhitespace(c = this.next())) {
        }
        if (c == '\u0000') {
            return null;
        }
        if (c == '<') {
            return XML.LT;
        }
        StringBuilder sb = new StringBuilder();
        while (true) {
            if (c == '<' || c == '\u0000') {
                this.back();
                return sb.toString().trim();
            }
            if (c == '&') {
                sb.append(this.nextEntity(c));
            } else {
                sb.append(c);
            }
            c = this.next();
        }
    }"
org.json.XMLTokener.nextEntity,"    public Object nextEntity(char ampersand) throws JSONException {
        char c;
        StringBuilder sb = new StringBuilder();
        while (Character.isLetterOrDigit(c = this.next()) || c == '#') {
            sb.append(Character.toLowerCase(c));
        }
        if (c != ';') {
            throw this.syntaxError(""Missing ';' in XML entity: &"" + sb);
        }
        String string = sb.toString();
        Character object = entity.get(string);
        return object != null ? object : ampersand + string + "";"";
    }"
org.json.XMLTokener.nextMeta,"    public Object nextMeta() throws JSONException {
        char c;
        while (Character.isWhitespace(c = this.next())) {
        }
        switch (c) {
            case '\u0000': {
                throw this.syntaxError(""Misshaped meta tag"");
            }
            case '<': {
                return XML.LT;
            }
            case '>': {
                return XML.GT;
            }
            case '/': {
                return XML.SLASH;
            }
            case '=': {
                return XML.EQ;
            }
            case '!': {
                return XML.BANG;
            }
            case '?': {
                return XML.QUEST;
            }
            case '\""': 
            case '\'': {
                char q = c;
                do {
                    if ((c = this.next()) != '\u0000') continue;
                    throw this.syntaxError(""Unterminated string"");
                } while (c != q);
                return Boolean.TRUE;
            }
        }
        while (!Character.isWhitespace(c = this.next())) {
            switch (c) {
                case '\u0000': 
                case '!': 
                case '\""': 
                case '\'': 
                case '/': 
                case '<': 
                case '=': 
                case '>': 
                case '?': {
                    this.back();
                    return Boolean.TRUE;
                }
            }
        }
        return Boolean.TRUE;
    }"
org.json.XMLTokener.nextToken,"    public Object nextToken() throws JSONException {
        char c;
        while (Character.isWhitespace(c = this.next())) {
        }
        switch (c) {
            case '\u0000': {
                throw this.syntaxError(""Misshaped element"");
            }
            case '<': {
                throw this.syntaxError(""Misplaced '<'"");
            }
            case '>': {
                return XML.GT;
            }
            case '/': {
                return XML.SLASH;
            }
            case '=': {
                return XML.EQ;
            }
            case '!': {
                return XML.BANG;
            }
            case '?': {
                return XML.QUEST;
            }
            case '\""': 
            case '\'': {
                char q = c;
                StringBuilder sb = new StringBuilder();
                while (true) {
                    if ((c = this.next()) == '\u0000') {
                        throw this.syntaxError(""Unterminated string"");
                    }
                    if (c == q) {
                        return sb.toString();
                    }
                    if (c == '&') {
                        sb.append(this.nextEntity(c));
                        continue;
                    }
                    sb.append(c);
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (true) {
            sb.append(c);
            c = this.next();
            if (Character.isWhitespace(c)) {
                return sb.toString();
            }
            switch (c) {
                case '\u0000': {
                    return sb.toString();
                }
                case '!': 
                case '/': 
                case '=': 
                case '>': 
                case '?': 
                case '[': 
                case ']': {
                    this.back();
                    return sb.toString();
                }
                case '\""': 
                case '\'': 
                case '<': {
                    throw this.syntaxError(""Bad character in a name"");
                }
            }
        }
    }"
org.json.XMLTokener.skipPast,"    public boolean skipPast(String to) throws JSONException {
        char c;
        int i;
        int offset = 0;
        int length = to.length();
        char[] circle = new char[length];
        for (i = 0; i < length; ++i) {
            c = this.next();
            if (c == '\u0000') {
                return false;
            }
            circle[i] = c;
        }
        while (true) {
            int j = offset;
            boolean b = true;
            for (i = 0; i < length; ++i) {
                if (circle[j] != to.charAt(i)) {
                    b = false;
                    break;
                }
                if (++j < length) continue;
                j -= length;
            }
            if (b) {
                return true;
            }
            c = this.next();
            if (c == '\u0000') {
                return false;
            }
            circle[offset] = c;
            if (++offset < length) continue;
            offset -= length;
        }
    }"
org.json.Cookie.escape,"    public static String escape(String string) {
        String s = string.trim();
        int length = s.length();
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; ++i) {
            char c = s.charAt(i);
            if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {
                sb.append('%');
                sb.append(Character.forDigit((char)(c >>> 4 & 0xF), 16));
                sb.append(Character.forDigit((char)(c & 0xF), 16));
                continue;
            }
            sb.append(c);
        }
        return sb.toString();
    }"
org.json.Cookie.toJSONObject,"* Enabled force condition propagation
* Lifted jumps to return sites
*/
    public static JSONObject toJSONObject(String string) throws JSONException {
        JSONObject jo = new JSONObject();
        JSONTokener x = new JSONTokener(string);
        jo.put(""name"", x.nextTo('='));
        x.next('=');
        jo.put(""value"", x.nextTo(';'));
        x.next();
        while (x.more()) {
            Object value;
            String name = Cookie.unescape(x.nextTo(""=;""));
            if (x.next() != '=') {
                if (!name.equals(""secure"")) throw x.syntaxError(""Missing '=' in cookie parameter."");
                value = Boolean.TRUE;
            } else {
                value = Cookie.unescape(x.nextTo(';'));
                x.next();
            }
            jo.put(name, value);
        }
        return jo;
    }"
org.json.Cookie.toString,"    public static String toString(JSONObject jo) throws JSONException {
        StringBuilder sb = new StringBuilder();
        sb.append(Cookie.escape(jo.getString(""name"")));
        sb.append(""="");
        sb.append(Cookie.escape(jo.getString(""value"")));
        if (jo.has(""expires"")) {
            sb.append("";expires="");
            sb.append(jo.getString(""expires""));
        }
        if (jo.has(""domain"")) {
            sb.append("";domain="");
            sb.append(Cookie.escape(jo.getString(""domain"")));
        }
        if (jo.has(""path"")) {
            sb.append("";path="");
            sb.append(Cookie.escape(jo.getString(""path"")));
        }
        if (jo.optBoolean(""secure"")) {
            sb.append("";secure"");
        }
        return sb.toString();
    }"
org.json.Cookie.unescape,"    public static String unescape(String string) {
        int length = string.length();
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            if (c == '+') {
                c = ' ';
            } else if (c == '%' && i + 2 < length) {
                int d = JSONTokener.dehexchar(string.charAt(i + 1));
                int e = JSONTokener.dehexchar(string.charAt(i + 2));
                if (d >= 0 && e >= 0) {
                    c = (char)(d * 16 + e);
                    i += 2;
                }
            }
            sb.append(c);
        }
        return sb.toString();
    }
"
org.json.CDL.getValue,"    private static String getValue(JSONTokener x) throws JSONException {
        char c;
        while ((c = x.next()) == ' ' || c == '\t') {
        }
        switch (c) {
            case '\u0000': {
                return null;
            }
            case '\""': 
            case '\'': {
                char q = c;
                StringBuffer sb = new StringBuffer();
                while (true) {
                    if ((c = x.next()) == q && x.next() != '\""') break;
                    if (c == '\u0000' || c == '\n' || c == '\r') {
                        throw x.syntaxError(""Missing close quote '"" + q + ""'."");
                    }
                    sb.append(c);
                }
                x.back();
                return sb.toString();
            }
            case ',': {
                x.back();
                return """";
            }
        }
        x.back();
        return x.nextTo(',');
    }"
org.json.CDL.rowToJSONArray,"    public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {
        JSONArray ja = new JSONArray();
        block0: while (true) {
            String value = CDL.getValue(x);
            char c = x.next();
            if (value == null || ja.length() == 0 && value.length() == 0 && c != ',') {
                return null;
            }
            ja.put(value);
            while (true) {
                if (c == ',') continue block0;
                if (c != ' ') {
                    if (c == '\n' || c == '\r' || c == '\u0000') {
                        return ja;
                    }
                    throw x.syntaxError(""Bad character '"" + c + ""' ("" + c + "")."");
                }
                c = x.next();
            }
            break;
        }
    }"
org.json.CDL.rowToJSONObject,"    public static JSONObject rowToJSONObject(JSONArray names, JSONTokener x) throws JSONException {
        JSONArray ja = CDL.rowToJSONArray(x);
        return ja != null ? ja.toJSONObject(names) : null;
    }"
org.json.CDL.rowToString,"    public static String rowToString(JSONArray ja) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < ja.length(); ++i) {
            Object object;
            if (i > 0) {
                sb.append(',');
            }
            if ((object = ja.opt(i)) == null) continue;
            String string = object.toString();
            if (string.length() > 0 && (string.indexOf(44) >= 0 || string.indexOf(10) >= 0 || string.indexOf(13) >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '\""')) {
                sb.append('\""');
                int length = string.length();
                for (int j = 0; j < length; ++j) {
                    char c = string.charAt(j);
                    if (c < ' ' || c == '\""') continue;
                    sb.append(c);
                }
                sb.append('\""');
                continue;
            }
            sb.append(string);
        }
        sb.append('\n');
        return sb.toString();
    }"
org.json.CDL.toJSONArray,"    public static JSONArray toJSONArray(String string) throws JSONException {
        return CDL.toJSONArray(new JSONTokener(string));
    }"
org.json.CDL.toJSONArray,"    public static JSONArray toJSONArray(JSONTokener x) throws JSONException {
        return CDL.toJSONArray(CDL.rowToJSONArray(x), x);
    }"
org.json.CDL.toJSONArray,"    public static JSONArray toJSONArray(JSONArray names, String string) throws JSONException {
        return CDL.toJSONArray(names, new JSONTokener(string));
    }"
org.json.CDL.toJSONArray,"    public static JSONArray toJSONArray(JSONArray names, JSONTokener x) throws JSONException {
        JSONObject jo;
        if (names == null || names.length() == 0) {
            return null;
        }
        JSONArray ja = new JSONArray();
        while ((jo = CDL.rowToJSONObject(names, x)) != null) {
            ja.put(jo);
        }
        if (ja.length() == 0) {
            return null;
        }
        return ja;
    }"
org.json.CDL.toString,"    public static String toString(JSONArray ja) throws JSONException {
        JSONArray names;
        JSONObject jo = ja.optJSONObject(0);
        if (jo != null && (names = jo.names()) != null) {
            return CDL.rowToString(names) + CDL.toString(names, ja);
        }
        return null;
    }"
org.json.CDL.toString,"    public static String toString(JSONArray names, JSONArray ja) throws JSONException {
        if (names == null || names.length() == 0) {
            return null;
        }
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < ja.length(); ++i) {
            JSONObject jo = ja.optJSONObject(i);
            if (jo == null) continue;
            sb.append(CDL.rowToString(jo.toJSONArray(names)));
        }
        return sb.toString();
    }
"
javax.xml.crypto.URIDereferencer.dereference,"    public Data dereference(URIReference var1, XMLCryptoContext var2) throws URIReferenceException;
"
javax.xml.crypto.OctetStreamData.getOctetStream,"    public InputStream getOctetStream() {
        return this.octetStream;
    }"
javax.xml.crypto.OctetStreamData.getURI,"    public String getURI() {
        return this.uri;
    }"
javax.xml.crypto.OctetStreamData.getMimeType,"    public String getMimeType() {
        return this.mimeType;
    }
"
javax.xml.crypto.KeySelectorResult.getKey,"    public Key getKey();
"
javax.xml.crypto.KeySelectorException.getCause,"    public Throwable getCause() {
        return this.cause;
    }"
javax.xml.crypto.KeySelectorException.printStackTrace,"    public void printStackTrace() {
        super.printStackTrace();
    }"
javax.xml.crypto.KeySelectorException.printStackTrace,"    public void printStackTrace(PrintStream printStream) {
        super.printStackTrace(printStream);
    }"
javax.xml.crypto.KeySelectorException.printStackTrace,"    public void printStackTrace(PrintWriter printWriter) {
        super.printStackTrace(printWriter);
    }
"
javax.xml.crypto.KeySelector.select,
javax.xml.crypto.KeySelector.singletonKeySelector,"    public static KeySelector singletonKeySelector(Key key) {
        return new SingletonKeySelector(key);
    }"
javax.xml.crypto.KeySelector.select,"        public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod algorithmMethod, XMLCryptoContext xMLCryptoContext) throws KeySelectorException {
            return new KeySelectorResult(){

                public Key getKey() {
                    return SingletonKeySelector.this.key;
                }
            };
        }
    }

    public static class Purpose {
        private final String name;
        public static final Purpose SIGN = new Purpose(""sign"");
        public static final Purpose VERIFY = new Purpose(""verify"");
        public static final Purpose ENCRYPT = new Purpose(""encrypt"");
        public static final Purpose DECRYPT = new Purpose(""decrypt"");

        private Purpose(String string) {
            this.name = string;
        }

        public String toString() {
            return this.name;
        }
    "
javax.xml.crypto.KeySelector.getKey,"                public Key getKey() {
                    return SingletonKeySelector.this.key;
                }
            };
        }
    }

    public static class Purpose {
        private final String name;
        public static final Purpose SIGN = new Purpose(""sign"");
        public static final Purpose VERIFY = new Purpose(""verify"");
        public static final Purpose ENCRYPT = new Purpose(""encrypt"");
        public static final Purpose DECRYPT = new Purpose(""decrypt"");

        private Purpose(String string) {
            this.name = string;
        "
javax.xml.crypto.KeySelector.toString,"        public String toString() {
            return this.name;
        }
    "
javax.xml.crypto.AlgorithmMethod.getAlgorithm,
javax.xml.crypto.AlgorithmMethod.getParameterSpec,"    public AlgorithmParameterSpec getParameterSpec();
"
javax.xml.crypto.NoSuchMechanismException.getCause,"    public Throwable getCause() {
        return this.cause;
    }"
javax.xml.crypto.NoSuchMechanismException.printStackTrace,"    public void printStackTrace() {
        super.printStackTrace();
    }"
javax.xml.crypto.NoSuchMechanismException.printStackTrace,"    public void printStackTrace(PrintStream printStream) {
        super.printStackTrace(printStream);
    }"
javax.xml.crypto.NoSuchMechanismException.printStackTrace,"    public void printStackTrace(PrintWriter printWriter) {
        super.printStackTrace(printWriter);
    }
"
javax.xml.crypto.URIReference.getURI,
javax.xml.crypto.URIReference.getType,"    public String getType();
"
javax.xml.crypto.XMLCryptoContext.getBaseURI,
javax.xml.crypto.XMLCryptoContext.setBaseURI,
javax.xml.crypto.XMLCryptoContext.getKeySelector,
javax.xml.crypto.XMLCryptoContext.setKeySelector,
javax.xml.crypto.XMLCryptoContext.getURIDereferencer,
javax.xml.crypto.XMLCryptoContext.setURIDereferencer,
javax.xml.crypto.XMLCryptoContext.getNamespacePrefix,
javax.xml.crypto.XMLCryptoContext.putNamespacePrefix,
javax.xml.crypto.XMLCryptoContext.getDefaultNamespacePrefix,
javax.xml.crypto.XMLCryptoContext.setDefaultNamespacePrefix,
javax.xml.crypto.XMLCryptoContext.setProperty,
javax.xml.crypto.XMLCryptoContext.getProperty,
javax.xml.crypto.XMLCryptoContext.get,
javax.xml.crypto.XMLCryptoContext.put,"    public Object put(Object var1, Object var2);
"
javax.xml.crypto.URIReferenceException.getURIReference,"    public URIReference getURIReference() {
        return this.uriReference;
    }"
javax.xml.crypto.URIReferenceException.getCause,"    public Throwable getCause() {
        return this.cause;
    }"
javax.xml.crypto.URIReferenceException.printStackTrace,"    public void printStackTrace() {
        super.printStackTrace();
    }"
javax.xml.crypto.URIReferenceException.printStackTrace,"    public void printStackTrace(PrintStream printStream) {
        super.printStackTrace(printStream);
    }"
javax.xml.crypto.URIReferenceException.printStackTrace,"    public void printStackTrace(PrintWriter printWriter) {
        super.printStackTrace(printWriter);
    }
"
javax.xml.crypto.XMLStructure.isFeatureSupported,"    public boolean isFeatureSupported(String var1);
"
javax.xml.crypto.NodeSetData.iterator,"    public Iterator iterator();
"
javax.xml.crypto.MarshalException.getCause,"    public Throwable getCause() {
        return this.cause;
    }"
javax.xml.crypto.MarshalException.printStackTrace,"    public void printStackTrace() {
        super.printStackTrace();
    }"
javax.xml.crypto.MarshalException.printStackTrace,"    public void printStackTrace(PrintStream printStream) {
        super.printStackTrace(printStream);
    }"
javax.xml.crypto.MarshalException.printStackTrace,"    public void printStackTrace(PrintWriter printWriter) {
        super.printStackTrace(printWriter);
    }
"
javax.xml.crypto.dsig.SignatureMethod.getParameterSpec,"    public AlgorithmParameterSpec getParameterSpec();
"
javax.xml.crypto.dsig.XMLSignatureException.getCause,"    public Throwable getCause() {
        return this.cause;
    }"
javax.xml.crypto.dsig.XMLSignatureException.printStackTrace,"    public void printStackTrace() {
        super.printStackTrace();
        if (this.cause != null) {
            this.cause.printStackTrace();
        }
    }"
javax.xml.crypto.dsig.XMLSignatureException.printStackTrace,"    public void printStackTrace(PrintStream printStream) {
        super.printStackTrace(printStream);
        if (this.cause != null) {
            this.cause.printStackTrace(printStream);
        }
    }"
javax.xml.crypto.dsig.XMLSignatureException.printStackTrace,"    public void printStackTrace(PrintWriter printWriter) {
        super.printStackTrace(printWriter);
        if (this.cause != null) {
            this.cause.printStackTrace(printWriter);
        }
    }
"
javax.xml.crypto.dsig.Transform.getParameterSpec,
javax.xml.crypto.dsig.Transform.transform,
javax.xml.crypto.dsig.Transform.transform,"    public Data transform(Data var1, XMLCryptoContext var2, OutputStream var3) throws TransformException;
"
javax.xml.crypto.dsig.TransformException.getCause,"    public Throwable getCause() {
        return this.cause;
    }"
javax.xml.crypto.dsig.TransformException.printStackTrace,"    public void printStackTrace() {
        super.printStackTrace();
        if (this.cause != null) {
            this.cause.printStackTrace();
        }
    }"
javax.xml.crypto.dsig.TransformException.printStackTrace,"    public void printStackTrace(PrintStream printStream) {
        super.printStackTrace(printStream);
        if (this.cause != null) {
            this.cause.printStackTrace(printStream);
        }
    }"
javax.xml.crypto.dsig.TransformException.printStackTrace,"    public void printStackTrace(PrintWriter printWriter) {
        super.printStackTrace(printWriter);
        if (this.cause != null) {
            this.cause.printStackTrace(printWriter);
        }
    }
"
javax.xml.crypto.dsig.DigestMethod.getParameterSpec,"    public AlgorithmParameterSpec getParameterSpec();
"
javax.xml.crypto.dsig.Manifest.getId,
javax.xml.crypto.dsig.Manifest.getReferences,"    public List getReferences();
"
javax.xml.crypto.dsig.TransformService.getInstance,"    public static TransformService getInstance(String string, String string2) throws NoSuchAlgorithmException {
        if (string2 == null || string == null) {
            throw new NullPointerException();
        }
        return TransformService.findInstance(string, string2, null);
    }"
javax.xml.crypto.dsig.TransformService.getInstance,"    public static TransformService getInstance(String string, String string2, Provider provider) throws NoSuchAlgorithmException {
        if (string2 == null || string == null || provider == null) {
            throw new NullPointerException();
        }
        return TransformService.findInstance(string, string2, provider);
    }"
javax.xml.crypto.dsig.TransformService.getInstance,"    public static TransformService getInstance(String string, String string2, String string3) throws NoSuchAlgorithmException, NoSuchProviderException {
        if (string2 == null || string == null || string3 == null) {
            throw new NullPointerException();
        }
        Provider provider = Security.getProvider(string3);
        if (provider == null) {
            throw new NoSuchProviderException(""cannot find provider named "" + string3);
        }
        return TransformService.findInstance(string, string2, provider);
    }"
javax.xml.crypto.dsig.TransformService.findInstance,"    private static TransformService findInstance(String string, String string2, Provider provider) throws NoSuchAlgorithmException {
        Object[] objectArray = XMLDSigSecurity.getImpl(string, new MechanismMapEntry(string, string2), ""TransformService"", provider);
        TransformService transformService = (TransformService)objectArray[0];
        transformService.mechanism = string2;
        transformService.algorithm = string;
        transformService.provider = (Provider)objectArray[1];
        return transformService;
    }"
javax.xml.crypto.dsig.TransformService.getMechanismType,"    public final String getMechanismType() {
        return this.mechanism;
    }"
javax.xml.crypto.dsig.TransformService.getAlgorithm,"    public final String getAlgorithm() {
        return this.algorithm;
    }"
javax.xml.crypto.dsig.TransformService.getProvider,"    public final Provider getProvider() {
        return this.provider;
    }"
javax.xml.crypto.dsig.TransformService.init,
javax.xml.crypto.dsig.TransformService.marshalParams,
javax.xml.crypto.dsig.TransformService.init,
javax.xml.crypto.dsig.TransformService.equals,"        public boolean equals(Object object) {
            if (!(object instanceof Map.Entry)) {
                return false;
            }
            Map.Entry entry = (Map.Entry)object;
            return (this.getKey() == null ? entry.getKey() == null : this.getKey().equals(entry.getKey())) && (this.getValue() == null ? entry.getValue() == null : this.getValue().equals(entry.getValue()));
        }"
javax.xml.crypto.dsig.TransformService.getKey,"        public Object getKey() {
            return this.key;
        }"
javax.xml.crypto.dsig.TransformService.getValue,"        public Object getValue() {
            return this.mechanism;
        }"
javax.xml.crypto.dsig.TransformService.setValue,"        public Object setValue(Object object) {
            throw new UnsupportedOperationException();
        }"
javax.xml.crypto.dsig.TransformService.hashCode,"        public int hashCode() {
            return (this.getKey() == null ? 0 : this.getKey().hashCode()) ^ (this.getValue() == null ? 0 : this.getValue().hashCode());
        }
    "
javax.xml.crypto.dsig.SignedInfo.getCanonicalizationMethod,
javax.xml.crypto.dsig.SignedInfo.getSignatureMethod,
javax.xml.crypto.dsig.SignedInfo.getReferences,
javax.xml.crypto.dsig.SignedInfo.getId,
javax.xml.crypto.dsig.SignedInfo.getCanonicalizedData,"    public InputStream getCanonicalizedData();
"
javax.xml.crypto.dsig.Reference.getTransforms,
javax.xml.crypto.dsig.Reference.getDigestMethod,
javax.xml.crypto.dsig.Reference.getId,
javax.xml.crypto.dsig.Reference.getDigestValue,
javax.xml.crypto.dsig.Reference.getCalculatedDigestValue,
javax.xml.crypto.dsig.Reference.validate,
javax.xml.crypto.dsig.Reference.getDereferencedData,
javax.xml.crypto.dsig.Reference.getDigestInputStream,"    public InputStream getDigestInputStream();
"
javax.xml.crypto.dsig.CanonicalizationMethod.getParameterSpec,"    public AlgorithmParameterSpec getParameterSpec();
"
javax.xml.crypto.dsig.XMLDSigSecurity.getEngineClassName,"    private static ProviderProperty getEngineClassName(String string, Map.Entry entry, String string2, String string3, boolean bl) throws NoSuchAlgorithmException {
        Provider[] providerArray = Security.getProviders();
        boolean bl2 = false;
        ProviderProperty providerProperty = null;
        for (int i = 0; i < providerArray.length && !bl2; ++i) {
            try {
                providerProperty = XMLDSigSecurity.getEngineClassName(string, entry, string2, string3, providerArray[i], bl);
                bl2 = true;
                continue;
            }
            catch (Exception exception) {
                // empty catch block
            }
        }
        if (!bl2) {
            if (bl) {
                throw new NoSuchMechanismException(""Mechanism type "" + string + "" not available"");
            }
            throw new NoSuchAlgorithmException(""Algorithm type "" + string + "" not available"");
        }
        return providerProperty;
    }"
javax.xml.crypto.dsig.XMLDSigSecurity.getEngineClassName,"    private static ProviderProperty getEngineClassName(String string, Map.Entry entry, String string2, String string3, Provider provider, boolean bl) throws NoSuchAlgorithmException {
        Object object;
        String string4 = XMLDSigSecurity.getProviderProperty(string3, entry, provider);
        if (string4 == null) {
            object = XMLDSigSecurity.getStandardName(string, string2, provider);
            if (object != null) {
                string3 = string2 + ""."" + (String)object;
            }
            if (object == null || (string4 = XMLDSigSecurity.getProviderProperty(string3, entry, provider)) == null) {
                if (bl) {
                    throw new NoSuchMechanismException(""no such mechanism type: "" + string + "" for provider "" + provider.getName());
                }
                throw new NoSuchAlgorithmException(""no such algorithm: "" + string + "" for provider "" + provider.getName());
            }
        }
        object = new ProviderProperty();
        ((ProviderProperty)object).className = string4;
        ((ProviderProperty)object).provider = provider;
        return object;
    }"
javax.xml.crypto.dsig.XMLDSigSecurity.checkSuperclass,"    private static boolean checkSuperclass(Class clazz, Class clazz2) {
        return clazz2.isAssignableFrom(clazz);
    }"
javax.xml.crypto.dsig.XMLDSigSecurity.getImpl,"    static Object[] getImpl(String string, String string2, Provider provider) throws NoSuchAlgorithmException {
        return XMLDSigSecurity.getImpl(string, null, string2, provider);
    }"
javax.xml.crypto.dsig.XMLDSigSecurity.getImpl,"    static Object[] getImpl(String string, Map.Entry entry, String string2, Provider provider) throws NoSuchAlgorithmException {
        Class clazz = null;
        boolean bl = true;
        if (string2.equals(""XMLSignatureFactory"")) {
            clazz = XMLSignatureFactory.class;
        } else if (string2.equals(""KeyInfoFactory"")) {
            clazz = KeyInfoFactory.class;
        } else if (string2.equals(""TransformService"")) {
            clazz = TransformService.class;
            bl = false;
        }
        String string3 = string2 + ""."" + string;
        if (provider == null) {
            return XMLDSigSecurity.doGetImpl(string2, clazz, XMLDSigSecurity.getEngineClassName(string, entry, string2, string3, bl), bl);
        }
        return XMLDSigSecurity.doGetImpl(string2, clazz, XMLDSigSecurity.getEngineClassName(string, entry, string2, string3, provider, bl), bl);
    }"
javax.xml.crypto.dsig.XMLDSigSecurity.doGetImpl,"    private static Object[] doGetImpl(String string, Class clazz, ProviderProperty providerProperty, boolean bl) throws NoSuchAlgorithmException {
        String string2 = providerProperty.className;
        String string3 = providerProperty.provider.getName();
        try {
            ClassLoader classLoader = clazz.getClassLoader();
            Class<?> clazz2 = classLoader != null ? classLoader.loadClass(string2) : Class.forName(string2);
            if (XMLDSigSecurity.checkSuperclass(clazz2, clazz)) {
                return new Object[]{clazz2.newInstance(), providerProperty.provider};
            }
            if (bl) {
                throw new NoSuchMechanismException(""class configured for "" + string + "": "" + string2 + "" not a "" + string);
            }
            throw new NoSuchAlgorithmException(""class configured for "" + string + "": "" + string2 + "" not a "" + string);
        }
        catch (ClassNotFoundException classNotFoundException) {
            if (bl) {
                throw new NoSuchMechanismException(""class configured for "" + string + ""(provider: "" + string3 + "")"" + ""cannot be found.\n"", classNotFoundException);
            }
            throw (NoSuchAlgorithmException)new NoSuchAlgorithmException(""class configured for "" + string + ""(provider: "" + string3 + "")"" + ""cannot be found.\n"").initCause(classNotFoundException);
        }
        catch (InstantiationException instantiationException) {
            if (bl) {
                throw new NoSuchMechanismException(""class "" + string2 + "" configured for "" + string + ""(provider: "" + string3 + "") cannot be "" + ""instantiated. "", instantiationException);
            }
            throw (NoSuchAlgorithmException)new NoSuchAlgorithmException(""class "" + string2 + "" configured for "" + string + ""(provider: "" + string3 + "") cannot be "" + ""instantiated. "").initCause(instantiationException);
        }
        catch (IllegalAccessException illegalAccessException) {
            if (bl) {
                throw new NoSuchMechanismException(""class "" + string2 + "" configured for "" + string + ""(provider: "" + string3 + "") cannot be accessed.\n"", illegalAccessException);
            }
            throw (NoSuchAlgorithmException)new NoSuchAlgorithmException(""class "" + string2 + "" configured for "" + string + ""(provider: "" + string3 + "") cannot be accessed.\n"").initCause(illegalAccessException);
        }
    }"
javax.xml.crypto.dsig.XMLDSigSecurity.getProviderProperty,"    private static String getProviderProperty(String string, Map.Entry entry, Provider provider) {
        String string2 = provider.getProperty(string);
        if (string2 == null) {
            Enumeration<Object> enumeration = provider.keys();
            while (enumeration.hasMoreElements()) {
                String string3 = (String)enumeration.nextElement();
                if (!string.equalsIgnoreCase(string3)) continue;
                string2 = provider.getProperty(string3);
                break;
            }
        }
        if (!(string2 == null || entry == null || provider.entrySet().contains(entry) || entry.getValue().equals(""DOM"") && provider.get(entry.getKey()) == null)) {
            string2 = null;
        }
        return string2;
    }"
javax.xml.crypto.dsig.XMLDSigSecurity.getStandardName,"    private static String getStandardName(String string, String string2, Provider provider) {
        return XMLDSigSecurity.getProviderProperty(""Alg.Alias."" + string2 + ""."" + string, null, provider);
    }"
javax.xml.crypto.dsig.XMLObject.getContent,
javax.xml.crypto.dsig.XMLObject.getId,
javax.xml.crypto.dsig.XMLObject.getMimeType,
javax.xml.crypto.dsig.XMLObject.getEncoding,"    public String getEncoding();
"
javax.xml.crypto.dsig.XMLSignatureFactory.getInstance,"    public static XMLSignatureFactory getInstance(String string) {
        if (string == null) {
            throw new NullPointerException(""mechanismType cannot be null"");
        }
        return XMLSignatureFactory.findInstance(string, null);
    }"
javax.xml.crypto.dsig.XMLSignatureFactory.findInstance,"    private static XMLSignatureFactory findInstance(String string, Provider provider) {
        Object[] objectArray = null;
        try {
            objectArray = XMLDSigSecurity.getImpl(string, ""XMLSignatureFactory"", provider);
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new NoSuchMechanismException(""Cannot find "" + string + "" mechanism type"", noSuchAlgorithmException);
        }
        XMLSignatureFactory xMLSignatureFactory = (XMLSignatureFactory)objectArray[0];
        xMLSignatureFactory.mechanismType = string;
        xMLSignatureFactory.provider = (Provider)objectArray[1];
        return xMLSignatureFactory;
    }"
javax.xml.crypto.dsig.XMLSignatureFactory.getInstance,"    public static XMLSignatureFactory getInstance(String string, Provider provider) {
        if (string == null) {
            throw new NullPointerException(""mechanismType cannot be null"");
        }
        if (provider == null) {
            throw new NullPointerException(""provider cannot be null"");
        }
        return XMLSignatureFactory.findInstance(string, provider);
    }"
javax.xml.crypto.dsig.XMLSignatureFactory.getInstance,"    public static XMLSignatureFactory getInstance(String string, String string2) throws NoSuchProviderException {
        if (string == null) {
            throw new NullPointerException(""mechanismType cannot be null"");
        }
        if (string2 == null) {
            throw new NullPointerException(""provider cannot be null"");
        }
        Provider provider = Security.getProvider(string2);
        if (provider == null) {
            throw new NoSuchProviderException(""cannot find provider named "" + string2);
        }
        return XMLSignatureFactory.findInstance(string, provider);
    }"
javax.xml.crypto.dsig.XMLSignatureFactory.getInstance,"    public static XMLSignatureFactory getInstance() {
        return XMLSignatureFactory.getInstance(""DOM"");
    }"
javax.xml.crypto.dsig.XMLSignatureFactory.getMechanismType,"    public final String getMechanismType() {
        return this.mechanismType;
    }"
javax.xml.crypto.dsig.XMLSignatureFactory.getProvider,"    public final Provider getProvider() {
        return this.provider;
    }"
javax.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature,
javax.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature,
javax.xml.crypto.dsig.XMLSignatureFactory.newReference,
javax.xml.crypto.dsig.XMLSignatureFactory.newReference,
javax.xml.crypto.dsig.XMLSignatureFactory.newReference,
javax.xml.crypto.dsig.XMLSignatureFactory.newReference,
javax.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo,
javax.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo,
javax.xml.crypto.dsig.XMLSignatureFactory.newXMLObject,
javax.xml.crypto.dsig.XMLSignatureFactory.newManifest,
javax.xml.crypto.dsig.XMLSignatureFactory.newManifest,
javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperty,
javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperties,
javax.xml.crypto.dsig.XMLSignatureFactory.newDigestMethod,
javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureMethod,
javax.xml.crypto.dsig.XMLSignatureFactory.newTransform,
javax.xml.crypto.dsig.XMLSignatureFactory.newTransform,
javax.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod,
javax.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod,
javax.xml.crypto.dsig.XMLSignatureFactory.getKeyInfoFactory,"    public final KeyInfoFactory getKeyInfoFactory() {
        return KeyInfoFactory.getInstance(this.getMechanismType(), this.getProvider());
    }"
javax.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature,
javax.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature,
javax.xml.crypto.dsig.XMLSignatureFactory.isFeatureSupported,
javax.xml.crypto.dsig.XMLSignatureFactory.getURIDereferencer,"    public abstract URIDereferencer getURIDereferencer();
"
javax.xml.crypto.dsig.XMLSignature.validate,
javax.xml.crypto.dsig.XMLSignature.getKeyInfo,
javax.xml.crypto.dsig.XMLSignature.getSignedInfo,
javax.xml.crypto.dsig.XMLSignature.getObjects,
javax.xml.crypto.dsig.XMLSignature.getId,
javax.xml.crypto.dsig.XMLSignature.getSignatureValue,
javax.xml.crypto.dsig.XMLSignature.sign,
javax.xml.crypto.dsig.XMLSignature.getKeySelectorResult,
javax.xml.crypto.dsig.XMLSignature.getId,
javax.xml.crypto.dsig.XMLSignature.getValue,
javax.xml.crypto.dsig.XMLSignature.validate,"        public boolean validate(XMLValidateContext var1) throws XMLSignatureException;
    "
javax.xml.crypto.dsig.SignatureProperty.getTarget,
javax.xml.crypto.dsig.SignatureProperty.getId,
javax.xml.crypto.dsig.SignatureProperty.getContent,"    public List getContent();
"
javax.xml.crypto.dsig.SignatureProperties.getId,
javax.xml.crypto.dsig.SignatureProperties.getProperties,"    public List getProperties();
"
javax.xml.crypto.dsig.spec.ExcC14NParameterSpec.getPrefixList,"    public List getPrefixList() {
        return this.preList;
    }
"
javax.xml.crypto.dsig.spec.HMACParameterSpec.getOutputLength,"    public int getOutputLength() {
        return this.outputLength;
    }
"
javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.getXPath,"    public String getXPath() {
        return this.xPath;
    }"
javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.getNamespaceMap,"    public Map getNamespaceMap() {
        return this.nsMap;
    }
"
javax.xml.crypto.dsig.spec.XSLTTransformParameterSpec.getStylesheet,"    public XMLStructure getStylesheet() {
        return this.stylesheet;
    }
"
javax.xml.crypto.dsig.spec.XPathType.getExpression,"    public String getExpression() {
        return this.expression;
    }"
javax.xml.crypto.dsig.spec.XPathType.getFilter,"    public Filter getFilter() {
        return this.filter;
    }"
javax.xml.crypto.dsig.spec.XPathType.getNamespaceMap,"    public Map getNamespaceMap() {
        return this.nsMap;
    }"
javax.xml.crypto.dsig.spec.XPathType.toString,"        public String toString() {
            return this.operation;
        }
    "
javax.xml.crypto.dsig.spec.XPathFilter2ParameterSpec.getXPathList,"    public List getXPathList() {
        return this.xPathList;
    }
"
javax.xml.crypto.dsig.dom.DOMValidateContext.setNode,"    public void setNode(Node node) {
        if (node == null) {
            throw new NullPointerException();
        }
        this.node = node;
    }"
javax.xml.crypto.dsig.dom.DOMValidateContext.getNode,"    public Node getNode() {
        return this.node;
    }
"
javax.xml.crypto.dsig.dom.DOMSignContext.setParent,"    public void setParent(Node node) {
        if (node == null) {
            throw new NullPointerException(""parent is null"");
        }
        this.parent = node;
    }"
javax.xml.crypto.dsig.dom.DOMSignContext.setNextSibling,"    public void setNextSibling(Node node) {
        this.nextSibling = node;
    }"
javax.xml.crypto.dsig.dom.DOMSignContext.getParent,"    public Node getParent() {
        return this.parent;
    }"
javax.xml.crypto.dsig.dom.DOMSignContext.getNextSibling,"    public Node getNextSibling() {
        return this.nextSibling;
    }
"
javax.xml.crypto.dsig.keyinfo.KeyName.getName,"    public String getName();
"
javax.xml.crypto.dsig.keyinfo.X509Data.getContent,"    public List getContent();
"
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance,"    public static KeyInfoFactory getInstance(String string) {
        if (string == null) {
            throw new NullPointerException(""mechanismType cannot be null"");
        }
        return KeyInfoFactory.findInstance(string, null);
    }"
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.findInstance,"    private static KeyInfoFactory findInstance(String string, Provider provider) {
        if (getImplMethod == null) {
            throw new NoSuchMechanismException(""Cannot find "" + string + "" mechanism type"");
        }
        Object[] objectArray = null;
        try {
            objectArray = (Object[])getImplMethod.invoke(null, string, ""KeyInfoFactory"", provider);
        }
        catch (IllegalAccessException illegalAccessException) {
            throw new NoSuchMechanismException(""Cannot find "" + string + "" mechanism type"", illegalAccessException);
        }
        catch (InvocationTargetException invocationTargetException) {
            throw new NoSuchMechanismException(""Cannot find "" + string + "" mechanism type"", invocationTargetException);
        }
        KeyInfoFactory keyInfoFactory = (KeyInfoFactory)objectArray[0];
        keyInfoFactory.mechanismType = string;
        keyInfoFactory.provider = (Provider)objectArray[1];
        return keyInfoFactory;
    }"
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance,"    public static KeyInfoFactory getInstance(String string, Provider provider) {
        if (string == null) {
            throw new NullPointerException(""mechanismType cannot be null"");
        }
        if (provider == null) {
            throw new NullPointerException(""provider cannot be null"");
        }
        return KeyInfoFactory.findInstance(string, provider);
    }"
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance,"    public static KeyInfoFactory getInstance(String string, String string2) throws NoSuchProviderException {
        if (string == null) {
            throw new NullPointerException(""mechanismType cannot be null"");
        }
        if (string2 == null) {
            throw new NullPointerException(""provider cannot be null"");
        }
        Provider provider = Security.getProvider(string2);
        if (provider == null) {
            throw new NoSuchProviderException(""cannot find provider named "" + string2);
        }
        return KeyInfoFactory.findInstance(string, provider);
    }"
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance,"    public static KeyInfoFactory getInstance() {
        return KeyInfoFactory.getInstance(""DOM"");
    }"
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getMechanismType,"    public final String getMechanismType() {
        return this.mechanismType;
    }"
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getProvider,"    public final Provider getProvider() {
        return this.provider;
    }"
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyName,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyValue,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509Data,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509IssuerSerial,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.isFeatureSupported,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getURIDereferencer,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.unmarshalKeyInfo,
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.run,"            public Object run() {
                Method method = null;
                try {
                    method = cl.getDeclaredMethod(""getImpl"", getImplParams);
                    if (method != null) {
                        method.setAccessible(true);
                    }
                }
                catch (NoSuchMethodException noSuchMethodException) {
                    // empty catch block
                }
                return method;
            }
        "
javax.xml.crypto.dsig.keyinfo.X509IssuerSerial.getIssuerName,
javax.xml.crypto.dsig.keyinfo.X509IssuerSerial.getSerialNumber,"    public BigInteger getSerialNumber();
"
javax.xml.crypto.dsig.keyinfo.RetrievalMethod.getTransforms,
javax.xml.crypto.dsig.keyinfo.RetrievalMethod.getURI,
javax.xml.crypto.dsig.keyinfo.RetrievalMethod.dereference,"    public Data dereference(XMLCryptoContext var1) throws URIReferenceException;
"
javax.xml.crypto.dsig.keyinfo.KeyInfo.getContent,
javax.xml.crypto.dsig.keyinfo.KeyInfo.getId,
javax.xml.crypto.dsig.keyinfo.KeyInfo.marshal,"    public void marshal(XMLStructure var1, XMLCryptoContext var2) throws MarshalException;
"
javax.xml.crypto.dsig.keyinfo.PGPData.getKeyId,
javax.xml.crypto.dsig.keyinfo.PGPData.getKeyPacket,
javax.xml.crypto.dsig.keyinfo.PGPData.getExternalElements,"    public List getExternalElements();
"
javax.xml.crypto.dsig.keyinfo.KeyValue.getPublicKey,"    public PublicKey getPublicKey() throws KeyException;
"
javax.xml.crypto.dom.DOMStructure.getNode,"    public Node getNode() {
        return this.node;
    }"
javax.xml.crypto.dom.DOMStructure.isFeatureSupported,"    public boolean isFeatureSupported(String string) {
        if (string == null) {
            throw new NullPointerException();
        }
        return false;
    }
"
javax.xml.crypto.dom.DOMCryptoContext.getNamespacePrefix,"    public String getNamespacePrefix(String string, String string2) {
        if (string == null) {
            throw new NullPointerException(""namespaceURI cannot be null"");
        }
        String string3 = (String)this.nsMap.get(string);
        return string3 != null ? string3 : string2;
    }"
javax.xml.crypto.dom.DOMCryptoContext.putNamespacePrefix,"    public String putNamespacePrefix(String string, String string2) {
        if (string == null) {
            throw new NullPointerException(""namespaceURI is null"");
        }
        return this.nsMap.put(string, string2);
    }"
javax.xml.crypto.dom.DOMCryptoContext.getDefaultNamespacePrefix,"    public String getDefaultNamespacePrefix() {
        return this.defaultPrefix;
    }"
javax.xml.crypto.dom.DOMCryptoContext.setDefaultNamespacePrefix,"    public void setDefaultNamespacePrefix(String string) {
        this.defaultPrefix = string;
    }"
javax.xml.crypto.dom.DOMCryptoContext.getBaseURI,"    public String getBaseURI() {
        return this.baseURI;
    }"
javax.xml.crypto.dom.DOMCryptoContext.setBaseURI,"    public void setBaseURI(String string) {
        if (string != null) {
            URI.create(string);
        }
        this.baseURI = string;
    }"
javax.xml.crypto.dom.DOMCryptoContext.getURIDereferencer,"    public URIDereferencer getURIDereferencer() {
        return this.dereferencer;
    }"
javax.xml.crypto.dom.DOMCryptoContext.setURIDereferencer,"    public void setURIDereferencer(URIDereferencer uRIDereferencer) {
        this.dereferencer = uRIDereferencer;
    }"
javax.xml.crypto.dom.DOMCryptoContext.getProperty,"    public Object getProperty(String string) {
        if (string == null) {
            throw new NullPointerException(""name is null"");
        }
        return this.propMap.get(string);
    }"
javax.xml.crypto.dom.DOMCryptoContext.setProperty,"    public Object setProperty(String string, Object object) {
        if (string == null) {
            throw new NullPointerException(""name is null"");
        }
        return this.propMap.put(string, object);
    }"
javax.xml.crypto.dom.DOMCryptoContext.getKeySelector,"    public KeySelector getKeySelector() {
        return this.ks;
    }"
javax.xml.crypto.dom.DOMCryptoContext.setKeySelector,"    public void setKeySelector(KeySelector keySelector) {
        this.ks = keySelector;
    }"
javax.xml.crypto.dom.DOMCryptoContext.getElementById,"    public Element getElementById(String string) {
        if (string == null) {
            throw new NullPointerException(""idValue is null"");
        }
        return (Element)this.idMap.get(string);
    }"
javax.xml.crypto.dom.DOMCryptoContext.setIdAttributeNS,"    public void setIdAttributeNS(Element element, String string, String string2) {
        if (element == null) {
            throw new NullPointerException(""element is null"");
        }
        if (string2 == null) {
            throw new NullPointerException(""localName is null"");
        }
        String string3 = element.getAttributeNS(string, string2);
        if (string3 == null || string3.length() == 0) {
            throw new IllegalArgumentException(string2 + "" is not an "" + ""attribute"");
        }
        this.idMap.put(string3, element);
    }"
javax.xml.crypto.dom.DOMCryptoContext.iterator,"    public Iterator iterator() {
        return Collections.unmodifiableMap(this.idMap).entrySet().iterator();
    }"
javax.xml.crypto.dom.DOMCryptoContext.get,"    public Object get(Object object) {
        return this.objMap.get(object);
    }"
javax.xml.crypto.dom.DOMCryptoContext.put,"    public Object put(Object object, Object object2) {
        return this.objMap.put(object, object2);
    }
"
javax.xml.crypto.dom.DOMURIReference.getHere,"    public Node getHere();
"
monitoring.CatenaMonitoring.main,"    public static void main(String[] args) {
        CatenaMonitoring cm = new CatenaMonitoring();
        if (args.length != 13) {
            System.out.println(""Need to initialize Catena with 10 parameters and run it with 3. You transfered "" + args.length);
        }
        boolean useFullHash = CatenaMonitoring._get_hPrime(cm, args);
        boolean useGamma = CatenaMonitoring._get_gamma(cm, args);
        int useGraph = CatenaMonitoring._get_f(args);
        boolean usePhi = CatenaMonitoring._get_Phi(cm, args);
        int gInp = CatenaMonitoring._get_gLowHigh(args);
        int lambdaInp = CatenaMonitoring._get_lambda(args);
        String vIDInp = CatenaMonitoring._get_vId(args);
        int d = CatenaMonitoring._get_d(args);
        String gamma = args[8];
        String aData = args[9];
        String pwd = args[10];
        String salt = args[11];
        int outputLength = Integer.parseInt(args[12]);
        long startTime = System.currentTimeMillis();
        Catena c = cm.initCatenaByConfig(useFullHash, useGamma, useGraph, usePhi, gInp, lambdaInp, vIDInp, d);
        String out = cm.testPerformanceByConfig(c, pwd, salt, gamma, aData, outputLength);
        System.out.println(""Time used: "" + (System.currentTimeMillis() - startTime) + "" "" + out);
    }"
monitoring.CatenaMonitoring.convertToBoolean,"    private boolean convertToBoolean(String value) {
        return ""1"".equalsIgnoreCase(value) || ""yes"".equalsIgnoreCase(value) || ""true"".equalsIgnoreCase(value) || ""on"".equalsIgnoreCase(value);
    }"
monitoring.CatenaMonitoring.initCatenaByConfig,"    private Catena initCatenaByConfig(boolean useFullHash, boolean useGamma, int useGraph, boolean usePhi, int gInp, int lambdaInp, String vIDInp, int d) {
        PhiInterface phi;
        int l;
        IdxInterface idx;
        GraphInterface f;
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        HashInterface hPrime = useFullHash ? new Blake2b() : new Blake2b_1();
        GammaInterface gamma = useGamma ? new SaltMix() : new IdentityGamma();
        if (useGraph == 1) {
            f = new DoubleButterflyGraph();
            idx = new IndexDBG();
        } else if (useGraph == 2) {
            f = new GenericGraph();
            idx = new IndexBRG();
        } else if (useGraph == 3) {
            f = new GenericGraph();
            l = 3;
            idx = new IndexGRG(l);
        } else if (useGraph == 4) {
            f = new GenericGraph();
            l = 0;
            idx = new IndexGRG(l);
        } else {
            System.out.println(""There are 4 different Graphs in Catena. You choose none of them. So BRG is used by default."");
            f = new GenericGraph();
            idx = new IndexBRG();
        }
        if (usePhi) {
            LSBIndex idxState = new LSBIndex();
            phi = new CatenaPhi(idxState);
        } else {
            phi = new IdentityPhi();
        }
        c.init(h, hPrime, gamma, f, idx, phi, gInp, gInp, lambdaInp, vIDInp);
        c.setD(d);
        return c;
    }"
monitoring.CatenaMonitoring.testPerformanceByConfig,"    private String testPerformanceByConfig(Catena instance, String pwdStr, String saltStr, String gammaStr, String aDataStr, int outLen) {
        byte[] pwd = this.helper.hex2bytes(pwdStr);
        byte[] salt = this.helper.hex2bytes(saltStr);
        byte[] gamma = this.helper.hex2bytes(gammaStr);
        byte[] aData = this.helper.hex2bytes(aDataStr);
        return this.helper.bytes2hex(instance.catena(pwd, salt, aData, gamma, outLen));
    }"
monitoring.CatenaMonitoring.testPerformanceButterfly,"    public void testPerformanceButterfly() {
        DefaultInstances instances = new DefaultInstances();
        Catena c = instances.initButterfly();
        byte[] pwd = this.helper.hex2bytes(""012345"");
        byte[] salt = this.helper.hex2bytes(""6789ab"");
        byte[] gamma = this.helper.hex2bytes(""6789ab"");
        byte[] aData = this.helper.hex2bytes(""000000"");
        int outputLength = 64;
        String expectedResult = ""c061a9ebb7e0a0c7ec90e3114f3b6b7fa8fdfce2584ca76576411d8ce290c348c953ee8a985450124f2f10f9c415787dc76c0dc6aa95a758e516072eb16b9816"";
        String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
        System.out.println(""Butterfly Done: "" + actualResult.equalsIgnoreCase(expectedResult));
    }"
monitoring.CatenaMonitoring.testPerformanceButterflyFull,"    public void testPerformanceButterflyFull() {
        DefaultInstances instances = new DefaultInstances();
        Catena c = instances.initButterflyFull();
        byte[] pwd = this.helper.hex2bytes(""012345"");
        byte[] salt = this.helper.hex2bytes(""6789ab"");
        byte[] gamma = this.helper.hex2bytes(""6789ab"");
        byte[] aData = this.helper.hex2bytes(""000000"");
        int outputLength = 64;
        String expectedResult = ""9e4aa09e9db103add705c044b5d98ae75c6a777f4ba281aef8d25ed23bfbe44dfae8d95c2925569e27b2271be37c0a34386f6556b795cd03d075a92974cc94c3"";
        String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
        System.out.println(""Butterfly-Full Done: "" + actualResult.equalsIgnoreCase(expectedResult));
    }"
monitoring.CatenaMonitoring.testPerformanceDragonfly,"    public void testPerformanceDragonfly() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initDragonfly();
        byte[] pwd = this.helper.hex2bytes(""012345"");
        byte[] salt = this.helper.hex2bytes(""6789ab"");
        byte[] gamma = this.helper.hex2bytes(""6789ab"");
        byte[] aData = this.helper.hex2bytes(""000000"");
        int outputLength = 64;
        String expectedResult = ""76f4d59cd232304524ca7c98c68481a9cf1416e1505ee610fc60e43fd102be0bdc0a443b036bec0830702bd8496c7805aa4eecea23adb9bd4579939e9e6d384d"";
        String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
        System.out.println(""Dragonfly Done: "" + actualResult.equalsIgnoreCase(expectedResult));
    }"
monitoring.CatenaMonitoring.testPerformanceDragonflyFull,"    public void testPerformanceDragonflyFull() {
        DefaultInstances defaultInstance = new DefaultInstances();
        Catena c = defaultInstance.initDragonflyFull();
        byte[] pwd = this.helper.hex2bytes(""012345"");
        byte[] salt = this.helper.hex2bytes(""6789ab"");
        byte[] gamma = this.helper.hex2bytes(""6789ab"");
        byte[] aData = this.helper.hex2bytes(""000000"");
        int outputLength = 64;
        String expectedResult = ""213f58a9ccfcf5770d13bc99148ff8e2167afb538f27a3a21911954a548337609eaaad9a4096ec2d94a0084271be0e73904141b04edcb9d21f26f3344a8553c4"";
        String actualResult = this.helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));
        System.out.println(""Dragonfly-Full Done: "" + actualResult.equalsIgnoreCase(expectedResult));
    }"
monitoring.CatenaMonitoring._get_hPrime,"    public static boolean _get_hPrime(CatenaMonitoring cm, String[] args) {
        return cm.convertToBoolean(args[0]);
    }"
monitoring.CatenaMonitoring._get_gamma,"    public static boolean _get_gamma(CatenaMonitoring cm, String[] args) {
        return cm.convertToBoolean(args[1]);
    }"
monitoring.CatenaMonitoring._get_f,"    public static int _get_f(String[] args) {
        return Integer.parseInt(args[2]);
    }"
monitoring.CatenaMonitoring._get_Phi,"    public static boolean _get_Phi(CatenaMonitoring cm, String[] args) {
        return cm.convertToBoolean(args[3]);
    }"
monitoring.CatenaMonitoring._get_gLowHigh,"    public static int _get_gLowHigh(String[] args) {
        return Integer.parseInt(args[4]);
    }"
monitoring.CatenaMonitoring._get_lambda,"    public static int _get_lambda(String[] args) {
        return Integer.parseInt(args[5]);
    }"
monitoring.CatenaMonitoring._get_vId,"    public static String _get_vId(String[] args) {
        return args[6];
    }"
monitoring.CatenaMonitoring._get_d,"    public static int _get_d(String[] args) {
        return Integer.parseInt(args[7]);
    }
"
main.java.Helper.hex2bytes,"    public final byte[] hex2bytes(String hexString) {
        byte[] byteArray = new byte[hexString.length() / 2];
        int len = hexString.length();
        if ((len & 1) == 1) {
            System.err.println(""Illegal Argument (Function hexStringToBytes): HexString is not even"");
            System.exit(1);
        }
        char[] hexCharArray = hexString.toCharArray();
        int i = 0;
        while (i < hexString.length()) {
            byteArray[i / 2] = (byte)((Character.digit(hexCharArray[i], 16) << 4) + Character.digit(hexCharArray[i + 1], 16));
            i += 2;
        }
        return byteArray;
    }"
main.java.Helper.string2Bytes,"    public final byte[] string2Bytes(String hexString) {
        return hexString.getBytes();
    }"
main.java.Helper.bytes2hex,"    public final String bytes2hex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        int j = 0;
        while (j < bytes.length) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0xF];
            ++j;
        }
        return new String(hexChars).toLowerCase();
    }"
main.java.Helper.concateByteArrays,"    public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4, byte[] bytes5, byte[] bytes6) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
            out.write(bytes5);
            out.write(bytes6);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }"
main.java.Helper.concateByteArrays,"    public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }"
main.java.Helper.concateByteArrays,"    public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }"
main.java.Helper.concateByteArrays,"    public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }"
main.java.Helper.intToByteArray,"    public byte[] intToByteArray(int data, int bytes) {
        if (bytes == 4) {
            byte[] result = new byte[]{(byte)((data & 0xFF000000) >> 24), (byte)((data & 0xFF0000) >> 16), (byte)((data & 0xFF00) >> 8), (byte)(data & 0xFF)};
            return result;
        }
        if (bytes == 2) {
            byte[] result = new byte[]{(byte)((data & 0xFF00) >> 8), (byte)(data & 0xFF)};
            return result;
        }
        return new byte[1];
    }"
main.java.Helper.intToByteArrayLittleEndian,"    public byte[] intToByteArrayLittleEndian(int data, int bytes) {
        if (bytes == 4) {
            byte[] result = new byte[]{(byte)(data & 0xFF), (byte)((data & 0xFF00) >> 8), (byte)((data & 0xFF0000) >> 16), (byte)((data & 0xFF000000) >> 24)};
            return result;
        }
        if (bytes == 2) {
            byte[] result = new byte[]{(byte)(data & 0xFF), (byte)((data & 0xFF00) >> 8)};
            return result;
        }
        return new byte[1];
    }"
main.java.Helper.twoDimByteArrayToOne,"    public byte[] twoDimByteArrayToOne(byte[][] bytes) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int row = 0;
        while (row < bytes.length) {
            try {
                out.write(bytes[row]);
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            ++row;
        }
        return out.toByteArray();
    }"
main.java.Helper.oneDimByteArrToTwoDim,"    public byte[][] oneDimByteArrToTwoDim(byte[] b, int len) {
        int bLen = b.length;
        int dimension = bLen / len;
        byte[][] twoDim = new byte[dimension][len];
        int i = 0;
        while (i < bLen / len) {
            byte[] tmp = new byte[len];
            System.arraycopy(b, i * len, tmp, 0, len);
            twoDim[i] = tmp;
            ++i;
        }
        return twoDim;
    }"
main.java.Helper.paddWithZero,"    public final byte[] paddWithZero(byte[] b, int l) {
        byte[] output = new byte[l];
        System.arraycopy(b, 0, output, 0, b.length);
        return output;
    }"
main.java.Helper.truncate,"    public final byte[] truncate(byte[] x, int m) {
        return Arrays.copyOfRange(x, 0, m);
    }"
main.java.Helper.xor,"    public byte[] xor(byte[] arr1, byte[] arr2) {
        byte[] res = new byte[arr1.length];
        int i = 0;
        byte[] byArray = arr1;
        int n = arr1.length;
        int n2 = 0;
        while (n2 < n) {
            byte b = byArray[n2];
            res[i] = (byte)(b ^ arr2[i++]);
            ++n2;
        }
        return res;
    }"
main.java.Helper.longToBytes,"    public byte[] longToBytes(long x) {
        this.bufferLong.putLong(0, x);
        return this.bufferLong.array();
    }"
main.java.Helper.bytesToLong,"    public long bytesToLong(byte[] bytes) {
        this.bufferLong.put(bytes, 0, bytes.length);
        this.bufferLong.flip();
        return this.bufferLong.getLong();
    }"
main.java.Helper.intToBytes,"    public byte[] intToBytes(int x) {
        this.bufferInt.clear();
        this.bufferInt.putInt(x);
        return this.bufferInt.array();
    }"
main.java.Helper.bytesToInt,"    public int bytesToInt(byte[] bytes) {
        this.bufferInt.put(bytes, 0, bytes.length);
        this.bufferInt.flip();
        return this.bufferInt.getInt();
    }"
main.java.Helper.jsonParserArr,"    public JSONArray jsonParserArr(File f) {
        String all = """";
        try {
            String line;
            BufferedReader br = new BufferedReader(new FileReader(f));
            while ((line = br.readLine()) != null) {
                all = String.valueOf(all) + line;
            }
        }
        catch (Exception exception) {
            // empty catch block
        }
        return new JSONArray(all);
    }"
main.java.Helper.jsonParserObj,"    public JSONObject jsonParserObj(File f) {
        String all = """";
        try {
            String line;
            BufferedReader br = new BufferedReader(new FileReader(f));
            while ((line = br.readLine()) != null) {
                all = String.valueOf(all) + line;
            }
        }
        catch (Exception exception) {
            // empty catch block
        }
        return new JSONObject(all);
    }
"
main.java.Catena.catena,"/**
* Main function of catena to hash a password
*
* @param pwd			Password to be hashed
* @param salt			Salt of arbitrary length
* @param publicInput	User choosen public input
* @param gamma			Input for graph size
* @param m				User desired output length of hash
*
* @return xTrun		Hash of pwd
*/
    public byte[] catena(byte[] pwd, byte[] salt, byte[] publicInput, byte[] gamma, int m) {
        byte[] t = this.compTweak(this.get_vId(), this.get_d(), this.get_lambda(), m, salt.length, publicInput);
        this.get_h().update(this.helper.concateByteArrays(t, pwd, salt));
        byte[] x = this.get_h().doFinal();
        this.erasePwd(pwd);
        x = this.flap((this.get_gLow() + 1) / 2, x, gamma);
        this.get_h().update(x);
        x = this.get_h().doFinal();
        byte[] gByte = new byte[1];
        int g = this.get_gLow();
        while (g <= this.get_gHigh()) {
            if (x.length < this.get_n()) {
                x = this.helper.paddWithZero(x, this.get_n());
            }
            x = this.flap(g, x, gamma);
            gByte[0] = (byte)g;
            this.get_h().update(this.helper.concateByteArrays(gByte, x));
            x = this.get_h().doFinal();
            x = this.helper.truncate(x, m);
            ++g;
        }
        return x;
    }"
main.java.Catena.flap,"/**
* flap function from catena specification
*
* @param g
* @param xIn
* @param gamma
* @return
*/
    private byte[] flap(int g, byte[] xIn, byte[] gamma) {
        this.get_hPrime().reset();
        int iterations = (int)Math.pow(2.0, g);
        byte[][] v = new byte[iterations + 2][this.get_k()];
        byte[] xHinit = this.hInit(xIn);
        System.arraycopy(xHinit, 0, v[0], 0, this.get_k());
        System.arraycopy(xHinit, this.get_k(), v[1], 0, this.get_k());
        int i = 2;
        while (i < iterations + 2) {
            this.get_hPrime().update(this.helper.concateByteArrays(v[i - 1], v[i - 2]));
            v[i] = this.get_hPrime().doFinal();
            ++i;
        }
        byte[][] v2 = new byte[iterations][this.get_k()];
        System.arraycopy(v, 2, v2, 0, v2.length);
        this.get_hPrime().reset();
        v2 = this.gamma(g, v2, gamma);
        this.get_hPrime().reset();
        v2 = this.f(g, v2, this.get_lambda());
        this.get_hPrime().reset();
        v2 = this.phi(g, v2, v2[v2.length - 1]);
        return v2[v2.length - 1];
    }"
main.java.Catena.flapPub,"    public byte[] flapPub(int g, byte[] xIn, byte[] gamma) {
        return this.flap(g, xIn, gamma);
    }"
main.java.Catena.hInit,"/**
* Initialisation of the 2 values for flap rounds
*
* @param x		Input Array
* @return 		2 hashed values v_-1, V_-2 in one byte array
* 				(output is already splitted in the middle and swapped)
*/
    private byte[] hInit(byte[] x) {
        int l = 2 * this.get_k() / this.get_n();
        byte[][] xLoop = new byte[l][this.get_n()];
        byte[] iByte = new byte[1];
        int i = 0;
        while (i <= l - 1) {
            iByte[0] = (byte)i;
            this.get_h().update(this.helper.concateByteArrays(iByte, x));
            xLoop[i] = this.get_h().doFinal();
            this.get_h().reset();
            ++i;
        }
        return this.helper.twoDimByteArrayToOne(xLoop);
    }"
main.java.Catena.testHInit,"/**
* No clue how to test private functions so this wrapper exists
*
* @param x		Initial value to instantiate v-2 and v-1
* @return		v-2 and v-1 combined in one array
*/
    public byte[] testHInit(byte[] x) {
        return this.hInit(x);
    }"
main.java.Catena.gamma,"/**
* salt dependent update with random access
*
* @param g		garlic
* @param x		hash array
* @param gamma	gamma
* @return		hash array
*/
    private byte[][] gamma(int g, byte[][] x, byte[] gamma) {
        return this.get_gamma().gamma(g, x, gamma);
    }"
main.java.Catena.f,"/**
* phi function from catena specification
*
* @param x		hash input
* @return		hash output
*/
    private byte[][] f(int g, byte[][] x, int lambda) {
        return this.get_f().graph(g, x, lambda);
    }"
main.java.Catena.phi,"    private byte[][] phi(int garlic, byte[][] x, byte[] m) {
        return this.get_phi().phi(garlic, x, m);
    }"
main.java.Catena.compTweak,"/**
* Combine Tweak Array
*
* @param vId		Version ID
* @param mode		Mode of catena
* @param lambda	Lambda
* @param outLen	Output Length
* @param sLen		Salt Length
* @param aData		Additional Data
* @return			Combined Tweak
*/
    private byte[] compTweak(String vId, int mode, int lambda, int outLen, int sLen, byte[] aData) {
        byte[] modeByte = new byte[1];
        byte[] lambdaByte = new byte[1];
        byte[] outLenByte = this.helper.intToByteArrayLittleEndian(outLen, 2);
        byte[] sLenByte = this.helper.intToByteArrayLittleEndian(sLen, 2);
        this.get_h().update(this.helper.string2Bytes(vId));
        byte[] vIdH = this.get_h().doFinal();
        this.get_h().reset();
        this.get_h().update(aData);
        byte[] aDataH = this.get_h().doFinal();
        this.get_h().reset();
        modeByte[0] = (byte)mode;
        lambdaByte[0] = (byte)lambda;
        return this.helper.concateByteArrays(vIdH, modeByte, lambdaByte, outLenByte, sLenByte, aDataH);
    }"
main.java.Catena.testCompTweak,"/**
* public interface for testing tweak computation
*
* @param vId		String, VersionID
* @param mode		Integer, Mode of Catena
* @param lambda	Integer, The depth of the graph structure.
* @param outLen	Integer, Output length.
* @param sLen		Integer, Salt length.
* @param aData		byte[], Associated data of the user and/or the host.
* @return tweak	byte[], The calculatetd tweak.
*/
    public byte[] testCompTweak(String vId, int mode, int lambda, int outLen, int sLen, byte[] aData) {
        return this.compTweak(vId, mode, lambda, outLen, sLen, aData);
    }"
main.java.Catena.erasePwd,"/**
* Clear the password
*
* @param pwd	the password to be cleared
*/
    private final void erasePwd(byte[] pwd) {
        Arrays.fill(pwd, (byte)0);
    }"
main.java.Catena.init,"/**
* Initializes Catena
*
* initializrs all needed variables and functions with default values
*
* @param h			main hash function
* @param hPrime	reduced hash function
* @param gamma		gamma function (e.g. SaltMix)
* @param f			graph
* @param idx		index function for graph
* @param phi		phi function
* @param gLow		minimum Garlic
* @param gHigh		maximum Garlic
* @param lambda	depth of graphs
* @param vID		version ID
*/
    public void init(HashInterface h, HashInterface hPrime, GammaInterface gamma, GraphInterface f, IdxInterface idx, PhiInterface phi, int gLow, int gHigh, int lambda, String vID) {
        this._h = h;
        this._hPrime = hPrime;
        this._gamma = gamma;
        this._gamma.setH(this.get_h());
        this._gamma.setHPrime(this.get_hPrime());
        this._f = f;
        this._f.setH(this.get_h());
        this._f.setHPrime(this.get_hPrime());
        this._f.setIndexing(idx);
        this._phi = phi;
        this._phi.setH(this.get_h());
        this._phi.setHPrime(this.get_hPrime());
        this._gLow = gLow;
        this._gHigh = gHigh;
        this._lambda = lambda;
        this._n = this.get_h().getOutputSize();
        this._k = this.get_hPrime().getOutputSize();
        this._vId = vID;
    }"
main.java.Catena.setGHigh,"    public void setGHigh(int gHigh) {
        this._gHigh = gHigh;
    }"
main.java.Catena.setGLow,"    public void setGLow(int gLow) {
        this._gLow = gLow;
    }"
main.java.Catena.setD,"    public void setD(int d) {
        this._d = d;
    }"
main.java.Catena.keyedClientIndependentUpdate,"    public byte[] keyedClientIndependentUpdate(byte[] hashOld, int gHighOld, int gHighNew, byte[] gamma, int outputLenth, byte[] serverKey, byte[] userID) throws Exception {
        if (gHighOld >= gHighNew) {
            throw new Exception(""New gHigh value should be bigger as the old one."");
        }
        byte[] keystream = this.computeKeyStream(serverKey, userID, gHighOld, outputLenth);
        byte[] oldHash = this.helper.xor(hashOld, keystream);
        byte[] newHash = this.clientIndependentUpdate(oldHash, gHighOld, gHighNew, gamma, outputLenth);
        byte[] newKeystream = this.computeKeyStream(serverKey, userID, gHighNew, outputLenth);
        return this.helper.xor(newHash, newKeystream);
    }"
main.java.Catena.computeKeyStream,"    private byte[] computeKeyStream(byte[] serverKey, byte[] userID, int gHigh, int outLen) {
        byte[] gByte = new byte[]{(byte)gHigh};
        this.get_h().update(this.helper.concateByteArrays(serverKey, userID, gByte, serverKey));
        byte[] output = this.get_h().doFinal();
        output = this.helper.truncate(output, outLen);
        return output;
    }"
main.java.Catena.clientIndependentUpdate,"    public byte[] clientIndependentUpdate(byte[] hashOld, int gHighOld, int gHighNew, byte[] gamma, int outputLenth) throws Exception {
        if (gHighOld >= gHighNew) {
            throw new Exception(""New gHigh value should be bigger as the old one."");
        }
        int n = this.get_h().getOutputSize();
        byte[] newHash = new byte[n];
        byte[] gByte = new byte[1];
        System.arraycopy(hashOld, 0, newHash, 0, hashOld.length);
        int i = gHighOld + 1;
        while (i < gHighNew + 1) {
            if (newHash.length < this.get_n()) {
                newHash = this.helper.paddWithZero(newHash, n);
            }
            newHash = this.flap(i, newHash, gamma);
            gByte[0] = (byte)i;
            this.get_h().update(this.helper.concateByteArrays(gByte, newHash));
            newHash = this.get_h().doFinal();
            this.get_h().reset();
            newHash = this.helper.truncate(newHash, outputLenth);
            ++i;
        }
        return newHash;
    }"
main.java.Catena.keyedPasswordHashing,"    public byte[] keyedPasswordHashing(byte[] pwd, byte[] key, byte[] salt, byte[] gamma, byte[] a_data, int out_len, byte[] userID) {
        byte[] gHighBytes = new byte[]{(byte)this.get_gHigh()};
        this.get_h().update(this.helper.concateByteArrays(key, userID, gHighBytes, key));
        byte[] z = this.helper.truncate(this.get_h().doFinal(), out_len);
        byte[] hash = this.catena(pwd, salt, a_data, gamma, out_len);
        return this.helper.xor(z, hash);
    }"
main.java.Catena.keyDerivation,"    public byte[] keyDerivation(byte[] pwd, byte[] salt, byte[] publicInput, byte[] gamma, int outLen, int keySize, byte[] keyIdentifier) {
        int d = 1;
        byte[] tweak = this.compTweak(this.get_vId(), d, this.get_lambda(), outLen, salt.length, publicInput);
        this.get_h().update(this.helper.concateByteArrays(tweak, pwd, salt));
        byte[] x = this.get_h().doFinal();
        x = this.flap((this.get_gLow() + 1) / 2, x, gamma);
        this.erasePwd(pwd);
        this.get_h().update(x);
        x = this.get_h().doFinal();
        byte[] gByte = new byte[1];
        int g = this.get_gLow();
        while (g <= this.get_gHigh()) {
            if (x.length < this.get_n()) {
                x = this.helper.paddWithZero(x, this.get_n());
            }
            x = this.flap(g, x, gamma);
            gByte[0] = (byte)g;
            this.get_h().update(this.helper.concateByteArrays(gByte, x));
            x = this.get_h().doFinal();
            x = this.helper.truncate(x, outLen);
            ++g;
        }
        int limit = (int)Math.ceil((double)keySize / (double)this.get_h().getOutputSize());
        byte[] outputKey = new byte[]{};
        int i = 1;
        while (i < limit + 1) {
            byte[] iByte = this.helper.intToByteArrayLittleEndian(i, 2);
            byte[] keySizeByte = this.helper.intToByteArrayLittleEndian(keySize, 2);
            this.get_h().update(this.helper.concateByteArrays(iByte, keyIdentifier, keySizeByte, x));
            byte[] tmp = this.get_h().doFinal();
            outputKey = this.helper.concateByteArrays(outputKey, tmp);
            ++i;
        }
        return this.helper.truncate(outputKey, keySize);
    }"
main.java.Catena.serverReliefClient,"    public byte[] serverReliefClient(byte[] pwd, byte[] salt, byte[] aData, int outLen, byte[] gamma) {
        int d = 0;
        byte[] t = this.compTweak(this.get_vId(), d, this.get_lambda(), outLen, salt.length, aData);
        this.get_h().update(this.helper.concateByteArrays(t, pwd, salt));
        byte[] x = this.get_h().doFinal();
        x = this.flap((this.get_gLow() + 1) / 2, x, gamma);
        this.erasePwd(pwd);
        this.get_h().update(x);
        x = this.get_h().doFinal();
        if (this.get_gHigh() > this.get_gLow()) {
            byte[] gByte = new byte[1];
            int g = this.get_gLow();
            while (g < this.get_gHigh()) {
                if (x.length < this.get_n()) {
                    x = this.helper.paddWithZero(x, outLen);
                }
                x = this.flap(g, x, gamma);
                gByte[0] = (byte)g;
                this.get_h().update(this.helper.concateByteArrays(gByte, x));
                x = this.get_h().doFinal();
                x = this.helper.truncate(x, outLen);
                ++g;
            }
        }
        if (x.length < this.get_n()) {
            x = this.helper.paddWithZero(x, this.get_n());
        }
        x = this.flap(this.get_gHigh(), x, gamma);
        return x;
    }"
main.java.Catena.serverReliefServer,"    public byte[] serverReliefServer(int outLen, byte[] lastHash) {
        byte[] gByte = new byte[]{(byte)this.get_gHigh()};
        this.get_h().update(this.helper.concateByteArrays(gByte, lastHash));
        return this.helper.truncate(this.get_h().doFinal(), outLen);
    }"
main.java.Catena.proofOfWorkServer,"    public POWstruct proofOfWorkServer(byte[] pwd, byte[] salt, byte[] aData, int outLen, byte[] gamma, int p, int mode) {
        this.setD(2);
        POWstruct output = new POWstruct();
        byte[] inpPWD = new byte[pwd.length];
        System.arraycopy(pwd, 0, inpPWD, 0, pwd.length);
        output.pwd = inpPWD;
        output.salt = salt;
        output.aData = aData;
        output.gLow = this.get_gLow();
        output.gHigh = this.get_gHigh();
        output.outLen = outLen;
        output.gamma = gamma;
        output.p = p;
        output.rHash = this.catena(pwd, salt, aData, gamma, outLen);
        output.mode = mode;
        if (mode == 0) {
            byte[] inpSalt = new byte[salt.length];
            System.arraycopy(salt, 0, inpSalt, 0, salt.length);
            int a = (1 << 8 * (int)Math.ceil((double)p / 8.0)) - (1 << p);
            byte[] mask = this.helper.intToBytes(a);
            int saltLength = inpSalt.length;
            int maskLength = mask.length;
            byte[] newMask = new byte[saltLength];
            if (maskLength > saltLength) {
                System.arraycopy(mask, maskLength - saltLength, newMask, 0, saltLength);
            } else {
                System.arraycopy(mask, 0, newMask, 0, maskLength);
            }
            int newMaskLength = newMask.length;
            int i = 0;
            while (i < newMaskLength) {
                if (newMask[i] != 0) break;
                newMask[i] = -1;
                ++i;
            }
            i = 0;
            while (i < newMaskLength) {
                inpSalt[saltLength - newMaskLength + i] = (byte)(inpSalt[saltLength - newMaskLength + i] & newMask[i]);
                ++i;
            }
            output.salt = inpSalt;
            return output;
        }
        if (mode == 1) {
            output.pwd = new byte[0];
            return output;
        }
        return new POWstruct();
    }"
main.java.Catena.proofOfWorkClient,"    public byte[] proofOfWorkClient(POWstruct input) {
        this.setD(2);
        if (input.mode == 0) {
            int numBytes = (int)Math.ceil((double)input.p / 8.0);
            int upperBound = 1 << input.p;
            Random rand = new Random();
            int randomOffset = rand.nextInt(upperBound);
            int i = 0;
            while (i < upperBound) {
                byte[] pwd = new byte[input.pwd.length];
                System.arraycopy(input.pwd, 0, pwd, 0, input.pwd.length);
                byte[] saltInput = new byte[input.salt.length];
                System.arraycopy(input.salt, 0, saltInput, 0, input.salt.length);
                byte[] pepperPre = this.helper.intToBytes((i + randomOffset) % upperBound);
                byte[] pepper = new byte[numBytes];
                System.arraycopy(pepperPre, pepperPre.length - numBytes, pepper, 0, numBytes);
                if (saltInput.length == pepper.length) {
                    saltInput = pepper;
                } else {
                    int j = 1;
                    while (j == numBytes) {
                        saltInput[saltInput.length - j] = (byte)(saltInput[saltInput.length - j] + pepper[pepper.length - j]);
                        ++j;
                    }
                }
                byte[] actualHash = this.catena(pwd, saltInput, input.aData, input.gamma, input.outLen);
                if (this.helper.bytes2hex(actualHash).equals(this.helper.bytes2hex(input.rHash))) {
                    return saltInput;
                }
                ++i;
            }
            return new byte[0];
        }
        if (input.mode == 1) {
            int numBytes = (int)Math.ceil((double)input.p / 8.0);
            int upperBound = 1 << input.p;
            Random rand = new Random();
            int randomOffset = rand.nextInt(upperBound);
            int i = 0;
            while (i < upperBound) {
                byte[] pepperPwd = this.helper.intToBytes((i + randomOffset) % upperBound);
                byte[] sectretPwd = new byte[numBytes];
                System.arraycopy(pepperPwd, pepperPwd.length - numBytes, sectretPwd, 0, numBytes);
                byte[] saveForReturn = new byte[sectretPwd.length];
                System.arraycopy(sectretPwd, 0, saveForReturn, 0, sectretPwd.length);
                byte[] actual = this.catena(sectretPwd, input.salt, input.aData, input.gamma, input.outLen);
                if (this.helper.bytes2hex(actual).equals(this.helper.bytes2hex(input.rHash))) {
                    return saveForReturn;
                }
                ++i;
            }
            return new byte[0];
        }
        return new byte[0];
    }"
main.java.Catena.get_vId,"    public String get_vId() {
        return this._vId;
    }"
main.java.Catena.get_h,"    public HashInterface get_h() {
        return this._h;
    }"
main.java.Catena.get_hPrime,"    public HashInterface get_hPrime() {
        return this._hPrime;
    }"
main.java.Catena.get_gamma,"    public GammaInterface get_gamma() {
        return this._gamma;
    }"
main.java.Catena.get_f,"    public GraphInterface get_f() {
        return this._f;
    }"
main.java.Catena.get_phi,"    public PhiInterface get_phi() {
        return this._phi;
    }"
main.java.Catena.get_d,"    public int get_d() {
        return this._d;
    }"
main.java.Catena.get_n,"    public int get_n() {
        return this._n;
    }"
main.java.Catena.get_k,"    public int get_k() {
        return this._k;
    }"
main.java.Catena.get_gLow,"    public int get_gLow() {
        return this._gLow;
    }"
main.java.Catena.get_gHigh,"    public int get_gHigh() {
        return this._gHigh;
    }"
main.java.Catena.get_lambda,"    public int get_lambda() {
        return this._lambda;
    }"
main.java.DefaultInstances.initButterfly,"    public Catena initButterfly() {
        Catena catena = new Catena();
        Blake2b h = new Blake2b();
        Blake2b_1 hPrime = new Blake2b_1();
        SaltMix gamma = new SaltMix();
        DoubleButterflyGraph f = new DoubleButterflyGraph();
        IndexDBG idx = new IndexDBG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 16;
        int gHigh = 16;
        int lambda = 4;
        String vID = ""Butterfly"";
        catena.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return catena;
    }"
main.java.DefaultInstances.initButterflyFull,"    public Catena initButterflyFull() {
        Catena catena = new Catena();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        SaltMix gamma = new SaltMix();
        DoubleButterflyGraph f = new DoubleButterflyGraph();
        IndexDBG idx = new IndexDBG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 17;
        int gHigh = 17;
        int lambda = 4;
        String vID = ""Butterfly-Full"";
        catena.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return catena;
    }"
main.java.DefaultInstances.initDragonfly,"    public Catena initDragonfly() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        Blake2b_1 hPrime = new Blake2b_1();
        SaltMix gamma = new SaltMix();
        GenericGraph f = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 21;
        int gHigh = 21;
        int lambda = 2;
        String vID = ""Dragonfly"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }"
main.java.DefaultInstances.initDragonflyFull,"    public Catena initDragonflyFull() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        SaltMix gamma = new SaltMix();
        GenericGraph f = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 22;
        int gHigh = 22;
        int lambda = 2;
        String vID = ""Dragonfly-Full"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }"
main.java.DefaultInstances.initHorsefly,"    public Catena initHorsefly() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        boolean useGL = true;
        Argon2CF hPrime = new Argon2CF(useGL);
        IdentityGamma gamma = new IdentityGamma();
        GenericGraph f = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 19;
        int gHigh = 19;
        int lambda = 1;
        String vID = ""Horsefly"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }"
main.java.DefaultInstances.initHorseflyFull,"    public Catena initHorseflyFull() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        IdentityGamma gamma = new IdentityGamma();
        GenericGraph f = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 23;
        int gHigh = 23;
        int lambda = 1;
        String vID = ""Horsefly-Full"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }"
main.java.DefaultInstances.initLanternfly,"    public Catena initLanternfly() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        boolean useGL = false;
        Argon2CF hPrime = new Argon2CF(useGL);
        SaltMix gamma = new SaltMix();
        GenericGraph f = new GenericGraph();
        int l = 3;
        IndexGRG idx = new IndexGRG(l);
        IdentityPhi phi = new IdentityPhi();
        int gLow = 17;
        int gHigh = 17;
        int lambda = 2;
        String vID = ""Lanternfly"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }"
main.java.DefaultInstances.initLanternflyFull,"    public Catena initLanternflyFull() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        SaltMix gamma = new SaltMix();
        GenericGraph f = new GenericGraph();
        int l = 3;
        IndexGRG idx = new IndexGRG(l);
        IdentityPhi phi = new IdentityPhi();
        int gLow = 22;
        int gHigh = 22;
        int lambda = 2;
        String vID = ""Lanternfly-Full"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }"
main.java.DefaultInstances.initMydasfly,"    public Catena initMydasfly() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        boolean useGL = true;
        Argon2CF hPrime = new Argon2CF(useGL);
        IdentityGamma gamma = new IdentityGamma();
        DoubleButterflyGraph f = new DoubleButterflyGraph();
        IndexDBG idx = new IndexDBG();
        LSBIndex idxState = new LSBIndex();
        CatenaPhi phi = new CatenaPhi(idxState);
        int gLow = 14;
        int gHigh = 14;
        int lambda = 2;
        String vID = ""Mydasfly"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }"
main.java.DefaultInstances.initMydasflyFull,"    public Catena initMydasflyFull() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        IdentityGamma gamma = new IdentityGamma();
        DoubleButterflyGraph f = new DoubleButterflyGraph();
        IndexDBG idx = new IndexDBG();
        LSBIndex idxState = new LSBIndex();
        CatenaPhi phi = new CatenaPhi(idxState);
        int gLow = 18;
        int gHigh = 18;
        int lambda = 2;
        String vID = ""Mydasfly-Full"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }"
main.java.DefaultInstances.initStonefly,"    public Catena initStonefly() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        boolean useGL = false;
        Argon2CF hPrime = new Argon2CF(useGL);
        SaltMix gamma = new SaltMix();
        GenericGraph f = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        LSBIndex idxState = new LSBIndex();
        CatenaPhi phi = new CatenaPhi(idxState);
        int gLow = 18;
        int gHigh = 18;
        int lambda = 2;
        String vID = ""Stonefly"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }"
main.java.DefaultInstances.initStoneflyFull,"    public Catena initStoneflyFull() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        SaltMix gamma = new SaltMix();
        GenericGraph f = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        LSBIndex idxState = new LSBIndex();
        CatenaPhi phi = new CatenaPhi(idxState);
        int gLow = 22;
        int gHigh = 22;
        int lambda = 2;
        String vID = ""Stonefly-Full"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }
"
main.java.components.gamma.GammaInterface.setH,
main.java.components.gamma.GammaInterface.setHPrime,
main.java.components.gamma.GammaInterface.gamma,"    public byte[][] gamma(int var1, byte[][] var2, byte[] var3);
"
main.java.components.gamma.algorithms.IdentityGamma.setH,"    public void setH(HashInterface h) {
        this._h = h;
    }"
main.java.components.gamma.algorithms.IdentityGamma.setHPrime,"    public void setHPrime(HashInterface hPrime) {
        this._hPrime = hPrime;
    }"
main.java.components.gamma.algorithms.IdentityGamma.gamma,"    public byte[][] gamma(int g, byte[][] x, byte[] gamma) {
        return x;
    }
"
main.java.components.gamma.algorithms.SaltMix.gamma,"    public byte[][] gamma(int g, byte[][] x, byte[] gamma) {
        byte[] gammaByte = gamma;
        this._h.update(gammaByte);
        byte[] tmp1 = this._h.doFinal();
        this._h.reset();
        this._h.update(tmp1);
        byte[] tmp2 = this._h.doFinal();
        this._h.reset();
        this.transformBytesToLong(tmp1, tmp2);
        this.p = 0;
        long j1 = 0L;
        long j2 = 0L;
        int loopLimit = (int)Math.pow(2.0, Math.ceil(3.0 * (double)g / 4.0));
        this._hPrime.reset();
        int i = 0;
        while (i < loopLimit) {
            j1 = this.xorshift1024star() >>> 64 - g;
            j2 = this.xorshift1024star() >>> 64 - g;
            this._hPrime.update(this.helper.concateByteArrays(x[(int)j1], x[(int)j2]));
            x[(int)j1] = this._hPrime.doFinal();
            ++i;
        }
        return x;
    }"
main.java.components.gamma.algorithms.SaltMix.xorshift1024star,"    public long xorshift1024star() {
        long s0 = this.r[this.p];
        this.p = this.p + 1 & 0xF;
        long s1 = this.r[this.p];
        s1 ^= s1 << 31;
        s1 ^= s1 >>> 11;
        s0 ^= s0 >>> 30;
        this.r[this.p] = s0 ^ s1;
        return this.r[this.p] * 1181783497276652981L;
    }"
main.java.components.gamma.algorithms.SaltMix.transformBytesToLong,"    void transformBytesToLong(byte[] a, byte[] b) {
        this.r = new long[16];
        this.p = 0;
        int sIndex = 0;
        int i = 0;
        while (i < a.length) {
            this.r[sIndex++] = SaltMix.bytes2long(a, i);
            i += 8;
        }
        i = 0;
        while (i < b.length) {
            this.r[sIndex++] = SaltMix.bytes2long(b, i);
            i += 8;
        }
    }"
main.java.components.gamma.algorithms.SaltMix.bytes2long,"    public static final long bytes2long(byte[] byteArray, int offset) {
        return (long)byteArray[offset + 0] & 0xFFL | ((long)byteArray[offset + 1] & 0xFFL) << 8 | ((long)byteArray[offset + 2] & 0xFFL) << 16 | ((long)byteArray[offset + 3] & 0xFFL) << 24 | ((long)byteArray[offset + 4] & 0xFFL) << 32 | ((long)byteArray[offset + 5] & 0xFFL) << 40 | ((long)byteArray[offset + 6] & 0xFFL) << 48 | ((long)byteArray[offset + 7] & 0xFFL) << 56;
    }"
main.java.components.gamma.algorithms.SaltMix.setH,"    public void setH(HashInterface h) {
        this._h = h;
    }"
main.java.components.gamma.algorithms.SaltMix.setHPrime,"    public void setHPrime(HashInterface hPrime) {
        this._hPrime = hPrime;
    }
"
main.java.components.hash.HashInterface.update,
main.java.components.hash.HashInterface.update,
main.java.components.hash.HashInterface.update,
main.java.components.hash.HashInterface.doFinal,
main.java.components.hash.HashInterface.reset,
main.java.components.hash.HashInterface.setVertexIndex,
main.java.components.hash.HashInterface.getName,
main.java.components.hash.HashInterface.getOutputSize,"    public int getOutputSize();
"
main.java.components.hash.algorithms.Argon2CF.update,"    public void update(byte[] message) {
        if (message.length != 2048) {
            return;
        }
        byte[] x = new byte[this.anzByte];
        byte[] y = new byte[this.anzByte];
        System.arraycopy(message, 0, x, 0, this.anzByte);
        System.arraycopy(message, 1024, y, 0, this.anzByte);
        byte[] R = this.helper.xor(x, y);
        byte[] Q = new byte[R.length];
        this.pWrapper(Arrays.copyOfRange(R, 0, 128), 0);
        this.pWrapper(Arrays.copyOfRange(R, 128, 256), 1);
        this.pWrapper(Arrays.copyOfRange(R, 256, 384), 2);
        this.pWrapper(Arrays.copyOfRange(R, 384, 512), 3);
        this.pWrapper(Arrays.copyOfRange(R, 512, 640), 4);
        this.pWrapper(Arrays.copyOfRange(R, 640, 768), 5);
        this.pWrapper(Arrays.copyOfRange(R, 768, 896), 6);
        this.pWrapper(Arrays.copyOfRange(R, 896, 1024), 7);
        int i = 0;
        while (i <= 7) {
            int i0 = i * 2;
            int i1 = i0 + 16;
            int i2 = i1 + 16;
            int i3 = i2 + 16;
            int i4 = i3 + 16;
            int i5 = i4 + 16;
            int i6 = i5 + 16;
            int i7 = i6 + 16;
            this.p(i0, i1, i2, i3, i4, i5, i6, i7);
            ++i;
        }
        i = 0;
        while (i < this._v.length) {
            byte[] tmp = Argon2CF.long2bytes(this._v[i]);
            System.arraycopy(tmp, 0, Q, i * 8, 8);
            ++i;
        }
        this._z = this.helper.xor(R, Q);
    }"
main.java.components.hash.algorithms.Argon2CF.p,"    private void p(int i0, int i1, int i2, int i3, int i4, int i5, int i6, int i7) {
        if (this._useGL) {
            this.GL(i0, i2, i4, i6);
            this.GL(i0 + 1, i2 + 1, i4 + 1, i6 + 1);
            this.GL(i1, i3, i5, i7);
            this.GL(i1 + 1, i3 + 1, i5 + 1, i7 + 1);
            this.GL(i0, i2 + 1, i5, i7 + 1);
            this.GL(i0 + 1, i3, i5 + 1, i6);
            this.GL(i1, i3 + 1, i4, i6 + 1);
            this.GL(i1 + 1, i2, i4 + 1, i7);
        } else {
            this.GB(i0, i2, i4, i6);
            this.GB(i0 + 1, i2 + 1, i4 + 1, i6 + 1);
            this.GB(i1, i3, i5, i7);
            this.GB(i1 + 1, i3 + 1, i5 + 1, i7 + 1);
            this.GB(i0, i2 + 1, i5, i7 + 1);
            this.GB(i0 + 1, i3, i5 + 1, i6);
            this.GB(i1, i3 + 1, i4, i6 + 1);
            this.GB(i1 + 1, i2, i4 + 1, i7);
        }
    }"
main.java.components.hash.algorithms.Argon2CF.pWrapper,"    private void pWrapper(byte[] vIn, int idx) {
        this.pAndInit(Arrays.copyOfRange(vIn, 0, 16), Arrays.copyOfRange(vIn, 16, 32), Arrays.copyOfRange(vIn, 32, 48), Arrays.copyOfRange(vIn, 48, 64), Arrays.copyOfRange(vIn, 64, 80), Arrays.copyOfRange(vIn, 80, 96), Arrays.copyOfRange(vIn, 96, 112), Arrays.copyOfRange(vIn, 112, 128), idx);
    }"
main.java.components.hash.algorithms.Argon2CF.pAndInit,"    private void pAndInit(byte[] p1, byte[] p2, byte[] p3, byte[] p4, byte[] p5, byte[] p6, byte[] p7, byte[] p8, int idx) {
        this._v[0 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p1, 0, 8), 0);
        this._v[1 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p1, 8, 16), 0);
        this._v[2 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p2, 0, 8), 0);
        this._v[3 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p2, 8, 16), 0);
        this._v[4 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p3, 0, 8), 0);
        this._v[5 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p3, 8, 16), 0);
        this._v[6 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p4, 0, 8), 0);
        this._v[7 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p4, 8, 16), 0);
        this._v[8 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p5, 0, 8), 0);
        this._v[9 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p5, 8, 16), 0);
        this._v[10 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p6, 0, 8), 0);
        this._v[11 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p6, 8, 16), 0);
        this._v[12 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p7, 0, 8), 0);
        this._v[13 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p7, 8, 16), 0);
        this._v[14 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p8, 0, 8), 0);
        this._v[15 + idx * 16] = Argon2CF.bytes2long(Arrays.copyOfRange(p8, 8, 16), 0);
        if (this._useGL) {
            this.GL(0 + idx * 16, 4 + idx * 16, 8 + idx * 16, 12 + idx * 16);
            this.GL(1 + idx * 16, 5 + idx * 16, 9 + idx * 16, 13 + idx * 16);
            this.GL(2 + idx * 16, 6 + idx * 16, 10 + idx * 16, 14 + idx * 16);
            this.GL(3 + idx * 16, 7 + idx * 16, 11 + idx * 16, 15 + idx * 16);
            this.GL(0 + idx * 16, 5 + idx * 16, 10 + idx * 16, 15 + idx * 16);
            this.GL(1 + idx * 16, 6 + idx * 16, 11 + idx * 16, 12 + idx * 16);
            this.GL(2 + idx * 16, 7 + idx * 16, 8 + idx * 16, 13 + idx * 16);
            this.GL(3 + idx * 16, 4 + idx * 16, 9 + idx * 16, 14 + idx * 16);
        } else {
            this.GB(0 + idx * 16, 4 + idx * 16, 8 + idx * 16, 12 + idx * 16);
            this.GB(1 + idx * 16, 5 + idx * 16, 9 + idx * 16, 13 + idx * 16);
            this.GB(2 + idx * 16, 6 + idx * 16, 10 + idx * 16, 14 + idx * 16);
            this.GB(3 + idx * 16, 7 + idx * 16, 11 + idx * 16, 15 + idx * 16);
            this.GB(0 + idx * 16, 5 + idx * 16, 10 + idx * 16, 15 + idx * 16);
            this.GB(1 + idx * 16, 6 + idx * 16, 11 + idx * 16, 12 + idx * 16);
            this.GB(2 + idx * 16, 7 + idx * 16, 8 + idx * 16, 13 + idx * 16);
            this.GB(3 + idx * 16, 4 + idx * 16, 9 + idx * 16, 14 + idx * 16);
        }
    }"
main.java.components.hash.algorithms.Argon2CF.doFinal,"    public byte[] doFinal() {
        return this._z;
    }"
main.java.components.hash.algorithms.Argon2CF.GL,"    private void GL(int posA, int posB, int posC, int posD) {
        this._v[posA] = this._v[posA] + this._v[posB];
        this._v[posD] = this.rotr64(this._v[posD] ^ this._v[posA], 32);
        this._v[posC] = this._v[posC] + this._v[posD];
        this._v[posB] = this.rotr64(this._v[posB] ^ this._v[posC], 24);
        this._v[posA] = this._v[posA] + this._v[posB];
        this._v[posD] = this.rotr64(this._v[posD] ^ this._v[posA], 16);
        this._v[posC] = this._v[posC] + this._v[posD];
        this._v[posB] = this.rotr64(this._v[posB] ^ this._v[posC], 63);
    }"
main.java.components.hash.algorithms.Argon2CF.GB,"    private void GB(int posA, int posB, int posC, int posD) {
        this._v[posA] = this._v[posA] + this._v[posB] + 2L * (this._v[posA] & 0xFFFFFFFFL) * (this._v[posB] & 0xFFFFFFFFL);
        this._v[posD] = this.rotr64(this._v[posD] ^ this._v[posA], 32);
        this._v[posC] = this._v[posC] + this._v[posD] + 2L * (this._v[posC] & 0xFFFFFFFFL) * (this._v[posD] & 0xFFFFFFFFL);
        this._v[posB] = this.rotr64(this._v[posB] ^ this._v[posC], 24);
        this._v[posA] = this._v[posA] + this._v[posB] + 2L * (this._v[posA] & 0xFFFFFFFFL) * (this._v[posB] & 0xFFFFFFFFL);
        this._v[posD] = this.rotr64(this._v[posD] ^ this._v[posA], 16);
        this._v[posC] = this._v[posC] + this._v[posD] + 2L * (this._v[posC] & 0xFFFFFFFFL) * (this._v[posD] & 0xFFFFFFFFL);
        this._v[posB] = this.rotr64(this._v[posB] ^ this._v[posC], 63);
    }"
main.java.components.hash.algorithms.Argon2CF.rotr64,"    private long rotr64(long x, int rot) {
        return x >>> rot | x << 64 - rot;
    }"
main.java.components.hash.algorithms.Argon2CF.long2bytes,"    private static final byte[] long2bytes(long longValue) {
        return new byte[]{(byte)longValue, (byte)(longValue >> 8), (byte)(longValue >> 16), (byte)(longValue >> 24), (byte)(longValue >> 32), (byte)(longValue >> 40), (byte)(longValue >> 48), (byte)(longValue >> 56)};
    }"
main.java.components.hash.algorithms.Argon2CF.bytes2long,"    private static final long bytes2long(byte[] byteArray, int offset) {
        return (long)byteArray[offset] & 0xFFL | ((long)byteArray[offset + 1] & 0xFFL) << 8 | ((long)byteArray[offset + 2] & 0xFFL) << 16 | ((long)byteArray[offset + 3] & 0xFFL) << 24 | ((long)byteArray[offset + 4] & 0xFFL) << 32 | ((long)byteArray[offset + 5] & 0xFFL) << 40 | ((long)byteArray[offset + 6] & 0xFFL) << 48 | ((long)byteArray[offset + 7] & 0xFFL) << 56;
    }"
main.java.components.hash.algorithms.Argon2CF.reset,"    public void reset() {
        this._v = new long[128];
    }"
main.java.components.hash.algorithms.Argon2CF.update,"    public void update(byte b) {
    }"
main.java.components.hash.algorithms.Argon2CF.update,"    public void update(byte[] message, int offset, int len) {
    }"
main.java.components.hash.algorithms.Argon2CF.setVertexIndex,"    public void setVertexIndex(int r) {
    }"
main.java.components.hash.algorithms.Argon2CF.getName,"    public String getName() {
        return this.name;
    }"
main.java.components.hash.algorithms.Argon2CF.getOutputSize,"    public int getOutputSize() {
        return this.anzByte;
    }
"
main.java.components.hash.algorithms.Blake2b.init,"    private void init() {
        if (this.chainValue == null) {
            this.chainValue = new long[8];
            this.chainValue[0] = blake2b_IV[0] ^ (long)(this.digestLength | this.keyLength << 8 | 0x1010000);
            this.chainValue[1] = blake2b_IV[1];
            this.chainValue[2] = blake2b_IV[2];
            this.chainValue[3] = blake2b_IV[3];
            this.chainValue[4] = blake2b_IV[4];
            this.chainValue[5] = blake2b_IV[5];
            if (this.salt != null) {
                this.chainValue[4] = this.chainValue[4] ^ Blake2b.bytes2long(this.salt, 0);
                this.chainValue[5] = this.chainValue[5] ^ Blake2b.bytes2long(this.salt, 8);
            }
            this.chainValue[6] = blake2b_IV[6];
            this.chainValue[7] = blake2b_IV[7];
            if (this.personalization != null) {
                this.chainValue[6] = this.chainValue[6] ^ Blake2b.bytes2long(this.personalization, 0);
                this.chainValue[7] = this.chainValue[7] ^ Blake2b.bytes2long(this.personalization, 8);
            }
        }
    }"
main.java.components.hash.algorithms.Blake2b.initializeInternalState,"    private void initializeInternalState() {
        System.arraycopy(this.chainValue, 0, this.internalState, 0, this.chainValue.length);
        System.arraycopy(blake2b_IV, 0, this.internalState, this.chainValue.length, 4);
        this.internalState[12] = this.t0 ^ blake2b_IV[4];
        this.internalState[13] = this.t1 ^ blake2b_IV[5];
        this.internalState[14] = this.f0 ^ blake2b_IV[6];
        this.internalState[15] = blake2b_IV[7];
    }"
main.java.components.hash.algorithms.Blake2b.update,"    public void update(byte[] message) {
        if (message == null) {
            return;
        }
        this.update(message, 0, message.length);
    }"
main.java.components.hash.algorithms.Blake2b.update,"    public void update(byte b) {
        int remainingLength = 0;
        remainingLength = 128 - this.bufferPos;
        if (remainingLength == 0) {
            this.t0 += 128L;
            if (this.t0 == 0L) {
                ++this.t1;
            }
        } else {
            this.buffer[this.bufferPos] = b;
            ++this.bufferPos;
            return;
        }
        this.compress(this.buffer, 0);
        Arrays.fill(this.buffer, (byte)0);
        this.buffer[0] = b;
        this.bufferPos = 1;
    }"
main.java.components.hash.algorithms.Blake2b.update,"    public void update(byte[] message, int offset, int len) {
        if (message == null || len == 0) {
            return;
        }
        int remainingLength = 0;
        if (this.bufferPos != 0) {
            remainingLength = 128 - this.bufferPos;
            if (remainingLength < len) {
                System.arraycopy(message, offset, this.buffer, this.bufferPos, remainingLength);
                this.t0 += 128L;
                if (this.t0 == 0L) {
                    ++this.t1;
                }
                this.compress(this.buffer, 0);
                this.bufferPos = 0;
                Arrays.fill(this.buffer, (byte)0);
            } else {
                System.arraycopy(message, offset, this.buffer, this.bufferPos, len);
                this.bufferPos += len;
                return;
            }
        }
        int messagePos = 0;
        int blockWiseLastPos = offset + len - 128;
        messagePos = offset + remainingLength;
        while (messagePos < blockWiseLastPos) {
            this.t0 += 128L;
            if (this.t0 == 0L) {
                ++this.t1;
            }
            this.compress(message, messagePos);
            messagePos += 128;
        }
        System.arraycopy(message, messagePos, this.buffer, 0, offset + len - messagePos);
        this.bufferPos += offset + len - messagePos;
    }"
main.java.components.hash.algorithms.Blake2b.doFinal,"    public byte[] doFinal() {
        byte[] out = new byte[this.digestLength];
        this.f0 = -1L;
        this.t0 += (long)this.bufferPos;
        if (this.t0 < 0L && (long)this.bufferPos > -this.t0) {
            ++this.t1;
        }
        this.compress(this.buffer, 0);
        this.bufferPos = 0;
        int i = 0;
        while (i < this.chainValue.length) {
            System.arraycopy(Blake2b.long2bytes(this.chainValue[i]), 0, out, i * 8, 8);
            ++i;
        }
        if (this.keyLength == 0) {
            this.reset();
        }
        return out;
    }"
main.java.components.hash.algorithms.Blake2b.reset,"    public void reset() {
        this.bufferPos = 0;
        this.f0 = 0L;
        this.t0 = 0L;
        this.t1 = 0L;
        Arrays.fill(this.buffer, (byte)0);
        Arrays.fill(this.chainValue, 0L);
        Arrays.fill(this.internalState, 0L);
        this.chainValue = null;
        if (this.keyLength > 0) {
            throw new IllegalStateException(""Can not reset keyed Digest"");
        }
        this.init();
    }"
main.java.components.hash.algorithms.Blake2b.compress,"    private void compress(byte[] message, int messagePos) {
        this.initializeInternalState();
        long[] m = new long[16];
        int j = 0;
        while (j < 16) {
            m[j] = Blake2b.bytes2long(message, messagePos + j * 8);
            ++j;
        }
        int round = 0;
        while (round < this.rOUNDS) {
            this.G(m[blake2b_sigma[round][0]], m[blake2b_sigma[round][1]], 0, 4, 8, 12);
            this.G(m[blake2b_sigma[round][2]], m[blake2b_sigma[round][3]], 1, 5, 9, 13);
            this.G(m[blake2b_sigma[round][4]], m[blake2b_sigma[round][5]], 2, 6, 10, 14);
            this.G(m[blake2b_sigma[round][6]], m[blake2b_sigma[round][7]], 3, 7, 11, 15);
            this.G(m[blake2b_sigma[round][8]], m[blake2b_sigma[round][9]], 0, 5, 10, 15);
            this.G(m[blake2b_sigma[round][10]], m[blake2b_sigma[round][11]], 1, 6, 11, 12);
            this.G(m[blake2b_sigma[round][12]], m[blake2b_sigma[round][13]], 2, 7, 8, 13);
            this.G(m[blake2b_sigma[round][14]], m[blake2b_sigma[round][15]], 3, 4, 9, 14);
            ++round;
        }
        int offset = 0;
        while (offset < 8) {
            this.chainValue[offset] = this.chainValue[offset] ^ this.internalState[offset] ^ this.internalState[offset + 8];
            ++offset;
        }
    }"
main.java.components.hash.algorithms.Blake2b.G,"    private void G(long m1, long m2, int posA, int posB, int posC, int posD) {
        this.internalState[posA] = this.internalState[posA] + this.internalState[posB] + m1;
        this.internalState[posD] = this.rotr64(this.internalState[posD] ^ this.internalState[posA], 32);
        this.internalState[posC] = this.internalState[posC] + this.internalState[posD];
        this.internalState[posB] = this.rotr64(this.internalState[posB] ^ this.internalState[posC], 24);
        this.internalState[posA] = this.internalState[posA] + this.internalState[posB] + m2;
        this.internalState[posD] = this.rotr64(this.internalState[posD] ^ this.internalState[posA], 16);
        this.internalState[posC] = this.internalState[posC] + this.internalState[posD];
        this.internalState[posB] = this.rotr64(this.internalState[posB] ^ this.internalState[posC], 63);
    }"
main.java.components.hash.algorithms.Blake2b.rotr64,"    private long rotr64(long x, int rot) {
        return x >>> rot | x << 64 - rot;
    }"
main.java.components.hash.algorithms.Blake2b.getName,"    public String getName() {
        return ""Blake2b"";
    }"
main.java.components.hash.algorithms.Blake2b.long2bytes,"    public static final byte[] long2bytes(long longValue) {
        return new byte[]{(byte)longValue, (byte)(longValue >> 8), (byte)(longValue >> 16), (byte)(longValue >> 24), (byte)(longValue >> 32), (byte)(longValue >> 40), (byte)(longValue >> 48), (byte)(longValue >> 56)};
    }"
main.java.components.hash.algorithms.Blake2b.bytes2long,"    public static final long bytes2long(byte[] byteArray, int offset) {
        return (long)byteArray[offset] & 0xFFL | ((long)byteArray[offset + 1] & 0xFFL) << 8 | ((long)byteArray[offset + 2] & 0xFFL) << 16 | ((long)byteArray[offset + 3] & 0xFFL) << 24 | ((long)byteArray[offset + 4] & 0xFFL) << 32 | ((long)byteArray[offset + 5] & 0xFFL) << 40 | ((long)byteArray[offset + 6] & 0xFFL) << 48 | ((long)byteArray[offset + 7] & 0xFFL) << 56;
    }"
main.java.components.hash.algorithms.Blake2b.setVertexIndex,"    public void setVertexIndex(int vIndex) {
        this._vIndex = vIndex;
    }"
main.java.components.hash.algorithms.Blake2b.getOutputSize,"    public int getOutputSize() {
        return this.digestLength;
    }
"
main.java.components.hash.algorithms.Blake2b_1.init,"    private void init() {
        if (this.chainValue == null) {
            this.chainValue = new long[8];
            this.chainValue[0] = 7640891576939301192L;
            this.chainValue[1] = blake2b_IV[1];
            this.chainValue[2] = blake2b_IV[2];
            this.chainValue[3] = blake2b_IV[3];
            this.chainValue[4] = blake2b_IV[4];
            this.chainValue[5] = blake2b_IV[5];
            this.chainValue[6] = blake2b_IV[6];
            this.chainValue[7] = blake2b_IV[7];
        }
    }"
main.java.components.hash.algorithms.Blake2b_1.initializeInternalState,"    private void initializeInternalState() {
        System.arraycopy(this.chainValue, 0, this.internalState, 0, this.chainValue.length);
        System.arraycopy(blake2b_IV, 0, this.internalState, this.chainValue.length, 4);
        this.internalState[12] = this.t0 ^ blake2b_IV[4];
        this.internalState[13] = this.t1 ^ blake2b_IV[5];
        this.internalState[14] = 0xFFFFFFFFFFFFFFFFL ^ blake2b_IV[6];
        this.internalState[15] = blake2b_IV[7];
    }"
main.java.components.hash.algorithms.Blake2b_1.update,"    public void update(byte[] message) {
        if (message.length == 128) {
            this.update(Arrays.copyOfRange(message, 0, 64), 0, 64);
            this.update(Arrays.copyOfRange(message, 64, 128), 0, 64);
        } else {
            this.update(message, 0, 64);
        }
    }"
main.java.components.hash.algorithms.Blake2b_1.update,"    public void update(byte b) {
    }"
main.java.components.hash.algorithms.Blake2b_1.update,"    public void update(byte[] message, int offset, int len) {
        if (!this.halfBuffer) {
            System.arraycopy(message, offset, this.buffer, 0, 64);
            this.halfBuffer = true;
        } else {
            System.arraycopy(message, offset, this.buffer, 64, 64);
            this.halfBuffer = false;
        }
    }"
main.java.components.hash.algorithms.Blake2b_1.doFinal,"    public byte[] doFinal() {
        byte[] out = new byte[64];
        this.t0 += 128L;
        if (this.t0 == 0L) {
            ++this.t1;
        }
        this.compress(this.buffer, 0);
        this.halfBuffer = false;
        this.vIndex = (this.vIndex + 1) % 12;
        int i = 0;
        while (i < this.chainValue.length) {
            System.arraycopy(Blake2b_1.long2bytes(this.chainValue[i]), 0, out, i * 8, 8);
            ++i;
        }
        return out;
    }"
main.java.components.hash.algorithms.Blake2b_1.reset,"    public void reset() {
        this.halfBuffer = false;
        this.t0 = 0L;
        this.t1 = 0L;
        Arrays.fill(this.buffer, (byte)0);
        Arrays.fill(this.chainValue, 0L);
        Arrays.fill(this.internalState, 0L);
        this.chainValue = null;
        this.vIndex = 0;
        this.init();
    }"
main.java.components.hash.algorithms.Blake2b_1.compress,"    private void compress(byte[] message, int messagePos) {
        this.initializeInternalState();
        long[] m = new long[16];
        int j = 0;
        while (j < 16) {
            m[j] = Blake2b_1.bytes2long(message, messagePos + j * 8);
            ++j;
        }
        this.G(m[blake2b_sigma[this.vIndex][0]], m[blake2b_sigma[this.vIndex][1]], 0, 4, 8, 12);
        this.G(m[blake2b_sigma[this.vIndex][2]], m[blake2b_sigma[this.vIndex][3]], 1, 5, 9, 13);
        this.G(m[blake2b_sigma[this.vIndex][4]], m[blake2b_sigma[this.vIndex][5]], 2, 6, 10, 14);
        this.G(m[blake2b_sigma[this.vIndex][6]], m[blake2b_sigma[this.vIndex][7]], 3, 7, 11, 15);
        this.G(m[blake2b_sigma[this.vIndex][8]], m[blake2b_sigma[this.vIndex][9]], 0, 5, 10, 15);
        this.G(m[blake2b_sigma[this.vIndex][10]], m[blake2b_sigma[this.vIndex][11]], 1, 6, 11, 12);
        this.G(m[blake2b_sigma[this.vIndex][12]], m[blake2b_sigma[this.vIndex][13]], 2, 7, 8, 13);
        this.G(m[blake2b_sigma[this.vIndex][14]], m[blake2b_sigma[this.vIndex][15]], 3, 4, 9, 14);
        int offset = 0;
        while (offset < 8) {
            this.chainValue[offset] = this.chainValue[offset] ^ this.internalState[offset] ^ this.internalState[offset + 8];
            ++offset;
        }
    }"
main.java.components.hash.algorithms.Blake2b_1.G,"    private void G(long m1, long m2, int posA, int posB, int posC, int posD) {
        this.internalState[posA] = this.internalState[posA] + this.internalState[posB] + m1;
        this.internalState[posD] = this.rotr64(this.internalState[posD] ^ this.internalState[posA], 32);
        this.internalState[posC] = this.internalState[posC] + this.internalState[posD];
        this.internalState[posB] = this.rotr64(this.internalState[posB] ^ this.internalState[posC], 24);
        this.internalState[posA] = this.internalState[posA] + this.internalState[posB] + m2;
        this.internalState[posD] = this.rotr64(this.internalState[posD] ^ this.internalState[posA], 16);
        this.internalState[posC] = this.internalState[posC] + this.internalState[posD];
        this.internalState[posB] = this.rotr64(this.internalState[posB] ^ this.internalState[posC], 63);
    }"
main.java.components.hash.algorithms.Blake2b_1.rotr64,"    private long rotr64(long x, int rot) {
        return x >>> rot | x << 64 - rot;
    }"
main.java.components.hash.algorithms.Blake2b_1.getName,"    public String getName() {
        return ""Catena_Blake2b_1"";
    }"
main.java.components.hash.algorithms.Blake2b_1.setVertexIndex,"    public void setVertexIndex(int _vIndex) {
        this.vIndex = _vIndex % 12;
    }"
main.java.components.hash.algorithms.Blake2b_1.long2bytes,"    public static final byte[] long2bytes(long longValue) {
        return new byte[]{(byte)longValue, (byte)(longValue >> 8), (byte)(longValue >> 16), (byte)(longValue >> 24), (byte)(longValue >> 32), (byte)(longValue >> 40), (byte)(longValue >> 48), (byte)(longValue >> 56)};
    }"
main.java.components.hash.algorithms.Blake2b_1.bytes2long,"    public static final long bytes2long(byte[] byteArray, int offset) {
        return (long)byteArray[offset] & 0xFFL | ((long)byteArray[offset + 1] & 0xFFL) << 8 | ((long)byteArray[offset + 2] & 0xFFL) << 16 | ((long)byteArray[offset + 3] & 0xFFL) << 24 | ((long)byteArray[offset + 4] & 0xFFL) << 32 | ((long)byteArray[offset + 5] & 0xFFL) << 40 | ((long)byteArray[offset + 6] & 0xFFL) << 48 | ((long)byteArray[offset + 7] & 0xFFL) << 56;
    }"
main.java.components.hash.algorithms.Blake2b_1.getOutputSize,"    public int getOutputSize() {
        return 64;
    }
"
main.java.components.graph.GraphInterface.graph,
main.java.components.graph.GraphInterface.setH,
main.java.components.graph.GraphInterface.setHPrime,
main.java.components.graph.GraphInterface.setIndexing,"    public void setIndexing(IdxInterface var1);
"
main.java.components.graph.algorithms.DoubleButterflyGraph.graph,"    public byte[][] graph(int g, byte[][] v, int lambda) {
        int dim1 = (int)Math.pow(2.0, g);
        int dim2 = this._hPrime.getOutputSize();
        byte[][] r = new byte[dim1][dim2];
        int jLimit = 2 * g - 1;
        int iLimit = dim1 - 1;
        this._hPrime.reset();
        int k = 1;
        while (k <= lambda) {
            int j = 1;
            while (j <= jLimit) {
                r[0] = this.hFirst(this.helper.concateByteArrays(this.helper.xor(v[dim1 - 1], v[0]), v[(int)this.indexing.getIndex((long)g, (long)j - 1L, 0)]));
                int i = 1;
                while (i <= iLimit) {
                    this._hPrime.update(this.helper.concateByteArrays(this.helper.xor(r[i - 1], v[i]), v[(int)this.indexing.getIndex((long)g, (long)j - 1L, i)]));
                    r[i] = this._hPrime.doFinal();
                    ++i;
                }
                System.arraycopy(r, 0, v, 0, r.length);
                ++j;
            }
            ++k;
        }
        return v;
    }"
main.java.components.graph.algorithms.DoubleButterflyGraph.setH,"    public void setH(HashInterface h) {
        this._h = h;
    }"
main.java.components.graph.algorithms.DoubleButterflyGraph.setHPrime,"    public void setHPrime(HashInterface hPrime) {
        this._hPrime = hPrime;
    }"
main.java.components.graph.algorithms.DoubleButterflyGraph.setIndexing,"    public void setIndexing(IdxInterface idx) {
        this.indexing = idx;
    }"
main.java.components.graph.algorithms.DoubleButterflyGraph.hFirst,"    private byte[] hFirst(byte[] in) {
        int n = this._h.getOutputSize();
        int k = this._hPrime.getOutputSize();
        int l = k / n;
        byte[][] w = new byte[l][n];
        byte[] iByte = new byte[1];
        this._h.update(in);
        w[0] = this._h.doFinal();
        this._h.reset();
        int i = 1;
        while (i <= l - 1) {
            iByte[0] = (byte)i;
            this._h.update(this.helper.concateByteArrays(iByte, w[0]));
            w[i] = this._h.doFinal();
            this._h.reset();
            ++i;
        }
        return this.helper.twoDimByteArrayToOne(w);
    }
"
main.java.components.graph.algorithms.GenericGraph.graph,"    public byte[][] graph(int g, byte[][] v, int lambda) {
        int dim1 = (int)Math.pow(2.0, g);
        int dim2 = this._hPrime.getOutputSize();
        byte[][] r = new byte[dim1][dim2];
        int k = 0;
        while (k < lambda) {
            r[0] = this.hFirst(this.helper.concateByteArrays(v[dim1 - 1], v[this.indexing.getIndex(0, g)]));
            int loop = (int)Math.pow(2.0, g);
            int i = 1;
            while (i < loop) {
                this._hPrime.update(this.helper.concateByteArrays(r[i - 1], v[this.indexing.getIndex(i, g)]));
                r[i] = this._hPrime.doFinal();
                ++i;
            }
            System.arraycopy(r, 0, v, 0, r.length);
            ++k;
        }
        return v;
    }"
main.java.components.graph.algorithms.GenericGraph.hFirst,"    private byte[] hFirst(byte[] in) {
        int n = this._h.getOutputSize();
        int k = this._hPrime.getOutputSize();
        int l = k / n;
        byte[][] w = new byte[l][n];
        byte[] iByte = new byte[1];
        this._h.update(in);
        w[0] = this._h.doFinal();
        this._h.reset();
        int i = 1;
        while (i < l) {
            iByte[0] = (byte)i;
            this._h.update(this.helper.concateByteArrays(iByte, w[0]));
            w[i] = this._h.doFinal();
            this._h.reset();
            ++i;
        }
        return this.helper.twoDimByteArrayToOne(w);
    }"
main.java.components.graph.algorithms.GenericGraph.setH,"    public void setH(HashInterface h) {
        this._h = h;
    }"
main.java.components.graph.algorithms.GenericGraph.setHPrime,"    public void setHPrime(HashInterface hPrime) {
        this._hPrime = hPrime;
    }"
main.java.components.graph.algorithms.GenericGraph.setIndexing,"    public void setIndexing(IdxInterface idx) {
        this.indexing = idx;
    }
"
main.java.components.graph.algorithms.IdxInterface.getIndex,
main.java.components.graph.algorithms.IdxInterface.getIndex,
main.java.components.graph.algorithms.IdxInterface.getIndex,
main.java.components.graph.algorithms.IdxInterface.getIndex,"    public long getIndex(long var1, long var3, int var5);
"
main.java.components.graph.algorithms.index.IndexBRG.getIndex,"    public int getIndex(int x, int g) {
        boolean[] bool1 = new boolean[g];
        boolean[] bool2 = new boolean[g];
        String tmp = Integer.toBinaryString(x);
        int i = 0;
        while (i < tmp.length()) {
            if (tmp.charAt(i) == '1') {
                bool1[i + g - tmp.length()] = true;
            }
            ++i;
        }
        int b1size = bool1.length;
        int i2 = 0;
        while (i2 < b1size) {
            boolean b = bool1[i2];
            if (b) {
                bool2[g - 1 - i2] = true;
            }
            ++i2;
        }
        int n = 0;
        int l = bool2.length;
        int i3 = 0;
        while (i3 < l) {
            n = (n << 1) + (bool2[i3] ? 1 : 0);
            ++i3;
        }
        return n;
    }"
main.java.components.graph.algorithms.index.IndexBRG.getIndex,"    public long getIndex(long x, int g) {
        boolean[] bool1 = new boolean[g];
        boolean[] bool2 = new boolean[g];
        String tmp = Long.toBinaryString(x);
        int i = 0;
        while (i < tmp.length()) {
            if (tmp.charAt(i) == '1') {
                bool1[i + g - tmp.length()] = true;
            }
            ++i;
        }
        int b1size = bool1.length;
        int i2 = 0;
        while (i2 < b1size) {
            boolean b = bool1[i2];
            if (b) {
                bool2[g - 1 - i2] = true;
            }
            ++i2;
        }
        long n = 0L;
        long l = bool2.length;
        int i3 = 0;
        while ((long)i3 < l) {
            n = (n << 1) + (long)(bool2[i3] ? 1 : 0);
            ++i3;
        }
        return n;
    }"
main.java.components.graph.algorithms.index.IndexBRG.getIndex,"    public int getIndex(int i, int j, int g) {
        return -1;
    }"
main.java.components.graph.algorithms.index.IndexBRG.getIndex,"    public long getIndex(long i, long j, int g) {
        return -1L;
    }
"
main.java.components.graph.algorithms.index.IndexSBRG.getIndex,"    public int getIndex(int i, int g) {
        IndexBRG brg = new IndexBRG();
        return brg.getIndex(i, g) + this._c & (1 << g) - 1;
    }"
main.java.components.graph.algorithms.index.IndexSBRG.getIndex,"    public long getIndex(long i, int g) {
        IndexBRG brg = new IndexBRG();
        return brg.getIndex(i, g) + (long)this._c & (long)((1 << g) - 1);
    }"
main.java.components.graph.algorithms.index.IndexSBRG.getIndex,"    public int getIndex(int i, int j, int g) {
        return 0;
    }"
main.java.components.graph.algorithms.index.IndexSBRG.getIndex,"    public long getIndex(long i, long j, int g) {
        return 0L;
    }
"
main.java.components.graph.algorithms.index.IndexGRG.getIndex,"    public int getIndex(int i, int g) {
        IndexBRG brg = new IndexBRG();
        return brg.getIndex(i, g) ^ brg.getIndex((1 << g) - 1 - i, g) >> (int)Math.ceil((float)g / (float)this._l);
    }"
main.java.components.graph.algorithms.index.IndexGRG.getIndex,"    public long getIndex(long i, int g) {
        IndexBRG brg = new IndexBRG();
        return brg.getIndex(i, g) ^ brg.getIndex((long)((1 << g) - 1) - i, g) >> (int)Math.ceil((float)g / (float)this._l);
    }"
main.java.components.graph.algorithms.index.IndexGRG.getIndex,"    public int getIndex(int i, int j, int g) {
        return -1;
    }"
main.java.components.graph.algorithms.index.IndexGRG.getIndex,"    public long getIndex(long i, long j, int g) {
        return -1L;
    }
"
main.java.components.graph.algorithms.index.IndexDBG.getIndex,"    public int getIndex(int g, int j, int i) {
        return (int)this.getIndex((long)g, (long)j, i);
    }"
main.java.components.graph.algorithms.index.IndexDBG.getIndex,"    public long getIndex(long g, long j, int i) {
        if (j <= g - 1L) {
            long tmp = 1L << (int)(g - 1L - j);
            return tmp ^ (long)i;
        }
        long tmp = 1L << (int)(j - g + 1L);
        return tmp ^ (long)i;
    }"
main.java.components.graph.algorithms.index.IndexDBG.getIndex,"    public int getIndex(int i, int g) {
        return -1;
    }"
main.java.components.graph.algorithms.index.IndexDBG.getIndex,"    public long getIndex(long i, int g) {
        return -1L;
    }
"
main.java.components.phi.PhiInterface.phi,
main.java.components.phi.PhiInterface.setH,
main.java.components.phi.PhiInterface.setHPrime,"    public void setHPrime(HashInterface var1);
"
main.java.components.phi.algorithms.IdxStateInterface.getLsbIndex,"    public int getLsbIndex(byte[] var1, int var2);
"
main.java.components.phi.algorithms.CatenaPhi.phi,"    public byte[][] phi(int garlic, byte[][] b, byte[] m) {
        int j = this._idx.getLsbIndex(m, garlic);
        byte[][] tmp = new byte[b.length][this._h.getOutputSize()];
        System.arraycopy(b, 0, tmp, 0, b.length);
        this._hPrime.update(this.helper.concateByteArrays(b[b.length - 1], b[j]));
        tmp[0] = this._hPrime.doFinal();
        this._hPrime.reset();
        int i = 1;
        while (i < b.length) {
            j = this._idx.getLsbIndex(tmp[i - 1], garlic);
            this._hPrime.update(this.helper.concateByteArrays(tmp[i - 1], tmp[j]));
            tmp[i] = this._hPrime.doFinal();
            this._hPrime.reset();
            ++i;
        }
        return tmp;
    }"
main.java.components.phi.algorithms.CatenaPhi.setH,"    public void setH(HashInterface h) {
        this._h = h;
    }"
main.java.components.phi.algorithms.CatenaPhi.setHPrime,"    public void setHPrime(HashInterface hPrime) {
        this._hPrime = hPrime;
    }
"
main.java.components.phi.algorithms.IdentityPhi.phi,"    public byte[][] phi(int garlic, byte[][] b, byte[] m) {
        return b;
    }"
main.java.components.phi.algorithms.IdentityPhi.setH,"    public void setH(HashInterface h) {
        this._h = h;
    }"
main.java.components.phi.algorithms.IdentityPhi.setHPrime,"    public void setHPrime(HashInterface hPrime) {
        this._hPrime = hPrime;
    }
"
main.java.components.phi.algorithms.index.LSBIndex.getLsbIndex,"    public int getLsbIndex(byte[] state, int garlic) {
        int bytes = garlic + 7 >>> 3;
        int shiftBits = (8 - garlic % 8) % 8;
        int mask = 255 >>> shiftBits;
        int len = state.length;
        int first = len - bytes;
        int val = 0;
        val = state[first] & mask;
        int i = first + 1;
        while (i < len) {
            val = val << 8 | state[i] & 0xFF;
            ++i;
        }
        return val;
    }
"
com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator,
com.fasterxml.jackson.core.PrettyPrinter.writeStartObject,
com.fasterxml.jackson.core.PrettyPrinter.writeEndObject,
com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator,
com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator,
com.fasterxml.jackson.core.PrettyPrinter.writeStartArray,
com.fasterxml.jackson.core.PrettyPrinter.writeEndArray,
com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator,
com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues,
com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries,"    public void beforeObjectEntries(JsonGenerator var1) throws IOException, JsonGenerationException;
"
com.fasterxml.jackson.core.JsonProcessingException.getLocation,"    public JsonLocation getLocation() {
        return this._location;
    }"
com.fasterxml.jackson.core.JsonProcessingException.getOriginalMessage,"    public String getOriginalMessage() {
        return super.getMessage();
    }"
com.fasterxml.jackson.core.JsonProcessingException.getProcessor,"    public Object getProcessor() {
        return null;
    }"
com.fasterxml.jackson.core.JsonProcessingException.getMessageSuffix,"    protected String getMessageSuffix() {
        return null;
    }"
com.fasterxml.jackson.core.JsonProcessingException.getMessage,"    public String getMessage() {
        String msg = super.getMessage();
        if (msg == null) {
            msg = ""N/A"";
        }
        JsonLocation loc = this.getLocation();
        String suffix = this.getMessageSuffix();
        if (loc != null || suffix != null) {
            StringBuilder sb = new StringBuilder(100);
            sb.append(msg);
            if (suffix != null) {
                sb.append(suffix);
            }
            if (loc != null) {
                sb.append('\n');
                sb.append("" at "");
                sb.append(loc.toString());
            }
            msg = sb.toString();
        }
        return msg;
    }"
com.fasterxml.jackson.core.JsonProcessingException.toString,"    public String toString() {
        return this.getClass().getName() + "": "" + this.getMessage();
    }
"
com.fasterxml.jackson.core.JsonPointer.compile,"    public static JsonPointer compile(String input) throws IllegalArgumentException {
        if (input == null || input.length() == 0) {
            return EMPTY;
        }
        if (input.charAt(0) != '/') {
            throw new IllegalArgumentException(""Invalid input: JSON Pointer expression must start with '/': \"""" + input + ""\"""");
        }
        return JsonPointer._parseTail(input);
    }"
com.fasterxml.jackson.core.JsonPointer.valueOf,"    public static JsonPointer valueOf(String input) {
        return JsonPointer.compile(input);
    }"
com.fasterxml.jackson.core.JsonPointer.matches,"    public boolean matches() {
        return this._nextSegment == null;
    }"
com.fasterxml.jackson.core.JsonPointer.getMatchingProperty,"    public String getMatchingProperty() {
        return this._matchingPropertyName;
    }"
com.fasterxml.jackson.core.JsonPointer.getMatchingIndex,"    public int getMatchingIndex() {
        return this._matchingElementIndex;
    }"
com.fasterxml.jackson.core.JsonPointer.mayMatchProperty,"    public boolean mayMatchProperty() {
        return this._matchingPropertyName != null;
    }"
com.fasterxml.jackson.core.JsonPointer.mayMatchElement,"    public boolean mayMatchElement() {
        return this._matchingElementIndex >= 0;
    }"
com.fasterxml.jackson.core.JsonPointer.last,"    public JsonPointer last() {
        JsonPointer next;
        JsonPointer current = this;
        if (current == EMPTY) {
            return null;
        }
        while ((next = current._nextSegment) != EMPTY) {
            current = next;
        }
        return current;
    }"
com.fasterxml.jackson.core.JsonPointer.append,"    public JsonPointer append(JsonPointer tail) {
        if (this == EMPTY) {
            return tail;
        }
        if (tail == EMPTY) {
            return this;
        }
        String currentJsonPointer = this._asString;
        if (currentJsonPointer.endsWith(""/"")) {
            currentJsonPointer = currentJsonPointer.substring(0, currentJsonPointer.length() - 1);
        }
        return JsonPointer.compile(currentJsonPointer + tail._asString);
    }"
com.fasterxml.jackson.core.JsonPointer.matchesProperty,"    public boolean matchesProperty(String name) {
        return this._nextSegment != null && this._matchingPropertyName.equals(name);
    }"
com.fasterxml.jackson.core.JsonPointer.matchProperty,"    public JsonPointer matchProperty(String name) {
        if (this._nextSegment != null && this._matchingPropertyName.equals(name)) {
            return this._nextSegment;
        }
        return null;
    }"
com.fasterxml.jackson.core.JsonPointer.matchesElement,"    public boolean matchesElement(int index) {
        return index == this._matchingElementIndex && index >= 0;
    }"
com.fasterxml.jackson.core.JsonPointer.matchElement,"    public JsonPointer matchElement(int index) {
        if (index != this._matchingElementIndex || index < 0) {
            return null;
        }
        return this._nextSegment;
    }"
com.fasterxml.jackson.core.JsonPointer.tail,"    public JsonPointer tail() {
        return this._nextSegment;
    }"
com.fasterxml.jackson.core.JsonPointer.head,"    public JsonPointer head() {
        JsonPointer h = this._head;
        if (h == null) {
            if (this != EMPTY) {
                h = this._constructHead();
            }
            this._head = h;
        }
        return h;
    }"
com.fasterxml.jackson.core.JsonPointer.toString,"    public String toString() {
        return this._asString;
    }"
com.fasterxml.jackson.core.JsonPointer.hashCode,"    public int hashCode() {
        return this._asString.hashCode();
    }"
com.fasterxml.jackson.core.JsonPointer.equals,"    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (o == null) {
            return false;
        }
        if (!(o instanceof JsonPointer)) {
            return false;
        }
        return this._asString.equals(((JsonPointer)o)._asString);
    }"
com.fasterxml.jackson.core.JsonPointer._parseIndex,"    private static final int _parseIndex(String str) {
        long l;
        int len = str.length();
        if (len == 0 || len > 10) {
            return -1;
        }
        char c = str.charAt(0);
        if (c <= '0') {
            return len == 1 && c == '0' ? 0 : -1;
        }
        if (c > '9') {
            return -1;
        }
        for (int i = 1; i < len; ++i) {
            c = str.charAt(i);
            if (c <= '9' && c >= '0') continue;
            return -1;
        }
        if (len == 10 && (l = NumberInput.parseLong(str)) > Integer.MAX_VALUE) {
            return -1;
        }
        return NumberInput.parseInt(str);
    }"
com.fasterxml.jackson.core.JsonPointer._parseTail,"    protected static JsonPointer _parseTail(String input) {
        int end = input.length();
        int i = 1;
        while (i < end) {
            char c = input.charAt(i);
            if (c == '/') {
                return new JsonPointer(input, input.substring(1, i), JsonPointer._parseTail(input.substring(i)));
            }
            if (c != '~' || ++i >= end) continue;
            return JsonPointer._parseQuotedTail(input, i);
        }
        return new JsonPointer(input, input.substring(1), EMPTY);
    }"
com.fasterxml.jackson.core.JsonPointer._parseQuotedTail,"    protected static JsonPointer _parseQuotedTail(String input, int i) {
        int end = input.length();
        StringBuilder sb = new StringBuilder(Math.max(16, end));
        if (i > 2) {
            sb.append(input, 1, i - 1);
        }
        JsonPointer._appendEscape(sb, input.charAt(i++));
        while (i < end) {
            char c = input.charAt(i);
            if (c == '/') {
                return new JsonPointer(input, sb.toString(), JsonPointer._parseTail(input.substring(i)));
            }
            if (c == '~' && ++i < end) {
                JsonPointer._appendEscape(sb, input.charAt(i++));
                continue;
            }
            sb.append(c);
        }
        return new JsonPointer(input, sb.toString(), EMPTY);
    }"
com.fasterxml.jackson.core.JsonPointer._constructHead,"    protected JsonPointer _constructHead() {
        JsonPointer last = this.last();
        if (last == this) {
            return EMPTY;
        }
        int suffixLength = last._asString.length();
        JsonPointer next = this._nextSegment;
        return new JsonPointer(this._asString.substring(0, this._asString.length() - suffixLength), this._matchingPropertyName, this._matchingElementIndex, next._constructHead(suffixLength, last));
    }"
com.fasterxml.jackson.core.JsonPointer._constructHead,"    protected JsonPointer _constructHead(int suffixLength, JsonPointer last) {
        if (this == last) {
            return EMPTY;
        }
        JsonPointer next = this._nextSegment;
        String str = this._asString;
        return new JsonPointer(str.substring(0, str.length() - suffixLength), this._matchingPropertyName, this._matchingElementIndex, next._constructHead(suffixLength, last));
    }"
com.fasterxml.jackson.core.JsonPointer._appendEscape,"    private static void _appendEscape(StringBuilder sb, char c) {
        if (c == '0') {
            c = (char)126;
        } else if (c == '1') {
            c = (char)47;
        } else {
            sb.append('~');
        }
        sb.append(c);
    }
"
com.fasterxml.jackson.core.JsonToken.id,"    public final int id() {
        return this._id;
    }"
com.fasterxml.jackson.core.JsonToken.asString,"    public final String asString() {
        return this._serialized;
    }"
com.fasterxml.jackson.core.JsonToken.asCharArray,"    public final char[] asCharArray() {
        return this._serializedChars;
    }"
com.fasterxml.jackson.core.JsonToken.asByteArray,"    public final byte[] asByteArray() {
        return this._serializedBytes;
    }"
com.fasterxml.jackson.core.JsonToken.isNumeric,"    public final boolean isNumeric() {
        return this._isNumber;
    }"
com.fasterxml.jackson.core.JsonToken.isStructStart,"    public final boolean isStructStart() {
        return this._isStructStart;
    }"
com.fasterxml.jackson.core.JsonToken.isStructEnd,"    public final boolean isStructEnd() {
        return this._isStructEnd;
    }"
com.fasterxml.jackson.core.JsonToken.isScalarValue,"    public final boolean isScalarValue() {
        return this._isScalar;
    }"
com.fasterxml.jackson.core.JsonToken.isBoolean,"    public final boolean isBoolean() {
        return this._isBoolean;
    }
"
com.fasterxml.jackson.core.TreeNode.asToken,
com.fasterxml.jackson.core.TreeNode.numberType,
com.fasterxml.jackson.core.TreeNode.size,
com.fasterxml.jackson.core.TreeNode.isValueNode,
com.fasterxml.jackson.core.TreeNode.isContainerNode,
com.fasterxml.jackson.core.TreeNode.isMissingNode,
com.fasterxml.jackson.core.TreeNode.isArray,
com.fasterxml.jackson.core.TreeNode.isObject,
com.fasterxml.jackson.core.TreeNode.get,
com.fasterxml.jackson.core.TreeNode.get,
com.fasterxml.jackson.core.TreeNode.path,
com.fasterxml.jackson.core.TreeNode.path,
com.fasterxml.jackson.core.TreeNode.fieldNames,
com.fasterxml.jackson.core.TreeNode.at,
com.fasterxml.jackson.core.TreeNode.at,
com.fasterxml.jackson.core.TreeNode.traverse,
com.fasterxml.jackson.core.TreeNode.traverse,"    public JsonParser traverse(ObjectCodec var1);
"
com.fasterxml.jackson.core.JsonFactory.copy,"    public JsonFactory copy() {
        this._checkInvalidCopy(JsonFactory.class);
        return new JsonFactory(this, null);
    }"
com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy,"    protected void _checkInvalidCopy(Class<?> exp) {
        if (this.getClass() != exp) {
            throw new IllegalStateException(""Failed copy(): "" + this.getClass().getName() + "" (version: "" + this.version() + "") does not override copy(); it has to"");
        }
    }"
com.fasterxml.jackson.core.JsonFactory.readResolve,"    protected Object readResolve() {
        return new JsonFactory(this, this._objectCodec);
    }"
com.fasterxml.jackson.core.JsonFactory.requiresPropertyOrdering,"    public boolean requiresPropertyOrdering() {
        return false;
    }"
com.fasterxml.jackson.core.JsonFactory.canHandleBinaryNatively,"    public boolean canHandleBinaryNatively() {
        return false;
    }"
com.fasterxml.jackson.core.JsonFactory.canUseCharArrays,"    public boolean canUseCharArrays() {
        return true;
    }"
com.fasterxml.jackson.core.JsonFactory.getFormatReadFeatureType,"    public Class<? extends FormatFeature> getFormatReadFeatureType() {
        return null;
    }"
com.fasterxml.jackson.core.JsonFactory.getFormatWriteFeatureType,"    public Class<? extends FormatFeature> getFormatWriteFeatureType() {
        return null;
    }"
com.fasterxml.jackson.core.JsonFactory.canUseSchema,"    public boolean canUseSchema(FormatSchema schema) {
        if (schema == null) {
            return false;
        }
        String ourFormat = this.getFormatName();
        return ourFormat != null && ourFormat.equals(schema.getSchemaType());
    }"
com.fasterxml.jackson.core.JsonFactory.getFormatName,"    public String getFormatName() {
        if (this.getClass() == JsonFactory.class) {
            return FORMAT_NAME_JSON;
        }
        return null;
    }"
com.fasterxml.jackson.core.JsonFactory.hasFormat,"    public MatchStrength hasFormat(InputAccessor acc) throws IOException {
        if (this.getClass() == JsonFactory.class) {
            return this.hasJSONFormat(acc);
        }
        return null;
    }"
com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec,"    public boolean requiresCustomCodec() {
        return false;
    }"
com.fasterxml.jackson.core.JsonFactory.hasJSONFormat,"    protected MatchStrength hasJSONFormat(InputAccessor acc) throws IOException {
        return ByteSourceJsonBootstrapper.hasJSONFormat(acc);
    }"
com.fasterxml.jackson.core.JsonFactory.version,"    public Version version() {
        return PackageVersion.VERSION;
    }"
com.fasterxml.jackson.core.JsonFactory.configure,"    public final JsonFactory configure(Feature f, boolean state) {
        return state ? this.enable(f) : this.disable(f);
    }"
com.fasterxml.jackson.core.JsonFactory.enable,"    public JsonFactory enable(Feature f) {
        this._factoryFeatures |= f.getMask();
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.disable,"    public JsonFactory disable(Feature f) {
        this._factoryFeatures &= ~f.getMask();
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.isEnabled,"    public final boolean isEnabled(Feature f) {
        return (this._factoryFeatures & f.getMask()) != 0;
    }"
com.fasterxml.jackson.core.JsonFactory.configure,"    public final JsonFactory configure(JsonParser.Feature f, boolean state) {
        return state ? this.enable(f) : this.disable(f);
    }"
com.fasterxml.jackson.core.JsonFactory.enable,"    public JsonFactory enable(JsonParser.Feature f) {
        this._parserFeatures |= f.getMask();
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.disable,"    public JsonFactory disable(JsonParser.Feature f) {
        this._parserFeatures &= ~f.getMask();
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.isEnabled,"    public final boolean isEnabled(JsonParser.Feature f) {
        return (this._parserFeatures & f.getMask()) != 0;
    }"
com.fasterxml.jackson.core.JsonFactory.getInputDecorator,"    public InputDecorator getInputDecorator() {
        return this._inputDecorator;
    }"
com.fasterxml.jackson.core.JsonFactory.setInputDecorator,"    public JsonFactory setInputDecorator(InputDecorator d) {
        this._inputDecorator = d;
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.configure,"    public final JsonFactory configure(JsonGenerator.Feature f, boolean state) {
        return state ? this.enable(f) : this.disable(f);
    }"
com.fasterxml.jackson.core.JsonFactory.enable,"    public JsonFactory enable(JsonGenerator.Feature f) {
        this._generatorFeatures |= f.getMask();
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.disable,"    public JsonFactory disable(JsonGenerator.Feature f) {
        this._generatorFeatures &= ~f.getMask();
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.isEnabled,"    public final boolean isEnabled(JsonGenerator.Feature f) {
        return (this._generatorFeatures & f.getMask()) != 0;
    }"
com.fasterxml.jackson.core.JsonFactory.getCharacterEscapes,"    public CharacterEscapes getCharacterEscapes() {
        return this._characterEscapes;
    }"
com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes,"    public JsonFactory setCharacterEscapes(CharacterEscapes esc) {
        this._characterEscapes = esc;
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.getOutputDecorator,"    public OutputDecorator getOutputDecorator() {
        return this._outputDecorator;
    }"
com.fasterxml.jackson.core.JsonFactory.setOutputDecorator,"    public JsonFactory setOutputDecorator(OutputDecorator d) {
        this._outputDecorator = d;
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator,"    public JsonFactory setRootValueSeparator(String sep) {
        this._rootValueSeparator = sep == null ? null : new SerializedString(sep);
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.getRootValueSeparator,"    public String getRootValueSeparator() {
        return this._rootValueSeparator == null ? null : this._rootValueSeparator.getValue();
    }"
com.fasterxml.jackson.core.JsonFactory.setCodec,"    public JsonFactory setCodec(ObjectCodec oc) {
        this._objectCodec = oc;
        return this;
    }"
com.fasterxml.jackson.core.JsonFactory.getCodec,"    public ObjectCodec getCodec() {
        return this._objectCodec;
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(File f) throws IOException, JsonParseException {
        IOContext ctxt = this._createContext(f, true);
        FileInputStream in = new FileInputStream(f);
        return this._createParser(this._decorate(in, ctxt), ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(URL url) throws IOException, JsonParseException {
        IOContext ctxt = this._createContext(url, true);
        InputStream in = this._optimizedStreamFromURL(url);
        return this._createParser(this._decorate(in, ctxt), ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(InputStream in) throws IOException, JsonParseException {
        IOContext ctxt = this._createContext(in, false);
        return this._createParser(this._decorate(in, ctxt), ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(Reader r) throws IOException, JsonParseException {
        IOContext ctxt = this._createContext(r, false);
        return this._createParser(this._decorate(r, ctxt), ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(byte[] data) throws IOException, JsonParseException {
        InputStream in;
        IOContext ctxt = this._createContext(data, true);
        if (this._inputDecorator != null && (in = this._inputDecorator.decorate(ctxt, data, 0, data.length)) != null) {
            return this._createParser(in, ctxt);
        }
        return this._createParser(data, 0, data.length, ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(byte[] data, int offset, int len) throws IOException, JsonParseException {
        InputStream in;
        IOContext ctxt = this._createContext(data, true);
        if (this._inputDecorator != null && (in = this._inputDecorator.decorate(ctxt, data, offset, len)) != null) {
            return this._createParser(in, ctxt);
        }
        return this._createParser(data, offset, len, ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(String content) throws IOException, JsonParseException {
        int strLen = content.length();
        if (this._inputDecorator != null || strLen > 32768 || !this.canUseCharArrays()) {
            return this.createParser(new StringReader(content));
        }
        IOContext ctxt = this._createContext(content, true);
        char[] buf = ctxt.allocTokenBuffer(strLen);
        content.getChars(0, strLen, buf, 0);
        return this._createParser(buf, 0, strLen, ctxt, true);
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(char[] content) throws IOException {
        return this.createParser(content, 0, content.length);
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(char[] content, int offset, int len) throws IOException {
        if (this._inputDecorator != null) {
            return this.createParser(new CharArrayReader(content, offset, len));
        }
        return this._createParser(content, offset, len, this._createContext(content, true), false);
    }"
com.fasterxml.jackson.core.JsonFactory.createParser,"    public JsonParser createParser(DataInput in) throws IOException {
        IOContext ctxt = this._createContext(in, false);
        return this._createParser(this._decorate(in, ctxt), ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonParser,"    public JsonParser createJsonParser(File f) throws IOException, JsonParseException {
        return this.createParser(f);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonParser,"    public JsonParser createJsonParser(URL url) throws IOException, JsonParseException {
        return this.createParser(url);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonParser,"    public JsonParser createJsonParser(InputStream in) throws IOException, JsonParseException {
        return this.createParser(in);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonParser,"    public JsonParser createJsonParser(Reader r) throws IOException, JsonParseException {
        return this.createParser(r);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonParser,"    public JsonParser createJsonParser(byte[] data) throws IOException, JsonParseException {
        return this.createParser(data);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonParser,"    public JsonParser createJsonParser(byte[] data, int offset, int len) throws IOException, JsonParseException {
        return this.createParser(data, offset, len);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonParser,"    public JsonParser createJsonParser(String content) throws IOException, JsonParseException {
        return this.createParser(content);
    }"
com.fasterxml.jackson.core.JsonFactory.createGenerator,"    public JsonGenerator createGenerator(OutputStream out, JsonEncoding enc) throws IOException {
        IOContext ctxt = this._createContext(out, false);
        ctxt.setEncoding(enc);
        if (enc == JsonEncoding.UTF8) {
            return this._createUTF8Generator(this._decorate(out, ctxt), ctxt);
        }
        Writer w = this._createWriter(out, enc, ctxt);
        return this._createGenerator(this._decorate(w, ctxt), ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createGenerator,"    public JsonGenerator createGenerator(OutputStream out) throws IOException {
        return this.createGenerator(out, JsonEncoding.UTF8);
    }"
com.fasterxml.jackson.core.JsonFactory.createGenerator,"    public JsonGenerator createGenerator(Writer w) throws IOException {
        IOContext ctxt = this._createContext(w, false);
        return this._createGenerator(this._decorate(w, ctxt), ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createGenerator,"    public JsonGenerator createGenerator(File f, JsonEncoding enc) throws IOException {
        FileOutputStream out = new FileOutputStream(f);
        IOContext ctxt = this._createContext(out, true);
        ctxt.setEncoding(enc);
        if (enc == JsonEncoding.UTF8) {
            return this._createUTF8Generator(this._decorate(out, ctxt), ctxt);
        }
        Writer w = this._createWriter(out, enc, ctxt);
        return this._createGenerator(this._decorate(w, ctxt), ctxt);
    }"
com.fasterxml.jackson.core.JsonFactory.createGenerator,"    public JsonGenerator createGenerator(DataOutput out, JsonEncoding enc) throws IOException {
        return this.createGenerator(this._createDataOutputWrapper(out), enc);
    }"
com.fasterxml.jackson.core.JsonFactory.createGenerator,"    public JsonGenerator createGenerator(DataOutput out) throws IOException {
        return this.createGenerator(this._createDataOutputWrapper(out), JsonEncoding.UTF8);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonGenerator,"    public JsonGenerator createJsonGenerator(OutputStream out, JsonEncoding enc) throws IOException {
        return this.createGenerator(out, enc);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonGenerator,"    public JsonGenerator createJsonGenerator(Writer out) throws IOException {
        return this.createGenerator(out);
    }"
com.fasterxml.jackson.core.JsonFactory.createJsonGenerator,"    public JsonGenerator createJsonGenerator(OutputStream out) throws IOException {
        return this.createGenerator(out, JsonEncoding.UTF8);
    }"
com.fasterxml.jackson.core.JsonFactory._createParser,"    protected JsonParser _createParser(InputStream in, IOContext ctxt) throws IOException {
        return new ByteSourceJsonBootstrapper(ctxt, in).constructParser(this._parserFeatures, this._objectCodec, this._byteSymbolCanonicalizer, this._rootCharSymbols, this._factoryFeatures);
    }"
com.fasterxml.jackson.core.JsonFactory._createParser,"    protected JsonParser _createParser(Reader r, IOContext ctxt) throws IOException {
        return new ReaderBasedJsonParser(ctxt, this._parserFeatures, r, this._objectCodec, this._rootCharSymbols.makeChild(this._factoryFeatures));
    }"
com.fasterxml.jackson.core.JsonFactory._createParser,"    protected JsonParser _createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable) throws IOException {
        return new ReaderBasedJsonParser(ctxt, this._parserFeatures, null, this._objectCodec, this._rootCharSymbols.makeChild(this._factoryFeatures), data, offset, offset + len, recyclable);
    }"
com.fasterxml.jackson.core.JsonFactory._createParser,"    protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException {
        return new ByteSourceJsonBootstrapper(ctxt, data, offset, len).constructParser(this._parserFeatures, this._objectCodec, this._byteSymbolCanonicalizer, this._rootCharSymbols, this._factoryFeatures);
    }"
com.fasterxml.jackson.core.JsonFactory._createParser,"    protected JsonParser _createParser(DataInput input, IOContext ctxt) throws IOException {
        String format = this.getFormatName();
        if (format != FORMAT_NAME_JSON) {
            throw new UnsupportedOperationException(String.format(""InputData source not (yet?) support for this format (%s)"", format));
        }
        int firstByte = ByteSourceJsonBootstrapper.skipUTF8BOM(input);
        ByteQuadsCanonicalizer can = this._byteSymbolCanonicalizer.makeChild(this._factoryFeatures);
        return new UTF8DataInputJsonParser(ctxt, this._parserFeatures, input, this._objectCodec, can, firstByte);
    }"
com.fasterxml.jackson.core.JsonFactory._createGenerator,"    protected JsonGenerator _createGenerator(Writer out, IOContext ctxt) throws IOException {
        SerializableString rootSep;
        WriterBasedJsonGenerator gen = new WriterBasedJsonGenerator(ctxt, this._generatorFeatures, this._objectCodec, out);
        if (this._characterEscapes != null) {
            gen.setCharacterEscapes(this._characterEscapes);
        }
        if ((rootSep = this._rootValueSeparator) != DEFAULT_ROOT_VALUE_SEPARATOR) {
            gen.setRootValueSeparator(rootSep);
        }
        return gen;
    }"
com.fasterxml.jackson.core.JsonFactory._createUTF8Generator,"    protected JsonGenerator _createUTF8Generator(OutputStream out, IOContext ctxt) throws IOException {
        SerializableString rootSep;
        UTF8JsonGenerator gen = new UTF8JsonGenerator(ctxt, this._generatorFeatures, this._objectCodec, out);
        if (this._characterEscapes != null) {
            gen.setCharacterEscapes(this._characterEscapes);
        }
        if ((rootSep = this._rootValueSeparator) != DEFAULT_ROOT_VALUE_SEPARATOR) {
            gen.setRootValueSeparator(rootSep);
        }
        return gen;
    }"
com.fasterxml.jackson.core.JsonFactory._createWriter,"    protected Writer _createWriter(OutputStream out, JsonEncoding enc, IOContext ctxt) throws IOException {
        if (enc == JsonEncoding.UTF8) {
            return new UTF8Writer(ctxt, out);
        }
        return new OutputStreamWriter(out, enc.getJavaName());
    }"
com.fasterxml.jackson.core.JsonFactory._decorate,"    protected final InputStream _decorate(InputStream in, IOContext ctxt) throws IOException {
        InputStream in2;
        if (this._inputDecorator != null && (in2 = this._inputDecorator.decorate(ctxt, in)) != null) {
            return in2;
        }
        return in;
    }"
com.fasterxml.jackson.core.JsonFactory._decorate,"    protected final Reader _decorate(Reader in, IOContext ctxt) throws IOException {
        Reader in2;
        if (this._inputDecorator != null && (in2 = this._inputDecorator.decorate(ctxt, in)) != null) {
            return in2;
        }
        return in;
    }"
com.fasterxml.jackson.core.JsonFactory._decorate,"    protected final DataInput _decorate(DataInput in, IOContext ctxt) throws IOException {
        DataInput in2;
        if (this._inputDecorator != null && (in2 = this._inputDecorator.decorate(ctxt, in)) != null) {
            return in2;
        }
        return in;
    }"
com.fasterxml.jackson.core.JsonFactory._decorate,"    protected final OutputStream _decorate(OutputStream out, IOContext ctxt) throws IOException {
        OutputStream out2;
        if (this._outputDecorator != null && (out2 = this._outputDecorator.decorate(ctxt, out)) != null) {
            return out2;
        }
        return out;
    }"
com.fasterxml.jackson.core.JsonFactory._decorate,"    protected final Writer _decorate(Writer out, IOContext ctxt) throws IOException {
        Writer out2;
        if (this._outputDecorator != null && (out2 = this._outputDecorator.decorate(ctxt, out)) != null) {
            return out2;
        }
        return out;
    }"
com.fasterxml.jackson.core.JsonFactory._getBufferRecycler,"    public BufferRecycler _getBufferRecycler() {
        if (this.isEnabled(Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING)) {
            BufferRecycler br;
            SoftReference<BufferRecycler> ref = _recyclerRef.get();
            BufferRecycler bufferRecycler = br = ref == null ? null : ref.get();
            if (br == null) {
                br = new BufferRecycler();
                _recyclerRef.set(new SoftReference<BufferRecycler>(br));
            }
            return br;
        }
        return new BufferRecycler();
    }"
com.fasterxml.jackson.core.JsonFactory._createContext,"    protected IOContext _createContext(Object srcRef, boolean resourceManaged) {
        return new IOContext(this._getBufferRecycler(), srcRef, resourceManaged);
    }"
com.fasterxml.jackson.core.JsonFactory._createDataOutputWrapper,"    protected OutputStream _createDataOutputWrapper(DataOutput out) {
        return new DataOutputAsStream(out);
    }"
com.fasterxml.jackson.core.JsonFactory._optimizedStreamFromURL,"    protected InputStream _optimizedStreamFromURL(URL url) throws IOException {
        String path;
        String host;
        if (""file"".equals(url.getProtocol()) && ((host = url.getHost()) == null || host.length() == 0) && (path = url.getPath()).indexOf(37) < 0) {
            return new FileInputStream(url.getPath());
        }
        return url.openStream();
    }"
com.fasterxml.jackson.core.JsonFactory.collectDefaults,"        public static int collectDefaults() {
            int flags = 0;
            for (Feature f : Feature.values()) {
                if (!f.enabledByDefault()) continue;
                flags |= f.getMask();
            }
            return flags;
        }"
com.fasterxml.jackson.core.JsonFactory.enabledByDefault,"        public boolean enabledByDefault() {
            return this._defaultState;
        }"
com.fasterxml.jackson.core.JsonFactory.enabledIn,"        public boolean enabledIn(int flags) {
            return (flags & this.getMask()) != 0;
        }"
com.fasterxml.jackson.core.JsonFactory.getMask,"        public int getMask() {
            return 1 << this.ordinal();
        }
    "
com.fasterxml.jackson.core.FormatFeature.enabledByDefault,
com.fasterxml.jackson.core.FormatFeature.getMask,
com.fasterxml.jackson.core.FormatFeature.enabledIn,"    public boolean enabledIn(int var1);
"
com.fasterxml.jackson.core.ObjectCodec.version,
com.fasterxml.jackson.core.ObjectCodec.readValue,
com.fasterxml.jackson.core.ObjectCodec.readValue,
com.fasterxml.jackson.core.ObjectCodec.readValue,
com.fasterxml.jackson.core.ObjectCodec.readValues,
com.fasterxml.jackson.core.ObjectCodec.readValues,
com.fasterxml.jackson.core.ObjectCodec.readValues,
com.fasterxml.jackson.core.ObjectCodec.writeValue,
com.fasterxml.jackson.core.ObjectCodec.readTree,
com.fasterxml.jackson.core.ObjectCodec.writeTree,
com.fasterxml.jackson.core.ObjectCodec.createObjectNode,
com.fasterxml.jackson.core.ObjectCodec.createArrayNode,
com.fasterxml.jackson.core.ObjectCodec.treeAsTokens,
com.fasterxml.jackson.core.ObjectCodec.treeToValue,
com.fasterxml.jackson.core.ObjectCodec.getJsonFactory,"    public JsonFactory getJsonFactory() {
        return this.getFactory();
    }"
com.fasterxml.jackson.core.ObjectCodec.getFactory,"    public JsonFactory getFactory() {
        return this.getJsonFactory();
    }
"
com.fasterxml.jackson.core.SerializableString.getValue,
com.fasterxml.jackson.core.SerializableString.charLength,
com.fasterxml.jackson.core.SerializableString.asQuotedChars,
com.fasterxml.jackson.core.SerializableString.asUnquotedUTF8,
com.fasterxml.jackson.core.SerializableString.asQuotedUTF8,
com.fasterxml.jackson.core.SerializableString.appendQuotedUTF8,
com.fasterxml.jackson.core.SerializableString.appendQuoted,
com.fasterxml.jackson.core.SerializableString.appendUnquotedUTF8,
com.fasterxml.jackson.core.SerializableString.appendUnquoted,
com.fasterxml.jackson.core.SerializableString.writeQuotedUTF8,
com.fasterxml.jackson.core.SerializableString.writeUnquotedUTF8,
com.fasterxml.jackson.core.SerializableString.putQuotedUTF8,
com.fasterxml.jackson.core.SerializableString.putUnquotedUTF8,"    public int putUnquotedUTF8(ByteBuffer var1) throws IOException;
"
com.fasterxml.jackson.core.JsonStreamContext.getParent,
com.fasterxml.jackson.core.JsonStreamContext.inArray,"    public final boolean inArray() {
        return this._type == 1;
    }"
com.fasterxml.jackson.core.JsonStreamContext.inRoot,"    public final boolean inRoot() {
        return this._type == 0;
    }"
com.fasterxml.jackson.core.JsonStreamContext.inObject,"    public final boolean inObject() {
        return this._type == 2;
    }"
com.fasterxml.jackson.core.JsonStreamContext.getTypeDesc,"    public final String getTypeDesc() {
        switch (this._type) {
            case 0: {
                return ""ROOT"";
            }
            case 1: {
                return ""ARRAY"";
            }
            case 2: {
                return ""OBJECT"";
            }
        }
        return ""?"";
    }"
com.fasterxml.jackson.core.JsonStreamContext.typeDesc,"    public String typeDesc() {
        switch (this._type) {
            case 0: {
                return ""root"";
            }
            case 1: {
                return ""Array"";
            }
            case 2: {
                return ""Object"";
            }
        }
        return ""?"";
    }"
com.fasterxml.jackson.core.JsonStreamContext.getEntryCount,"    public final int getEntryCount() {
        return this._index + 1;
    }"
com.fasterxml.jackson.core.JsonStreamContext.getCurrentIndex,"    public final int getCurrentIndex() {
        return this._index < 0 ? 0 : this._index;
    }"
com.fasterxml.jackson.core.JsonStreamContext.getCurrentName,
com.fasterxml.jackson.core.JsonStreamContext.getCurrentValue,"    public Object getCurrentValue() {
        return null;
    }"
com.fasterxml.jackson.core.JsonStreamContext.setCurrentValue,"    public void setCurrentValue(Object v) {
    }
"
com.fasterxml.jackson.core.TreeCodec.readTree,
com.fasterxml.jackson.core.TreeCodec.writeTree,
com.fasterxml.jackson.core.TreeCodec.createArrayNode,
com.fasterxml.jackson.core.TreeCodec.createObjectNode,
com.fasterxml.jackson.core.TreeCodec.treeAsTokens,"    public abstract JsonParser treeAsTokens(TreeNode var1);
"
com.fasterxml.jackson.core.JsonEncoding.getJavaName,"    public String getJavaName() {
        return this._javaName;
    }"
com.fasterxml.jackson.core.JsonEncoding.isBigEndian,"    public boolean isBigEndian() {
        return this._bigEndian;
    }"
com.fasterxml.jackson.core.JsonEncoding.bits,"    public int bits() {
        return this._bits;
    }
"
com.fasterxml.jackson.core.Base64Variants.getDefaultVariant,"    public static Base64Variant getDefaultVariant() {
        return MIME_NO_LINEFEEDS;
    }"
com.fasterxml.jackson.core.Base64Variants.valueOf,"    public static Base64Variant valueOf(String name) throws IllegalArgumentException {
        if (Base64Variants.MIME._name.equals(name)) {
            return MIME;
        }
        if (Base64Variants.MIME_NO_LINEFEEDS._name.equals(name)) {
            return MIME_NO_LINEFEEDS;
        }
        if (Base64Variants.PEM._name.equals(name)) {
            return PEM;
        }
        if (Base64Variants.MODIFIED_FOR_URL._name.equals(name)) {
            return MODIFIED_FOR_URL;
        }
        name = name == null ? ""<null>"" : ""'"" + name + ""'"";
        throw new IllegalArgumentException(""No Base64Variant with name "" + name);
    }"
com.fasterxml.jackson.core.Versioned.version,"    public Version version();
"
com.fasterxml.jackson.core.JsonGenerator.setCodec,
com.fasterxml.jackson.core.JsonGenerator.getCodec,
com.fasterxml.jackson.core.JsonGenerator.version,
com.fasterxml.jackson.core.JsonGenerator.enable,
com.fasterxml.jackson.core.JsonGenerator.disable,
com.fasterxml.jackson.core.JsonGenerator.configure,"    public final JsonGenerator configure(Feature f, boolean state) {
        if (state) {
            this.enable(f);
        } else {
            this.disable(f);
        }
        return this;
    }"
com.fasterxml.jackson.core.JsonGenerator.isEnabled,
com.fasterxml.jackson.core.JsonGenerator.getFeatureMask,
com.fasterxml.jackson.core.JsonGenerator.setFeatureMask,
com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures,"    public JsonGenerator overrideStdFeatures(int values, int mask) {
        int oldState = this.getFeatureMask();
        int newState = oldState & ~mask | values & mask;
        return this.setFeatureMask(newState);
    }"
com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures,"    public int getFormatFeatures() {
        return 0;
    }"
com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures,"    public JsonGenerator overrideFormatFeatures(int values, int mask) {
        throw new IllegalArgumentException(""No FormatFeatures defined for generator of type "" + this.getClass().getName());
    }"
com.fasterxml.jackson.core.JsonGenerator.setSchema,"    public void setSchema(FormatSchema schema) {
        throw new UnsupportedOperationException(""Generator of type "" + this.getClass().getName() + "" does not support schema of type '"" + schema.getSchemaType() + ""'"");
    }"
com.fasterxml.jackson.core.JsonGenerator.getSchema,"    public FormatSchema getSchema() {
        return null;
    }"
com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter,"    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {
        this._cfgPrettyPrinter = pp;
        return this;
    }"
com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter,"    public PrettyPrinter getPrettyPrinter() {
        return this._cfgPrettyPrinter;
    }"
com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter,
com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar,"    public JsonGenerator setHighestNonEscapedChar(int charCode) {
        return this;
    }"
com.fasterxml.jackson.core.JsonGenerator.getHighestEscapedChar,"    public int getHighestEscapedChar() {
        return 0;
    }"
com.fasterxml.jackson.core.JsonGenerator.getCharacterEscapes,"    public CharacterEscapes getCharacterEscapes() {
        return null;
    }"
com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes,"    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {
        return this;
    }"
com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator,"    public JsonGenerator setRootValueSeparator(SerializableString sep) {
        throw new UnsupportedOperationException();
    }"
com.fasterxml.jackson.core.JsonGenerator.getOutputTarget,"    public Object getOutputTarget() {
        return null;
    }"
com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered,"    public int getOutputBuffered() {
        return -1;
    }"
com.fasterxml.jackson.core.JsonGenerator.getCurrentValue,"    public Object getCurrentValue() {
        JsonStreamContext ctxt = this.getOutputContext();
        return ctxt == null ? null : ctxt.getCurrentValue();
    }"
com.fasterxml.jackson.core.JsonGenerator.setCurrentValue,"    public void setCurrentValue(Object v) {
        JsonStreamContext ctxt = this.getOutputContext();
        if (ctxt != null) {
            ctxt.setCurrentValue(v);
        }
    }"
com.fasterxml.jackson.core.JsonGenerator.canUseSchema,"    public boolean canUseSchema(FormatSchema schema) {
        return false;
    }"
com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId,"    public boolean canWriteObjectId() {
        return false;
    }"
com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId,"    public boolean canWriteTypeId() {
        return false;
    }"
com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively,"    public boolean canWriteBinaryNatively() {
        return false;
    }"
com.fasterxml.jackson.core.JsonGenerator.canOmitFields,"    public boolean canOmitFields() {
        return true;
    }"
com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers,"    public boolean canWriteFormattedNumbers() {
        return false;
    }"
com.fasterxml.jackson.core.JsonGenerator.writeStartArray,
com.fasterxml.jackson.core.JsonGenerator.writeStartArray,"    public void writeStartArray(int size) throws IOException {
        this.writeStartArray();
    }"
com.fasterxml.jackson.core.JsonGenerator.writeEndArray,
com.fasterxml.jackson.core.JsonGenerator.writeStartObject,
com.fasterxml.jackson.core.JsonGenerator.writeStartObject,"    public void writeStartObject(Object forValue) throws IOException {
        this.writeStartObject();
        this.setCurrentValue(forValue);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeEndObject,
com.fasterxml.jackson.core.JsonGenerator.writeFieldName,
com.fasterxml.jackson.core.JsonGenerator.writeFieldName,
com.fasterxml.jackson.core.JsonGenerator.writeFieldId,"    public void writeFieldId(long id) throws IOException {
        this.writeFieldName(Long.toString(id));
    }"
com.fasterxml.jackson.core.JsonGenerator.writeArray,"    public void writeArray(int[] array, int offset, int length) throws IOException {
        if (array == null) {
            throw new IllegalArgumentException(""null array"");
        }
        this._verifyOffsets(array.length, offset, length);
        this.writeStartArray();
        int end = offset + length;
        for (int i = offset; i < end; ++i) {
            this.writeNumber(array[i]);
        }
        this.writeEndArray();
    }"
com.fasterxml.jackson.core.JsonGenerator.writeArray,"    public void writeArray(long[] array, int offset, int length) throws IOException {
        if (array == null) {
            throw new IllegalArgumentException(""null array"");
        }
        this._verifyOffsets(array.length, offset, length);
        this.writeStartArray();
        int end = offset + length;
        for (int i = offset; i < end; ++i) {
            this.writeNumber(array[i]);
        }
        this.writeEndArray();
    }"
com.fasterxml.jackson.core.JsonGenerator.writeArray,"    public void writeArray(double[] array, int offset, int length) throws IOException {
        if (array == null) {
            throw new IllegalArgumentException(""null array"");
        }
        this._verifyOffsets(array.length, offset, length);
        this.writeStartArray();
        int end = offset + length;
        for (int i = offset; i < end; ++i) {
            this.writeNumber(array[i]);
        }
        this.writeEndArray();
    }"
com.fasterxml.jackson.core.JsonGenerator.writeString,
com.fasterxml.jackson.core.JsonGenerator.writeString,
com.fasterxml.jackson.core.JsonGenerator.writeString,
com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String,
com.fasterxml.jackson.core.JsonGenerator.writeUTF8String,
com.fasterxml.jackson.core.JsonGenerator.writeRaw,
com.fasterxml.jackson.core.JsonGenerator.writeRaw,
com.fasterxml.jackson.core.JsonGenerator.writeRaw,
com.fasterxml.jackson.core.JsonGenerator.writeRaw,
com.fasterxml.jackson.core.JsonGenerator.writeRaw,"    public void writeRaw(SerializableString raw) throws IOException {
        this.writeRaw(raw.getValue());
    }"
com.fasterxml.jackson.core.JsonGenerator.writeRawValue,
com.fasterxml.jackson.core.JsonGenerator.writeRawValue,
com.fasterxml.jackson.core.JsonGenerator.writeRawValue,
com.fasterxml.jackson.core.JsonGenerator.writeRawValue,"    public void writeRawValue(SerializableString raw) throws IOException {
        this.writeRawValue(raw.getValue());
    }"
com.fasterxml.jackson.core.JsonGenerator.writeBinary,
com.fasterxml.jackson.core.JsonGenerator.writeBinary,"    public void writeBinary(byte[] data, int offset, int len) throws IOException {
        this.writeBinary(Base64Variants.getDefaultVariant(), data, offset, len);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeBinary,"    public void writeBinary(byte[] data) throws IOException {
        this.writeBinary(Base64Variants.getDefaultVariant(), data, 0, data.length);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeBinary,"    public int writeBinary(InputStream data, int dataLength) throws IOException {
        return this.writeBinary(Base64Variants.getDefaultVariant(), data, dataLength);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeBinary,
com.fasterxml.jackson.core.JsonGenerator.writeNumber,"    public void writeNumber(short v) throws IOException {
        this.writeNumber((int)v);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeNumber,
com.fasterxml.jackson.core.JsonGenerator.writeNumber,
com.fasterxml.jackson.core.JsonGenerator.writeNumber,
com.fasterxml.jackson.core.JsonGenerator.writeNumber,
com.fasterxml.jackson.core.JsonGenerator.writeNumber,
com.fasterxml.jackson.core.JsonGenerator.writeNumber,
com.fasterxml.jackson.core.JsonGenerator.writeNumber,
com.fasterxml.jackson.core.JsonGenerator.writeBoolean,
com.fasterxml.jackson.core.JsonGenerator.writeNull,
com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject,"    public void writeEmbeddedObject(Object object) throws IOException {
        if (object == null) {
            this.writeNull();
            return;
        }
        if (object instanceof byte[]) {
            this.writeBinary((byte[])object);
            return;
        }
        throw new JsonGenerationException(""No native support for writing embedded objects of type "" + object.getClass().getName(), this);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeObjectId,"    public void writeObjectId(Object id) throws IOException {
        throw new JsonGenerationException(""No native support for writing Object Ids"", this);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeObjectRef,"    public void writeObjectRef(Object id) throws IOException {
        throw new JsonGenerationException(""No native support for writing Object Ids"", this);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeTypeId,"    public void writeTypeId(Object id) throws IOException {
        throw new JsonGenerationException(""No native support for writing Type Ids"", this);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeObject,
com.fasterxml.jackson.core.JsonGenerator.writeTree,
com.fasterxml.jackson.core.JsonGenerator.writeStringField,"    public void writeStringField(String fieldName, String value) throws IOException {
        this.writeFieldName(fieldName);
        this.writeString(value);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeBooleanField,"    public final void writeBooleanField(String fieldName, boolean value) throws IOException {
        this.writeFieldName(fieldName);
        this.writeBoolean(value);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeNullField,"    public final void writeNullField(String fieldName) throws IOException {
        this.writeFieldName(fieldName);
        this.writeNull();
    }"
com.fasterxml.jackson.core.JsonGenerator.writeNumberField,"    public final void writeNumberField(String fieldName, int value) throws IOException {
        this.writeFieldName(fieldName);
        this.writeNumber(value);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeNumberField,"    public final void writeNumberField(String fieldName, long value) throws IOException {
        this.writeFieldName(fieldName);
        this.writeNumber(value);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeNumberField,"    public final void writeNumberField(String fieldName, double value) throws IOException {
        this.writeFieldName(fieldName);
        this.writeNumber(value);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeNumberField,"    public final void writeNumberField(String fieldName, float value) throws IOException {
        this.writeFieldName(fieldName);
        this.writeNumber(value);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeNumberField,"    public final void writeNumberField(String fieldName, BigDecimal value) throws IOException {
        this.writeFieldName(fieldName);
        this.writeNumber(value);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeBinaryField,"    public final void writeBinaryField(String fieldName, byte[] data) throws IOException {
        this.writeFieldName(fieldName);
        this.writeBinary(data);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart,"    public final void writeArrayFieldStart(String fieldName) throws IOException {
        this.writeFieldName(fieldName);
        this.writeStartArray();
    }"
com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart,"    public final void writeObjectFieldStart(String fieldName) throws IOException {
        this.writeFieldName(fieldName);
        this.writeStartObject();
    }"
com.fasterxml.jackson.core.JsonGenerator.writeObjectField,"    public final void writeObjectField(String fieldName, Object pojo) throws IOException {
        this.writeFieldName(fieldName);
        this.writeObject(pojo);
    }"
com.fasterxml.jackson.core.JsonGenerator.writeOmittedField,"    public void writeOmittedField(String fieldName) throws IOException {
    }"
com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent,"    public void copyCurrentEvent(JsonParser p) throws IOException {
        JsonToken t = p.currentToken();
        if (t == null) {
            this._reportError(""No current event to copy"");
        }
        switch (t.id()) {
            case -1: {
                this._reportError(""No current event to copy"");
                break;
            }
            case 1: {
                this.writeStartObject();
                break;
            }
            case 2: {
                this.writeEndObject();
                break;
            }
            case 3: {
                this.writeStartArray();
                break;
            }
            case 4: {
                this.writeEndArray();
                break;
            }
            case 5: {
                this.writeFieldName(p.getCurrentName());
                break;
            }
            case 6: {
                if (p.hasTextCharacters()) {
                    this.writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());
                    break;
                }
                this.writeString(p.getText());
                break;
            }
            case 7: {
                JsonParser.NumberType n = p.getNumberType();
                if (n == JsonParser.NumberType.INT) {
                    this.writeNumber(p.getIntValue());
                    break;
                }
                if (n == JsonParser.NumberType.BIG_INTEGER) {
                    this.writeNumber(p.getBigIntegerValue());
                    break;
                }
                this.writeNumber(p.getLongValue());
                break;
            }
            case 8: {
                JsonParser.NumberType n = p.getNumberType();
                if (n == JsonParser.NumberType.BIG_DECIMAL) {
                    this.writeNumber(p.getDecimalValue());
                    break;
                }
                if (n == JsonParser.NumberType.FLOAT) {
                    this.writeNumber(p.getFloatValue());
                    break;
                }
                this.writeNumber(p.getDoubleValue());
                break;
            }
            case 9: {
                this.writeBoolean(true);
                break;
            }
            case 10: {
                this.writeBoolean(false);
                break;
            }
            case 11: {
                this.writeNull();
                break;
            }
            case 12: {
                this.writeObject(p.getEmbeddedObject());
                break;
            }
            default: {
                this._throwInternal();
            }
        }
    }"
com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure,"    public void copyCurrentStructure(JsonParser p) throws IOException {
        int id;
        JsonToken t = p.currentToken();
        if (t == null) {
            this._reportError(""No current event to copy"");
        }
        if ((id = t.id()) == 5) {
            this.writeFieldName(p.getCurrentName());
            t = p.nextToken();
            id = t.id();
        }
        switch (id) {
            case 1: {
                this.writeStartObject();
                while (p.nextToken() != JsonToken.END_OBJECT) {
                    this.copyCurrentStructure(p);
                }
                this.writeEndObject();
                break;
            }
            case 3: {
                this.writeStartArray();
                while (p.nextToken() != JsonToken.END_ARRAY) {
                    this.copyCurrentStructure(p);
                }
                this.writeEndArray();
                break;
            }
            default: {
                this.copyCurrentEvent(p);
            }
        }
    }"
com.fasterxml.jackson.core.JsonGenerator.getOutputContext,
com.fasterxml.jackson.core.JsonGenerator.flush,
com.fasterxml.jackson.core.JsonGenerator.isClosed,
com.fasterxml.jackson.core.JsonGenerator.close,
com.fasterxml.jackson.core.JsonGenerator._reportError,"    protected void _reportError(String msg) throws JsonGenerationException {
        throw new JsonGenerationException(msg, this);
    }"
com.fasterxml.jackson.core.JsonGenerator._throwInternal,"    protected final void _throwInternal() {
        VersionUtil.throwInternal();
    }"
com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation,"    protected void _reportUnsupportedOperation() {
        throw new UnsupportedOperationException(""Operation not supported by generator of type "" + this.getClass().getName());
    }"
com.fasterxml.jackson.core.JsonGenerator._verifyOffsets,"    protected final void _verifyOffsets(int arrayLength, int offset, int length) {
        if (offset < 0 || offset + length > arrayLength) {
            throw new IllegalArgumentException(String.format(""invalid argument(s) (offset=%d, length=%d) for input array of %d element"", offset, length, arrayLength));
        }
    }"
com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject,"    protected void _writeSimpleObject(Object value) throws IOException {
        if (value == null) {
            this.writeNull();
            return;
        }
        if (value instanceof String) {
            this.writeString((String)value);
            return;
        }
        if (value instanceof Number) {
            Number n = (Number)value;
            if (n instanceof Integer) {
                this.writeNumber(n.intValue());
                return;
            }
            if (n instanceof Long) {
                this.writeNumber(n.longValue());
                return;
            }
            if (n instanceof Double) {
                this.writeNumber(n.doubleValue());
                return;
            }
            if (n instanceof Float) {
                this.writeNumber(n.floatValue());
                return;
            }
            if (n instanceof Short) {
                this.writeNumber(n.shortValue());
                return;
            }
            if (n instanceof Byte) {
                this.writeNumber(n.byteValue());
                return;
            }
            if (n instanceof BigInteger) {
                this.writeNumber((BigInteger)n);
                return;
            }
            if (n instanceof BigDecimal) {
                this.writeNumber((BigDecimal)n);
                return;
            }
            if (n instanceof AtomicInteger) {
                this.writeNumber(((AtomicInteger)n).get());
                return;
            }
            if (n instanceof AtomicLong) {
                this.writeNumber(((AtomicLong)n).get());
                return;
            }
        } else {
            if (value instanceof byte[]) {
                this.writeBinary((byte[])value);
                return;
            }
            if (value instanceof Boolean) {
                this.writeBoolean((Boolean)value);
                return;
            }
            if (value instanceof AtomicBoolean) {
                this.writeBoolean(((AtomicBoolean)value).get());
                return;
            }
        }
        throw new IllegalStateException(""No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed "" + value.getClass().getName() + "")"");
    }"
com.fasterxml.jackson.core.JsonGenerator.collectDefaults,"        public static int collectDefaults() {
            int flags = 0;
            for (Feature f : Feature.values()) {
                if (!f.enabledByDefault()) continue;
                flags |= f.getMask();
            }
            return flags;
        }"
com.fasterxml.jackson.core.JsonGenerator.enabledByDefault,"        public boolean enabledByDefault() {
            return this._defaultState;
        }"
com.fasterxml.jackson.core.JsonGenerator.enabledIn,"        public boolean enabledIn(int flags) {
            return (flags & this._mask) != 0;
        }"
com.fasterxml.jackson.core.JsonGenerator.getMask,"        public int getMask() {
            return this._mask;
        }
    "
com.fasterxml.jackson.core.JsonGenerationException.withGenerator,"    public JsonGenerationException withGenerator(JsonGenerator g) {
        this._processor = g;
        return this;
    }"
com.fasterxml.jackson.core.JsonGenerationException.getProcessor,"    public JsonGenerator getProcessor() {
        return this._processor;
    }
"
com.fasterxml.jackson.core.JsonParser.getCodec,
com.fasterxml.jackson.core.JsonParser.setCodec,
com.fasterxml.jackson.core.JsonParser.getInputSource,"    public Object getInputSource() {
        return null;
    }"
com.fasterxml.jackson.core.JsonParser.getCurrentValue,"    public Object getCurrentValue() {
        JsonStreamContext ctxt = this.getParsingContext();
        return ctxt == null ? null : ctxt.getCurrentValue();
    }"
com.fasterxml.jackson.core.JsonParser.setCurrentValue,"    public void setCurrentValue(Object v) {
        JsonStreamContext ctxt = this.getParsingContext();
        if (ctxt != null) {
            ctxt.setCurrentValue(v);
        }
    }"
com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError,"    public void setRequestPayloadOnError(RequestPayload payload) {
        this._requestPayload = payload;
    }"
com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError,"    public void setRequestPayloadOnError(byte[] payload, String charset) {
        this._requestPayload = payload == null ? null : new RequestPayload(payload, charset);
    }"
com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError,"    public void setRequestPayloadOnError(String payload) {
        this._requestPayload = payload == null ? null : new RequestPayload(payload);
    }"
com.fasterxml.jackson.core.JsonParser.setSchema,"    public void setSchema(FormatSchema schema) {
        throw new UnsupportedOperationException(""Parser of type "" + this.getClass().getName() + "" does not support schema of type '"" + schema.getSchemaType() + ""'"");
    }"
com.fasterxml.jackson.core.JsonParser.getSchema,"    public FormatSchema getSchema() {
        return null;
    }"
com.fasterxml.jackson.core.JsonParser.canUseSchema,"    public boolean canUseSchema(FormatSchema schema) {
        return false;
    }"
com.fasterxml.jackson.core.JsonParser.requiresCustomCodec,"    public boolean requiresCustomCodec() {
        return false;
    }"
com.fasterxml.jackson.core.JsonParser.version,
com.fasterxml.jackson.core.JsonParser.close,
com.fasterxml.jackson.core.JsonParser.releaseBuffered,"    public int releaseBuffered(OutputStream out) throws IOException {
        return -1;
    }"
com.fasterxml.jackson.core.JsonParser.releaseBuffered,"    public int releaseBuffered(Writer w) throws IOException {
        return -1;
    }"
com.fasterxml.jackson.core.JsonParser.enable,"    public JsonParser enable(Feature f) {
        this._features |= f.getMask();
        return this;
    }"
com.fasterxml.jackson.core.JsonParser.disable,"    public JsonParser disable(Feature f) {
        this._features &= ~f.getMask();
        return this;
    }"
com.fasterxml.jackson.core.JsonParser.configure,"    public JsonParser configure(Feature f, boolean state) {
        if (state) {
            this.enable(f);
        } else {
            this.disable(f);
        }
        return this;
    }"
com.fasterxml.jackson.core.JsonParser.isEnabled,"    public boolean isEnabled(Feature f) {
        return f.enabledIn(this._features);
    }"
com.fasterxml.jackson.core.JsonParser.getFeatureMask,"    public int getFeatureMask() {
        return this._features;
    }"
com.fasterxml.jackson.core.JsonParser.setFeatureMask,"    public JsonParser setFeatureMask(int mask) {
        this._features = mask;
        return this;
    }"
com.fasterxml.jackson.core.JsonParser.overrideStdFeatures,"    public JsonParser overrideStdFeatures(int values, int mask) {
        int newState = this._features & ~mask | values & mask;
        return this.setFeatureMask(newState);
    }"
com.fasterxml.jackson.core.JsonParser.getFormatFeatures,"    public int getFormatFeatures() {
        return 0;
    }"
com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures,"    public JsonParser overrideFormatFeatures(int values, int mask) {
        throw new IllegalArgumentException(""No FormatFeatures defined for parser of type "" + this.getClass().getName());
    }"
com.fasterxml.jackson.core.JsonParser.nextToken,
com.fasterxml.jackson.core.JsonParser.nextValue,
com.fasterxml.jackson.core.JsonParser.nextFieldName,"    public boolean nextFieldName(SerializableString str) throws IOException {
        return this.nextToken() == JsonToken.FIELD_NAME && str.getValue().equals(this.getCurrentName());
    }"
com.fasterxml.jackson.core.JsonParser.nextFieldName,"    public String nextFieldName() throws IOException {
        return this.nextToken() == JsonToken.FIELD_NAME ? this.getCurrentName() : null;
    }"
com.fasterxml.jackson.core.JsonParser.nextTextValue,"    public String nextTextValue() throws IOException {
        return this.nextToken() == JsonToken.VALUE_STRING ? this.getText() : null;
    }"
com.fasterxml.jackson.core.JsonParser.nextIntValue,"    public int nextIntValue(int defaultValue) throws IOException {
        return this.nextToken() == JsonToken.VALUE_NUMBER_INT ? this.getIntValue() : defaultValue;
    }"
com.fasterxml.jackson.core.JsonParser.nextLongValue,"    public long nextLongValue(long defaultValue) throws IOException {
        return this.nextToken() == JsonToken.VALUE_NUMBER_INT ? this.getLongValue() : defaultValue;
    }"
com.fasterxml.jackson.core.JsonParser.nextBooleanValue,"    public Boolean nextBooleanValue() throws IOException {
        JsonToken t = this.nextToken();
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        return null;
    }"
com.fasterxml.jackson.core.JsonParser.skipChildren,
com.fasterxml.jackson.core.JsonParser.finishToken,"    public void finishToken() throws IOException {
    }"
com.fasterxml.jackson.core.JsonParser.isClosed,
com.fasterxml.jackson.core.JsonParser.currentToken,"    public JsonToken currentToken() {
        return this.getCurrentToken();
    }"
com.fasterxml.jackson.core.JsonParser.currentTokenId,"    public int currentTokenId() {
        return this.getCurrentTokenId();
    }"
com.fasterxml.jackson.core.JsonParser.getCurrentToken,
com.fasterxml.jackson.core.JsonParser.getCurrentTokenId,
com.fasterxml.jackson.core.JsonParser.hasCurrentToken,
com.fasterxml.jackson.core.JsonParser.hasTokenId,
com.fasterxml.jackson.core.JsonParser.hasToken,
com.fasterxml.jackson.core.JsonParser.getCurrentName,
com.fasterxml.jackson.core.JsonParser.getParsingContext,
com.fasterxml.jackson.core.JsonParser.getTokenLocation,
com.fasterxml.jackson.core.JsonParser.getCurrentLocation,
com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken,"    public boolean isExpectedStartArrayToken() {
        return this.currentToken() == JsonToken.START_ARRAY;
    }"
com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken,"    public boolean isExpectedStartObjectToken() {
        return this.currentToken() == JsonToken.START_OBJECT;
    }"
com.fasterxml.jackson.core.JsonParser.clearCurrentToken,
com.fasterxml.jackson.core.JsonParser.getLastClearedToken,
com.fasterxml.jackson.core.JsonParser.overrideCurrentName,
com.fasterxml.jackson.core.JsonParser.getText,
com.fasterxml.jackson.core.JsonParser.getText,"    public int getText(Writer writer) throws IOException, UnsupportedOperationException {
        String str = this.getText();
        if (str == null) {
            return 0;
        }
        writer.write(str);
        return str.length();
    }"
com.fasterxml.jackson.core.JsonParser.getTextCharacters,
com.fasterxml.jackson.core.JsonParser.getTextLength,
com.fasterxml.jackson.core.JsonParser.getTextOffset,
com.fasterxml.jackson.core.JsonParser.hasTextCharacters,
com.fasterxml.jackson.core.JsonParser.getNumberValue,
com.fasterxml.jackson.core.JsonParser.getNumberType,
com.fasterxml.jackson.core.JsonParser.getByteValue,"    public byte getByteValue() throws IOException {
        int value = this.getIntValue();
        if (value < -128 || value > 255) {
            throw this._constructError(""Numeric value ("" + this.getText() + "") out of range of Java byte"");
        }
        return (byte)value;
    }"
com.fasterxml.jackson.core.JsonParser.getShortValue,"    public short getShortValue() throws IOException {
        int value = this.getIntValue();
        if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {
            throw this._constructError(""Numeric value ("" + this.getText() + "") out of range of Java short"");
        }
        return (short)value;
    }"
com.fasterxml.jackson.core.JsonParser.getIntValue,
com.fasterxml.jackson.core.JsonParser.getLongValue,
com.fasterxml.jackson.core.JsonParser.getBigIntegerValue,
com.fasterxml.jackson.core.JsonParser.getFloatValue,
com.fasterxml.jackson.core.JsonParser.getDoubleValue,
com.fasterxml.jackson.core.JsonParser.getDecimalValue,
com.fasterxml.jackson.core.JsonParser.getBooleanValue,"    public boolean getBooleanValue() throws IOException {
        JsonToken t = this.currentToken();
        if (t == JsonToken.VALUE_TRUE) {
            return true;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return false;
        }
        throw new JsonParseException(this, String.format(""Current token (%s) not of boolean type"", new Object[]{t})).withRequestPayload(this._requestPayload);
    }"
com.fasterxml.jackson.core.JsonParser.getEmbeddedObject,"    public Object getEmbeddedObject() throws IOException {
        return null;
    }"
com.fasterxml.jackson.core.JsonParser.getBinaryValue,
com.fasterxml.jackson.core.JsonParser.getBinaryValue,"    public byte[] getBinaryValue() throws IOException {
        return this.getBinaryValue(Base64Variants.getDefaultVariant());
    }"
com.fasterxml.jackson.core.JsonParser.readBinaryValue,"    public int readBinaryValue(OutputStream out) throws IOException {
        return this.readBinaryValue(Base64Variants.getDefaultVariant(), out);
    }"
com.fasterxml.jackson.core.JsonParser.readBinaryValue,"    public int readBinaryValue(Base64Variant bv, OutputStream out) throws IOException {
        this._reportUnsupportedOperation();
        return 0;
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsInt,"    public int getValueAsInt() throws IOException {
        return this.getValueAsInt(0);
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsInt,"    public int getValueAsInt(int def) throws IOException {
        return def;
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsLong,"    public long getValueAsLong() throws IOException {
        return this.getValueAsLong(0L);
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsLong,"    public long getValueAsLong(long def) throws IOException {
        return def;
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsDouble,"    public double getValueAsDouble() throws IOException {
        return this.getValueAsDouble(0.0);
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsDouble,"    public double getValueAsDouble(double def) throws IOException {
        return def;
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsBoolean,"    public boolean getValueAsBoolean() throws IOException {
        return this.getValueAsBoolean(false);
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsBoolean,"    public boolean getValueAsBoolean(boolean def) throws IOException {
        return def;
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsString,"    public String getValueAsString() throws IOException {
        return this.getValueAsString(null);
    }"
com.fasterxml.jackson.core.JsonParser.getValueAsString,
com.fasterxml.jackson.core.JsonParser.canReadObjectId,"    public boolean canReadObjectId() {
        return false;
    }"
com.fasterxml.jackson.core.JsonParser.canReadTypeId,"    public boolean canReadTypeId() {
        return false;
    }"
com.fasterxml.jackson.core.JsonParser.getObjectId,"    public Object getObjectId() throws IOException {
        return null;
    }"
com.fasterxml.jackson.core.JsonParser.getTypeId,"    public Object getTypeId() throws IOException {
        return null;
    }"
com.fasterxml.jackson.core.JsonParser.readValueAs,"    public <T> T readValueAs(Class<T> valueType) throws IOException {
        return this._codec().readValue(this, valueType);
    }"
com.fasterxml.jackson.core.JsonParser.readValueAs,"    public <T> T readValueAs(TypeReference<?> valueTypeRef) throws IOException {
        return this._codec().readValue(this, valueTypeRef);
    }"
com.fasterxml.jackson.core.JsonParser.readValuesAs,"    public <T> Iterator<T> readValuesAs(Class<T> valueType) throws IOException {
        return this._codec().readValues(this, valueType);
    }"
com.fasterxml.jackson.core.JsonParser.readValuesAs,"    public <T> Iterator<T> readValuesAs(TypeReference<?> valueTypeRef) throws IOException {
        return this._codec().readValues(this, valueTypeRef);
    }"
com.fasterxml.jackson.core.JsonParser.readValueAsTree,"    public <T extends TreeNode> T readValueAsTree() throws IOException {
        return this._codec().readTree(this);
    }"
com.fasterxml.jackson.core.JsonParser._codec,"    protected ObjectCodec _codec() {
        ObjectCodec c = this.getCodec();
        if (c == null) {
            throw new IllegalStateException(""No ObjectCodec defined for parser, needed for deserialization"");
        }
        return c;
    }"
com.fasterxml.jackson.core.JsonParser._constructError,"    protected JsonParseException _constructError(String msg) {
        return new JsonParseException(this, msg).withRequestPayload(this._requestPayload);
    }"
com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation,"    protected void _reportUnsupportedOperation() {
        throw new UnsupportedOperationException(""Operation not supported by parser of type "" + this.getClass().getName());
    }"
com.fasterxml.jackson.core.JsonParser.collectDefaults,"        public static int collectDefaults() {
            int flags = 0;
            for (Feature f : Feature.values()) {
                if (!f.enabledByDefault()) continue;
                flags |= f.getMask();
            }
            return flags;
        }"
com.fasterxml.jackson.core.JsonParser.enabledByDefault,"        public boolean enabledByDefault() {
            return this._defaultState;
        }"
com.fasterxml.jackson.core.JsonParser.enabledIn,"        public boolean enabledIn(int flags) {
            return (flags & this._mask) != 0;
        }"
com.fasterxml.jackson.core.JsonParser.getMask,"        public int getMask() {
            return this._mask;
        }
    "
com.fasterxml.jackson.core.Base64Variant.readResolve,"    protected Object readResolve() {
        return Base64Variants.valueOf(this._name);
    }"
com.fasterxml.jackson.core.Base64Variant.getName,"    public String getName() {
        return this._name;
    }"
com.fasterxml.jackson.core.Base64Variant.usesPadding,"    public boolean usesPadding() {
        return this._usesPadding;
    }"
com.fasterxml.jackson.core.Base64Variant.usesPaddingChar,"    public boolean usesPaddingChar(char c) {
        return c == this._paddingChar;
    }"
com.fasterxml.jackson.core.Base64Variant.usesPaddingChar,"    public boolean usesPaddingChar(int ch) {
        return ch == this._paddingChar;
    }"
com.fasterxml.jackson.core.Base64Variant.getPaddingChar,"    public char getPaddingChar() {
        return this._paddingChar;
    }"
com.fasterxml.jackson.core.Base64Variant.getPaddingByte,"    public byte getPaddingByte() {
        return (byte)this._paddingChar;
    }"
com.fasterxml.jackson.core.Base64Variant.getMaxLineLength,"    public int getMaxLineLength() {
        return this._maxLineLength;
    }"
com.fasterxml.jackson.core.Base64Variant.decodeBase64Char,"    public int decodeBase64Char(char c) {
        char ch = c;
        return ch <= '\u007f' ? this._asciiToBase64[ch] : -1;
    }"
com.fasterxml.jackson.core.Base64Variant.decodeBase64Char,"    public int decodeBase64Char(int ch) {
        return ch <= 127 ? this._asciiToBase64[ch] : -1;
    }"
com.fasterxml.jackson.core.Base64Variant.decodeBase64Byte,"    public int decodeBase64Byte(byte b) {
        byte ch = b;
        if (ch < 0) {
            return -1;
        }
        return this._asciiToBase64[ch];
    }"
com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsChar,"    public char encodeBase64BitsAsChar(int value) {
        return this._base64ToAsciiC[value];
    }"
com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk,"    public int encodeBase64Chunk(int b24, char[] buffer, int ptr) {
        buffer[ptr++] = this._base64ToAsciiC[b24 >> 18 & 0x3F];
        buffer[ptr++] = this._base64ToAsciiC[b24 >> 12 & 0x3F];
        buffer[ptr++] = this._base64ToAsciiC[b24 >> 6 & 0x3F];
        buffer[ptr++] = this._base64ToAsciiC[b24 & 0x3F];
        return ptr;
    }"
com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk,"    public void encodeBase64Chunk(StringBuilder sb, int b24) {
        sb.append(this._base64ToAsciiC[b24 >> 18 & 0x3F]);
        sb.append(this._base64ToAsciiC[b24 >> 12 & 0x3F]);
        sb.append(this._base64ToAsciiC[b24 >> 6 & 0x3F]);
        sb.append(this._base64ToAsciiC[b24 & 0x3F]);
    }"
com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial,"    public int encodeBase64Partial(int bits, int outputBytes, char[] buffer, int outPtr) {
        buffer[outPtr++] = this._base64ToAsciiC[bits >> 18 & 0x3F];
        buffer[outPtr++] = this._base64ToAsciiC[bits >> 12 & 0x3F];
        if (this._usesPadding) {
            buffer[outPtr++] = outputBytes == 2 ? this._base64ToAsciiC[bits >> 6 & 0x3F] : this._paddingChar;
            buffer[outPtr++] = this._paddingChar;
        } else if (outputBytes == 2) {
            buffer[outPtr++] = this._base64ToAsciiC[bits >> 6 & 0x3F];
        }
        return outPtr;
    }"
com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial,"    public void encodeBase64Partial(StringBuilder sb, int bits, int outputBytes) {
        sb.append(this._base64ToAsciiC[bits >> 18 & 0x3F]);
        sb.append(this._base64ToAsciiC[bits >> 12 & 0x3F]);
        if (this._usesPadding) {
            sb.append(outputBytes == 2 ? this._base64ToAsciiC[bits >> 6 & 0x3F] : this._paddingChar);
            sb.append(this._paddingChar);
        } else if (outputBytes == 2) {
            sb.append(this._base64ToAsciiC[bits >> 6 & 0x3F]);
        }
    }"
com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsByte,"    public byte encodeBase64BitsAsByte(int value) {
        return this._base64ToAsciiB[value];
    }"
com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk,"    public int encodeBase64Chunk(int b24, byte[] buffer, int ptr) {
        buffer[ptr++] = this._base64ToAsciiB[b24 >> 18 & 0x3F];
        buffer[ptr++] = this._base64ToAsciiB[b24 >> 12 & 0x3F];
        buffer[ptr++] = this._base64ToAsciiB[b24 >> 6 & 0x3F];
        buffer[ptr++] = this._base64ToAsciiB[b24 & 0x3F];
        return ptr;
    }"
com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial,"    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr) {
        buffer[outPtr++] = this._base64ToAsciiB[bits >> 18 & 0x3F];
        buffer[outPtr++] = this._base64ToAsciiB[bits >> 12 & 0x3F];
        if (this._usesPadding) {
            byte pb = (byte)this._paddingChar;
            buffer[outPtr++] = outputBytes == 2 ? this._base64ToAsciiB[bits >> 6 & 0x3F] : pb;
            buffer[outPtr++] = pb;
        } else if (outputBytes == 2) {
            buffer[outPtr++] = this._base64ToAsciiB[bits >> 6 & 0x3F];
        }
        return outPtr;
    }"
com.fasterxml.jackson.core.Base64Variant.encode,"    public String encode(byte[] input) {
        return this.encode(input, false);
    }"
com.fasterxml.jackson.core.Base64Variant.encode,"    public String encode(byte[] input, boolean addQuotes) {
        int inputEnd = input.length;
        int outputLen = inputEnd + (inputEnd >> 2) + (inputEnd >> 3);
        StringBuilder sb = new StringBuilder(outputLen);
        if (addQuotes) {
            sb.append('\""');
        }
        int chunksBeforeLF = this.getMaxLineLength() >> 2;
        int inputPtr = 0;
        int safeInputEnd = inputEnd - 3;
        while (inputPtr <= safeInputEnd) {
            int b24 = input[inputPtr++] << 8;
            b24 |= input[inputPtr++] & 0xFF;
            b24 = b24 << 8 | input[inputPtr++] & 0xFF;
            this.encodeBase64Chunk(sb, b24);
            if (--chunksBeforeLF > 0) continue;
            sb.append('\\');
            sb.append('n');
            chunksBeforeLF = this.getMaxLineLength() >> 2;
        }
        int inputLeft = inputEnd - inputPtr;
        if (inputLeft > 0) {
            int b24 = input[inputPtr++] << 16;
            if (inputLeft == 2) {
                b24 |= (input[inputPtr++] & 0xFF) << 8;
            }
            this.encodeBase64Partial(sb, b24, inputLeft);
        }
        if (addQuotes) {
            sb.append('\""');
        }
        return sb.toString();
    }"
com.fasterxml.jackson.core.Base64Variant.decode,"    public byte[] decode(String input) throws IllegalArgumentException {
        ByteArrayBuilder b = new ByteArrayBuilder();
        this.decode(input, b);
        return b.toByteArray();
    }"
com.fasterxml.jackson.core.Base64Variant.decode,"    public void decode(String str, ByteArrayBuilder builder) throws IllegalArgumentException {
        int ptr = 0;
        int len = str.length();
        while (ptr < len) {
            char ch;
            do {
                ch = str.charAt(ptr++);
            } while (ptr < len && ch <= ' ');
            int bits = this.decodeBase64Char(ch);
            if (bits < 0) {
                this._reportInvalidBase64(ch, 0, null);
            }
            int decodedData = bits;
            if (ptr >= len) {
                this._reportBase64EOF();
            }
            if ((bits = this.decodeBase64Char(ch = str.charAt(ptr++))) < 0) {
                this._reportInvalidBase64(ch, 1, null);
            }
            decodedData = decodedData << 6 | bits;
            if (ptr >= len) {
                if (!this.usesPadding()) {
                    builder.append(decodedData >>= 4);
                    break;
                }
                this._reportBase64EOF();
            }
            if ((bits = this.decodeBase64Char(ch = str.charAt(ptr++))) < 0) {
                if (bits != -2) {
                    this._reportInvalidBase64(ch, 2, null);
                }
                if (ptr >= len) {
                    this._reportBase64EOF();
                }
                if (!this.usesPaddingChar(ch = str.charAt(ptr++))) {
                    this._reportInvalidBase64(ch, 3, ""expected padding character '"" + this.getPaddingChar() + ""'"");
                }
                builder.append(decodedData >>= 4);
                continue;
            }
            decodedData = decodedData << 6 | bits;
            if (ptr >= len) {
                if (!this.usesPadding()) {
                    builder.appendTwoBytes(decodedData >>= 2);
                    break;
                }
                this._reportBase64EOF();
            }
            if ((bits = this.decodeBase64Char(ch = str.charAt(ptr++))) < 0) {
                if (bits != -2) {
                    this._reportInvalidBase64(ch, 3, null);
                }
                builder.appendTwoBytes(decodedData >>= 2);
                continue;
            }
            decodedData = decodedData << 6 | bits;
            builder.appendThreeBytes(decodedData);
        }
    }"
com.fasterxml.jackson.core.Base64Variant.toString,"    public String toString() {
        return this._name;
    }"
com.fasterxml.jackson.core.Base64Variant.equals,"    public boolean equals(Object o) {
        return o == this;
    }"
com.fasterxml.jackson.core.Base64Variant.hashCode,"    public int hashCode() {
        return this._name.hashCode();
    }"
com.fasterxml.jackson.core.Base64Variant._reportInvalidBase64,"    protected void _reportInvalidBase64(char ch, int bindex, String msg) throws IllegalArgumentException {
        String base = ch <= ' ' ? ""Illegal white space character (code 0x"" + Integer.toHexString(ch) + "") as character #"" + (bindex + 1) + "" of 4-char base64 unit: can only used between units"" : (this.usesPaddingChar(ch) ? ""Unexpected padding character ('"" + this.getPaddingChar() + ""') as character #"" + (bindex + 1) + "" of 4-char base64 unit: padding only legal as 3rd or 4th character"" : (!Character.isDefined(ch) || Character.isISOControl(ch) ? ""Illegal character (code 0x"" + Integer.toHexString(ch) + "") in base64 content"" : ""Illegal character '"" + ch + ""' (code 0x"" + Integer.toHexString(ch) + "") in base64 content""));
        if (msg != null) {
            base = base + "": "" + msg;
        }
        throw new IllegalArgumentException(base);
    }"
com.fasterxml.jackson.core.Base64Variant._reportBase64EOF,"    protected void _reportBase64EOF() throws IllegalArgumentException {
        throw new IllegalArgumentException(""Unexpected end-of-String in base64 content"");
    }
"
com.fasterxml.jackson.core.JsonParseException.withParser,"    public JsonParseException withParser(JsonParser p) {
        this._processor = p;
        return this;
    }"
com.fasterxml.jackson.core.JsonParseException.withRequestPayload,"    public JsonParseException withRequestPayload(RequestPayload p) {
        this._requestPayload = p;
        return this;
    }"
com.fasterxml.jackson.core.JsonParseException.getProcessor,"    public JsonParser getProcessor() {
        return this._processor;
    }"
com.fasterxml.jackson.core.JsonParseException.getRequestPayload,"    public RequestPayload getRequestPayload() {
        return this._requestPayload;
    }"
com.fasterxml.jackson.core.JsonParseException.getRequestPayloadAsString,"    public String getRequestPayloadAsString() {
        return this._requestPayload != null ? this._requestPayload.toString() : null;
    }"
com.fasterxml.jackson.core.JsonParseException.getMessage,"    public String getMessage() {
        String msg = super.getMessage();
        if (this._requestPayload != null) {
            msg = msg + ""\nRequest payload : "" + this._requestPayload.toString();
        }
        return msg;
    }
"
com.fasterxml.jackson.core.FormatSchema.getSchemaType,"    public String getSchemaType();
"
com.fasterxml.jackson.core.Version.unknownVersion,"    public static Version unknownVersion() {
        return UNKNOWN_VERSION;
    }"
com.fasterxml.jackson.core.Version.isUnknownVersion,"    public boolean isUnknownVersion() {
        return this == UNKNOWN_VERSION;
    }"
com.fasterxml.jackson.core.Version.isSnapshot,"    public boolean isSnapshot() {
        return this._snapshotInfo != null && this._snapshotInfo.length() > 0;
    }"
com.fasterxml.jackson.core.Version.isUknownVersion,"    public boolean isUknownVersion() {
        return this.isUnknownVersion();
    }"
com.fasterxml.jackson.core.Version.getMajorVersion,"    public int getMajorVersion() {
        return this._majorVersion;
    }"
com.fasterxml.jackson.core.Version.getMinorVersion,"    public int getMinorVersion() {
        return this._minorVersion;
    }"
com.fasterxml.jackson.core.Version.getPatchLevel,"    public int getPatchLevel() {
        return this._patchLevel;
    }"
com.fasterxml.jackson.core.Version.getGroupId,"    public String getGroupId() {
        return this._groupId;
    }"
com.fasterxml.jackson.core.Version.getArtifactId,"    public String getArtifactId() {
        return this._artifactId;
    }"
com.fasterxml.jackson.core.Version.toFullString,"    public String toFullString() {
        return this._groupId + '/' + this._artifactId + '/' + this.toString();
    }"
com.fasterxml.jackson.core.Version.toString,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(this._majorVersion).append('.');
        sb.append(this._minorVersion).append('.');
        sb.append(this._patchLevel);
        if (this.isSnapshot()) {
            sb.append('-').append(this._snapshotInfo);
        }
        return sb.toString();
    }"
com.fasterxml.jackson.core.Version.hashCode,"    public int hashCode() {
        return this._artifactId.hashCode() ^ this._groupId.hashCode() + this._majorVersion - this._minorVersion + this._patchLevel;
    }"
com.fasterxml.jackson.core.Version.equals,"    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (o == null) {
            return false;
        }
        if (o.getClass() != this.getClass()) {
            return false;
        }
        Version other = (Version)o;
        return other._majorVersion == this._majorVersion && other._minorVersion == this._minorVersion && other._patchLevel == this._patchLevel && other._artifactId.equals(this._artifactId) && other._groupId.equals(this._groupId);
    }"
com.fasterxml.jackson.core.Version.compareTo,"    public int compareTo(Version other) {
        if (other == this) {
            return 0;
        }
        int diff = this._groupId.compareTo(other._groupId);
        if (diff == 0 && (diff = this._artifactId.compareTo(other._artifactId)) == 0 && (diff = this._majorVersion - other._majorVersion) == 0 && (diff = this._minorVersion - other._minorVersion) == 0) {
            diff = this._patchLevel - other._patchLevel;
        }
        return diff;
    }
"
com.fasterxml.jackson.core.JsonpCharacterEscapes.instance,"    public static JsonpCharacterEscapes instance() {
        return sInstance;
    }"
com.fasterxml.jackson.core.JsonpCharacterEscapes.getEscapeSequence,"    public SerializableString getEscapeSequence(int ch) {
        switch (ch) {
            case 8232: {
                return escapeFor2028;
            }
            case 8233: {
                return escapeFor2029;
            }
        }
        return null;
    }"
com.fasterxml.jackson.core.JsonpCharacterEscapes.getEscapeCodesForAscii,"    public int[] getEscapeCodesForAscii() {
        return asciiEscapes;
    }
"
com.fasterxml.jackson.core.JsonLocation.getSourceRef,"    public Object getSourceRef() {
        return this._sourceRef;
    }"
com.fasterxml.jackson.core.JsonLocation.getLineNr,"    public int getLineNr() {
        return this._lineNr;
    }"
com.fasterxml.jackson.core.JsonLocation.getColumnNr,"    public int getColumnNr() {
        return this._columnNr;
    }"
com.fasterxml.jackson.core.JsonLocation.getCharOffset,"    public long getCharOffset() {
        return this._totalChars;
    }"
com.fasterxml.jackson.core.JsonLocation.getByteOffset,"    public long getByteOffset() {
        return this._totalBytes;
    }"
com.fasterxml.jackson.core.JsonLocation.toString,"    public String toString() {
        StringBuilder sb = new StringBuilder(80);
        sb.append(""[Source: "");
        if (this._sourceRef == null) {
            sb.append(""UNKNOWN"");
        } else {
            sb.append(this._sourceRef.toString());
        }
        sb.append(""; line: "");
        sb.append(this._lineNr);
        sb.append("", column: "");
        sb.append(this._columnNr);
        sb.append(']');
        return sb.toString();
    }"
com.fasterxml.jackson.core.JsonLocation.hashCode,"    public int hashCode() {
        int hash = this._sourceRef == null ? 1 : this._sourceRef.hashCode();
        hash ^= this._lineNr;
        hash += this._columnNr;
        hash ^= (int)this._totalChars;
        return hash += (int)this._totalBytes;
    }"
com.fasterxml.jackson.core.JsonLocation.equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if (other == null) {
            return false;
        }
        if (!(other instanceof JsonLocation)) {
            return false;
        }
        JsonLocation otherLoc = (JsonLocation)other;
        if (this._sourceRef == null ? otherLoc._sourceRef != null : !this._sourceRef.equals(otherLoc._sourceRef)) {
            return false;
        }
        return this._lineNr == otherLoc._lineNr && this._columnNr == otherLoc._columnNr && this._totalChars == otherLoc._totalChars && this.getByteOffset() == otherLoc.getByteOffset();
    }
"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot,"    public static ByteQuadsCanonicalizer createRoot() {
        long now = System.currentTimeMillis();
        int seed = (int)now + (int)(now >>> 32) | 1;
        return ByteQuadsCanonicalizer.createRoot(seed);
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot,"    protected static ByteQuadsCanonicalizer createRoot(int seed) {
        return new ByteQuadsCanonicalizer(64, true, seed, true);
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChild,"    public ByteQuadsCanonicalizer makeChild(int flags) {
        return new ByteQuadsCanonicalizer(this, JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags), this._seed, JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags), this._tableInfo.get());
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.release,"    public void release() {
        if (this._parent != null && this.maybeDirty()) {
            this._parent.mergeChild(new TableInfo(this));
            this._hashShared = true;
        }
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.mergeChild,"    private void mergeChild(TableInfo childState) {
        int childCount = childState.count;
        TableInfo currState = this._tableInfo.get();
        if (childCount == currState.count) {
            return;
        }
        if (childCount > 6000) {
            childState = TableInfo.createInitial(64);
        }
        this._tableInfo.compareAndSet(currState, childState);
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.size,"    public int size() {
        if (this._tableInfo != null) {
            return this._tableInfo.get().count;
        }
        return this._count;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.bucketCount,"    public int bucketCount() {
        return this._hashSize;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.maybeDirty,"    public boolean maybeDirty() {
        return !this._hashShared;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.hashSeed,"    public int hashSeed() {
        return this._seed;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.primaryCount,"    public int primaryCount() {
        int count = 0;
        int end = this._secondaryStart;
        for (int offset = 3; offset < end; offset += 4) {
            if (this._hashArea[offset] == 0) continue;
            ++count;
        }
        return count;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.secondaryCount,"    public int secondaryCount() {
        int count = 0;
        int end = this._tertiaryStart;
        for (int offset = this._secondaryStart + 3; offset < end; offset += 4) {
            if (this._hashArea[offset] == 0) continue;
            ++count;
        }
        return count;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.tertiaryCount,"    public int tertiaryCount() {
        int offset;
        int count = 0;
        int end = offset + this._hashSize;
        for (offset = this._tertiaryStart + 3; offset < end; offset += 4) {
            if (this._hashArea[offset] == 0) continue;
            ++count;
        }
        return count;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.spilloverCount,"    public int spilloverCount() {
        return this._spilloverEnd - this._spilloverStart() >> 2;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.totalCount,"    public int totalCount() {
        int count = 0;
        int end = this._hashSize << 3;
        for (int offset = 3; offset < end; offset += 4) {
            if (this._hashArea[offset] == 0) continue;
            ++count;
        }
        return count;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.toString,"    public String toString() {
        int pri = this.primaryCount();
        int sec = this.secondaryCount();
        int tert = this.tertiaryCount();
        int spill = this.spilloverCount();
        int total = this.totalCount();
        return String.format(""[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]"", this.getClass().getName(), this._count, this._hashSize, pri, sec, tert, spill, pri + sec + tert + spill, total);
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName,"    public String findName(int q1) {
        int offset2;
        int[] hashArea = this._hashArea;
        int offset = this._calcOffset(this.calcHash(q1));
        int len = hashArea[offset + 3];
        if (len == 1) {
            if (hashArea[offset] == q1) {
                return this._names[offset >> 2];
            }
        } else if (len == 0) {
            return null;
        }
        if ((len = hashArea[(offset2 = this._secondaryStart + (offset >> 3 << 2)) + 3]) == 1) {
            if (hashArea[offset2] == q1) {
                return this._names[offset2 >> 2];
            }
        } else if (len == 0) {
            return null;
        }
        return this._findSecondary(offset, q1);
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName,"    public String findName(int q1, int q2) {
        int offset2;
        int[] hashArea = this._hashArea;
        int offset = this._calcOffset(this.calcHash(q1, q2));
        int len = hashArea[offset + 3];
        if (len == 2) {
            if (q1 == hashArea[offset] && q2 == hashArea[offset + 1]) {
                return this._names[offset >> 2];
            }
        } else if (len == 0) {
            return null;
        }
        if ((len = hashArea[(offset2 = this._secondaryStart + (offset >> 3 << 2)) + 3]) == 2) {
            if (q1 == hashArea[offset2] && q2 == hashArea[offset2 + 1]) {
                return this._names[offset2 >> 2];
            }
        } else if (len == 0) {
            return null;
        }
        return this._findSecondary(offset, q1, q2);
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName,"    public String findName(int q1, int q2, int q3) {
        int offset2;
        int[] hashArea = this._hashArea;
        int offset = this._calcOffset(this.calcHash(q1, q2, q3));
        int len = hashArea[offset + 3];
        if (len == 3) {
            if (q1 == hashArea[offset] && hashArea[offset + 1] == q2 && hashArea[offset + 2] == q3) {
                return this._names[offset >> 2];
            }
        } else if (len == 0) {
            return null;
        }
        if ((len = hashArea[(offset2 = this._secondaryStart + (offset >> 3 << 2)) + 3]) == 3) {
            if (q1 == hashArea[offset2] && hashArea[offset2 + 1] == q2 && hashArea[offset2 + 2] == q3) {
                return this._names[offset2 >> 2];
            }
        } else if (len == 0) {
            return null;
        }
        return this._findSecondary(offset, q1, q2, q3);
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName,"    public String findName(int[] q, int qlen) {
        if (qlen < 4) {
            if (qlen == 3) {
                return this.findName(q[0], q[1], q[2]);
            }
            if (qlen == 2) {
                return this.findName(q[0], q[1]);
            }
            return this.findName(q[0]);
        }
        int hash = this.calcHash(q, qlen);
        int offset = this._calcOffset(hash);
        int[] hashArea = this._hashArea;
        int len = hashArea[offset + 3];
        if (hash == hashArea[offset] && len == qlen && this._verifyLongName(q, qlen, hashArea[offset + 1])) {
            return this._names[offset >> 2];
        }
        if (len == 0) {
            return null;
        }
        int offset2 = this._secondaryStart + (offset >> 3 << 2);
        int len2 = hashArea[offset2 + 3];
        if (hash == hashArea[offset2] && len2 == qlen && this._verifyLongName(q, qlen, hashArea[offset2 + 1])) {
            return this._names[offset2 >> 2];
        }
        return this._findSecondary(offset, hash, q, qlen);
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._calcOffset,"    private final int _calcOffset(int hash) {
        int ix = hash & this._hashSize - 1;
        return ix << 2;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary,"    private String _findSecondary(int origOffset, int q1) {
        int offset;
        int[] hashArea = this._hashArea;
        int bucketSize = 1 << this._tertiaryShift;
        int end = offset + bucketSize;
        for (offset = this._tertiaryStart + (origOffset >> this._tertiaryShift + 2 << this._tertiaryShift); offset < end; offset += 4) {
            int len = hashArea[offset + 3];
            if (q1 == hashArea[offset] && 1 == len) {
                return this._names[offset >> 2];
            }
            if (len != 0) continue;
            return null;
        }
        for (offset = this._spilloverStart(); offset < this._spilloverEnd; offset += 4) {
            if (q1 != hashArea[offset] || 1 != hashArea[offset + 3]) continue;
            return this._names[offset >> 2];
        }
        return null;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary,"    private String _findSecondary(int origOffset, int q1, int q2) {
        int offset;
        int[] hashArea = this._hashArea;
        int bucketSize = 1 << this._tertiaryShift;
        int end = offset + bucketSize;
        for (offset = this._tertiaryStart + (origOffset >> this._tertiaryShift + 2 << this._tertiaryShift); offset < end; offset += 4) {
            int len = hashArea[offset + 3];
            if (q1 == hashArea[offset] && q2 == hashArea[offset + 1] && 2 == len) {
                return this._names[offset >> 2];
            }
            if (len != 0) continue;
            return null;
        }
        for (offset = this._spilloverStart(); offset < this._spilloverEnd; offset += 4) {
            if (q1 != hashArea[offset] || q2 != hashArea[offset + 1] || 2 != hashArea[offset + 3]) continue;
            return this._names[offset >> 2];
        }
        return null;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary,"    private String _findSecondary(int origOffset, int q1, int q2, int q3) {
        int offset;
        int[] hashArea = this._hashArea;
        int bucketSize = 1 << this._tertiaryShift;
        int end = offset + bucketSize;
        for (offset = this._tertiaryStart + (origOffset >> this._tertiaryShift + 2 << this._tertiaryShift); offset < end; offset += 4) {
            int len = hashArea[offset + 3];
            if (q1 == hashArea[offset] && q2 == hashArea[offset + 1] && q3 == hashArea[offset + 2] && 3 == len) {
                return this._names[offset >> 2];
            }
            if (len != 0) continue;
            return null;
        }
        for (offset = this._spilloverStart(); offset < this._spilloverEnd; offset += 4) {
            if (q1 != hashArea[offset] || q2 != hashArea[offset + 1] || q3 != hashArea[offset + 2] || 3 != hashArea[offset + 3]) continue;
            return this._names[offset >> 2];
        }
        return null;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary,"    private String _findSecondary(int origOffset, int hash, int[] q, int qlen) {
        int offset;
        int[] hashArea = this._hashArea;
        int bucketSize = 1 << this._tertiaryShift;
        int end = offset + bucketSize;
        for (offset = this._tertiaryStart + (origOffset >> this._tertiaryShift + 2 << this._tertiaryShift); offset < end; offset += 4) {
            int len = hashArea[offset + 3];
            if (hash == hashArea[offset] && qlen == len && this._verifyLongName(q, qlen, hashArea[offset + 1])) {
                return this._names[offset >> 2];
            }
            if (len != 0) continue;
            return null;
        }
        for (offset = this._spilloverStart(); offset < this._spilloverEnd; offset += 4) {
            if (hash != hashArea[offset] || qlen != hashArea[offset + 3] || !this._verifyLongName(q, qlen, hashArea[offset + 1])) continue;
            return this._names[offset >> 2];
        }
        return null;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName,"    private boolean _verifyLongName(int[] q, int qlen, int spillOffset) {
        int[] hashArea = this._hashArea;
        int ix = 0;
        switch (qlen) {
            default: {
                return this._verifyLongName2(q, qlen, spillOffset);
            }
            case 8: {
                if (q[ix++] != hashArea[spillOffset++]) {
                    return false;
                }
            }
            case 7: {
                if (q[ix++] != hashArea[spillOffset++]) {
                    return false;
                }
            }
            case 6: {
                if (q[ix++] != hashArea[spillOffset++]) {
                    return false;
                }
            }
            case 5: {
                if (q[ix++] == hashArea[spillOffset++]) break;
                return false;
            }
            case 4: 
        }
        if (q[ix++] != hashArea[spillOffset++]) {
            return false;
        }
        if (q[ix++] != hashArea[spillOffset++]) {
            return false;
        }
        if (q[ix++] != hashArea[spillOffset++]) {
            return false;
        }
        return q[ix++] == hashArea[spillOffset++];
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName2,"    private boolean _verifyLongName2(int[] q, int qlen, int spillOffset) {
        int ix = 0;
        do {
            if (q[ix++] == this._hashArea[spillOffset++]) continue;
            return false;
        } while (ix < qlen);
        return true;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName,"    public String addName(String name, int q1) {
        this._verifySharing();
        if (this._intern) {
            name = InternCache.instance.intern(name);
        }
        int offset = this._findOffsetForAdd(this.calcHash(q1));
        this._hashArea[offset] = q1;
        this._hashArea[offset + 3] = 1;
        this._names[offset >> 2] = name;
        ++this._count;
        this._verifyNeedForRehash();
        return name;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName,"    public String addName(String name, int q1, int q2) {
        this._verifySharing();
        if (this._intern) {
            name = InternCache.instance.intern(name);
        }
        int hash = q2 == 0 ? this.calcHash(q1) : this.calcHash(q1, q2);
        int offset = this._findOffsetForAdd(hash);
        this._hashArea[offset] = q1;
        this._hashArea[offset + 1] = q2;
        this._hashArea[offset + 3] = 2;
        this._names[offset >> 2] = name;
        ++this._count;
        this._verifyNeedForRehash();
        return name;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName,"    public String addName(String name, int q1, int q2, int q3) {
        this._verifySharing();
        if (this._intern) {
            name = InternCache.instance.intern(name);
        }
        int offset = this._findOffsetForAdd(this.calcHash(q1, q2, q3));
        this._hashArea[offset] = q1;
        this._hashArea[offset + 1] = q2;
        this._hashArea[offset + 2] = q3;
        this._hashArea[offset + 3] = 3;
        this._names[offset >> 2] = name;
        ++this._count;
        this._verifyNeedForRehash();
        return name;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName,"    public String addName(String name, int[] q, int qlen) {
        this._verifySharing();
        if (this._intern) {
            name = InternCache.instance.intern(name);
        }
        switch (qlen) {
            case 1: {
                int offset = this._findOffsetForAdd(this.calcHash(q[0]));
                this._hashArea[offset] = q[0];
                this._hashArea[offset + 3] = 1;
                break;
            }
            case 2: {
                int offset = this._findOffsetForAdd(this.calcHash(q[0], q[1]));
                this._hashArea[offset] = q[0];
                this._hashArea[offset + 1] = q[1];
                this._hashArea[offset + 3] = 2;
                break;
            }
            case 3: {
                int offset = this._findOffsetForAdd(this.calcHash(q[0], q[1], q[2]));
                this._hashArea[offset] = q[0];
                this._hashArea[offset + 1] = q[1];
                this._hashArea[offset + 2] = q[2];
                this._hashArea[offset + 3] = 3;
                break;
            }
            default: {
                int longStart;
                int hash = this.calcHash(q, qlen);
                int offset = this._findOffsetForAdd(hash);
                this._hashArea[offset] = hash;
                this._hashArea[offset + 1] = longStart = this._appendLongName(q, qlen);
                this._hashArea[offset + 3] = qlen;
            }
        }
        this._names[offset >> 2] = name;
        ++this._count;
        this._verifyNeedForRehash();
        return name;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyNeedForRehash,"    private void _verifyNeedForRehash() {
        int spillCount;
        if (this._count > this._hashSize >> 1 && ((spillCount = this._spilloverEnd - this._spilloverStart() >> 2) > 1 + this._count >> 7 || (double)this._count > (double)this._hashSize * 0.8)) {
            this._needRehash = true;
        }
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifySharing,"    private void _verifySharing() {
        if (this._hashShared) {
            this._hashArea = Arrays.copyOf(this._hashArea, this._hashArea.length);
            this._names = Arrays.copyOf(this._names, this._names.length);
            this._hashShared = false;
            this._verifyNeedForRehash();
        }
        if (this._needRehash) {
            this.rehash();
        }
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findOffsetForAdd,"    private int _findOffsetForAdd(int hash) {
        int[] hashArea = this._hashArea;
        int offset = this._calcOffset(hash);
        if (hashArea[offset + 3] == 0) {
            return offset;
        }
        int offset2 = this._secondaryStart + (offset >> 3 << 2);
        if (hashArea[offset2 + 3] == 0) {
            return offset2;
        }
        int bucketSize = 1 << this._tertiaryShift;
        int end = offset2 + bucketSize;
        for (offset2 = this._tertiaryStart + (offset >> this._tertiaryShift + 2 << this._tertiaryShift); offset2 < end; offset2 += 4) {
            if (hashArea[offset2 + 3] != 0) continue;
            return offset2;
        }
        offset = this._spilloverEnd;
        this._spilloverEnd += 4;
        end = this._hashSize << 3;
        if (this._spilloverEnd >= end) {
            if (this._failOnDoS) {
                this._reportTooManyCollisions();
            }
            this._needRehash = true;
        }
        return offset;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._appendLongName,"    private int _appendLongName(int[] quads, int qlen) {
        int start = this._longNameOffset;
        if (start + qlen > this._hashArea.length) {
            int toAdd = start + qlen - this._hashArea.length;
            int minAdd = Math.min(4096, this._hashSize);
            int newSize = this._hashArea.length + Math.max(toAdd, minAdd);
            this._hashArea = Arrays.copyOf(this._hashArea, newSize);
        }
        System.arraycopy(quads, 0, this._hashArea, start, qlen);
        this._longNameOffset += qlen;
        return start;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash,"    public int calcHash(int q1) {
        int hash = q1 ^ this._seed;
        hash += hash >>> 16;
        hash ^= hash << 3;
        hash += hash >>> 12;
        return hash;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash,"    public int calcHash(int q1, int q2) {
        int hash = q1;
        hash += hash >>> 15;
        hash ^= hash >>> 9;
        hash += q2 * 33;
        hash ^= this._seed;
        hash += hash >>> 16;
        hash ^= hash >>> 4;
        hash += hash << 3;
        return hash;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash,"    public int calcHash(int q1, int q2, int q3) {
        int hash = q1 ^ this._seed;
        hash += hash >>> 9;
        hash *= 31;
        hash += q2;
        hash *= 33;
        hash += hash >>> 15;
        hash ^= q3;
        hash += hash >>> 4;
        hash += hash >>> 15;
        hash ^= hash << 9;
        return hash;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash,"    public int calcHash(int[] q, int qlen) {
        if (qlen < 4) {
            throw new IllegalArgumentException();
        }
        int hash = q[0] ^ this._seed;
        hash += hash >>> 9;
        hash += q[1];
        hash += hash >>> 15;
        hash *= 33;
        hash ^= q[2];
        hash += hash >>> 4;
        for (int i = 3; i < qlen; ++i) {
            int next = q[i];
            next ^= next >> 21;
            hash += next;
        }
        hash *= 65599;
        hash += hash >>> 19;
        hash ^= hash << 5;
        return hash;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.rehash,"    private void rehash() {
        this._needRehash = false;
        this._hashShared = false;
        int[] oldHashArea = this._hashArea;
        String[] oldNames = this._names;
        int oldSize = this._hashSize;
        int oldCount = this._count;
        int newSize = oldSize + oldSize;
        int oldEnd = this._spilloverEnd;
        if (newSize > 65536) {
            this.nukeSymbols(true);
            return;
        }
        this._hashArea = new int[oldHashArea.length + (oldSize << 3)];
        this._hashSize = newSize;
        this._secondaryStart = newSize << 2;
        this._tertiaryStart = this._secondaryStart + (this._secondaryStart >> 1);
        this._tertiaryShift = ByteQuadsCanonicalizer._calcTertiaryShift(newSize);
        this._names = new String[oldNames.length << 1];
        this.nukeSymbols(false);
        int copyCount = 0;
        int[] q = new int[16];
        int end = oldEnd;
        block5: for (int offset = 0; offset < end; offset += 4) {
            int len = oldHashArea[offset + 3];
            if (len == 0) continue;
            ++copyCount;
            String name = oldNames[offset >> 2];
            switch (len) {
                case 1: {
                    q[0] = oldHashArea[offset];
                    this.addName(name, q, 1);
                    continue block5;
                }
                case 2: {
                    q[0] = oldHashArea[offset];
                    q[1] = oldHashArea[offset + 1];
                    this.addName(name, q, 2);
                    continue block5;
                }
                case 3: {
                    q[0] = oldHashArea[offset];
                    q[1] = oldHashArea[offset + 1];
                    q[2] = oldHashArea[offset + 2];
                    this.addName(name, q, 3);
                    continue block5;
                }
                default: {
                    if (len > q.length) {
                        q = new int[len];
                    }
                    int qoff = oldHashArea[offset + 1];
                    System.arraycopy(oldHashArea, qoff, q, 0, len);
                    this.addName(name, q, len);
                }
            }
        }
        if (copyCount != oldCount) {
            throw new IllegalStateException(""Failed rehash(): old count="" + oldCount + "", copyCount="" + copyCount);
        }
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.nukeSymbols,"    private void nukeSymbols(boolean fill) {
        this._count = 0;
        this._spilloverEnd = this._spilloverStart();
        this._longNameOffset = this._hashSize << 3;
        if (fill) {
            Arrays.fill(this._hashArea, 0);
            Arrays.fill(this._names, null);
        }
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._spilloverStart,"    private final int _spilloverStart() {
        int offset = this._hashSize;
        return (offset << 3) - offset;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._reportTooManyCollisions,"    protected void _reportTooManyCollisions() {
        if (this._hashSize <= 1024) {
            return;
        }
        throw new IllegalStateException(""Spill-over slots in symbol table with "" + this._count + "" entries, hash area of "" + this._hashSize + "" slots is now full (all "" + (this._hashSize >> 3) + "" slots -- suspect a DoS attack based on hash collisions."" + "" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`"");
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._calcTertiaryShift,"    static int _calcTertiaryShift(int primarySlots) {
        int tertSlots = primarySlots >> 2;
        if (tertSlots < 64) {
            return 4;
        }
        if (tertSlots <= 256) {
            return 5;
        }
        if (tertSlots <= 1024) {
            return 6;
        }
        return 7;
    }"
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createInitial,"        public static TableInfo createInitial(int sz) {
            int hashAreaSize = sz << 3;
            int tertShift = ByteQuadsCanonicalizer._calcTertiaryShift(sz);
            return new TableInfo(sz, 0, tertShift, new int[hashAreaSize], new String[sz << 1], hashAreaSize - sz, hashAreaSize);
        }
    "
com.fasterxml.jackson.core.sym.Name1.getEmptyName,"    public static Name1 getEmptyName() {
        return EMPTY;
    }"
com.fasterxml.jackson.core.sym.Name1.equals,"    public boolean equals(int quad) {
        return quad == this.q;
    }"
com.fasterxml.jackson.core.sym.Name1.equals,"    public boolean equals(int quad1, int quad2) {
        return quad1 == this.q && quad2 == 0;
    }"
com.fasterxml.jackson.core.sym.Name1.equals,"    public boolean equals(int q1, int q2, int q3) {
        return false;
    }"
com.fasterxml.jackson.core.sym.Name1.equals,"    public boolean equals(int[] quads, int qlen) {
        return qlen == 1 && quads[0] == this.q;
    }
"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._thresholdSize,"    private static int _thresholdSize(int hashAreaSize) {
        return hashAreaSize - (hashAreaSize >> 2);
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot,"    public static CharsToNameCanonicalizer createRoot() {
        long now = System.currentTimeMillis();
        int seed = (int)now + (int)(now >>> 32) | 1;
        return CharsToNameCanonicalizer.createRoot(seed);
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot,"    protected static CharsToNameCanonicalizer createRoot(int seed) {
        return new CharsToNameCanonicalizer(seed);
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.makeChild,"    public CharsToNameCanonicalizer makeChild(int flags) {
        return new CharsToNameCanonicalizer(this, flags, this._seed, this._tableInfo.get());
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.release,"    public void release() {
        if (!this.maybeDirty()) {
            return;
        }
        if (this._parent != null && this._canonicalize) {
            this._parent.mergeChild(new TableInfo(this));
            this._hashShared = true;
        }
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.mergeChild,"    private void mergeChild(TableInfo childState) {
        int childCount = childState.size;
        TableInfo currState = this._tableInfo.get();
        if (childCount == currState.size) {
            return;
        }
        if (childCount > 12000) {
            childState = TableInfo.createInitial(64);
        }
        this._tableInfo.compareAndSet(currState, childState);
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.size,"    public int size() {
        if (this._tableInfo != null) {
            return this._tableInfo.get().size;
        }
        return this._size;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.bucketCount,"    public int bucketCount() {
        return this._symbols.length;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.maybeDirty,"    public boolean maybeDirty() {
        return !this._hashShared;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.hashSeed,"    public int hashSeed() {
        return this._seed;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.collisionCount,"    public int collisionCount() {
        int count = 0;
        for (Bucket bucket : this._buckets) {
            if (bucket == null) continue;
            count += bucket.length;
        }
        return count;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.maxCollisionLength,"    public int maxCollisionLength() {
        return this._longestCollisionList;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol,"    public String findSymbol(char[] buffer, int start, int len, int h) {
        if (len < 1) {
            return """";
        }
        if (!this._canonicalize) {
            return new String(buffer, start, len);
        }
        int index = this._hashToIndex(h);
        String sym = this._symbols[index];
        if (sym != null) {
            Bucket b;
            if (sym.length() == len) {
                int i = 0;
                while (sym.charAt(i) == buffer[start + i]) {
                    if (++i != len) continue;
                    return sym;
                }
            }
            if ((b = this._buckets[index >> 1]) != null) {
                sym = b.has(buffer, start, len);
                if (sym != null) {
                    return sym;
                }
                sym = this._findSymbol2(buffer, start, len, b.next);
                if (sym != null) {
                    return sym;
                }
            }
        }
        return this._addSymbol(buffer, start, len, h, index);
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2,"    private String _findSymbol2(char[] buffer, int start, int len, Bucket b) {
        while (b != null) {
            String sym = b.has(buffer, start, len);
            if (sym != null) {
                return sym;
            }
            b = b.next;
        }
        return null;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol,"    private String _addSymbol(char[] buffer, int start, int len, int h, int index) {
        if (this._hashShared) {
            this.copyArrays();
            this._hashShared = false;
        } else if (this._size >= this._sizeThreshold) {
            this.rehash();
            index = this._hashToIndex(this.calcHash(buffer, start, len));
        }
        String newSymbol = new String(buffer, start, len);
        if (JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(this._flags)) {
            newSymbol = InternCache.instance.intern(newSymbol);
        }
        ++this._size;
        if (this._symbols[index] == null) {
            this._symbols[index] = newSymbol;
        } else {
            int bix = index >> 1;
            Bucket newB = new Bucket(newSymbol, this._buckets[bix]);
            int collLen = newB.length;
            if (collLen > 100) {
                this._handleSpillOverflow(bix, newB);
            } else {
                this._buckets[bix] = newB;
                this._longestCollisionList = Math.max(collLen, this._longestCollisionList);
            }
        }
        return newSymbol;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._handleSpillOverflow,"    private void _handleSpillOverflow(int bindex, Bucket newBucket) {
        if (this._overflows == null) {
            this._overflows = new BitSet();
            this._overflows.set(bindex);
        } else if (this._overflows.get(bindex)) {
            if (JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(this._flags)) {
                this.reportTooManyCollisions(100);
            }
            this._canonicalize = false;
        } else {
            this._overflows.set(bindex);
        }
        this._symbols[bindex + bindex] = newBucket.symbol;
        this._buckets[bindex] = null;
        this._size -= newBucket.length;
        this._longestCollisionList = -1;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._hashToIndex,"    public int _hashToIndex(int rawHash) {
        rawHash += rawHash >>> 15;
        rawHash ^= rawHash << 7;
        rawHash += rawHash >>> 3;
        return rawHash & this._indexMask;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash,"    public int calcHash(char[] buffer, int start, int len) {
        int hash = this._seed;
        int end = start + len;
        for (int i = start; i < end; ++i) {
            hash = hash * 33 + buffer[i];
        }
        return hash == 0 ? 1 : hash;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash,"    public int calcHash(String key) {
        int len = key.length();
        int hash = this._seed;
        for (int i = 0; i < len; ++i) {
            hash = hash * 33 + key.charAt(i);
        }
        return hash == 0 ? 1 : hash;
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.copyArrays,"    private void copyArrays() {
        String[] oldSyms = this._symbols;
        this._symbols = Arrays.copyOf(oldSyms, oldSyms.length);
        Bucket[] oldBuckets = this._buckets;
        this._buckets = Arrays.copyOf(oldBuckets, oldBuckets.length);
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.rehash,"    private void rehash() {
        int i;
        int size = this._symbols.length;
        int newSize = size + size;
        if (newSize > 65536) {
            this._size = 0;
            this._canonicalize = false;
            this._symbols = new String[64];
            this._buckets = new Bucket[32];
            this._indexMask = 63;
            this._hashShared = false;
            return;
        }
        String[] oldSyms = this._symbols;
        Bucket[] oldBuckets = this._buckets;
        this._symbols = new String[newSize];
        this._buckets = new Bucket[newSize >> 1];
        this._indexMask = newSize - 1;
        this._sizeThreshold = CharsToNameCanonicalizer._thresholdSize(newSize);
        int count = 0;
        int maxColl = 0;
        for (i = 0; i < size; ++i) {
            Bucket newB;
            String symbol = oldSyms[i];
            if (symbol == null) continue;
            ++count;
            int index = this._hashToIndex(this.calcHash(symbol));
            if (this._symbols[index] == null) {
                this._symbols[index] = symbol;
                continue;
            }
            int bix = index >> 1;
            this._buckets[bix] = newB = new Bucket(symbol, this._buckets[bix]);
            maxColl = Math.max(maxColl, newB.length);
        }
        size >>= 1;
        for (i = 0; i < size; ++i) {
            Bucket b = oldBuckets[i];
            while (b != null) {
                ++count;
                String symbol = b.symbol;
                int index = this._hashToIndex(this.calcHash(symbol));
                if (this._symbols[index] == null) {
                    this._symbols[index] = symbol;
                } else {
                    Bucket newB;
                    int bix = index >> 1;
                    this._buckets[bix] = newB = new Bucket(symbol, this._buckets[bix]);
                    maxColl = Math.max(maxColl, newB.length);
                }
                b = b.next;
            }
        }
        this._longestCollisionList = maxColl;
        this._overflows = null;
        if (count != this._size) {
            throw new IllegalStateException(String.format(""Internal error on SymbolTable.rehash(): had %d entries; now have %d"", this._size, count));
        }
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.reportTooManyCollisions,"    protected void reportTooManyCollisions(int maxLen) {
        throw new IllegalStateException(""Longest collision chain in symbol table (of size "" + this._size + "") now exceeds maximum, "" + maxLen + "" -- suspect a DoS attack based on hash collisions"");
    }"
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createInitial,"        public static TableInfo createInitial(int sz) {
            return new TableInfo(0, 0, new String[sz], new Bucket[sz >> 1]);
        }
    "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.has,"        public String has(char[] buf, int start, int len) {
            if (this.symbol.length() != len) {
                return null;
            }
            int i = 0;
            do {
                if (this.symbol.charAt(i) == buf[start + i]) continue;
                return null;
            } while (++i < len);
            return this.symbol;
        }
    "
com.fasterxml.jackson.core.sym.Name2.equals,"    public boolean equals(int quad) {
        return false;
    }"
com.fasterxml.jackson.core.sym.Name2.equals,"    public boolean equals(int quad1, int quad2) {
        return quad1 == this.q1 && quad2 == this.q2;
    }"
com.fasterxml.jackson.core.sym.Name2.equals,"    public boolean equals(int quad1, int quad2, int q3) {
        return false;
    }"
com.fasterxml.jackson.core.sym.Name2.equals,"    public boolean equals(int[] quads, int qlen) {
        return qlen == 2 && quads[0] == this.q1 && quads[1] == this.q2;
    }
"
com.fasterxml.jackson.core.sym.Name3.equals,"    public boolean equals(int quad) {
        return false;
    }"
com.fasterxml.jackson.core.sym.Name3.equals,"    public boolean equals(int quad1, int quad2) {
        return false;
    }"
com.fasterxml.jackson.core.sym.Name3.equals,"    public boolean equals(int quad1, int quad2, int quad3) {
        return this.q1 == quad1 && this.q2 == quad2 && this.q3 == quad3;
    }"
com.fasterxml.jackson.core.sym.Name3.equals,"    public boolean equals(int[] quads, int qlen) {
        return qlen == 3 && quads[0] == this.q1 && quads[1] == this.q2 && quads[2] == this.q3;
    }
"
com.fasterxml.jackson.core.sym.Name.getName,"    public String getName() {
        return this._name;
    }"
com.fasterxml.jackson.core.sym.Name.equals,
com.fasterxml.jackson.core.sym.Name.equals,
com.fasterxml.jackson.core.sym.Name.equals,
com.fasterxml.jackson.core.sym.Name.equals,
com.fasterxml.jackson.core.sym.Name.toString,"    public String toString() {
        return this._name;
    }"
com.fasterxml.jackson.core.sym.Name.hashCode,"    public final int hashCode() {
        return this._hashCode;
    }"
com.fasterxml.jackson.core.sym.Name.equals,"    public boolean equals(Object o) {
        return o == this;
    }
"
com.fasterxml.jackson.core.sym.NameN.construct,"    public static NameN construct(String name, int hash, int[] q, int qlen) {
        if (qlen < 4) {
            throw new IllegalArgumentException();
        }
        int q1 = q[0];
        int q2 = q[1];
        int q3 = q[2];
        int q4 = q[3];
        int rem = qlen - 4;
        int[] buf = rem > 0 ? Arrays.copyOfRange(q, 4, qlen) : null;
        return new NameN(name, hash, q1, q2, q3, q4, buf, qlen);
    }"
com.fasterxml.jackson.core.sym.NameN.equals,"    public boolean equals(int quad) {
        return false;
    }"
com.fasterxml.jackson.core.sym.NameN.equals,"    public boolean equals(int quad1, int quad2) {
        return false;
    }"
com.fasterxml.jackson.core.sym.NameN.equals,"    public boolean equals(int quad1, int quad2, int quad3) {
        return false;
    }"
com.fasterxml.jackson.core.sym.NameN.equals,"    public boolean equals(int[] quads, int len) {
        if (len != this.qlen) {
            return false;
        }
        if (quads[0] != this.q1) {
            return false;
        }
        if (quads[1] != this.q2) {
            return false;
        }
        if (quads[2] != this.q3) {
            return false;
        }
        if (quads[3] != this.q4) {
            return false;
        }
        switch (len) {
            default: {
                return this._equals2(quads);
            }
            case 8: {
                if (quads[7] != this.q[3]) {
                    return false;
                }
            }
            case 7: {
                if (quads[6] != this.q[2]) {
                    return false;
                }
            }
            case 6: {
                if (quads[5] != this.q[1]) {
                    return false;
                }
            }
            case 5: {
                if (quads[4] == this.q[0]) break;
                return false;
            }
            case 4: 
        }
        return true;
    }"
com.fasterxml.jackson.core.sym.NameN._equals2,"    private final boolean _equals2(int[] quads) {
        int end = this.qlen - 4;
        for (int i = 0; i < end; ++i) {
            if (quads[i + 4] == this.q[i]) continue;
            return false;
        }
        return true;
    }
"
com.fasterxml.jackson.core.util.DefaultIndenter.withLinefeed,"    public DefaultIndenter withLinefeed(String lf) {
        if (lf.equals(this.eol)) {
            return this;
        }
        return new DefaultIndenter(this.getIndent(), lf);
    }"
com.fasterxml.jackson.core.util.DefaultIndenter.withIndent,"    public DefaultIndenter withIndent(String indent) {
        if (indent.equals(this.getIndent())) {
            return this;
        }
        return new DefaultIndenter(indent, this.eol);
    }"
com.fasterxml.jackson.core.util.DefaultIndenter.isInline,"    public boolean isInline() {
        return false;
    }"
com.fasterxml.jackson.core.util.DefaultIndenter.writeIndentation,"    public void writeIndentation(JsonGenerator jg, int level) throws IOException {
        jg.writeRaw(this.eol);
        if (level > 0) {
            level *= this.charsPerLevel;
            while (level > this.indents.length) {
                jg.writeRaw(this.indents, 0, this.indents.length);
                level -= this.indents.length;
            }
            jg.writeRaw(this.indents, 0, level);
        }
    }"
com.fasterxml.jackson.core.util.DefaultIndenter.getEol,"    public String getEol() {
        return this.eol;
    }"
com.fasterxml.jackson.core.util.DefaultIndenter.getIndent,"    public String getIndent() {
        return new String(this.indents, 0, this.charsPerLevel);
    }"
com.fasterxml.jackson.core.util.TextBuffer.releaseBuffers,"    public void releaseBuffers() {
        if (this._allocator == null) {
            this.resetWithEmpty();
        } else if (this._currentSegment != null) {
            this.resetWithEmpty();
            char[] buf = this._currentSegment;
            this._currentSegment = null;
            this._allocator.releaseCharBuffer(2, buf);
        }
    }"
com.fasterxml.jackson.core.util.TextBuffer.resetWithEmpty,"    public void resetWithEmpty() {
        this._inputStart = -1;
        this._currentSize = 0;
        this._inputLen = 0;
        this._inputBuffer = null;
        this._resultString = null;
        this._resultArray = null;
        if (this._hasSegments) {
            this.clearSegments();
        }
    }"
com.fasterxml.jackson.core.util.TextBuffer.resetWithShared,"    public void resetWithShared(char[] buf, int start, int len) {
        this._resultString = null;
        this._resultArray = null;
        this._inputBuffer = buf;
        this._inputStart = start;
        this._inputLen = len;
        if (this._hasSegments) {
            this.clearSegments();
        }
    }"
com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy,"    public void resetWithCopy(char[] buf, int start, int len) {
        this._inputBuffer = null;
        this._inputStart = -1;
        this._inputLen = 0;
        this._resultString = null;
        this._resultArray = null;
        if (this._hasSegments) {
            this.clearSegments();
        } else if (this._currentSegment == null) {
            this._currentSegment = this.buf(len);
        }
        this._segmentSize = 0;
        this._currentSize = 0;
        this.append(buf, start, len);
    }"
com.fasterxml.jackson.core.util.TextBuffer.resetWithString,"    public void resetWithString(String value) {
        this._inputBuffer = null;
        this._inputStart = -1;
        this._inputLen = 0;
        this._resultString = value;
        this._resultArray = null;
        if (this._hasSegments) {
            this.clearSegments();
        }
        this._currentSize = 0;
    }"
com.fasterxml.jackson.core.util.TextBuffer.buf,"    private char[] buf(int needed) {
        if (this._allocator != null) {
            return this._allocator.allocCharBuffer(2, needed);
        }
        return new char[Math.max(needed, 1000)];
    }"
com.fasterxml.jackson.core.util.TextBuffer.clearSegments,"    private void clearSegments() {
        this._hasSegments = false;
        this._segments.clear();
        this._segmentSize = 0;
        this._currentSize = 0;
    }"
com.fasterxml.jackson.core.util.TextBuffer.size,"    public int size() {
        if (this._inputStart >= 0) {
            return this._inputLen;
        }
        if (this._resultArray != null) {
            return this._resultArray.length;
        }
        if (this._resultString != null) {
            return this._resultString.length();
        }
        return this._segmentSize + this._currentSize;
    }"
com.fasterxml.jackson.core.util.TextBuffer.getTextOffset,"    public int getTextOffset() {
        return this._inputStart >= 0 ? this._inputStart : 0;
    }"
com.fasterxml.jackson.core.util.TextBuffer.hasTextAsCharacters,"    public boolean hasTextAsCharacters() {
        if (this._inputStart >= 0 || this._resultArray != null) {
            return true;
        }
        return this._resultString == null;
    }"
com.fasterxml.jackson.core.util.TextBuffer.getTextBuffer,"    public char[] getTextBuffer() {
        if (this._inputStart >= 0) {
            return this._inputBuffer;
        }
        if (this._resultArray != null) {
            return this._resultArray;
        }
        if (this._resultString != null) {
            this._resultArray = this._resultString.toCharArray();
            return this._resultArray;
        }
        if (!this._hasSegments) {
            return this._currentSegment == null ? NO_CHARS : this._currentSegment;
        }
        return this.contentsAsArray();
    }"
com.fasterxml.jackson.core.util.TextBuffer.contentsAsString,"    public String contentsAsString() {
        if (this._resultString == null) {
            if (this._resultArray != null) {
                this._resultString = new String(this._resultArray);
            } else if (this._inputStart >= 0) {
                if (this._inputLen < 1) {
                    this._resultString = """";
                    return """";
                }
                this._resultString = new String(this._inputBuffer, this._inputStart, this._inputLen);
            } else {
                int segLen = this._segmentSize;
                int currLen = this._currentSize;
                if (segLen == 0) {
                    this._resultString = currLen == 0 ? """" : new String(this._currentSegment, 0, currLen);
                } else {
                    StringBuilder sb = new StringBuilder(segLen + currLen);
                    if (this._segments != null) {
                        int len = this._segments.size();
                        for (int i = 0; i < len; ++i) {
                            char[] curr = this._segments.get(i);
                            sb.append(curr, 0, curr.length);
                        }
                    }
                    sb.append(this._currentSegment, 0, this._currentSize);
                    this._resultString = sb.toString();
                }
            }
        }
        return this._resultString;
    }"
com.fasterxml.jackson.core.util.TextBuffer.contentsAsArray,"    public char[] contentsAsArray() {
        char[] result = this._resultArray;
        if (result == null) {
            this._resultArray = result = this.resultArray();
        }
        return result;
    }"
com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal,"    public BigDecimal contentsAsDecimal() throws NumberFormatException {
        if (this._resultArray != null) {
            return NumberInput.parseBigDecimal(this._resultArray);
        }
        if (this._inputStart >= 0 && this._inputBuffer != null) {
            return NumberInput.parseBigDecimal(this._inputBuffer, this._inputStart, this._inputLen);
        }
        if (this._segmentSize == 0 && this._currentSegment != null) {
            return NumberInput.parseBigDecimal(this._currentSegment, 0, this._currentSize);
        }
        return NumberInput.parseBigDecimal(this.contentsAsArray());
    }"
com.fasterxml.jackson.core.util.TextBuffer.contentsAsDouble,"    public double contentsAsDouble() throws NumberFormatException {
        return NumberInput.parseDouble(this.contentsAsString());
    }"
com.fasterxml.jackson.core.util.TextBuffer.contentsToWriter,"    public int contentsToWriter(Writer w) throws IOException {
        int len;
        if (this._resultArray != null) {
            w.write(this._resultArray);
            return this._resultArray.length;
        }
        if (this._resultString != null) {
            w.write(this._resultString);
            return this._resultString.length();
        }
        if (this._inputStart >= 0) {
            int len2 = this._inputLen;
            if (len2 > 0) {
                w.write(this._inputBuffer, this._inputStart, len2);
            }
            return len2;
        }
        int total = 0;
        if (this._segments != null) {
            int end = this._segments.size();
            for (int i = 0; i < end; ++i) {
                char[] curr = this._segments.get(i);
                int currLen = curr.length;
                w.write(curr, 0, currLen);
                total += currLen;
            }
        }
        if ((len = this._currentSize) > 0) {
            w.write(this._currentSegment, 0, len);
            total += len;
        }
        return total;
    }"
com.fasterxml.jackson.core.util.TextBuffer.ensureNotShared,"    public void ensureNotShared() {
        if (this._inputStart >= 0) {
            this.unshare(16);
        }
    }"
com.fasterxml.jackson.core.util.TextBuffer.append,"    public void append(char c) {
        if (this._inputStart >= 0) {
            this.unshare(16);
        }
        this._resultString = null;
        this._resultArray = null;
        char[] curr = this._currentSegment;
        if (this._currentSize >= curr.length) {
            this.expand(1);
            curr = this._currentSegment;
        }
        curr[this._currentSize++] = c;
    }"
com.fasterxml.jackson.core.util.TextBuffer.append,"    public void append(char[] c, int start, int len) {
        int amount;
        if (this._inputStart >= 0) {
            this.unshare(len);
        }
        this._resultString = null;
        this._resultArray = null;
        char[] curr = this._currentSegment;
        int max = curr.length - this._currentSize;
        if (max >= len) {
            System.arraycopy(c, start, curr, this._currentSize, len);
            this._currentSize += len;
            return;
        }
        if (max > 0) {
            System.arraycopy(c, start, curr, this._currentSize, max);
            start += max;
            len -= max;
        }
        do {
            this.expand(len);
            amount = Math.min(this._currentSegment.length, len);
            System.arraycopy(c, start, this._currentSegment, 0, amount);
            this._currentSize += amount;
            start += amount;
        } while ((len -= amount) > 0);
    }"
com.fasterxml.jackson.core.util.TextBuffer.append,"    public void append(String str, int offset, int len) {
        int amount;
        if (this._inputStart >= 0) {
            this.unshare(len);
        }
        this._resultString = null;
        this._resultArray = null;
        char[] curr = this._currentSegment;
        int max = curr.length - this._currentSize;
        if (max >= len) {
            str.getChars(offset, offset + len, curr, this._currentSize);
            this._currentSize += len;
            return;
        }
        if (max > 0) {
            str.getChars(offset, offset + max, curr, this._currentSize);
            len -= max;
            offset += max;
        }
        do {
            this.expand(len);
            amount = Math.min(this._currentSegment.length, len);
            str.getChars(offset, offset + amount, this._currentSegment, 0);
            this._currentSize += amount;
            offset += amount;
        } while ((len -= amount) > 0);
    }"
com.fasterxml.jackson.core.util.TextBuffer.getCurrentSegment,"    public char[] getCurrentSegment() {
        if (this._inputStart >= 0) {
            this.unshare(1);
        } else {
            char[] curr = this._currentSegment;
            if (curr == null) {
                this._currentSegment = this.buf(0);
            } else if (this._currentSize >= curr.length) {
                this.expand(1);
            }
        }
        return this._currentSegment;
    }"
com.fasterxml.jackson.core.util.TextBuffer.emptyAndGetCurrentSegment,"    public char[] emptyAndGetCurrentSegment() {
        char[] curr;
        this._inputStart = -1;
        this._currentSize = 0;
        this._inputLen = 0;
        this._inputBuffer = null;
        this._resultString = null;
        this._resultArray = null;
        if (this._hasSegments) {
            this.clearSegments();
        }
        if ((curr = this._currentSegment) == null) {
            this._currentSegment = curr = this.buf(0);
        }
        return curr;
    }"
com.fasterxml.jackson.core.util.TextBuffer.getCurrentSegmentSize,"    public int getCurrentSegmentSize() {
        return this._currentSize;
    }"
com.fasterxml.jackson.core.util.TextBuffer.setCurrentLength,"    public void setCurrentLength(int len) {
        this._currentSize = len;
    }"
com.fasterxml.jackson.core.util.TextBuffer.setCurrentAndReturn,"    public String setCurrentAndReturn(int len) {
        String str;
        this._currentSize = len;
        if (this._segmentSize > 0) {
            return this.contentsAsString();
        }
        int currLen = this._currentSize;
        this._resultString = str = currLen == 0 ? """" : new String(this._currentSegment, 0, currLen);
        return str;
    }"
com.fasterxml.jackson.core.util.TextBuffer.finishCurrentSegment,"    public char[] finishCurrentSegment() {
        if (this._segments == null) {
            this._segments = new ArrayList();
        }
        this._hasSegments = true;
        this._segments.add(this._currentSegment);
        int oldLen = this._currentSegment.length;
        this._segmentSize += oldLen;
        this._currentSize = 0;
        int newLen = oldLen + (oldLen >> 1);
        if (newLen < 1000) {
            newLen = 1000;
        } else if (newLen > 262144) {
            newLen = 262144;
        }
        char[] curr = this.carr(newLen);
        this._currentSegment = curr;
        return curr;
    }"
com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment,"    public char[] expandCurrentSegment() {
        char[] curr = this._currentSegment;
        int len = curr.length;
        int newLen = len + (len >> 1);
        if (newLen > 262144) {
            newLen = len + (len >> 2);
        }
        this._currentSegment = Arrays.copyOf(curr, newLen);
        return this._currentSegment;
    }"
com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment,"    public char[] expandCurrentSegment(int minSize) {
        char[] curr = this._currentSegment;
        if (curr.length >= minSize) {
            return curr;
        }
        this._currentSegment = curr = Arrays.copyOf(curr, minSize);
        return curr;
    }"
com.fasterxml.jackson.core.util.TextBuffer.toString,"    public String toString() {
        return this.contentsAsString();
    }"
com.fasterxml.jackson.core.util.TextBuffer.unshare,"    private void unshare(int needExtra) {
        int sharedLen = this._inputLen;
        this._inputLen = 0;
        char[] inputBuf = this._inputBuffer;
        this._inputBuffer = null;
        int start = this._inputStart;
        this._inputStart = -1;
        int needed = sharedLen + needExtra;
        if (this._currentSegment == null || needed > this._currentSegment.length) {
            this._currentSegment = this.buf(needed);
        }
        if (sharedLen > 0) {
            System.arraycopy(inputBuf, start, this._currentSegment, 0, sharedLen);
        }
        this._segmentSize = 0;
        this._currentSize = sharedLen;
    }"
com.fasterxml.jackson.core.util.TextBuffer.expand,"    private void expand(int minNewSegmentSize) {
        if (this._segments == null) {
            this._segments = new ArrayList();
        }
        char[] curr = this._currentSegment;
        this._hasSegments = true;
        this._segments.add(curr);
        this._segmentSize += curr.length;
        this._currentSize = 0;
        int oldLen = curr.length;
        int newLen = oldLen + (oldLen >> 1);
        if (newLen < 1000) {
            newLen = 1000;
        } else if (newLen > 262144) {
            newLen = 262144;
        }
        this._currentSegment = this.carr(newLen);
    }"
com.fasterxml.jackson.core.util.TextBuffer.resultArray,"    private char[] resultArray() {
        if (this._resultString != null) {
            return this._resultString.toCharArray();
        }
        if (this._inputStart >= 0) {
            int len = this._inputLen;
            if (len < 1) {
                return NO_CHARS;
            }
            int start = this._inputStart;
            if (start == 0) {
                return Arrays.copyOf(this._inputBuffer, len);
            }
            return Arrays.copyOfRange(this._inputBuffer, start, start + len);
        }
        int size = this.size();
        if (size < 1) {
            return NO_CHARS;
        }
        int offset = 0;
        char[] result = this.carr(size);
        if (this._segments != null) {
            int len = this._segments.size();
            for (int i = 0; i < len; ++i) {
                char[] curr = this._segments.get(i);
                int currLen = curr.length;
                System.arraycopy(curr, 0, result, offset, currLen);
                offset += currLen;
            }
        }
        System.arraycopy(this._currentSegment, 0, result, offset, this._currentSize);
        return result;
    }"
com.fasterxml.jackson.core.util.TextBuffer.carr,"    private char[] carr(int len) {
        return new char[len];
    }
"
com.fasterxml.jackson.core.util.RequestPayload.getRawPayload,"    public Object getRawPayload() {
        if (this._payloadAsBytes != null) {
            return this._payloadAsBytes;
        }
        return this._payloadAsText;
    }"
com.fasterxml.jackson.core.util.RequestPayload.toString,"    public String toString() {
        if (this._payloadAsBytes != null) {
            try {
                return new String(this._payloadAsBytes, this._charset);
            }
            catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return this._payloadAsText.toString();
    }
"
com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened,"    public static JsonParserSequence createFlattened(boolean checkForExistingToken, JsonParser first, JsonParser second) {
        if (!(first instanceof JsonParserSequence) && !(second instanceof JsonParserSequence)) {
            return new JsonParserSequence(checkForExistingToken, new JsonParser[]{first, second});
        }
        ArrayList<JsonParser> p = new ArrayList<JsonParser>();
        if (first instanceof JsonParserSequence) {
            ((JsonParserSequence)first).addFlattenedActiveParsers(p);
        } else {
            p.add(first);
        }
        if (second instanceof JsonParserSequence) {
            ((JsonParserSequence)second).addFlattenedActiveParsers(p);
        } else {
            p.add(second);
        }
        return new JsonParserSequence(checkForExistingToken, p.toArray(new JsonParser[p.size()]));
    }"
com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened,"    public static JsonParserSequence createFlattened(JsonParser first, JsonParser second) {
        return JsonParserSequence.createFlattened(false, first, second);
    }"
com.fasterxml.jackson.core.util.JsonParserSequence.addFlattenedActiveParsers,"    protected void addFlattenedActiveParsers(List<JsonParser> listToAddIn) {
        int len = this._parsers.length;
        for (int i = this._nextParserIndex - 1; i < len; ++i) {
            JsonParser p = this._parsers[i];
            if (p instanceof JsonParserSequence) {
                ((JsonParserSequence)p).addFlattenedActiveParsers(listToAddIn);
                continue;
            }
            listToAddIn.add(p);
        }
    }"
com.fasterxml.jackson.core.util.JsonParserSequence.close,"    public void close() throws IOException {
        do {
            this.delegate.close();
        } while (this.switchToNext());
    }"
com.fasterxml.jackson.core.util.JsonParserSequence.nextToken,"    public JsonToken nextToken() throws IOException {
        if (this.delegate == null) {
            return null;
        }
        if (this._hasToken) {
            this._hasToken = false;
            return this.delegate.currentToken();
        }
        JsonToken t = this.delegate.nextToken();
        if (t == null) {
            return this.switchAndReturnNext();
        }
        return t;
    }"
com.fasterxml.jackson.core.util.JsonParserSequence.containedParsersCount,"    public int containedParsersCount() {
        return this._parsers.length;
    }"
com.fasterxml.jackson.core.util.JsonParserSequence.switchToNext,"    protected boolean switchToNext() {
        if (this._nextParserIndex < this._parsers.length) {
            this.delegate = this._parsers[this._nextParserIndex++];
            return true;
        }
        return false;
    }"
com.fasterxml.jackson.core.util.JsonParserSequence.switchAndReturnNext,"    protected JsonToken switchAndReturnNext() throws IOException {
        while (this._nextParserIndex < this._parsers.length) {
            this.delegate = this._parsers[this._nextParserIndex++];
            if (this._checkForExistingToken && this.delegate.hasCurrentToken()) {
                return this.delegate.getCurrentToken();
            }
            JsonToken t = this.delegate.nextToken();
            if (t == null) continue;
            return t;
        }
        return null;
    }
"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue,"    public Object getCurrentValue() {
        return this.delegate.getCurrentValue();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue,"    public void setCurrentValue(Object v) {
        this.delegate.setCurrentValue(v);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate,"    public JsonGenerator getDelegate() {
        return this.delegate;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec,"    public ObjectCodec getCodec() {
        return this.delegate.getCodec();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec,"    public JsonGenerator setCodec(ObjectCodec oc) {
        this.delegate.setCodec(oc);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema,"    public void setSchema(FormatSchema schema) {
        this.delegate.setSchema(schema);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema,"    public FormatSchema getSchema() {
        return this.delegate.getSchema();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version,"    public Version version() {
        return this.delegate.version();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget,"    public Object getOutputTarget() {
        return this.delegate.getOutputTarget();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered,"    public int getOutputBuffered() {
        return this.delegate.getOutputBuffered();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema,"    public boolean canUseSchema(FormatSchema schema) {
        return this.delegate.canUseSchema(schema);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId,"    public boolean canWriteTypeId() {
        return this.delegate.canWriteTypeId();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId,"    public boolean canWriteObjectId() {
        return this.delegate.canWriteObjectId();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively,"    public boolean canWriteBinaryNatively() {
        return this.delegate.canWriteBinaryNatively();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields,"    public boolean canOmitFields() {
        return this.delegate.canOmitFields();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable,"    public JsonGenerator enable(JsonGenerator.Feature f) {
        this.delegate.enable(f);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable,"    public JsonGenerator disable(JsonGenerator.Feature f) {
        this.delegate.disable(f);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled,"    public boolean isEnabled(JsonGenerator.Feature f) {
        return this.delegate.isEnabled(f);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask,"    public int getFeatureMask() {
        return this.delegate.getFeatureMask();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask,"    public JsonGenerator setFeatureMask(int mask) {
        this.delegate.setFeatureMask(mask);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures,"    public JsonGenerator overrideStdFeatures(int values, int mask) {
        this.delegate.overrideStdFeatures(values, mask);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures,"    public JsonGenerator overrideFormatFeatures(int values, int mask) {
        this.delegate.overrideFormatFeatures(values, mask);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter,"    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {
        this.delegate.setPrettyPrinter(pp);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter,"    public PrettyPrinter getPrettyPrinter() {
        return this.delegate.getPrettyPrinter();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter,"    public JsonGenerator useDefaultPrettyPrinter() {
        this.delegate.useDefaultPrettyPrinter();
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar,"    public JsonGenerator setHighestNonEscapedChar(int charCode) {
        this.delegate.setHighestNonEscapedChar(charCode);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar,"    public int getHighestEscapedChar() {
        return this.delegate.getHighestEscapedChar();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes,"    public CharacterEscapes getCharacterEscapes() {
        return this.delegate.getCharacterEscapes();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes,"    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {
        this.delegate.setCharacterEscapes(esc);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator,"    public JsonGenerator setRootValueSeparator(SerializableString sep) {
        this.delegate.setRootValueSeparator(sep);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray,"    public void writeStartArray() throws IOException {
        this.delegate.writeStartArray();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray,"    public void writeStartArray(int size) throws IOException {
        this.delegate.writeStartArray(size);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray,"    public void writeEndArray() throws IOException {
        this.delegate.writeEndArray();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject,"    public void writeStartObject() throws IOException {
        this.delegate.writeStartObject();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject,"    public void writeStartObject(Object forValue) throws IOException {
        this.delegate.writeStartObject(forValue);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject,"    public void writeEndObject() throws IOException {
        this.delegate.writeEndObject();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName,"    public void writeFieldName(String name) throws IOException {
        this.delegate.writeFieldName(name);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName,"    public void writeFieldName(SerializableString name) throws IOException {
        this.delegate.writeFieldName(name);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId,"    public void writeFieldId(long id) throws IOException {
        this.delegate.writeFieldId(id);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray,"    public void writeArray(int[] array, int offset, int length) throws IOException {
        this.delegate.writeArray(array, offset, length);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray,"    public void writeArray(long[] array, int offset, int length) throws IOException {
        this.delegate.writeArray(array, offset, length);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray,"    public void writeArray(double[] array, int offset, int length) throws IOException {
        this.delegate.writeArray(array, offset, length);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString,"    public void writeString(String text) throws IOException {
        this.delegate.writeString(text);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString,"    public void writeString(char[] text, int offset, int len) throws IOException {
        this.delegate.writeString(text, offset, len);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString,"    public void writeString(SerializableString text) throws IOException {
        this.delegate.writeString(text);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String,"    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {
        this.delegate.writeRawUTF8String(text, offset, length);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String,"    public void writeUTF8String(byte[] text, int offset, int length) throws IOException {
        this.delegate.writeUTF8String(text, offset, length);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw,"    public void writeRaw(String text) throws IOException {
        this.delegate.writeRaw(text);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw,"    public void writeRaw(String text, int offset, int len) throws IOException {
        this.delegate.writeRaw(text, offset, len);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw,"    public void writeRaw(SerializableString raw) throws IOException {
        this.delegate.writeRaw(raw);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw,"    public void writeRaw(char[] text, int offset, int len) throws IOException {
        this.delegate.writeRaw(text, offset, len);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw,"    public void writeRaw(char c) throws IOException {
        this.delegate.writeRaw(c);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue,"    public void writeRawValue(String text) throws IOException {
        this.delegate.writeRawValue(text);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue,"    public void writeRawValue(String text, int offset, int len) throws IOException {
        this.delegate.writeRawValue(text, offset, len);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue,"    public void writeRawValue(char[] text, int offset, int len) throws IOException {
        this.delegate.writeRawValue(text, offset, len);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary,"    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {
        this.delegate.writeBinary(b64variant, data, offset, len);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary,"    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {
        return this.delegate.writeBinary(b64variant, data, dataLength);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber,"    public void writeNumber(short v) throws IOException {
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber,"    public void writeNumber(int v) throws IOException {
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber,"    public void writeNumber(long v) throws IOException {
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber,"    public void writeNumber(BigInteger v) throws IOException {
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber,"    public void writeNumber(double v) throws IOException {
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber,"    public void writeNumber(float v) throws IOException {
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber,"    public void writeNumber(BigDecimal v) throws IOException {
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber,"    public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException {
        this.delegate.writeNumber(encodedValue);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean,"    public void writeBoolean(boolean state) throws IOException {
        this.delegate.writeBoolean(state);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull,"    public void writeNull() throws IOException {
        this.delegate.writeNull();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField,"    public void writeOmittedField(String fieldName) throws IOException {
        this.delegate.writeOmittedField(fieldName);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId,"    public void writeObjectId(Object id) throws IOException {
        this.delegate.writeObjectId(id);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef,"    public void writeObjectRef(Object id) throws IOException {
        this.delegate.writeObjectRef(id);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId,"    public void writeTypeId(Object id) throws IOException {
        this.delegate.writeTypeId(id);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject,"    public void writeEmbeddedObject(Object object) throws IOException {
        this.delegate.writeEmbeddedObject(object);
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject,"    public void writeObject(Object pojo) throws IOException, JsonProcessingException {
        if (this.delegateCopyMethods) {
            this.delegate.writeObject(pojo);
            return;
        }
        if (pojo == null) {
            this.writeNull();
        } else {
            if (this.getCodec() != null) {
                this.getCodec().writeValue(this, pojo);
                return;
            }
            this._writeSimpleObject(pojo);
        }
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree,"    public void writeTree(TreeNode rootNode) throws IOException {
        if (this.delegateCopyMethods) {
            this.delegate.writeTree(rootNode);
            return;
        }
        if (rootNode == null) {
            this.writeNull();
        } else {
            if (this.getCodec() == null) {
                throw new IllegalStateException(""No ObjectCodec defined"");
            }
            this.getCodec().writeValue(this, rootNode);
        }
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent,"    public void copyCurrentEvent(JsonParser jp) throws IOException {
        if (this.delegateCopyMethods) {
            this.delegate.copyCurrentEvent(jp);
        } else {
            super.copyCurrentEvent(jp);
        }
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure,"    public void copyCurrentStructure(JsonParser jp) throws IOException {
        if (this.delegateCopyMethods) {
            this.delegate.copyCurrentStructure(jp);
        } else {
            super.copyCurrentStructure(jp);
        }
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext,"    public JsonStreamContext getOutputContext() {
        return this.delegate.getOutputContext();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush,"    public void flush() throws IOException {
        this.delegate.flush();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close,"    public void close() throws IOException {
        this.delegate.close();
    }"
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed,"    public boolean isClosed() {
        return this.delegate.isClosed();
    }
"
com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer,"    public final byte[] allocByteBuffer(int ix) {
        return this.allocByteBuffer(ix, 0);
    }"
com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer,"    public byte[] allocByteBuffer(int ix, int minSize) {
        byte[] buffer;
        int DEF_SIZE = this.byteBufferLength(ix);
        if (minSize < DEF_SIZE) {
            minSize = DEF_SIZE;
        }
        if ((buffer = this._byteBuffers[ix]) == null || buffer.length < minSize) {
            buffer = this.balloc(minSize);
        } else {
            this._byteBuffers[ix] = null;
        }
        return buffer;
    }"
com.fasterxml.jackson.core.util.BufferRecycler.releaseByteBuffer,"    public final void releaseByteBuffer(int ix, byte[] buffer) {
        this._byteBuffers[ix] = buffer;
    }"
com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer,"    public final char[] allocCharBuffer(int ix) {
        return this.allocCharBuffer(ix, 0);
    }"
com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer,"    public char[] allocCharBuffer(int ix, int minSize) {
        char[] buffer;
        int DEF_SIZE = this.charBufferLength(ix);
        if (minSize < DEF_SIZE) {
            minSize = DEF_SIZE;
        }
        if ((buffer = this._charBuffers[ix]) == null || buffer.length < minSize) {
            buffer = this.calloc(minSize);
        } else {
            this._charBuffers[ix] = null;
        }
        return buffer;
    }"
com.fasterxml.jackson.core.util.BufferRecycler.releaseCharBuffer,"    public void releaseCharBuffer(int ix, char[] buffer) {
        this._charBuffers[ix] = buffer;
    }"
com.fasterxml.jackson.core.util.BufferRecycler.byteBufferLength,"    protected int byteBufferLength(int ix) {
        return BYTE_BUFFER_LENGTHS[ix];
    }"
com.fasterxml.jackson.core.util.BufferRecycler.charBufferLength,"    protected int charBufferLength(int ix) {
        return CHAR_BUFFER_LENGTHS[ix];
    }"
com.fasterxml.jackson.core.util.BufferRecycler.balloc,"    protected byte[] balloc(int size) {
        return new byte[size];
    }"
com.fasterxml.jackson.core.util.BufferRecycler.calloc,"    protected char[] calloc(int size) {
        return new char[size];
    }
"
com.fasterxml.jackson.core.util.InternCache.intern,"* WARNING - Removed try catching itself - possible behaviour change.
*/
    public String intern(String input) {
        String result = (String)this.get(input);
        if (result != null) {
            return result;
        }
        if (this.size() >= 180) {
            Object object = this.lock;
            synchronized (object) {
                if (this.size() >= 180) {
                    this.clear();
                }
            }
        }
        result = input.intern();
        this.put(result, result);
        return result;
    }
"
com.fasterxml.jackson.core.util.ByteArrayBuilder.reset,"    public void reset() {
        this._pastLen = 0;
        this._currBlockPtr = 0;
        if (!this._pastBlocks.isEmpty()) {
            this._pastBlocks.clear();
        }
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.release,"    public void release() {
        this.reset();
        if (this._bufferRecycler != null && this._currBlock != null) {
            this._bufferRecycler.releaseByteBuffer(2, this._currBlock);
            this._currBlock = null;
        }
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.append,"    public void append(int i) {
        if (this._currBlockPtr >= this._currBlock.length) {
            this._allocMore();
        }
        this._currBlock[this._currBlockPtr++] = (byte)i;
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.appendTwoBytes,"    public void appendTwoBytes(int b16) {
        if (this._currBlockPtr + 1 < this._currBlock.length) {
            this._currBlock[this._currBlockPtr++] = (byte)(b16 >> 8);
            this._currBlock[this._currBlockPtr++] = (byte)b16;
        } else {
            this.append(b16 >> 8);
            this.append(b16);
        }
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.appendThreeBytes,"    public void appendThreeBytes(int b24) {
        if (this._currBlockPtr + 2 < this._currBlock.length) {
            this._currBlock[this._currBlockPtr++] = (byte)(b24 >> 16);
            this._currBlock[this._currBlockPtr++] = (byte)(b24 >> 8);
            this._currBlock[this._currBlockPtr++] = (byte)b24;
        } else {
            this.append(b24 >> 16);
            this.append(b24 >> 8);
            this.append(b24);
        }
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.toByteArray,"    public byte[] toByteArray() {
        int totalLen = this._pastLen + this._currBlockPtr;
        if (totalLen == 0) {
            return NO_BYTES;
        }
        byte[] result = new byte[totalLen];
        int offset = 0;
        for (byte[] block : this._pastBlocks) {
            int len = block.length;
            System.arraycopy(block, 0, result, offset, len);
            offset += len;
        }
        System.arraycopy(this._currBlock, 0, result, offset, this._currBlockPtr);
        if ((offset += this._currBlockPtr) != totalLen) {
            throw new RuntimeException(""Internal error: total len assumed to be "" + totalLen + "", copied "" + offset + "" bytes"");
        }
        if (!this._pastBlocks.isEmpty()) {
            this.reset();
        }
        return result;
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.resetAndGetFirstSegment,"    public byte[] resetAndGetFirstSegment() {
        this.reset();
        return this._currBlock;
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.finishCurrentSegment,"    public byte[] finishCurrentSegment() {
        this._allocMore();
        return this._currBlock;
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.completeAndCoalesce,"    public byte[] completeAndCoalesce(int lastBlockLength) {
        this._currBlockPtr = lastBlockLength;
        return this.toByteArray();
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.getCurrentSegment,"    public byte[] getCurrentSegment() {
        return this._currBlock;
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.setCurrentSegmentLength,"    public void setCurrentSegmentLength(int len) {
        this._currBlockPtr = len;
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.getCurrentSegmentLength,"    public int getCurrentSegmentLength() {
        return this._currBlockPtr;
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.write,"    public void write(byte[] b) {
        this.write(b, 0, b.length);
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.write,"    public void write(byte[] b, int off, int len) {
        while (true) {
            int max;
            int toCopy;
            if ((toCopy = Math.min(max = this._currBlock.length - this._currBlockPtr, len)) > 0) {
                System.arraycopy(b, off, this._currBlock, this._currBlockPtr, toCopy);
                off += toCopy;
                this._currBlockPtr += toCopy;
                len -= toCopy;
            }
            if (len <= 0) break;
            this._allocMore();
        }
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.write,"    public void write(int b) {
        this.append(b);
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.close,"    public void close() {
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder.flush,"    public void flush() {
    }"
com.fasterxml.jackson.core.util.ByteArrayBuilder._allocMore,"    private void _allocMore() {
        int newPastLen = this._pastLen + this._currBlock.length;
        if (newPastLen < 0) {
            throw new IllegalStateException(""Maximum Java array size (2GB) exceeded by `ByteArrayBuilder`"");
        }
        this._pastLen = newPastLen;
        int newSize = Math.max(this._pastLen >> 1, 1000);
        if (newSize > 262144) {
            newSize = 262144;
        }
        this._pastBlocks.add(this._currBlock);
        this._currBlock = new byte[newSize];
        this._currBlockPtr = 0;
    }
"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator,"    public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator) {
        if (this._rootSeparator == rootSeparator || rootSeparator != null && rootSeparator.equals(this._rootSeparator)) {
            return this;
        }
        return new DefaultPrettyPrinter(this, rootSeparator);
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator,"    public DefaultPrettyPrinter withRootSeparator(String rootSeparator) {
        return this.withRootSeparator(rootSeparator == null ? null : new SerializedString(rootSeparator));
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentArraysWith,"    public void indentArraysWith(Indenter i) {
        this._arrayIndenter = i == null ? NopIndenter.instance : i;
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentObjectsWith,"    public void indentObjectsWith(Indenter i) {
        this._objectIndenter = i == null ? NopIndenter.instance : i;
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.spacesInObjectEntries,"    public void spacesInObjectEntries(boolean b) {
        this._spacesInObjectEntries = b;
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withArrayIndenter,"    public DefaultPrettyPrinter withArrayIndenter(Indenter i) {
        if (i == null) {
            i = NopIndenter.instance;
        }
        if (this._arrayIndenter == i) {
            return this;
        }
        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);
        pp._arrayIndenter = i;
        return pp;
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withObjectIndenter,"    public DefaultPrettyPrinter withObjectIndenter(Indenter i) {
        if (i == null) {
            i = NopIndenter.instance;
        }
        if (this._objectIndenter == i) {
            return this;
        }
        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);
        pp._objectIndenter = i;
        return pp;
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withSpacesInObjectEntries,"    public DefaultPrettyPrinter withSpacesInObjectEntries() {
        return this._withSpaces(true);
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withoutSpacesInObjectEntries,"    public DefaultPrettyPrinter withoutSpacesInObjectEntries() {
        return this._withSpaces(false);
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._withSpaces,"    protected DefaultPrettyPrinter _withSpaces(boolean state) {
        if (this._spacesInObjectEntries == state) {
            return this;
        }
        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);
        pp._spacesInObjectEntries = state;
        return pp;
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.createInstance,"    public DefaultPrettyPrinter createInstance() {
        return new DefaultPrettyPrinter(this);
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeRootValueSeparator,"    public void writeRootValueSeparator(JsonGenerator jg) throws IOException {
        if (this._rootSeparator != null) {
            jg.writeRaw(this._rootSeparator);
        }
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartObject,"    public void writeStartObject(JsonGenerator jg) throws IOException {
        jg.writeRaw('{');
        if (!this._objectIndenter.isInline()) {
            ++this._nesting;
        }
    "
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeObjectEntries,"    public void beforeObjectEntries(JsonGenerator jg) throws IOException {
        this._objectIndenter.writeIndentation(jg, this._nesting);
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectFieldValueSeparator,"    public void writeObjectFieldValueSeparator(JsonGenerator jg) throws IOException {
        if (this._spacesInObjectEntries) {
            jg.writeRaw("" : "");
        } else {
            jg.writeRaw(':');
        }
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectEntrySeparator,"    public void writeObjectEntrySeparator(JsonGenerator jg) throws IOException {
        jg.writeRaw(',');
        this._objectIndenter.writeIndentation(jg, this._nesting);
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndObject,"    public void writeEndObject(JsonGenerator jg, int nrOfEntries) throws IOException {
        if (!this._objectIndenter.isInline()) {
            --this._nesting;
        }
        if (nrOfEntries > 0) {
            this._objectIndenter.writeIndentation(jg, this._nesting);
        } else {
            jg.writeRaw(' ');
        }
        jg.writeRaw('}');
    "
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartArray,"    public void writeStartArray(JsonGenerator jg) throws IOException {
        if (!this._arrayIndenter.isInline()) {
            ++this._nesting;
        }
        jg.writeRaw('[');
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeArrayValues,"    public void beforeArrayValues(JsonGenerator jg) throws IOException {
        this._arrayIndenter.writeIndentation(jg, this._nesting);
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeArrayValueSeparator,"    public void writeArrayValueSeparator(JsonGenerator gen) throws IOException {
        gen.writeRaw(',');
        this._arrayIndenter.writeIndentation(gen, this._nesting);
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndArray,"    public void writeEndArray(JsonGenerator gen, int nrOfValues) throws IOException {
        if (!this._arrayIndenter.isInline()) {
            --this._nesting;
        }
        if (nrOfValues > 0) {
            this._arrayIndenter.writeIndentation(gen, this._nesting);
        } else {
            gen.writeRaw(' ');
        }
        gen.writeRaw(']');
    }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeIndentation,"        public void writeIndentation(JsonGenerator jg, int level) throws IOException {
            jg.writeRaw(' ');
        }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.isInline,"        public boolean isInline() {
            return true;
        }
    }

    public static class NopIndenter
    implements Indenter,
    Serializable {
        public static final NopIndenter instance = new NopIndenter();

        @Override
        public void writeIndentation(JsonGenerator jg, int level) throws IOException {
        }

        @Override
        public boolean isInline() {
            return true;
        }
    }

    public static interface Indenter {
        public void writeIndentation(JsonGenerator var1, int var2) throws IOException;

        public boolean isInline();
    "
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeIndentation,"        public void writeIndentation(JsonGenerator jg, int level) throws IOException {
        }"
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.isInline,"        public boolean isInline() {
            return true;
        }
    }

    public static interface Indenter {
        public void writeIndentation(JsonGenerator var1, int var2) throws IOException;

        public boolean isInline();
    "
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeIndentation,
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.isInline,"        public boolean isInline();
    "
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setRootValueSeparator,"    public void setRootValueSeparator(String sep) {
        this._rootValueSeparator = sep;
    }"
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeRootValueSeparator,"    public void writeRootValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {
        if (this._rootValueSeparator != null) {
            jg.writeRaw(this._rootValueSeparator);
        }
    }"
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartObject,"    public void writeStartObject(JsonGenerator jg) throws IOException, JsonGenerationException {
        jg.writeRaw('{');
    "
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeObjectEntries,"    public void beforeObjectEntries(JsonGenerator jg) throws IOException, JsonGenerationException {
    }"
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectFieldValueSeparator,"    public void writeObjectFieldValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {
        jg.writeRaw(':');
    }"
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectEntrySeparator,"    public void writeObjectEntrySeparator(JsonGenerator jg) throws IOException, JsonGenerationException {
        jg.writeRaw(',');
    }"
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndObject,"    public void writeEndObject(JsonGenerator jg, int nrOfEntries) throws IOException, JsonGenerationException {
        jg.writeRaw('}');
    "
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartArray,"    public void writeStartArray(JsonGenerator jg) throws IOException, JsonGenerationException {
        jg.writeRaw('[');
    }"
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeArrayValues,"    public void beforeArrayValues(JsonGenerator jg) throws IOException, JsonGenerationException {
    }"
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeArrayValueSeparator,"    public void writeArrayValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {
        jg.writeRaw(',');
    }"
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndArray,"    public void writeEndArray(JsonGenerator jg, int nrOfValues) throws IOException, JsonGenerationException {
        jg.writeRaw(']');
    }
"
com.fasterxml.jackson.core.util.VersionUtil.version,"    public Version version() {
        return this._v;
    }"
com.fasterxml.jackson.core.util.VersionUtil.versionFor,"    public static Version versionFor(Class<?> cls) {
        Version version = VersionUtil.packageVersionFor(cls);
        return version == null ? Version.unknownVersion() : version;
    }"
com.fasterxml.jackson.core.util.VersionUtil.packageVersionFor,"    public static Version packageVersionFor(Class<?> cls) {
        Version v = null;
        try {
            String versionInfoClassName = cls.getPackage().getName() + "".PackageVersion"";
            Class<?> vClass = Class.forName(versionInfoClassName, true, cls.getClassLoader());
            try {
                v = ((Versioned)vClass.newInstance()).version();
            }
            catch (Exception e) {
                throw new IllegalArgumentException(""Failed to get Versioned out of "" + vClass);
            }
        }
        catch (Exception exception) {
            // empty catch block
        }
        return v == null ? Version.unknownVersion() : v;
    }"
com.fasterxml.jackson.core.util.VersionUtil.mavenVersionFor,"    public static Version mavenVersionFor(ClassLoader cl, String groupId, String artifactId) {
        InputStream pomProperties = cl.getResourceAsStream(""META-INF/maven/"" + groupId.replaceAll(""\\."", ""/"") + ""/"" + artifactId + ""/pom.properties"");
        if (pomProperties != null) {
            try {
                Properties props = new Properties();
                props.load(pomProperties);
                String versionStr = props.getProperty(""version"");
                String pomPropertiesArtifactId = props.getProperty(""artifactId"");
                String pomPropertiesGroupId = props.getProperty(""groupId"");
                Version version = VersionUtil.parseVersion(versionStr, pomPropertiesGroupId, pomPropertiesArtifactId);
                return version;
            }
            catch (IOException e) {
            }
            finally {
                VersionUtil._close(pomProperties);
            }
        }
        return Version.unknownVersion();
    }"
com.fasterxml.jackson.core.util.VersionUtil.parseVersion,"    public static Version parseVersion(String s, String groupId, String artifactId) {
        if (s != null && (s = s.trim()).length() > 0) {
            String[] parts = V_SEP.split(s);
            return new Version(VersionUtil.parseVersionPart(parts[0]), parts.length > 1 ? VersionUtil.parseVersionPart(parts[1]) : 0, parts.length > 2 ? VersionUtil.parseVersionPart(parts[2]) : 0, parts.length > 3 ? parts[3] : null, groupId, artifactId);
        }
        return Version.unknownVersion();
    }"
com.fasterxml.jackson.core.util.VersionUtil.parseVersionPart,"    protected static int parseVersionPart(String s) {
        char c;
        int number = 0;
        int len = s.length();
        for (int i = 0; i < len && (c = s.charAt(i)) <= '9' && c >= '0'; ++i) {
            number = number * 10 + (c - 48);
        }
        return number;
    }"
com.fasterxml.jackson.core.util.VersionUtil._close,"    private static final void _close(Closeable c) {
        try {
            c.close();
        }
        catch (IOException iOException) {
            // empty catch block
        }
    }"
com.fasterxml.jackson.core.util.VersionUtil.throwInternal,"    public static final void throwInternal() {
        throw new RuntimeException(""Internal error: this code path should never get executed"");
    }
"
com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue,"    public Object getCurrentValue() {
        return this.delegate.getCurrentValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue,"    public void setCurrentValue(Object v) {
        this.delegate.setCurrentValue(v);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec,"    public void setCodec(ObjectCodec c) {
        this.delegate.setCodec(c);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec,"    public ObjectCodec getCodec() {
        return this.delegate.getCodec();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.enable,"    public JsonParser enable(JsonParser.Feature f) {
        this.delegate.enable(f);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.disable,"    public JsonParser disable(JsonParser.Feature f) {
        this.delegate.disable(f);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled,"    public boolean isEnabled(JsonParser.Feature f) {
        return this.delegate.isEnabled(f);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask,"    public int getFeatureMask() {
        return this.delegate.getFeatureMask();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask,"    public JsonParser setFeatureMask(int mask) {
        this.delegate.setFeatureMask(mask);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures,"    public JsonParser overrideStdFeatures(int values, int mask) {
        this.delegate.overrideStdFeatures(values, mask);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures,"    public JsonParser overrideFormatFeatures(int values, int mask) {
        this.delegate.overrideFormatFeatures(values, mask);
        return this;
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema,"    public FormatSchema getSchema() {
        return this.delegate.getSchema();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema,"    public void setSchema(FormatSchema schema) {
        this.delegate.setSchema(schema);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema,"    public boolean canUseSchema(FormatSchema schema) {
        return this.delegate.canUseSchema(schema);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.version,"    public Version version() {
        return this.delegate.version();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource,"    public Object getInputSource() {
        return this.delegate.getInputSource();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec,"    public boolean requiresCustomCodec() {
        return this.delegate.requiresCustomCodec();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.close,"    public void close() throws IOException {
        this.delegate.close();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed,"    public boolean isClosed() {
        return this.delegate.isClosed();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken,"    public JsonToken currentToken() {
        return this.delegate.currentToken();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId,"    public int currentTokenId() {
        return this.delegate.currentTokenId();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken,"    public JsonToken getCurrentToken() {
        return this.delegate.getCurrentToken();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId,"    public int getCurrentTokenId() {
        return this.delegate.getCurrentTokenId();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken,"    public boolean hasCurrentToken() {
        return this.delegate.hasCurrentToken();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId,"    public boolean hasTokenId(int id) {
        return this.delegate.hasTokenId(id);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken,"    public boolean hasToken(JsonToken t) {
        return this.delegate.hasToken(t);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName,"    public String getCurrentName() throws IOException {
        return this.delegate.getCurrentName();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation,"    public JsonLocation getCurrentLocation() {
        return this.delegate.getCurrentLocation();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext,"    public JsonStreamContext getParsingContext() {
        return this.delegate.getParsingContext();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken,"    public boolean isExpectedStartArrayToken() {
        return this.delegate.isExpectedStartArrayToken();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken,"    public boolean isExpectedStartObjectToken() {
        return this.delegate.isExpectedStartObjectToken();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken,"    public void clearCurrentToken() {
        this.delegate.clearCurrentToken();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken,"    public JsonToken getLastClearedToken() {
        return this.delegate.getLastClearedToken();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName,"    public void overrideCurrentName(String name) {
        this.delegate.overrideCurrentName(name);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getText,"    public String getText() throws IOException {
        return this.delegate.getText();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters,"    public boolean hasTextCharacters() {
        return this.delegate.hasTextCharacters();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters,"    public char[] getTextCharacters() throws IOException {
        return this.delegate.getTextCharacters();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength,"    public int getTextLength() throws IOException {
        return this.delegate.getTextLength();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset,"    public int getTextOffset() throws IOException {
        return this.delegate.getTextOffset();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getText,"    public int getText(Writer writer) throws IOException, UnsupportedOperationException {
        return this.delegate.getText(writer);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue,"    public BigInteger getBigIntegerValue() throws IOException {
        return this.delegate.getBigIntegerValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue,"    public boolean getBooleanValue() throws IOException {
        return this.delegate.getBooleanValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue,"    public byte getByteValue() throws IOException {
        return this.delegate.getByteValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue,"    public short getShortValue() throws IOException {
        return this.delegate.getShortValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue,"    public BigDecimal getDecimalValue() throws IOException {
        return this.delegate.getDecimalValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue,"    public double getDoubleValue() throws IOException {
        return this.delegate.getDoubleValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue,"    public float getFloatValue() throws IOException {
        return this.delegate.getFloatValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue,"    public int getIntValue() throws IOException {
        return this.delegate.getIntValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue,"    public long getLongValue() throws IOException {
        return this.delegate.getLongValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType,"    public JsonParser.NumberType getNumberType() throws IOException {
        return this.delegate.getNumberType();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue,"    public Number getNumberValue() throws IOException {
        return this.delegate.getNumberValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt,"    public int getValueAsInt() throws IOException {
        return this.delegate.getValueAsInt();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt,"    public int getValueAsInt(int defaultValue) throws IOException {
        return this.delegate.getValueAsInt(defaultValue);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong,"    public long getValueAsLong() throws IOException {
        return this.delegate.getValueAsLong();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong,"    public long getValueAsLong(long defaultValue) throws IOException {
        return this.delegate.getValueAsLong(defaultValue);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble,"    public double getValueAsDouble() throws IOException {
        return this.delegate.getValueAsDouble();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble,"    public double getValueAsDouble(double defaultValue) throws IOException {
        return this.delegate.getValueAsDouble(defaultValue);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean,"    public boolean getValueAsBoolean() throws IOException {
        return this.delegate.getValueAsBoolean();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean,"    public boolean getValueAsBoolean(boolean defaultValue) throws IOException {
        return this.delegate.getValueAsBoolean(defaultValue);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString,"    public String getValueAsString() throws IOException {
        return this.delegate.getValueAsString();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString,"    public String getValueAsString(String defaultValue) throws IOException {
        return this.delegate.getValueAsString(defaultValue);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject,"    public Object getEmbeddedObject() throws IOException {
        return this.delegate.getEmbeddedObject();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue,"    public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
        return this.delegate.getBinaryValue(b64variant);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue,"    public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
        return this.delegate.readBinaryValue(b64variant, out);
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation,"    public JsonLocation getTokenLocation() {
        return this.delegate.getTokenLocation();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken,"    public JsonToken nextToken() throws IOException {
        return this.delegate.nextToken();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue,"    public JsonToken nextValue() throws IOException {
        return this.delegate.nextValue();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken,"    public void finishToken() throws IOException {
        this.delegate.finishToken();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren,"    public JsonParser skipChildren() throws IOException {
        this.delegate.skipChildren();
        return this;
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId,"    public boolean canReadObjectId() {
        return this.delegate.canReadObjectId();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId,"    public boolean canReadTypeId() {
        return this.delegate.canReadTypeId();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId,"    public Object getObjectId() throws IOException {
        return this.delegate.getObjectId();
    }"
com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId,"    public Object getTypeId() throws IOException {
        return this.delegate.getTypeId();
    }
"
com.fasterxml.jackson.core.util.Instantiatable.createInstance,"    public T createInstance();
"
com.fasterxml.jackson.core.io.CharacterEscapes.getEscapeCodesForAscii,
com.fasterxml.jackson.core.io.CharacterEscapes.getEscapeSequence,
com.fasterxml.jackson.core.io.CharacterEscapes.standardAsciiEscapesForJSON,"    public static int[] standardAsciiEscapesForJSON() {
        int[] esc = CharTypes.get7BitOutputEscapes();
        return Arrays.copyOf(esc, esc.length);
    }
"
com.fasterxml.jackson.core.io.UTF32Reader.close,"    public void close() throws IOException {
        InputStream in = this._in;
        if (in != null) {
            this._in = null;
            this.freeBuffers();
            in.close();
        }
    }"
com.fasterxml.jackson.core.io.UTF32Reader.read,"    public int read() throws IOException {
        if (this._tmpBuf == null) {
            this._tmpBuf = new char[1];
        }
        if (this.read(this._tmpBuf, 0, 1) < 1) {
            return -1;
        }
        return this._tmpBuf[0];
    }"
com.fasterxml.jackson.core.io.UTF32Reader.read,"    public int read(char[] cbuf, int start, int len) throws IOException {
        if (this._buffer == null) {
            return -1;
        }
        if (len < 1) {
            return len;
        }
        if (start < 0 || start + len > cbuf.length) {
            this.reportBounds(cbuf, start, len);
        }
        int outPtr = start;
        int outEnd = len + start;
        if (this._surrogate != '\u0000') {
            cbuf[outPtr++] = this._surrogate;
            this._surrogate = '\u0000';
        } else {
            int left = this._length - this._ptr;
            if (left < 4 && !this.loadMore(left)) {
                if (left == 0) {
                    return -1;
                }
                this.reportUnexpectedEOF(this._length - this._ptr, 4);
            }
        }
        int _lastValidInputStart = this._length - 3;
        while (outPtr < outEnd) {
            int lo;
            int hi;
            int ptr = this._ptr;
            if (this._bigEndian) {
                hi = this._buffer[ptr] << 8 | this._buffer[ptr + 1] & 0xFF;
                lo = (this._buffer[ptr + 2] & 0xFF) << 8 | this._buffer[ptr + 3] & 0xFF;
            } else {
                lo = this._buffer[ptr] & 0xFF | (this._buffer[ptr + 1] & 0xFF) << 8;
                hi = this._buffer[ptr + 2] & 0xFF | this._buffer[ptr + 3] << 8;
            }
            this._ptr += 4;
            if (hi != 0) {
                int ch = (hi &= 0xFFFF) - 1 << 16 | lo;
                if (hi > 16) {
                    this.reportInvalid(ch, outPtr - start, String.format("" (above 0x%08x)"", 0x10FFFF));
                }
                cbuf[outPtr++] = (char)(55296 + (ch >> 10));
                lo = 0xDC00 | ch & 0x3FF;
                if (outPtr >= outEnd) {
                    this._surrogate = (char)ch;
                    break;
                }
            }
            cbuf[outPtr++] = (char)lo;
            if (this._ptr <= _lastValidInputStart) continue;
            break;
        }
        int actualLen = outPtr - start;
        this._charCount += actualLen;
        return actualLen;
    }"
com.fasterxml.jackson.core.io.UTF32Reader.reportUnexpectedEOF,"    private void reportUnexpectedEOF(int gotBytes, int needed) throws IOException {
        int bytePos = this._byteCount + gotBytes;
        int charPos = this._charCount;
        throw new CharConversionException(""Unexpected EOF in the middle of a 4-byte UTF-32 char: got "" + gotBytes + "", needed "" + needed + "", at char #"" + charPos + "", byte #"" + bytePos + "")"");
    }"
com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid,"    private void reportInvalid(int value, int offset, String msg) throws IOException {
        int bytePos = this._byteCount + this._ptr - 1;
        int charPos = this._charCount + offset;
        throw new CharConversionException(""Invalid UTF-32 character 0x"" + Integer.toHexString(value) + msg + "" at char #"" + charPos + "", byte #"" + bytePos + "")"");
    }"
com.fasterxml.jackson.core.io.UTF32Reader.loadMore,"    private boolean loadMore(int available) throws IOException {
        int count;
        this._byteCount += this._length - available;
        if (available > 0) {
            if (this._ptr > 0) {
                System.arraycopy(this._buffer, this._ptr, this._buffer, 0, available);
                this._ptr = 0;
            }
            this._length = available;
        } else {
            this._ptr = 0;
            int n = count = this._in == null ? -1 : this._in.read(this._buffer);
            if (count < 1) {
                this._length = 0;
                if (count < 0) {
                    if (this._managedBuffers) {
                        this.freeBuffers();
                    }
                    return false;
                }
                this.reportStrangeStream();
            }
            this._length = count;
        }
        while (this._length < 4) {
            int n = count = this._in == null ? -1 : this._in.read(this._buffer, this._length, this._buffer.length - this._length);
            if (count < 1) {
                if (count < 0) {
                    if (this._managedBuffers) {
                        this.freeBuffers();
                    }
                    this.reportUnexpectedEOF(this._length, 4);
                }
                this.reportStrangeStream();
            }
            this._length += count;
        }
        return true;
    }"
com.fasterxml.jackson.core.io.UTF32Reader.freeBuffers,"    private void freeBuffers() {
        byte[] buf = this._buffer;
        if (buf != null) {
            this._buffer = null;
            this._context.releaseReadIOBuffer(buf);
        }
    }"
com.fasterxml.jackson.core.io.UTF32Reader.reportBounds,"    private void reportBounds(char[] cbuf, int start, int len) throws IOException {
        throw new ArrayIndexOutOfBoundsException(""read(buf,"" + start + "","" + len + ""), cbuf["" + cbuf.length + ""]"");
    }"
com.fasterxml.jackson.core.io.UTF32Reader.reportStrangeStream,"    private void reportStrangeStream() throws IOException {
        throw new IOException(""Strange I/O stream, returned 0 bytes on read"");
    }
"
com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1,"    public static int[] getInputCodeLatin1() {
        return sInputCodes;
    }"
com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8,"    public static int[] getInputCodeUtf8() {
        return sInputCodesUTF8;
    }"
com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1JsNames,"    public static int[] getInputCodeLatin1JsNames() {
        return sInputCodesJsNames;
    }"
com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8JsNames,"    public static int[] getInputCodeUtf8JsNames() {
        return sInputCodesUtf8JsNames;
    }"
com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment,"    public static int[] getInputCodeComment() {
        return sInputCodesComment;
    }"
com.fasterxml.jackson.core.io.CharTypes.getInputCodeWS,"    public static int[] getInputCodeWS() {
        return sInputCodesWS;
    }"
com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes,"    public static int[] get7BitOutputEscapes() {
        return sOutputEscapes128;
    }"
com.fasterxml.jackson.core.io.CharTypes.charToHex,"    public static int charToHex(int ch) {
        return ch > 127 ? -1 : sHexValues[ch];
    }"
com.fasterxml.jackson.core.io.CharTypes.appendQuoted,"    public static void appendQuoted(StringBuilder sb, String content) {
        int[] escCodes = sOutputEscapes128;
        int escLen = escCodes.length;
        int len = content.length();
        for (int i = 0; i < len; ++i) {
            char c = content.charAt(i);
            if (c >= escLen || escCodes[c] == 0) {
                sb.append(c);
                continue;
            }
            sb.append('\\');
            int escCode = escCodes[c];
            if (escCode < 0) {
                sb.append('u');
                sb.append('0');
                sb.append('0');
                char value = c;
                sb.append(HC[value >> 4]);
                sb.append(HC[value & 0xF]);
                continue;
            }
            sb.append((char)escCode);
        }
    }"
com.fasterxml.jackson.core.io.CharTypes.copyHexChars,"    public static char[] copyHexChars() {
        return (char[])HC.clone();
    }"
com.fasterxml.jackson.core.io.CharTypes.copyHexBytes,"    public static byte[] copyHexBytes() {
        return (byte[])HB.clone();
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder.getInstance,"    public static JsonStringEncoder getInstance() {
        JsonStringEncoder enc;
        SoftReference<JsonStringEncoder> ref = _threadEncoder.get();
        JsonStringEncoder jsonStringEncoder = enc = ref == null ? null : ref.get();
        if (enc == null) {
            enc = new JsonStringEncoder();
            _threadEncoder.set(new SoftReference<JsonStringEncoder>(enc));
        }
        return enc;
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString,"    public char[] quoteAsString(String input) {
        TextBuffer textBuffer = this._text;
        if (textBuffer == null) {
            this._text = textBuffer = new TextBuffer(null);
        }
        char[] outputBuffer = textBuffer.emptyAndGetCurrentSegment();
        int[] escCodes = CharTypes.get7BitOutputEscapes();
        int escCodeCount = escCodes.length;
        int inPtr = 0;
        int inputLen = input.length();
        int outPtr = 0;
        block0: while (inPtr < inputLen) {
            char d;
            int escCode;
            int length;
            char c;
            while ((c = input.charAt(inPtr)) >= escCodeCount || escCodes[c] == 0) {
                if (outPtr >= outputBuffer.length) {
                    outputBuffer = textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outputBuffer[outPtr++] = c;
                if (++inPtr < inputLen) continue;
                break block0;
            }
            int n = length = (escCode = escCodes[d = input.charAt(inPtr++)]) < 0 ? this._appendNumeric(d, this._qbuf) : this._appendNamed(escCode, this._qbuf);
            if (outPtr + length > outputBuffer.length) {
                int first = outputBuffer.length - outPtr;
                if (first > 0) {
                    System.arraycopy(this._qbuf, 0, outputBuffer, outPtr, first);
                }
                outputBuffer = textBuffer.finishCurrentSegment();
                int second = length - first;
                System.arraycopy(this._qbuf, first, outputBuffer, 0, second);
                outPtr = second;
                continue;
            }
            System.arraycopy(this._qbuf, 0, outputBuffer, outPtr, length);
            outPtr += length;
        }
        textBuffer.setCurrentLength(outPtr);
        return textBuffer.contentsAsArray();
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString,"    public void quoteAsString(CharSequence input, StringBuilder output) {
        int[] escCodes = CharTypes.get7BitOutputEscapes();
        int escCodeCount = escCodes.length;
        int inPtr = 0;
        int inputLen = input.length();
        block0: while (inPtr < inputLen) {
            char c;
            while ((c = input.charAt(inPtr)) >= escCodeCount || escCodes[c] == 0) {
                output.append(c);
                if (++inPtr < inputLen) continue;
                break block0;
            }
            char d = input.charAt(inPtr++);
            int escCode = escCodes[d];
            int length = escCode < 0 ? this._appendNumeric(d, this._qbuf) : this._appendNamed(escCode, this._qbuf);
            output.append(this._qbuf, 0, length);
        }
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsUTF8,"    public byte[] quoteAsUTF8(String text) {
        ByteArrayBuilder bb = this._bytes;
        if (bb == null) {
            this._bytes = bb = new ByteArrayBuilder(null);
        }
        int inputPtr = 0;
        int inputEnd = text.length();
        int outputPtr = 0;
        byte[] outputBuffer = bb.resetAndGetFirstSegment();
        block0: while (inputPtr < inputEnd) {
            int ch;
            int[] escCodes = CharTypes.get7BitOutputEscapes();
            while ((ch = text.charAt(inputPtr)) <= 127 && escCodes[ch] == 0) {
                if (outputPtr >= outputBuffer.length) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte)ch;
                if (++inputPtr < inputEnd) continue;
                break block0;
            }
            if (outputPtr >= outputBuffer.length) {
                outputBuffer = bb.finishCurrentSegment();
                outputPtr = 0;
            }
            if ((ch = text.charAt(inputPtr++)) <= 127) {
                int escape = escCodes[ch];
                outputPtr = this._appendByte(ch, escape, bb, outputPtr);
                outputBuffer = bb.getCurrentSegment();
                continue;
            }
            if (ch <= 2047) {
                outputBuffer[outputPtr++] = (byte)(0xC0 | ch >> 6);
                ch = 0x80 | ch & 0x3F;
            } else if (ch < 55296 || ch > 57343) {
                outputBuffer[outputPtr++] = (byte)(0xE0 | ch >> 12);
                if (outputPtr >= outputBuffer.length) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte)(0x80 | ch >> 6 & 0x3F);
                ch = 0x80 | ch & 0x3F;
            } else {
                if (ch > 56319) {
                    JsonStringEncoder._illegal(ch);
                }
                if (inputPtr >= inputEnd) {
                    JsonStringEncoder._illegal(ch);
                }
                if ((ch = JsonStringEncoder._convert(ch, text.charAt(inputPtr++))) > 0x10FFFF) {
                    JsonStringEncoder._illegal(ch);
                }
                outputBuffer[outputPtr++] = (byte)(0xF0 | ch >> 18);
                if (outputPtr >= outputBuffer.length) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte)(0x80 | ch >> 12 & 0x3F);
                if (outputPtr >= outputBuffer.length) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte)(0x80 | ch >> 6 & 0x3F);
                ch = 0x80 | ch & 0x3F;
            }
            if (outputPtr >= outputBuffer.length) {
                outputBuffer = bb.finishCurrentSegment();
                outputPtr = 0;
            }
            outputBuffer[outputPtr++] = (byte)ch;
        }
        return this._bytes.completeAndCoalesce(outputPtr);
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder.encodeAsUTF8,"    public byte[] encodeAsUTF8(String text) {
        ByteArrayBuilder byteBuilder = this._bytes;
        if (byteBuilder == null) {
            this._bytes = byteBuilder = new ByteArrayBuilder(null);
        }
        int inputPtr = 0;
        int inputEnd = text.length();
        int outputPtr = 0;
        byte[] outputBuffer = byteBuilder.resetAndGetFirstSegment();
        int outputEnd = outputBuffer.length;
        block0: while (inputPtr < inputEnd) {
            int c = text.charAt(inputPtr++);
            while (c <= 127) {
                if (outputPtr >= outputEnd) {
                    outputBuffer = byteBuilder.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte)c;
                if (inputPtr >= inputEnd) break block0;
                c = text.charAt(inputPtr++);
            }
            if (outputPtr >= outputEnd) {
                outputBuffer = byteBuilder.finishCurrentSegment();
                outputEnd = outputBuffer.length;
                outputPtr = 0;
            }
            if (c < 2048) {
                outputBuffer[outputPtr++] = (byte)(0xC0 | c >> 6);
            } else if (c < 55296 || c > 57343) {
                outputBuffer[outputPtr++] = (byte)(0xE0 | c >> 12);
                if (outputPtr >= outputEnd) {
                    outputBuffer = byteBuilder.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte)(0x80 | c >> 6 & 0x3F);
            } else {
                if (c > 56319) {
                    JsonStringEncoder._illegal(c);
                }
                if (inputPtr >= inputEnd) {
                    JsonStringEncoder._illegal(c);
                }
                if ((c = JsonStringEncoder._convert(c, text.charAt(inputPtr++))) > 0x10FFFF) {
                    JsonStringEncoder._illegal(c);
                }
                outputBuffer[outputPtr++] = (byte)(0xF0 | c >> 18);
                if (outputPtr >= outputEnd) {
                    outputBuffer = byteBuilder.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte)(0x80 | c >> 12 & 0x3F);
                if (outputPtr >= outputEnd) {
                    outputBuffer = byteBuilder.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte)(0x80 | c >> 6 & 0x3F);
            }
            if (outputPtr >= outputEnd) {
                outputBuffer = byteBuilder.finishCurrentSegment();
                outputEnd = outputBuffer.length;
                outputPtr = 0;
            }
            outputBuffer[outputPtr++] = (byte)(0x80 | c & 0x3F);
        }
        return this._bytes.completeAndCoalesce(outputPtr);
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder._appendNumeric,"    private int _appendNumeric(int value, char[] qbuf) {
        qbuf[1] = 117;
        qbuf[4] = HC[value >> 4];
        qbuf[5] = HC[value & 0xF];
        return 6;
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder._appendNamed,"    private int _appendNamed(int esc, char[] qbuf) {
        qbuf[1] = (char)esc;
        return 2;
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte,"    private int _appendByte(int ch, int esc, ByteArrayBuilder bb, int ptr) {
        bb.setCurrentSegmentLength(ptr);
        bb.append(92);
        if (esc < 0) {
            bb.append(117);
            if (ch > 255) {
                int hi = ch >> 8;
                bb.append(HB[hi >> 4]);
                bb.append(HB[hi & 0xF]);
                ch &= 0xFF;
            } else {
                bb.append(48);
                bb.append(48);
            }
            bb.append(HB[ch >> 4]);
            bb.append(HB[ch & 0xF]);
        } else {
            bb.append((byte)esc);
        }
        return bb.getCurrentSegmentLength();
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder._convert,"    private static int _convert(int p1, int p2) {
        if (p2 < 56320 || p2 > 57343) {
            throw new IllegalArgumentException(""Broken surrogate pair: first char 0x"" + Integer.toHexString(p1) + "", second 0x"" + Integer.toHexString(p2) + ""; illegal combination"");
        }
        return 65536 + (p1 - 55296 << 10) + (p2 - 56320);
    }"
com.fasterxml.jackson.core.io.JsonStringEncoder._illegal,"    private static void _illegal(int c) {
        throw new IllegalArgumentException(UTF8Writer.illegalSurrogateDesc(c));
    }
"
com.fasterxml.jackson.core.io.SerializedString.readObject,"    private void readObject(ObjectInputStream in) throws IOException {
        this._jdkSerializeValue = in.readUTF();
    }"
com.fasterxml.jackson.core.io.SerializedString.writeObject,"    private void writeObject(ObjectOutputStream out) throws IOException {
        out.writeUTF(this._value);
    }"
com.fasterxml.jackson.core.io.SerializedString.readResolve,"    protected Object readResolve() {
        return new SerializedString(this._jdkSerializeValue);
    }"
com.fasterxml.jackson.core.io.SerializedString.getValue,"    public final String getValue() {
        return this._value;
    }"
com.fasterxml.jackson.core.io.SerializedString.charLength,"    public final int charLength() {
        return this._value.length();
    }"
com.fasterxml.jackson.core.io.SerializedString.asQuotedChars,"    public final char[] asQuotedChars() {
        char[] result = this._quotedChars;
        if (result == null) {
            this._quotedChars = result = JsonStringEncoder.getInstance().quoteAsString(this._value);
        }
        return result;
    }"
com.fasterxml.jackson.core.io.SerializedString.asUnquotedUTF8,"    public final byte[] asUnquotedUTF8() {
        byte[] result = this._unquotedUTF8Ref;
        if (result == null) {
            this._unquotedUTF8Ref = result = JsonStringEncoder.getInstance().encodeAsUTF8(this._value);
        }
        return result;
    }"
com.fasterxml.jackson.core.io.SerializedString.asQuotedUTF8,"    public final byte[] asQuotedUTF8() {
        byte[] result = this._quotedUTF8Ref;
        if (result == null) {
            this._quotedUTF8Ref = result = JsonStringEncoder.getInstance().quoteAsUTF8(this._value);
        }
        return result;
    }"
com.fasterxml.jackson.core.io.SerializedString.appendQuotedUTF8,"    public int appendQuotedUTF8(byte[] buffer, int offset) {
        int length;
        byte[] result = this._quotedUTF8Ref;
        if (result == null) {
            this._quotedUTF8Ref = result = JsonStringEncoder.getInstance().quoteAsUTF8(this._value);
        }
        if (offset + (length = result.length) > buffer.length) {
            return -1;
        }
        System.arraycopy(result, 0, buffer, offset, length);
        return length;
    }"
com.fasterxml.jackson.core.io.SerializedString.appendQuoted,"    public int appendQuoted(char[] buffer, int offset) {
        int length;
        char[] result = this._quotedChars;
        if (result == null) {
            this._quotedChars = result = JsonStringEncoder.getInstance().quoteAsString(this._value);
        }
        if (offset + (length = result.length) > buffer.length) {
            return -1;
        }
        System.arraycopy(result, 0, buffer, offset, length);
        return length;
    }"
com.fasterxml.jackson.core.io.SerializedString.appendUnquotedUTF8,"    public int appendUnquotedUTF8(byte[] buffer, int offset) {
        int length;
        byte[] result = this._unquotedUTF8Ref;
        if (result == null) {
            this._unquotedUTF8Ref = result = JsonStringEncoder.getInstance().encodeAsUTF8(this._value);
        }
        if (offset + (length = result.length) > buffer.length) {
            return -1;
        }
        System.arraycopy(result, 0, buffer, offset, length);
        return length;
    }"
com.fasterxml.jackson.core.io.SerializedString.appendUnquoted,"    public int appendUnquoted(char[] buffer, int offset) {
        String str = this._value;
        int length = str.length();
        if (offset + length > buffer.length) {
            return -1;
        }
        str.getChars(0, length, buffer, offset);
        return length;
    }"
com.fasterxml.jackson.core.io.SerializedString.writeQuotedUTF8,"    public int writeQuotedUTF8(OutputStream out) throws IOException {
        byte[] result = this._quotedUTF8Ref;
        if (result == null) {
            this._quotedUTF8Ref = result = JsonStringEncoder.getInstance().quoteAsUTF8(this._value);
        }
        int length = result.length;
        out.write(result, 0, length);
        return length;
    }"
com.fasterxml.jackson.core.io.SerializedString.writeUnquotedUTF8,"    public int writeUnquotedUTF8(OutputStream out) throws IOException {
        byte[] result = this._unquotedUTF8Ref;
        if (result == null) {
            this._unquotedUTF8Ref = result = JsonStringEncoder.getInstance().encodeAsUTF8(this._value);
        }
        int length = result.length;
        out.write(result, 0, length);
        return length;
    }"
com.fasterxml.jackson.core.io.SerializedString.putQuotedUTF8,"    public int putQuotedUTF8(ByteBuffer buffer) {
        int length;
        byte[] result = this._quotedUTF8Ref;
        if (result == null) {
            this._quotedUTF8Ref = result = JsonStringEncoder.getInstance().quoteAsUTF8(this._value);
        }
        if ((length = result.length) > buffer.remaining()) {
            return -1;
        }
        buffer.put(result, 0, length);
        return length;
    }"
com.fasterxml.jackson.core.io.SerializedString.putUnquotedUTF8,"    public int putUnquotedUTF8(ByteBuffer buffer) {
        int length;
        byte[] result = this._unquotedUTF8Ref;
        if (result == null) {
            this._unquotedUTF8Ref = result = JsonStringEncoder.getInstance().encodeAsUTF8(this._value);
        }
        if ((length = result.length) > buffer.remaining()) {
            return -1;
        }
        buffer.put(result, 0, length);
        return length;
    }"
com.fasterxml.jackson.core.io.SerializedString.toString,"    public final String toString() {
        return this._value;
    }"
com.fasterxml.jackson.core.io.SerializedString.hashCode,"    public final int hashCode() {
        return this._value.hashCode();
    }"
com.fasterxml.jackson.core.io.SerializedString.equals,"    public final boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (o == null || o.getClass() != this.getClass()) {
            return false;
        }
        SerializedString other = (SerializedString)o;
        return this._value.equals(other._value);
    }
"
com.fasterxml.jackson.core.io.NumberOutput.outputInt,"    public static int outputInt(int v, char[] b, int off) {
        if (v < 0) {
            if (v == Integer.MIN_VALUE) {
                return NumberOutput._outputSmallestI(b, off);
            }
            b[off++] = 45;
            v = -v;
        }
        if (v < MILLION) {
            if (v < 1000) {
                if (v < 10) {
                    b[off] = (char)(48 + v);
                    return off + 1;
                }
                return NumberOutput._leading3(v, b, off);
            }
            int thousands = v / 1000;
            off = NumberOutput._leading3(thousands, b, off);
            off = NumberOutput._full3(v -= thousands * 1000, b, off);
            return off;
        }
        if (v >= BILLION) {
            if ((v -= BILLION) >= BILLION) {
                v -= BILLION;
                b[off++] = 50;
            } else {
                b[off++] = 49;
            }
            return NumberOutput._outputFullBillion(v, b, off);
        }
        int newValue = v / 1000;
        int ones = v - newValue * 1000;
        v = newValue;
        int thousands = v - (newValue /= 1000) * 1000;
        off = NumberOutput._leading3(newValue, b, off);
        off = NumberOutput._full3(thousands, b, off);
        return NumberOutput._full3(ones, b, off);
    }"
com.fasterxml.jackson.core.io.NumberOutput.outputInt,"    public static int outputInt(int v, byte[] b, int off) {
        if (v < 0) {
            if (v == Integer.MIN_VALUE) {
                return NumberOutput._outputSmallestI(b, off);
            }
            b[off++] = 45;
            v = -v;
        }
        if (v < MILLION) {
            if (v < 1000) {
                if (v < 10) {
                    b[off++] = (byte)(48 + v);
                } else {
                    off = NumberOutput._leading3(v, b, off);
                }
            } else {
                int thousands = v / 1000;
                off = NumberOutput._leading3(thousands, b, off);
                off = NumberOutput._full3(v -= thousands * 1000, b, off);
            }
            return off;
        }
        if (v >= BILLION) {
            if ((v -= BILLION) >= BILLION) {
                v -= BILLION;
                b[off++] = 50;
            } else {
                b[off++] = 49;
            }
            return NumberOutput._outputFullBillion(v, b, off);
        }
        int newValue = v / 1000;
        int ones = v - newValue * 1000;
        v = newValue;
        int thousands = v - (newValue /= 1000) * 1000;
        off = NumberOutput._leading3(newValue, b, off);
        off = NumberOutput._full3(thousands, b, off);
        return NumberOutput._full3(ones, b, off);
    }"
com.fasterxml.jackson.core.io.NumberOutput.outputLong,"    public static int outputLong(long v, char[] b, int off) {
        if (v < 0L) {
            if (v > MIN_INT_AS_LONG) {
                return NumberOutput.outputInt((int)v, b, off);
            }
            if (v == Long.MIN_VALUE) {
                return NumberOutput._outputSmallestL(b, off);
            }
            b[off++] = 45;
            v = -v;
        } else if (v <= MAX_INT_AS_LONG) {
            return NumberOutput.outputInt((int)v, b, off);
        }
        long upper = v / BILLION_L;
        v -= upper * BILLION_L;
        if (upper < BILLION_L) {
            off = NumberOutput._outputUptoBillion((int)upper, b, off);
        } else {
            long hi = upper / BILLION_L;
            off = NumberOutput._leading3((int)hi, b, off);
            off = NumberOutput._outputFullBillion((int)(upper -= hi * BILLION_L), b, off);
        }
        return NumberOutput._outputFullBillion((int)v, b, off);
    }"
com.fasterxml.jackson.core.io.NumberOutput.outputLong,"    public static int outputLong(long v, byte[] b, int off) {
        if (v < 0L) {
            if (v > MIN_INT_AS_LONG) {
                return NumberOutput.outputInt((int)v, b, off);
            }
            if (v == Long.MIN_VALUE) {
                return NumberOutput._outputSmallestL(b, off);
            }
            b[off++] = 45;
            v = -v;
        } else if (v <= MAX_INT_AS_LONG) {
            return NumberOutput.outputInt((int)v, b, off);
        }
        long upper = v / BILLION_L;
        v -= upper * BILLION_L;
        if (upper < BILLION_L) {
            off = NumberOutput._outputUptoBillion((int)upper, b, off);
        } else {
            long hi = upper / BILLION_L;
            off = NumberOutput._leading3((int)hi, b, off);
            off = NumberOutput._outputFullBillion((int)(upper -= hi * BILLION_L), b, off);
        }
        return NumberOutput._outputFullBillion((int)v, b, off);
    }"
com.fasterxml.jackson.core.io.NumberOutput.toString,"    public static String toString(int v) {
        if (v < sSmallIntStrs.length) {
            if (v >= 0) {
                return sSmallIntStrs[v];
            }
            int v2 = -v - 1;
            if (v2 < sSmallIntStrs2.length) {
                return sSmallIntStrs2[v2];
            }
        }
        return Integer.toString(v);
    }"
com.fasterxml.jackson.core.io.NumberOutput.toString,"    public static String toString(long v) {
        if (v <= Integer.MAX_VALUE && v >= Integer.MIN_VALUE) {
            return NumberOutput.toString((int)v);
        }
        return Long.toString(v);
    }"
com.fasterxml.jackson.core.io.NumberOutput.toString,"    public static String toString(double v) {
        return Double.toString(v);
    }"
com.fasterxml.jackson.core.io.NumberOutput.toString,"    public static String toString(float v) {
        return Float.toString(v);
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion,"    private static int _outputUptoBillion(int v, char[] b, int off) {
        if (v < MILLION) {
            if (v < 1000) {
                return NumberOutput._leading3(v, b, off);
            }
            int thousands = v / 1000;
            int ones = v - thousands * 1000;
            return NumberOutput._outputUptoMillion(b, off, thousands, ones);
        }
        int thousands = v / 1000;
        int ones = v - thousands * 1000;
        int millions = thousands / 1000;
        off = NumberOutput._leading3(millions, b, off);
        int enc = TRIPLET_TO_CHARS[thousands -= millions * 1000];
        b[off++] = (char)(enc >> 16);
        b[off++] = (char)(enc >> 8 & 0x7F);
        b[off++] = (char)(enc & 0x7F);
        enc = TRIPLET_TO_CHARS[ones];
        b[off++] = (char)(enc >> 16);
        b[off++] = (char)(enc >> 8 & 0x7F);
        b[off++] = (char)(enc & 0x7F);
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion,"    private static int _outputFullBillion(int v, char[] b, int off) {
        int thousands = v / 1000;
        int ones = v - thousands * 1000;
        int millions = thousands / 1000;
        int enc = TRIPLET_TO_CHARS[millions];
        b[off++] = (char)(enc >> 16);
        b[off++] = (char)(enc >> 8 & 0x7F);
        b[off++] = (char)(enc & 0x7F);
        enc = TRIPLET_TO_CHARS[thousands -= millions * 1000];
        b[off++] = (char)(enc >> 16);
        b[off++] = (char)(enc >> 8 & 0x7F);
        b[off++] = (char)(enc & 0x7F);
        enc = TRIPLET_TO_CHARS[ones];
        b[off++] = (char)(enc >> 16);
        b[off++] = (char)(enc >> 8 & 0x7F);
        b[off++] = (char)(enc & 0x7F);
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion,"    private static int _outputUptoBillion(int v, byte[] b, int off) {
        if (v < MILLION) {
            if (v < 1000) {
                return NumberOutput._leading3(v, b, off);
            }
            int thousands = v / 1000;
            int ones = v - thousands * 1000;
            return NumberOutput._outputUptoMillion(b, off, thousands, ones);
        }
        int thousands = v / 1000;
        int ones = v - thousands * 1000;
        int millions = thousands / 1000;
        off = NumberOutput._leading3(millions, b, off);
        int enc = TRIPLET_TO_CHARS[thousands -= millions * 1000];
        b[off++] = (byte)(enc >> 16);
        b[off++] = (byte)(enc >> 8);
        b[off++] = (byte)enc;
        enc = TRIPLET_TO_CHARS[ones];
        b[off++] = (byte)(enc >> 16);
        b[off++] = (byte)(enc >> 8);
        b[off++] = (byte)enc;
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion,"    private static int _outputFullBillion(int v, byte[] b, int off) {
        int thousands = v / 1000;
        int ones = v - thousands * 1000;
        int millions = thousands / 1000;
        int enc = TRIPLET_TO_CHARS[millions];
        b[off++] = (byte)(enc >> 16);
        b[off++] = (byte)(enc >> 8);
        b[off++] = (byte)enc;
        enc = TRIPLET_TO_CHARS[thousands -= millions * 1000];
        b[off++] = (byte)(enc >> 16);
        b[off++] = (byte)(enc >> 8);
        b[off++] = (byte)enc;
        enc = TRIPLET_TO_CHARS[ones];
        b[off++] = (byte)(enc >> 16);
        b[off++] = (byte)(enc >> 8);
        b[off++] = (byte)enc;
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion,"    private static int _outputUptoMillion(char[] b, int off, int thousands, int ones) {
        int enc = TRIPLET_TO_CHARS[thousands];
        if (thousands > 9) {
            if (thousands > 99) {
                b[off++] = (char)(enc >> 16);
            }
            b[off++] = (char)(enc >> 8 & 0x7F);
        }
        b[off++] = (char)(enc & 0x7F);
        enc = TRIPLET_TO_CHARS[ones];
        b[off++] = (char)(enc >> 16);
        b[off++] = (char)(enc >> 8 & 0x7F);
        b[off++] = (char)(enc & 0x7F);
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion,"    private static int _outputUptoMillion(byte[] b, int off, int thousands, int ones) {
        int enc = TRIPLET_TO_CHARS[thousands];
        if (thousands > 9) {
            if (thousands > 99) {
                b[off++] = (byte)(enc >> 16);
            }
            b[off++] = (byte)(enc >> 8);
        }
        b[off++] = (byte)enc;
        enc = TRIPLET_TO_CHARS[ones];
        b[off++] = (byte)(enc >> 16);
        b[off++] = (byte)(enc >> 8);
        b[off++] = (byte)enc;
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._leading3,"    private static int _leading3(int t, char[] b, int off) {
        int enc = TRIPLET_TO_CHARS[t];
        if (t > 9) {
            if (t > 99) {
                b[off++] = (char)(enc >> 16);
            }
            b[off++] = (char)(enc >> 8 & 0x7F);
        }
        b[off++] = (char)(enc & 0x7F);
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._leading3,"    private static int _leading3(int t, byte[] b, int off) {
        int enc = TRIPLET_TO_CHARS[t];
        if (t > 9) {
            if (t > 99) {
                b[off++] = (byte)(enc >> 16);
            }
            b[off++] = (byte)(enc >> 8);
        }
        b[off++] = (byte)enc;
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._full3,"    private static int _full3(int t, char[] b, int off) {
        int enc = TRIPLET_TO_CHARS[t];
        b[off++] = (char)(enc >> 16);
        b[off++] = (char)(enc >> 8 & 0x7F);
        b[off++] = (char)(enc & 0x7F);
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._full3,"    private static int _full3(int t, byte[] b, int off) {
        int enc = TRIPLET_TO_CHARS[t];
        b[off++] = (byte)(enc >> 16);
        b[off++] = (byte)(enc >> 8);
        b[off++] = (byte)enc;
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL,"    private static int _outputSmallestL(char[] b, int off) {
        int len = SMALLEST_LONG.length();
        SMALLEST_LONG.getChars(0, len, b, off);
        return off + len;
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL,"    private static int _outputSmallestL(byte[] b, int off) {
        int len = SMALLEST_LONG.length();
        for (int i = 0; i < len; ++i) {
            b[off++] = (byte)SMALLEST_LONG.charAt(i);
        }
        return off;
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI,"    private static int _outputSmallestI(char[] b, int off) {
        int len = SMALLEST_INT.length();
        SMALLEST_INT.getChars(0, len, b, off);
        return off + len;
    }"
com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI,"    private static int _outputSmallestI(byte[] b, int off) {
        int len = SMALLEST_INT.length();
        for (int i = 0; i < len; ++i) {
            b[off++] = (byte)SMALLEST_INT.charAt(i);
        }
        return off;
    }"
com.fasterxml.jackson.core.io.DataOutputAsStream.write,"    public void write(int b) throws IOException {
        this._output.write(b);
    }"
com.fasterxml.jackson.core.io.DataOutputAsStream.write,"    public void write(byte[] b) throws IOException {
        this._output.write(b, 0, b.length);
    }"
com.fasterxml.jackson.core.io.DataOutputAsStream.write,"    public void write(byte[] b, int offset, int length) throws IOException {
        this._output.write(b, offset, length);
    }
"
com.fasterxml.jackson.core.io.IOContext.setEncoding,"    public void setEncoding(JsonEncoding enc) {
        this._encoding = enc;
    }"
com.fasterxml.jackson.core.io.IOContext.withEncoding,"    public IOContext withEncoding(JsonEncoding enc) {
        this._encoding = enc;
        return this;
    }"
com.fasterxml.jackson.core.io.IOContext.getSourceReference,"    public Object getSourceReference() {
        return this._sourceRef;
    }"
com.fasterxml.jackson.core.io.IOContext.getEncoding,"    public JsonEncoding getEncoding() {
        return this._encoding;
    }"
com.fasterxml.jackson.core.io.IOContext.isResourceManaged,"    public boolean isResourceManaged() {
        return this._managedResource;
    }"
com.fasterxml.jackson.core.io.IOContext.constructTextBuffer,"    public TextBuffer constructTextBuffer() {
        return new TextBuffer(this._bufferRecycler);
    }"
com.fasterxml.jackson.core.io.IOContext.allocReadIOBuffer,"    public byte[] allocReadIOBuffer() {
        this._verifyAlloc(this._readIOBuffer);
        this._readIOBuffer = this._bufferRecycler.allocByteBuffer(0);
        return this._readIOBuffer;
    }"
com.fasterxml.jackson.core.io.IOContext.allocReadIOBuffer,"    public byte[] allocReadIOBuffer(int minSize) {
        this._verifyAlloc(this._readIOBuffer);
        this._readIOBuffer = this._bufferRecycler.allocByteBuffer(0, minSize);
        return this._readIOBuffer;
    }"
com.fasterxml.jackson.core.io.IOContext.allocWriteEncodingBuffer,"    public byte[] allocWriteEncodingBuffer() {
        this._verifyAlloc(this._writeEncodingBuffer);
        this._writeEncodingBuffer = this._bufferRecycler.allocByteBuffer(1);
        return this._writeEncodingBuffer;
    }"
com.fasterxml.jackson.core.io.IOContext.allocWriteEncodingBuffer,"    public byte[] allocWriteEncodingBuffer(int minSize) {
        this._verifyAlloc(this._writeEncodingBuffer);
        this._writeEncodingBuffer = this._bufferRecycler.allocByteBuffer(1, minSize);
        return this._writeEncodingBuffer;
    }"
com.fasterxml.jackson.core.io.IOContext.allocBase64Buffer,"    public byte[] allocBase64Buffer() {
        this._verifyAlloc(this._base64Buffer);
        this._base64Buffer = this._bufferRecycler.allocByteBuffer(3);
        return this._base64Buffer;
    }"
com.fasterxml.jackson.core.io.IOContext.allocTokenBuffer,"    public char[] allocTokenBuffer() {
        this._verifyAlloc(this._tokenCBuffer);
        this._tokenCBuffer = this._bufferRecycler.allocCharBuffer(0);
        return this._tokenCBuffer;
    }"
com.fasterxml.jackson.core.io.IOContext.allocTokenBuffer,"    public char[] allocTokenBuffer(int minSize) {
        this._verifyAlloc(this._tokenCBuffer);
        this._tokenCBuffer = this._bufferRecycler.allocCharBuffer(0, minSize);
        return this._tokenCBuffer;
    }"
com.fasterxml.jackson.core.io.IOContext.allocConcatBuffer,"    public char[] allocConcatBuffer() {
        this._verifyAlloc(this._concatCBuffer);
        this._concatCBuffer = this._bufferRecycler.allocCharBuffer(1);
        return this._concatCBuffer;
    }"
com.fasterxml.jackson.core.io.IOContext.allocNameCopyBuffer,"    public char[] allocNameCopyBuffer(int minSize) {
        this._verifyAlloc(this._nameCopyBuffer);
        this._nameCopyBuffer = this._bufferRecycler.allocCharBuffer(3, minSize);
        return this._nameCopyBuffer;
    }"
com.fasterxml.jackson.core.io.IOContext.releaseReadIOBuffer,"    public void releaseReadIOBuffer(byte[] buf) {
        if (buf != null) {
            this._verifyRelease(buf, this._readIOBuffer);
            this._readIOBuffer = null;
            this._bufferRecycler.releaseByteBuffer(0, buf);
        }
    }"
com.fasterxml.jackson.core.io.IOContext.releaseWriteEncodingBuffer,"    public void releaseWriteEncodingBuffer(byte[] buf) {
        if (buf != null) {
            this._verifyRelease(buf, this._writeEncodingBuffer);
            this._writeEncodingBuffer = null;
            this._bufferRecycler.releaseByteBuffer(1, buf);
        }
    }"
com.fasterxml.jackson.core.io.IOContext.releaseBase64Buffer,"    public void releaseBase64Buffer(byte[] buf) {
        if (buf != null) {
            this._verifyRelease(buf, this._base64Buffer);
            this._base64Buffer = null;
            this._bufferRecycler.releaseByteBuffer(3, buf);
        }
    }"
com.fasterxml.jackson.core.io.IOContext.releaseTokenBuffer,"    public void releaseTokenBuffer(char[] buf) {
        if (buf != null) {
            this._verifyRelease(buf, this._tokenCBuffer);
            this._tokenCBuffer = null;
            this._bufferRecycler.releaseCharBuffer(0, buf);
        }
    }"
com.fasterxml.jackson.core.io.IOContext.releaseConcatBuffer,"    public void releaseConcatBuffer(char[] buf) {
        if (buf != null) {
            this._verifyRelease(buf, this._concatCBuffer);
            this._concatCBuffer = null;
            this._bufferRecycler.releaseCharBuffer(1, buf);
        }
    }"
com.fasterxml.jackson.core.io.IOContext.releaseNameCopyBuffer,"    public void releaseNameCopyBuffer(char[] buf) {
        if (buf != null) {
            this._verifyRelease(buf, this._nameCopyBuffer);
            this._nameCopyBuffer = null;
            this._bufferRecycler.releaseCharBuffer(3, buf);
        }
    }"
com.fasterxml.jackson.core.io.IOContext._verifyAlloc,"    protected final void _verifyAlloc(Object buffer) {
        if (buffer != null) {
            throw new IllegalStateException(""Trying to call same allocXxx() method second time"");
        }
    }"
com.fasterxml.jackson.core.io.IOContext._verifyRelease,"    protected final void _verifyRelease(byte[] toRelease, byte[] src) {
        if (toRelease != src && toRelease.length < src.length) {
            throw this.wrongBuf();
        }
    }"
com.fasterxml.jackson.core.io.IOContext._verifyRelease,"    protected final void _verifyRelease(char[] toRelease, char[] src) {
        if (toRelease != src && toRelease.length < src.length) {
            throw this.wrongBuf();
        }
    }"
com.fasterxml.jackson.core.io.IOContext.wrongBuf,"    private IllegalArgumentException wrongBuf() {
        return new IllegalArgumentException(""Trying to release buffer smaller than original"");
    }
"
com.fasterxml.jackson.core.io.InputDecorator.decorate,
com.fasterxml.jackson.core.io.InputDecorator.decorate,
com.fasterxml.jackson.core.io.InputDecorator.decorate,"    public DataInput decorate(IOContext ctxt, DataInput input) throws IOException {
        throw new UnsupportedOperationException();
    }"
com.fasterxml.jackson.core.io.InputDecorator.decorate,"    public abstract Reader decorate(IOContext var1, Reader var2) throws IOException;
"
com.fasterxml.jackson.core.io.SegmentedStringWriter.append,"    public Writer append(char c) {
        this.write(c);
        return this;
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.append,"    public Writer append(CharSequence csq) {
        String str = csq.toString();
        this._buffer.append(str, 0, str.length());
        return this;
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.append,"    public Writer append(CharSequence csq, int start, int end) {
        String str = csq.subSequence(start, end).toString();
        this._buffer.append(str, 0, str.length());
        return this;
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.close,"    public void close() {
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.flush,"    public void flush() {
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.write,"    public void write(char[] cbuf) {
        this._buffer.append(cbuf, 0, cbuf.length);
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.write,"    public void write(char[] cbuf, int off, int len) {
        this._buffer.append(cbuf, off, len);
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.write,"    public void write(int c) {
        this._buffer.append((char)c);
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.write,"    public void write(String str) {
        this._buffer.append(str, 0, str.length());
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.write,"    public void write(String str, int off, int len) {
        this._buffer.append(str, off, len);
    }"
com.fasterxml.jackson.core.io.SegmentedStringWriter.getAndClear,"    public String getAndClear() {
        String result = this._buffer.contentsAsString();
        this._buffer.releaseBuffers();
        return result;
    }
"
com.fasterxml.jackson.core.io.OutputDecorator.decorate,
com.fasterxml.jackson.core.io.OutputDecorator.decorate,"    public abstract Writer decorate(IOContext var1, Writer var2) throws IOException;
"
com.fasterxml.jackson.core.io.MergedStream.available,"    public int available() throws IOException {
        if (this._b != null) {
            return this._end - this._ptr;
        }
        return this._in.available();
    }"
com.fasterxml.jackson.core.io.MergedStream.close,"    public void close() throws IOException {
        this._free();
        this._in.close();
    }"
com.fasterxml.jackson.core.io.MergedStream.mark,"    public void mark(int readlimit) {
        if (this._b == null) {
            this._in.mark(readlimit);
        }
    }"
com.fasterxml.jackson.core.io.MergedStream.markSupported,"    public boolean markSupported() {
        return this._b == null && this._in.markSupported();
    }"
com.fasterxml.jackson.core.io.MergedStream.read,"    public int read() throws IOException {
        if (this._b != null) {
            int c = this._b[this._ptr++] & 0xFF;
            if (this._ptr >= this._end) {
                this._free();
            }
            return c;
        }
        return this._in.read();
    }"
com.fasterxml.jackson.core.io.MergedStream.read,"    public int read(byte[] b) throws IOException {
        return this.read(b, 0, b.length);
    }"
com.fasterxml.jackson.core.io.MergedStream.read,"    public int read(byte[] b, int off, int len) throws IOException {
        if (this._b != null) {
            int avail = this._end - this._ptr;
            if (len > avail) {
                len = avail;
            }
            System.arraycopy(this._b, this._ptr, b, off, len);
            this._ptr += len;
            if (this._ptr >= this._end) {
                this._free();
            }
            return len;
        }
        return this._in.read(b, off, len);
    }"
com.fasterxml.jackson.core.io.MergedStream.reset,"    public void reset() throws IOException {
        if (this._b == null) {
            this._in.reset();
        }
    }"
com.fasterxml.jackson.core.io.MergedStream.skip,"    public long skip(long n) throws IOException {
        long count = 0L;
        if (this._b != null) {
            int amount = this._end - this._ptr;
            if ((long)amount > n) {
                this._ptr += (int)n;
                return n;
            }
            this._free();
            count += (long)amount;
            n -= (long)amount;
        }
        if (n > 0L) {
            count += this._in.skip(n);
        }
        return count;
    }"
com.fasterxml.jackson.core.io.MergedStream._free,"    private void _free() {
        byte[] buf = this._b;
        if (buf != null) {
            this._b = null;
            if (this._ctxt != null) {
                this._ctxt.releaseReadIOBuffer(buf);
            }
        }
    }
"
com.fasterxml.jackson.core.io.JsonEOFException.getTokenBeingDecoded,"    public JsonToken getTokenBeingDecoded() {
        return this._token;
    }
"
com.fasterxml.jackson.core.io.NumberInput.parseInt,"    public static int parseInt(char[] ch, int off, int len) {
        int num = ch[off] - 48;
        if (len > 4) {
            num = num * 10 + (ch[++off] - 48);
            num = num * 10 + (ch[++off] - 48);
            num = num * 10 + (ch[++off] - 48);
            num = num * 10 + (ch[++off] - 48);
            if ((len -= 4) > 4) {
                num = num * 10 + (ch[++off] - 48);
                num = num * 10 + (ch[++off] - 48);
                num = num * 10 + (ch[++off] - 48);
                num = num * 10 + (ch[++off] - 48);
                return num;
            }
        }
        if (len > 1) {
            num = num * 10 + (ch[++off] - 48);
            if (len > 2) {
                num = num * 10 + (ch[++off] - 48);
                if (len > 3) {
                    num = num * 10 + (ch[++off] - 48);
                }
            }
        }
        return num;
    }"
com.fasterxml.jackson.core.io.NumberInput.parseInt,"    public static int parseInt(String s) {
        char c = s.charAt(0);
        int len = s.length();
        boolean neg = c == '-';
        int offset = 1;
        if (neg) {
            if (len == 1 || len > 10) {
                return Integer.parseInt(s);
            }
            c = s.charAt(offset++);
        } else if (len > 9) {
            return Integer.parseInt(s);
        }
        if (c > '9' || c < '0') {
            return Integer.parseInt(s);
        }
        int num = c - 48;
        if (offset < len) {
            if ((c = s.charAt(offset++)) > '9' || c < '0') {
                return Integer.parseInt(s);
            }
            num = num * 10 + (c - 48);
            if (offset < len) {
                if ((c = s.charAt(offset++)) > '9' || c < '0') {
                    return Integer.parseInt(s);
                }
                num = num * 10 + (c - 48);
                if (offset < len) {
                    do {
                        if ((c = s.charAt(offset++)) > '9' || c < '0') {
                            return Integer.parseInt(s);
                        }
                        num = num * 10 + (c - 48);
                    } while (offset < len);
                }
            }
        }
        return neg ? -num : num;
    }"
com.fasterxml.jackson.core.io.NumberInput.parseLong,"    public static long parseLong(char[] ch, int off, int len) {
        int len1 = len - 9;
        long val = (long)NumberInput.parseInt(ch, off, len1) * 1000000000L;
        return val + (long)NumberInput.parseInt(ch, off + len1, 9);
    }"
com.fasterxml.jackson.core.io.NumberInput.parseLong,"    public static long parseLong(String s) {
        int length = s.length();
        if (length <= 9) {
            return NumberInput.parseInt(s);
        }
        return Long.parseLong(s);
    }"
com.fasterxml.jackson.core.io.NumberInput.inLongRange,"    public static boolean inLongRange(char[] ch, int off, int len, boolean negative) {
        String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;
        int cmpLen = cmpStr.length();
        if (len < cmpLen) {
            return true;
        }
        if (len > cmpLen) {
            return false;
        }
        for (int i = 0; i < cmpLen; ++i) {
            int diff = ch[off + i] - cmpStr.charAt(i);
            if (diff == 0) continue;
            return diff < 0;
        }
        return true;
    }"
com.fasterxml.jackson.core.io.NumberInput.inLongRange,"    public static boolean inLongRange(String s, boolean negative) {
        String cmp = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;
        int cmpLen = cmp.length();
        int alen = s.length();
        if (alen < cmpLen) {
            return true;
        }
        if (alen > cmpLen) {
            return false;
        }
        for (int i = 0; i < cmpLen; ++i) {
            int diff = s.charAt(i) - cmp.charAt(i);
            if (diff == 0) continue;
            return diff < 0;
        }
        return true;
    }"
com.fasterxml.jackson.core.io.NumberInput.parseAsInt,"    public static int parseAsInt(String s, int def) {
        char c;
        if (s == null) {
            return def;
        }
        int len = (s = s.trim()).length();
        if (len == 0) {
            return def;
        }
        int i = 0;
        if (i < len) {
            c = s.charAt(0);
            if (c == '+') {
                s = s.substring(1);
                len = s.length();
            } else if (c == '-') {
                ++i;
            }
        }
        while (i < len) {
            c = s.charAt(i);
            if (c > '9' || c < '0') {
                try {
                    return (int)NumberInput.parseDouble(s);
                }
                catch (NumberFormatException e) {
                    return def;
                }
            }
            ++i;
        }
        try {
            return Integer.parseInt(s);
        }
        catch (NumberFormatException e) {
            return def;
        }
    }"
com.fasterxml.jackson.core.io.NumberInput.parseAsLong,"    public static long parseAsLong(String s, long def) {
        char c;
        if (s == null) {
            return def;
        }
        int len = (s = s.trim()).length();
        if (len == 0) {
            return def;
        }
        int i = 0;
        if (i < len) {
            c = s.charAt(0);
            if (c == '+') {
                s = s.substring(1);
                len = s.length();
            } else if (c == '-') {
                ++i;
            }
        }
        while (i < len) {
            c = s.charAt(i);
            if (c > '9' || c < '0') {
                try {
                    return (long)NumberInput.parseDouble(s);
                }
                catch (NumberFormatException e) {
                    return def;
                }
            }
            ++i;
        }
        try {
            return Long.parseLong(s);
        }
        catch (NumberFormatException e) {
            return def;
        }
    }"
com.fasterxml.jackson.core.io.NumberInput.parseAsDouble,"    public static double parseAsDouble(String s, double def) {
        if (s == null) {
            return def;
        }
        int len = (s = s.trim()).length();
        if (len == 0) {
            return def;
        }
        try {
            return NumberInput.parseDouble(s);
        }
        catch (NumberFormatException e) {
            return def;
        }
    }"
com.fasterxml.jackson.core.io.NumberInput.parseDouble,"    public static double parseDouble(String s) throws NumberFormatException {
        if (NASTY_SMALL_DOUBLE.equals(s)) {
            return Double.MIN_VALUE;
        }
        return Double.parseDouble(s);
    }"
com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal,"    public static BigDecimal parseBigDecimal(String s) throws NumberFormatException {
        try {
            return new BigDecimal(s);
        }
        catch (NumberFormatException e) {
            throw NumberInput._badBD(s);
        }
    }"
com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal,"    public static BigDecimal parseBigDecimal(char[] b) throws NumberFormatException {
        return NumberInput.parseBigDecimal(b, 0, b.length);
    }"
com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal,"    public static BigDecimal parseBigDecimal(char[] b, int off, int len) throws NumberFormatException {
        try {
            return new BigDecimal(b, off, len);
        }
        catch (NumberFormatException e) {
            throw NumberInput._badBD(new String(b, off, len));
        }
    }"
com.fasterxml.jackson.core.io.NumberInput._badBD,"    private static NumberFormatException _badBD(String s) {
        return new NumberFormatException(""Value \"""" + s + ""\"" can not be represented as BigDecimal"");
    }
"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputTarget,"    public Object getOutputTarget() {
        return this._writer;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputBuffered,"    public int getOutputBuffered() {
        int len = this._outputTail - this._outputHead;
        return Math.max(0, len);
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.canWriteFormattedNumbers,"    public boolean canWriteFormattedNumbers() {
        return true;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName,"    public void writeFieldName(String name) throws IOException {
        int status = this._writeContext.writeFieldName(name);
        if (status == 4) {
            this._reportError(""Can not write a field name, expecting a value"");
        }
        this._writeFieldName(name, status == 1);
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName,"    public void writeFieldName(SerializableString name) throws IOException {
        int status = this._writeContext.writeFieldName(name.getValue());
        if (status == 4) {
            this._reportError(""Can not write a field name, expecting a value"");
        }
        this._writeFieldName(name, status == 1);
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName,"    protected void _writeFieldName(String name, boolean commaBefore) throws IOException {
        if (this._cfgPrettyPrinter != null) {
            this._writePPFieldName(name, commaBefore);
            return;
        }
        if (this._outputTail + 1 >= this._outputEnd) {
            this._flushBuffer();
        }
        if (commaBefore) {
            this._outputBuffer[this._outputTail++] = 44;
        }
        if (this._cfgUnqNames) {
            this._writeString(name);
            return;
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._writeString(name);
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName,"    protected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException {
        if (this._cfgPrettyPrinter != null) {
            this._writePPFieldName(name, commaBefore);
            return;
        }
        if (this._outputTail + 1 >= this._outputEnd) {
            this._flushBuffer();
        }
        if (commaBefore) {
            this._outputBuffer[this._outputTail++] = 44;
        }
        char[] quoted = name.asQuotedChars();
        if (this._cfgUnqNames) {
            this.writeRaw(quoted, 0, quoted.length);
            return;
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        int qlen = quoted.length;
        if (this._outputTail + qlen + 1 >= this._outputEnd) {
            this.writeRaw(quoted, 0, qlen);
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = this._quoteChar;
        } else {
            System.arraycopy(quoted, 0, this._outputBuffer, this._outputTail, qlen);
            this._outputTail += qlen;
            this._outputBuffer[this._outputTail++] = this._quoteChar;
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray,"    public void writeStartArray() throws IOException {
        this._verifyValueWrite(""start an array"");
        this._writeContext = this._writeContext.createChildArrayContext();
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeStartArray(this);
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 91;
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray,"    public void writeEndArray() throws IOException {
        if (!this._writeContext.inArray()) {
            this._reportError(""Current context not Array but "" + this._writeContext.typeDesc());
        }
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeEndArray(this, this._writeContext.getEntryCount());
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 93;
        }
        this._writeContext = this._writeContext.clearAndGetParent();
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject,"    public void writeStartObject(Object forValue) throws IOException {
        JsonWriteContext ctxt;
        this._verifyValueWrite(""start an object"");
        this._writeContext = ctxt = this._writeContext.createChildObjectContext();
        if (forValue != null) {
            ctxt.setCurrentValue(forValue);
        }
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeStartObject(this);
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 123;
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject,"    public void writeStartObject() throws IOException {
        this._verifyValueWrite(""start an object"");
        this._writeContext = this._writeContext.createChildObjectContext();
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeStartObject(this);
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 123;
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject,"    public void writeEndObject() throws IOException {
        if (!this._writeContext.inObject()) {
            this._reportError(""Current context not Object but "" + this._writeContext.typeDesc());
        }
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeEndObject(this, this._writeContext.getEntryCount());
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 125;
        }
        this._writeContext = this._writeContext.clearAndGetParent();
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName,"    protected void _writePPFieldName(String name, boolean commaBefore) throws IOException {
        if (commaBefore) {
            this._cfgPrettyPrinter.writeObjectEntrySeparator(this);
        } else {
            this._cfgPrettyPrinter.beforeObjectEntries(this);
        }
        if (this._cfgUnqNames) {
            this._writeString(name);
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = this._quoteChar;
            this._writeString(name);
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = this._quoteChar;
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName,"    protected void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException {
        if (commaBefore) {
            this._cfgPrettyPrinter.writeObjectEntrySeparator(this);
        } else {
            this._cfgPrettyPrinter.beforeObjectEntries(this);
        }
        char[] quoted = name.asQuotedChars();
        if (this._cfgUnqNames) {
            this.writeRaw(quoted, 0, quoted.length);
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = this._quoteChar;
            this.writeRaw(quoted, 0, quoted.length);
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = this._quoteChar;
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString,"    public void writeString(String text) throws IOException {
        this._verifyValueWrite(""write a string"");
        if (text == null) {
            this._writeNull();
            return;
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._writeString(text);
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString,"    public void writeString(char[] text, int offset, int len) throws IOException {
        this._verifyValueWrite(""write a string"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._writeString(text, offset, len);
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString,"    public void writeString(SerializableString sstr) throws IOException {
        this._verifyValueWrite(""write a string"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        char[] text = sstr.asQuotedChars();
        int len = text.length;
        if (len < 32) {
            int room = this._outputEnd - this._outputTail;
            if (len > room) {
                this._flushBuffer();
            }
            System.arraycopy(text, 0, this._outputBuffer, this._outputTail, len);
            this._outputTail += len;
        } else {
            this._flushBuffer();
            this._writer.write(text, 0, len);
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String,"    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {
        this._reportUnsupportedOperation();
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String,"    public void writeUTF8String(byte[] text, int offset, int length) throws IOException {
        this._reportUnsupportedOperation();
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw,"    public void writeRaw(String text) throws IOException {
        int len = text.length();
        int room = this._outputEnd - this._outputTail;
        if (room == 0) {
            this._flushBuffer();
            room = this._outputEnd - this._outputTail;
        }
        if (room >= len) {
            text.getChars(0, len, this._outputBuffer, this._outputTail);
            this._outputTail += len;
        } else {
            this.writeRawLong(text);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw,"    public void writeRaw(String text, int start, int len) throws IOException {
        int room = this._outputEnd - this._outputTail;
        if (room < len) {
            this._flushBuffer();
            room = this._outputEnd - this._outputTail;
        }
        if (room >= len) {
            text.getChars(start, start + len, this._outputBuffer, this._outputTail);
            this._outputTail += len;
        } else {
            this.writeRawLong(text.substring(start, start + len));
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw,"    public void writeRaw(SerializableString text) throws IOException {
        this.writeRaw(text.getValue());
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw,"    public void writeRaw(char[] text, int offset, int len) throws IOException {
        if (len < 32) {
            int room = this._outputEnd - this._outputTail;
            if (len > room) {
                this._flushBuffer();
            }
            System.arraycopy(text, offset, this._outputBuffer, this._outputTail, len);
            this._outputTail += len;
            return;
        }
        this._flushBuffer();
        this._writer.write(text, offset, len);
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw,"    public void writeRaw(char c) throws IOException {
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = c;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong,"    private void writeRawLong(String text) throws IOException {
        int len;
        int amount;
        int room = this._outputEnd - this._outputTail;
        text.getChars(0, room, this._outputBuffer, this._outputTail);
        this._outputTail += room;
        this._flushBuffer();
        int offset = room;
        for (len = text.length() - room; len > this._outputEnd; len -= amount) {
            amount = this._outputEnd;
            text.getChars(offset, offset + amount, this._outputBuffer, 0);
            this._outputHead = 0;
            this._outputTail = amount;
            this._flushBuffer();
            offset += amount;
        }
        text.getChars(offset, offset + len, this._outputBuffer, 0);
        this._outputHead = 0;
        this._outputTail = len;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary,"    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException {
        this._verifyValueWrite(""write a binary value"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._writeBinary(b64variant, data, offset, offset + len);
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary,"    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException {
        int bytes;
        this._verifyValueWrite(""write a binary value"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        byte[] encodingBuffer = this._ioContext.allocBase64Buffer();
        try {
            if (dataLength < 0) {
                bytes = this._writeBinary(b64variant, data, encodingBuffer);
            } else {
                int missing = this._writeBinary(b64variant, data, encodingBuffer, dataLength);
                if (missing > 0) {
                    this._reportError(""Too few bytes available: missing "" + missing + "" bytes (out of "" + dataLength + "")"");
                }
                bytes = dataLength;
            }
        }
        finally {
            this._ioContext.releaseBase64Buffer(encodingBuffer);
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        return bytes;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber,"    public void writeNumber(short s) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (this._cfgNumbersAsStrings) {
            this._writeQuotedShort(s);
            return;
        }
        if (this._outputTail + 6 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputTail = NumberOutput.outputInt((int)s, this._outputBuffer, this._outputTail);
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort,"    private void _writeQuotedShort(short s) throws IOException {
        if (this._outputTail + 8 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._outputTail = NumberOutput.outputInt((int)s, this._outputBuffer, this._outputTail);
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber,"    public void writeNumber(int i) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (this._cfgNumbersAsStrings) {
            this._writeQuotedInt(i);
            return;
        }
        if (this._outputTail + 11 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputTail = NumberOutput.outputInt(i, this._outputBuffer, this._outputTail);
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt,"    private void _writeQuotedInt(int i) throws IOException {
        if (this._outputTail + 13 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._outputTail = NumberOutput.outputInt(i, this._outputBuffer, this._outputTail);
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber,"    public void writeNumber(long l) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (this._cfgNumbersAsStrings) {
            this._writeQuotedLong(l);
            return;
        }
        if (this._outputTail + 21 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputTail = NumberOutput.outputLong(l, this._outputBuffer, this._outputTail);
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong,"    private void _writeQuotedLong(long l) throws IOException {
        if (this._outputTail + 23 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._outputTail = NumberOutput.outputLong(l, this._outputBuffer, this._outputTail);
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber,"    public void writeNumber(BigInteger value) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (value == null) {
            this._writeNull();
        } else if (this._cfgNumbersAsStrings) {
            this._writeQuotedRaw(value.toString());
        } else {
            this.writeRaw(value.toString());
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber,"    public void writeNumber(double d) throws IOException {
        if (this._cfgNumbersAsStrings || this.isEnabled(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS) && (Double.isNaN(d) || Double.isInfinite(d))) {
            this.writeString(String.valueOf(d));
            return;
        }
        this._verifyValueWrite(""write a number"");
        this.writeRaw(String.valueOf(d));
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber,"    public void writeNumber(float f) throws IOException {
        if (this._cfgNumbersAsStrings || this.isEnabled(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS) && (Float.isNaN(f) || Float.isInfinite(f))) {
            this.writeString(String.valueOf(f));
            return;
        }
        this._verifyValueWrite(""write a number"");
        this.writeRaw(String.valueOf(f));
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber,"    public void writeNumber(BigDecimal value) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (value == null) {
            this._writeNull();
        } else if (this._cfgNumbersAsStrings) {
            this._writeQuotedRaw(this._asString(value));
        } else {
            this.writeRaw(this._asString(value));
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber,"    public void writeNumber(String encodedValue) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (this._cfgNumbersAsStrings) {
            this._writeQuotedRaw(encodedValue);
        } else {
            this.writeRaw(encodedValue);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw,"    private void _writeQuotedRaw(String value) throws IOException {
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this.writeRaw(value);
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBoolean,"    public void writeBoolean(boolean state) throws IOException {
        this._verifyValueWrite(""write a boolean value"");
        if (this._outputTail + 5 >= this._outputEnd) {
            this._flushBuffer();
        }
        int ptr = this._outputTail;
        char[] buf = this._outputBuffer;
        if (state) {
            buf[ptr] = 116;
            buf[++ptr] = 114;
            buf[++ptr] = 117;
            buf[++ptr] = 101;
        } else {
            buf[ptr] = 102;
            buf[++ptr] = 97;
            buf[++ptr] = 108;
            buf[++ptr] = 115;
            buf[++ptr] = 101;
        }
        this._outputTail = ptr + 1;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNull,"    public void writeNull() throws IOException {
        this._verifyValueWrite(""write a null"");
        this._writeNull();
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite,"    protected void _verifyValueWrite(String typeMsg) throws IOException {
        int c;
        int status = this._writeContext.writeValue();
        if (this._cfgPrettyPrinter != null) {
            this._verifyPrettyValueWrite(typeMsg, status);
            return;
        }
        switch (status) {
            default: {
                return;
            }
            case 1: {
                c = 44;
                break;
            }
            case 2: {
                c = 58;
                break;
            }
            case 3: {
                if (this._rootValueSeparator != null) {
                    this.writeRaw(this._rootValueSeparator.getValue());
                }
                return;
            }
            case 5: {
                this._reportCantWriteValueExpectName(typeMsg);
                return;
            }
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = c;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush,"    public void flush() throws IOException {
        this._flushBuffer();
        if (this._writer != null && this.isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {
            this._writer.flush();
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close,"    public void close() throws IOException {
        super.close();
        if (this._outputBuffer != null && this.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {
            while (true) {
                JsonStreamContext ctxt;
                if ((ctxt = this.getOutputContext()).inArray()) {
                    this.writeEndArray();
                    continue;
                }
                if (!ctxt.inObject()) break;
                this.writeEndObject();
            }
        }
        this._flushBuffer();
        this._outputHead = 0;
        this._outputTail = 0;
        if (this._writer != null) {
            if (this._ioContext.isResourceManaged() || this.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {
                this._writer.close();
            } else if (this.isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {
                this._writer.flush();
            }
        }
        this._releaseBuffers();
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._releaseBuffers,"    protected void _releaseBuffers() {
        char[] buf = this._outputBuffer;
        if (buf != null) {
            this._outputBuffer = null;
            this._ioContext.releaseConcatBuffer(buf);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString,"    private void _writeString(String text) throws IOException {
        int len = text.length();
        if (len > this._outputEnd) {
            this._writeLongString(text);
            return;
        }
        if (this._outputTail + len > this._outputEnd) {
            this._flushBuffer();
        }
        text.getChars(0, len, this._outputBuffer, this._outputTail);
        if (this._characterEscapes != null) {
            this._writeStringCustom(len);
        } else if (this._maximumNonEscapedChar != 0) {
            this._writeStringASCII(len, this._maximumNonEscapedChar);
        } else {
            this._writeString2(len);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2,"    private void _writeString2(int len) throws IOException {
        int end = this._outputTail + len;
        int[] escCodes = this._outputEscapes;
        int escLen = escCodes.length;
        block0: while (this._outputTail < end) {
            char c;
            while ((c = this._outputBuffer[this._outputTail]) >= escLen || escCodes[c] == 0) {
                if (++this._outputTail < end) continue;
                break block0;
            }
            int flushLen = this._outputTail - this._outputHead;
            if (flushLen > 0) {
                this._writer.write(this._outputBuffer, this._outputHead, flushLen);
            }
            char c2 = this._outputBuffer[this._outputTail++];
            this._prependOrWriteCharacterEscape(c2, escCodes[c2]);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString,"    private void _writeLongString(String text) throws IOException {
        int segmentLen;
        this._flushBuffer();
        int textLen = text.length();
        int offset = 0;
        do {
            int max;
            segmentLen = offset + (max = this._outputEnd) > textLen ? textLen - offset : max;
            text.getChars(offset, offset + segmentLen, this._outputBuffer, 0);
            if (this._characterEscapes != null) {
                this._writeSegmentCustom(segmentLen);
                continue;
            }
            if (this._maximumNonEscapedChar != 0) {
                this._writeSegmentASCII(segmentLen, this._maximumNonEscapedChar);
                continue;
            }
            this._writeSegment(segmentLen);
        } while ((offset += segmentLen) < textLen);
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment,"    private void _writeSegment(int end) throws IOException {
        int ptr;
        int[] escCodes = this._outputEscapes;
        int escLen = escCodes.length;
        int start = ptr = 0;
        while (ptr < end) {
            char c;
            while (((c = this._outputBuffer[ptr]) >= escLen || escCodes[c] == 0) && ++ptr < end) {
            }
            int flushLen = ptr - start;
            if (flushLen > 0) {
                this._writer.write(this._outputBuffer, start, flushLen);
                if (ptr >= end) break;
            }
            start = this._prependOrWriteCharacterEscape(this._outputBuffer, ++ptr, end, c, escCodes[c]);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString,"    private void _writeString(char[] text, int offset, int len) throws IOException {
        if (this._characterEscapes != null) {
            this._writeStringCustom(text, offset, len);
            return;
        }
        if (this._maximumNonEscapedChar != 0) {
            this._writeStringASCII(text, offset, len, this._maximumNonEscapedChar);
            return;
        }
        len += offset;
        int[] escCodes = this._outputEscapes;
        int escLen = escCodes.length;
        while (offset < len) {
            char c;
            int start = offset;
            while (((c = text[offset]) >= escLen || escCodes[c] == 0) && ++offset < len) {
            }
            int newAmount = offset - start;
            if (newAmount < 32) {
                if (this._outputTail + newAmount > this._outputEnd) {
                    this._flushBuffer();
                }
                if (newAmount > 0) {
                    System.arraycopy(text, start, this._outputBuffer, this._outputTail, newAmount);
                    this._outputTail += newAmount;
                }
            } else {
                this._flushBuffer();
                this._writer.write(text, start, newAmount);
            }
            if (offset >= len) break;
            char c2 = text[offset++];
            this._appendCharacterEscape(c2, escCodes[c2]);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII,"    private void _writeStringASCII(int len, int maxNonEscaped) throws IOException, JsonGenerationException {
        int end = this._outputTail + len;
        int[] escCodes = this._outputEscapes;
        int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
        int escCode = 0;
        while (this._outputTail < end) {
            char c;
            block5: {
                do {
                    if ((c = this._outputBuffer[this._outputTail]) < escLimit) {
                        escCode = escCodes[c];
                        if (escCode == 0) continue;
                    } else {
                        if (c <= maxNonEscaped) continue;
                        escCode = -1;
                    }
                    break block5;
                } while (++this._outputTail < end);
                break;
            }
            int flushLen = this._outputTail - this._outputHead;
            if (flushLen > 0) {
                this._writer.write(this._outputBuffer, this._outputHead, flushLen);
            }
            ++this._outputTail;
            this._prependOrWriteCharacterEscape(c, escCode);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII,"    private void _writeSegmentASCII(int end, int maxNonEscaped) throws IOException, JsonGenerationException {
        int[] escCodes = this._outputEscapes;
        int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
        int ptr = 0;
        int escCode = 0;
        int start = ptr;
        while (ptr < end) {
            char c;
            do {
                if ((c = this._outputBuffer[ptr]) < escLimit) {
                    escCode = escCodes[c];
                    if (escCode == 0) continue;
                    break;
                }
                if (c <= maxNonEscaped) continue;
                escCode = -1;
                break;
            } while (++ptr < end);
            int flushLen = ptr - start;
            if (flushLen > 0) {
                this._writer.write(this._outputBuffer, start, flushLen);
                if (ptr >= end) break;
            }
            start = this._prependOrWriteCharacterEscape(this._outputBuffer, ++ptr, end, c, escCode);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII,"    private void _writeStringASCII(char[] text, int offset, int len, int maxNonEscaped) throws IOException, JsonGenerationException {
        len += offset;
        int[] escCodes = this._outputEscapes;
        int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
        int escCode = 0;
        while (offset < len) {
            char c;
            int start = offset;
            do {
                if ((c = text[offset]) < escLimit) {
                    escCode = escCodes[c];
                    if (escCode == 0) continue;
                    break;
                }
                if (c <= maxNonEscaped) continue;
                escCode = -1;
                break;
            } while (++offset < len);
            int newAmount = offset - start;
            if (newAmount < 32) {
                if (this._outputTail + newAmount > this._outputEnd) {
                    this._flushBuffer();
                }
                if (newAmount > 0) {
                    System.arraycopy(text, start, this._outputBuffer, this._outputTail, newAmount);
                    this._outputTail += newAmount;
                }
            } else {
                this._flushBuffer();
                this._writer.write(text, start, newAmount);
            }
            if (offset >= len) break;
            ++offset;
            this._appendCharacterEscape(c, escCode);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom,"    private void _writeStringCustom(int len) throws IOException, JsonGenerationException {
        int end = this._outputTail + len;
        int[] escCodes = this._outputEscapes;
        int maxNonEscaped = this._maximumNonEscapedChar < 1 ? 65535 : this._maximumNonEscapedChar;
        int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
        int escCode = 0;
        CharacterEscapes customEscapes = this._characterEscapes;
        while (this._outputTail < end) {
            int c;
            block7: {
                do {
                    if ((c = this._outputBuffer[this._outputTail]) < escLimit) {
                        escCode = escCodes[c];
                        if (escCode == 0) continue;
                    } else if (c > maxNonEscaped) {
                        escCode = -1;
                    } else {
                        this._currentEscape = customEscapes.getEscapeSequence(c);
                        if (this._currentEscape == null) continue;
                        escCode = -2;
                    }
                    break block7;
                } while (++this._outputTail < end);
                break;
            }
            int flushLen = this._outputTail - this._outputHead;
            if (flushLen > 0) {
                this._writer.write(this._outputBuffer, this._outputHead, flushLen);
            }
            ++this._outputTail;
            this._prependOrWriteCharacterEscape((char)c, escCode);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom,"    private void _writeSegmentCustom(int end) throws IOException, JsonGenerationException {
        int[] escCodes = this._outputEscapes;
        int maxNonEscaped = this._maximumNonEscapedChar < 1 ? 65535 : this._maximumNonEscapedChar;
        int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
        CharacterEscapes customEscapes = this._characterEscapes;
        int ptr = 0;
        int escCode = 0;
        int start = ptr;
        while (ptr < end) {
            int c;
            do {
                if ((c = this._outputBuffer[ptr]) < escLimit) {
                    escCode = escCodes[c];
                    if (escCode == 0) continue;
                    break;
                }
                if (c > maxNonEscaped) {
                    escCode = -1;
                    break;
                }
                this._currentEscape = customEscapes.getEscapeSequence(c);
                if (this._currentEscape == null) continue;
                escCode = -2;
                break;
            } while (++ptr < end);
            int flushLen = ptr - start;
            if (flushLen > 0) {
                this._writer.write(this._outputBuffer, start, flushLen);
                if (ptr >= end) break;
            }
            start = this._prependOrWriteCharacterEscape(this._outputBuffer, ++ptr, end, (char)c, escCode);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom,"    private void _writeStringCustom(char[] text, int offset, int len) throws IOException, JsonGenerationException {
        len += offset;
        int[] escCodes = this._outputEscapes;
        int maxNonEscaped = this._maximumNonEscapedChar < 1 ? 65535 : this._maximumNonEscapedChar;
        int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
        CharacterEscapes customEscapes = this._characterEscapes;
        int escCode = 0;
        while (offset < len) {
            int c;
            int start = offset;
            do {
                if ((c = text[offset]) < escLimit) {
                    escCode = escCodes[c];
                    if (escCode == 0) continue;
                    break;
                }
                if (c > maxNonEscaped) {
                    escCode = -1;
                    break;
                }
                this._currentEscape = customEscapes.getEscapeSequence(c);
                if (this._currentEscape == null) continue;
                escCode = -2;
                break;
            } while (++offset < len);
            int newAmount = offset - start;
            if (newAmount < 32) {
                if (this._outputTail + newAmount > this._outputEnd) {
                    this._flushBuffer();
                }
                if (newAmount > 0) {
                    System.arraycopy(text, start, this._outputBuffer, this._outputTail, newAmount);
                    this._outputTail += newAmount;
                }
            } else {
                this._flushBuffer();
                this._writer.write(text, start, newAmount);
            }
            if (offset >= len) break;
            ++offset;
            this._appendCharacterEscape((char)c, escCode);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary,"    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, int inputEnd) throws IOException, JsonGenerationException {
        int safeInputEnd = inputEnd - 3;
        int safeOutputEnd = this._outputEnd - 6;
        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        while (inputPtr <= safeInputEnd) {
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            int b24 = input[inputPtr++] << 8;
            b24 |= input[inputPtr++] & 0xFF;
            b24 = b24 << 8 | input[inputPtr++] & 0xFF;
            this._outputTail = b64variant.encodeBase64Chunk(b24, this._outputBuffer, this._outputTail);
            if (--chunksBeforeLF > 0) continue;
            this._outputBuffer[this._outputTail++] = 92;
            this._outputBuffer[this._outputTail++] = 110;
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
        int inputLeft = inputEnd - inputPtr;
        if (inputLeft > 0) {
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            int b24 = input[inputPtr++] << 16;
            if (inputLeft == 2) {
                b24 |= (input[inputPtr++] & 0xFF) << 8;
            }
            this._outputTail = b64variant.encodeBase64Partial(b24, inputLeft, this._outputBuffer, this._outputTail);
        }
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary,"    protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException {
        int b24;
        int inputPtr = 0;
        int inputEnd = 0;
        int lastFullOffset = -3;
        int safeOutputEnd = this._outputEnd - 6;
        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        while (bytesLeft > 2) {
            if (inputPtr > lastFullOffset) {
                inputEnd = this._readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);
                inputPtr = 0;
                if (inputEnd < 3) break;
                lastFullOffset = inputEnd - 3;
            }
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            b24 = readBuffer[inputPtr++] << 8;
            b24 |= readBuffer[inputPtr++] & 0xFF;
            b24 = b24 << 8 | readBuffer[inputPtr++] & 0xFF;
            bytesLeft -= 3;
            this._outputTail = b64variant.encodeBase64Chunk(b24, this._outputBuffer, this._outputTail);
            if (--chunksBeforeLF > 0) continue;
            this._outputBuffer[this._outputTail++] = 92;
            this._outputBuffer[this._outputTail++] = 110;
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
        if (bytesLeft > 0) {
            inputEnd = this._readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);
            inputPtr = 0;
            if (inputEnd > 0) {
                int amount;
                if (this._outputTail > safeOutputEnd) {
                    this._flushBuffer();
                }
                b24 = readBuffer[inputPtr++] << 16;
                if (inputPtr < inputEnd) {
                    b24 |= (readBuffer[inputPtr] & 0xFF) << 8;
                    amount = 2;
                } else {
                    amount = 1;
                }
                this._outputTail = b64variant.encodeBase64Partial(b24, amount, this._outputBuffer, this._outputTail);
                bytesLeft -= amount;
            }
        }
        return bytesLeft;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary,"    protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException {
        int b24;
        int inputPtr = 0;
        int inputEnd = 0;
        int lastFullOffset = -3;
        int bytesDone = 0;
        int safeOutputEnd = this._outputEnd - 6;
        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        while (true) {
            if (inputPtr > lastFullOffset) {
                inputEnd = this._readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length);
                inputPtr = 0;
                if (inputEnd < 3) break;
                lastFullOffset = inputEnd - 3;
            }
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            b24 = readBuffer[inputPtr++] << 8;
            b24 |= readBuffer[inputPtr++] & 0xFF;
            b24 = b24 << 8 | readBuffer[inputPtr++] & 0xFF;
            bytesDone += 3;
            this._outputTail = b64variant.encodeBase64Chunk(b24, this._outputBuffer, this._outputTail);
            if (--chunksBeforeLF > 0) continue;
            this._outputBuffer[this._outputTail++] = 92;
            this._outputBuffer[this._outputTail++] = 110;
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
        if (inputPtr < inputEnd) {
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            b24 = readBuffer[inputPtr++] << 16;
            int amount = 1;
            if (inputPtr < inputEnd) {
                b24 |= (readBuffer[inputPtr] & 0xFF) << 8;
                amount = 2;
            }
            bytesDone += amount;
            this._outputTail = b64variant.encodeBase64Partial(b24, amount, this._outputBuffer, this._outputTail);
        }
        return bytesDone;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore,"    private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException {
        int length;
        int i = 0;
        while (inputPtr < inputEnd) {
            readBuffer[i++] = readBuffer[inputPtr++];
        }
        inputPtr = 0;
        inputEnd = i;
        maxRead = Math.min(maxRead, readBuffer.length);
        while ((length = maxRead - inputEnd) != 0) {
            int count = in.read(readBuffer, inputEnd, length);
            if (count < 0) {
                return inputEnd;
            }
            if ((inputEnd += count) < 3) continue;
        }
        return inputEnd;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeNull,"    private final void _writeNull() throws IOException {
        if (this._outputTail + 4 >= this._outputEnd) {
            this._flushBuffer();
        }
        int ptr = this._outputTail;
        char[] buf = this._outputBuffer;
        buf[ptr] = 110;
        buf[++ptr] = 117;
        buf[++ptr] = 108;
        buf[++ptr] = 108;
        this._outputTail = ptr + 1;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape,"    private void _prependOrWriteCharacterEscape(char ch, int escCode) throws IOException, JsonGenerationException {
        String escape;
        if (escCode >= 0) {
            if (this._outputTail >= 2) {
                int ptr;
                this._outputHead = ptr = this._outputTail - 2;
                this._outputBuffer[ptr++] = 92;
                this._outputBuffer[ptr] = (char)escCode;
                return;
            }
            char[] buf = this._entityBuffer;
            if (buf == null) {
                buf = this._allocateEntityBuffer();
            }
            this._outputHead = this._outputTail;
            buf[1] = (char)escCode;
            this._writer.write(buf, 0, 2);
            return;
        }
        if (escCode != -2) {
            if (this._outputTail >= 6) {
                int ptr;
                char[] buf = this._outputBuffer;
                this._outputHead = ptr = this._outputTail - 6;
                buf[ptr] = 92;
                buf[++ptr] = 117;
                if (ch > '\u00ff') {
                    int hi = ch >> 8 & 0xFF;
                    buf[++ptr] = HEX_CHARS[hi >> 4];
                    buf[++ptr] = HEX_CHARS[hi & 0xF];
                    ch = (char)(ch & 0xFF);
                } else {
                    buf[++ptr] = 48;
                    buf[++ptr] = 48;
                }
                buf[++ptr] = HEX_CHARS[ch >> 4];
                buf[++ptr] = HEX_CHARS[ch & 0xF];
                return;
            }
            char[] buf = this._entityBuffer;
            if (buf == null) {
                buf = this._allocateEntityBuffer();
            }
            this._outputHead = this._outputTail;
            if (ch > '\u00ff') {
                int hi = ch >> 8 & 0xFF;
                int lo = ch & 0xFF;
                buf[10] = HEX_CHARS[hi >> 4];
                buf[11] = HEX_CHARS[hi & 0xF];
                buf[12] = HEX_CHARS[lo >> 4];
                buf[13] = HEX_CHARS[lo & 0xF];
                this._writer.write(buf, 8, 6);
            } else {
                buf[6] = HEX_CHARS[ch >> 4];
                buf[7] = HEX_CHARS[ch & 0xF];
                this._writer.write(buf, 2, 6);
            }
            return;
        }
        if (this._currentEscape == null) {
            escape = this._characterEscapes.getEscapeSequence(ch).getValue();
        } else {
            escape = this._currentEscape.getValue();
            this._currentEscape = null;
        }
        int len = escape.length();
        if (this._outputTail >= len) {
            int ptr;
            this._outputHead = ptr = this._outputTail - len;
            escape.getChars(0, len, this._outputBuffer, ptr);
            return;
        }
        this._outputHead = this._outputTail;
        this._writer.write(escape);
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape,"    private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end, char ch, int escCode) throws IOException, JsonGenerationException {
        String escape;
        if (escCode >= 0) {
            if (ptr > 1 && ptr < end) {
                buffer[ptr -= 2] = 92;
                buffer[ptr + 1] = (char)escCode;
            } else {
                char[] ent = this._entityBuffer;
                if (ent == null) {
                    ent = this._allocateEntityBuffer();
                }
                ent[1] = (char)escCode;
                this._writer.write(ent, 0, 2);
            }
            return ptr;
        }
        if (escCode != -2) {
            if (ptr > 5 && ptr < end) {
                ptr -= 6;
                buffer[ptr++] = 92;
                buffer[ptr++] = 117;
                if (ch > '\u00ff') {
                    int hi = ch >> 8 & 0xFF;
                    buffer[ptr++] = HEX_CHARS[hi >> 4];
                    buffer[ptr++] = HEX_CHARS[hi & 0xF];
                    ch = (char)(ch & 0xFF);
                } else {
                    buffer[ptr++] = 48;
                    buffer[ptr++] = 48;
                }
                buffer[ptr++] = HEX_CHARS[ch >> 4];
                buffer[ptr] = HEX_CHARS[ch & 0xF];
                ptr -= 5;
            } else {
                char[] ent = this._entityBuffer;
                if (ent == null) {
                    ent = this._allocateEntityBuffer();
                }
                this._outputHead = this._outputTail;
                if (ch > '\u00ff') {
                    int hi = ch >> 8 & 0xFF;
                    int lo = ch & 0xFF;
                    ent[10] = HEX_CHARS[hi >> 4];
                    ent[11] = HEX_CHARS[hi & 0xF];
                    ent[12] = HEX_CHARS[lo >> 4];
                    ent[13] = HEX_CHARS[lo & 0xF];
                    this._writer.write(ent, 8, 6);
                } else {
                    ent[6] = HEX_CHARS[ch >> 4];
                    ent[7] = HEX_CHARS[ch & 0xF];
                    this._writer.write(ent, 2, 6);
                }
            }
            return ptr;
        }
        if (this._currentEscape == null) {
            escape = this._characterEscapes.getEscapeSequence(ch).getValue();
        } else {
            escape = this._currentEscape.getValue();
            this._currentEscape = null;
        }
        int len = escape.length();
        if (ptr >= len && ptr < end) {
            escape.getChars(0, len, buffer, ptr -= len);
        } else {
            this._writer.write(escape);
        }
        return ptr;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape,"    private void _appendCharacterEscape(char ch, int escCode) throws IOException, JsonGenerationException {
        String escape;
        if (escCode >= 0) {
            if (this._outputTail + 2 > this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 92;
            this._outputBuffer[this._outputTail++] = (char)escCode;
            return;
        }
        if (escCode != -2) {
            if (this._outputTail + 5 >= this._outputEnd) {
                this._flushBuffer();
            }
            int ptr = this._outputTail;
            char[] buf = this._outputBuffer;
            buf[ptr++] = 92;
            buf[ptr++] = 117;
            if (ch > '\u00ff') {
                int hi = ch >> 8 & 0xFF;
                buf[ptr++] = HEX_CHARS[hi >> 4];
                buf[ptr++] = HEX_CHARS[hi & 0xF];
                ch = (char)(ch & 0xFF);
            } else {
                buf[ptr++] = 48;
                buf[ptr++] = 48;
            }
            buf[ptr++] = HEX_CHARS[ch >> 4];
            buf[ptr++] = HEX_CHARS[ch & 0xF];
            this._outputTail = ptr;
            return;
        }
        if (this._currentEscape == null) {
            escape = this._characterEscapes.getEscapeSequence(ch).getValue();
        } else {
            escape = this._currentEscape.getValue();
            this._currentEscape = null;
        }
        int len = escape.length();
        if (this._outputTail + len > this._outputEnd) {
            this._flushBuffer();
            if (len > this._outputEnd) {
                this._writer.write(escape);
                return;
            }
        }
        escape.getChars(0, len, this._outputBuffer, this._outputTail);
        this._outputTail += len;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer,"    private char[] _allocateEntityBuffer() {
        char[] buf = new char[14];
        buf[0] = 92;
        buf[2] = 92;
        buf[3] = 117;
        buf[4] = 48;
        buf[5] = 48;
        buf[8] = 92;
        buf[9] = 117;
        this._entityBuffer = buf;
        return buf;
    }"
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._flushBuffer,"    protected void _flushBuffer() throws IOException {
        int len = this._outputTail - this._outputHead;
        if (len > 0) {
            int offset = this._outputHead;
            this._outputHead = 0;
            this._outputTail = 0;
            this._writer.write(this._outputBuffer, offset, len);
        }
    }
"
com.fasterxml.jackson.core.json.JsonGeneratorImpl.version,"    public Version version() {
        return VersionUtil.versionFor(this.getClass());
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl.enable,"    public JsonGenerator enable(JsonGenerator.Feature f) {
        super.enable(f);
        if (f == JsonGenerator.Feature.QUOTE_FIELD_NAMES) {
            this._cfgUnqNames = false;
        }
        return this;
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl.disable,"    public JsonGenerator disable(JsonGenerator.Feature f) {
        super.disable(f);
        if (f == JsonGenerator.Feature.QUOTE_FIELD_NAMES) {
            this._cfgUnqNames = true;
        }
        return this;
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl._checkStdFeatureChanges,"    protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {
        super._checkStdFeatureChanges(newFeatureFlags, changedFeatures);
        this._cfgUnqNames = !JsonGenerator.Feature.QUOTE_FIELD_NAMES.enabledIn(newFeatureFlags);
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl.setHighestNonEscapedChar,"    public JsonGenerator setHighestNonEscapedChar(int charCode) {
        this._maximumNonEscapedChar = charCode < 0 ? 0 : charCode;
        return this;
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl.getHighestEscapedChar,"    public int getHighestEscapedChar() {
        return this._maximumNonEscapedChar;
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl.setCharacterEscapes,"    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {
        this._characterEscapes = esc;
        this._outputEscapes = esc == null ? sOutputEscapes : esc.getEscapeCodesForAscii();
        return this;
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl.getCharacterEscapes,"    public CharacterEscapes getCharacterEscapes() {
        return this._characterEscapes;
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl.setRootValueSeparator,"    public JsonGenerator setRootValueSeparator(SerializableString sep) {
        this._rootValueSeparator = sep;
        return this;
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl.writeStringField,"    public final void writeStringField(String fieldName, String value) throws IOException {
        this.writeFieldName(fieldName);
        this.writeString(value);
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl._verifyPrettyValueWrite,"    protected void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException {
        switch (status) {
            case 1: {
                this._cfgPrettyPrinter.writeArrayValueSeparator(this);
                break;
            }
            case 2: {
                this._cfgPrettyPrinter.writeObjectFieldValueSeparator(this);
                break;
            }
            case 3: {
                this._cfgPrettyPrinter.writeRootValueSeparator(this);
                break;
            }
            case 0: {
                if (this._writeContext.inArray()) {
                    this._cfgPrettyPrinter.beforeArrayValues(this);
                    break;
                }
                if (!this._writeContext.inObject()) break;
                this._cfgPrettyPrinter.beforeObjectEntries(this);
                break;
            }
            case 5: {
                this._reportCantWriteValueExpectName(typeMsg);
                break;
            }
            default: {
                this._throwInternal();
            }
        }
    }"
com.fasterxml.jackson.core.json.JsonGeneratorImpl._reportCantWriteValueExpectName,"    protected void _reportCantWriteValueExpectName(String typeMsg) throws IOException {
        this._reportError(String.format(""Can not %s, expecting field name (context: %s)"", typeMsg, this._writeContext.typeDesc()));
    }
"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputTarget,"    public Object getOutputTarget() {
        return this._outputStream;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputBuffered,"    public int getOutputBuffered() {
        return this._outputTail;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName,"    public void writeFieldName(String name) throws IOException {
        if (this._cfgPrettyPrinter != null) {
            this._writePPFieldName(name);
            return;
        }
        int status = this._writeContext.writeFieldName(name);
        if (status == 4) {
            this._reportError(""Can not write a field name, expecting a value"");
        }
        if (status == 1) {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 44;
        }
        if (this._cfgUnqNames) {
            this._writeStringSegments(name, false);
            return;
        }
        int len = name.length();
        if (len > this._charBufferLength) {
            this._writeStringSegments(name, true);
            return;
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        if (len <= this._outputMaxContiguous) {
            if (this._outputTail + len > this._outputEnd) {
                this._flushBuffer();
            }
            this._writeStringSegment(name, 0, len);
        } else {
            this._writeStringSegments(name, 0, len);
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName,"    public void writeFieldName(SerializableString name) throws IOException {
        if (this._cfgPrettyPrinter != null) {
            this._writePPFieldName(name);
            return;
        }
        int status = this._writeContext.writeFieldName(name.getValue());
        if (status == 4) {
            this._reportError(""Can not write a field name, expecting a value"");
        }
        if (status == 1) {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 44;
        }
        if (this._cfgUnqNames) {
            this._writeUnq(name);
            return;
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        int len = name.appendQuotedUTF8(this._outputBuffer, this._outputTail);
        if (len < 0) {
            this._writeBytes(name.asQuotedUTF8());
        } else {
            this._outputTail += len;
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUnq,"    private final void _writeUnq(SerializableString name) throws IOException {
        int len = name.appendQuotedUTF8(this._outputBuffer, this._outputTail);
        if (len < 0) {
            this._writeBytes(name.asQuotedUTF8());
        } else {
            this._outputTail += len;
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray,"    public final void writeStartArray() throws IOException {
        this._verifyValueWrite(""start an array"");
        this._writeContext = this._writeContext.createChildArrayContext();
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeStartArray(this);
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 91;
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray,"    public final void writeEndArray() throws IOException {
        if (!this._writeContext.inArray()) {
            this._reportError(""Current context not Array but "" + this._writeContext.typeDesc());
        }
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeEndArray(this, this._writeContext.getEntryCount());
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 93;
        }
        this._writeContext = this._writeContext.clearAndGetParent();
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject,"    public final void writeStartObject() throws IOException {
        this._verifyValueWrite(""start an object"");
        this._writeContext = this._writeContext.createChildObjectContext();
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeStartObject(this);
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 123;
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject,"    public void writeStartObject(Object forValue) throws IOException {
        JsonWriteContext ctxt;
        this._verifyValueWrite(""start an object"");
        this._writeContext = ctxt = this._writeContext.createChildObjectContext();
        if (forValue != null) {
            ctxt.setCurrentValue(forValue);
        }
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeStartObject(this);
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 123;
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndObject,"    public final void writeEndObject() throws IOException {
        if (!this._writeContext.inObject()) {
            this._reportError(""Current context not Object but "" + this._writeContext.typeDesc());
        }
        if (this._cfgPrettyPrinter != null) {
            this._cfgPrettyPrinter.writeEndObject(this, this._writeContext.getEntryCount());
        } else {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = 125;
        }
        this._writeContext = this._writeContext.clearAndGetParent();
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName,"    protected final void _writePPFieldName(String name) throws IOException {
        int status = this._writeContext.writeFieldName(name);
        if (status == 4) {
            this._reportError(""Can not write a field name, expecting a value"");
        }
        if (status == 1) {
            this._cfgPrettyPrinter.writeObjectEntrySeparator(this);
        } else {
            this._cfgPrettyPrinter.beforeObjectEntries(this);
        }
        if (this._cfgUnqNames) {
            this._writeStringSegments(name, false);
            return;
        }
        int len = name.length();
        if (len > this._charBufferLength) {
            this._writeStringSegments(name, true);
            return;
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        name.getChars(0, len, this._charBuffer, 0);
        if (len <= this._outputMaxContiguous) {
            if (this._outputTail + len > this._outputEnd) {
                this._flushBuffer();
            }
            this._writeStringSegment(this._charBuffer, 0, len);
        } else {
            this._writeStringSegments(this._charBuffer, 0, len);
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName,"    protected final void _writePPFieldName(SerializableString name) throws IOException {
        boolean addQuotes;
        int status = this._writeContext.writeFieldName(name.getValue());
        if (status == 4) {
            this._reportError(""Can not write a field name, expecting a value"");
        }
        if (status == 1) {
            this._cfgPrettyPrinter.writeObjectEntrySeparator(this);
        } else {
            this._cfgPrettyPrinter.beforeObjectEntries(this);
        }
        boolean bl = addQuotes = !this._cfgUnqNames;
        if (addQuotes) {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = this._quoteChar;
        }
        this._writeBytes(name.asQuotedUTF8());
        if (addQuotes) {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = this._quoteChar;
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString,"    public void writeString(String text) throws IOException {
        this._verifyValueWrite(""write a string"");
        if (text == null) {
            this._writeNull();
            return;
        }
        int len = text.length();
        if (len > this._outputMaxContiguous) {
            this._writeStringSegments(text, true);
            return;
        }
        if (this._outputTail + len >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._writeStringSegment(text, 0, len);
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString,"    public void writeString(char[] text, int offset, int len) throws IOException {
        this._verifyValueWrite(""write a string"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        if (len <= this._outputMaxContiguous) {
            if (this._outputTail + len > this._outputEnd) {
                this._flushBuffer();
            }
            this._writeStringSegment(text, offset, len);
        } else {
            this._writeStringSegments(text, offset, len);
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString,"    public final void writeString(SerializableString text) throws IOException {
        this._verifyValueWrite(""write a string"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        int len = text.appendQuotedUTF8(this._outputBuffer, this._outputTail);
        if (len < 0) {
            this._writeBytes(text.asQuotedUTF8());
        } else {
            this._outputTail += len;
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String,"    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {
        this._verifyValueWrite(""write a string"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._writeBytes(text, offset, length);
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String,"    public void writeUTF8String(byte[] text, int offset, int len) throws IOException {
        this._verifyValueWrite(""write a string"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        if (len <= this._outputMaxContiguous) {
            this._writeUTF8Segment(text, offset, len);
        } else {
            this._writeUTF8Segments(text, offset, len);
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw,"    public void writeRaw(String text) throws IOException {
        char[] buf;
        int len = text.length();
        if (len <= (buf = this._charBuffer).length) {
            text.getChars(0, len, buf, 0);
            this.writeRaw(buf, 0, len);
        } else {
            this.writeRaw(text, 0, len);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw,"    public void writeRaw(String text, int offset, int len) throws IOException {
        char[] buf = this._charBuffer;
        int cbufLen = buf.length;
        if (len <= cbufLen) {
            text.getChars(offset, offset + len, buf, 0);
            this.writeRaw(buf, 0, len);
            return;
        }
        int maxChunk = Math.min(cbufLen, (this._outputEnd >> 2) + (this._outputEnd >> 4));
        int maxBytes = maxChunk * 3;
        while (len > 0) {
            char ch;
            int len2 = Math.min(maxChunk, len);
            text.getChars(offset, offset + len2, buf, 0);
            if (this._outputTail + maxBytes > this._outputEnd) {
                this._flushBuffer();
            }
            if (len2 > 1 && (ch = buf[len2 - 1]) >= '\ud800' && ch <= '\udbff') {
                --len2;
            }
            this._writeRawSegment(buf, 0, len2);
            offset += len2;
            len -= len2;
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw,"    public void writeRaw(SerializableString text) throws IOException {
        byte[] raw = text.asUnquotedUTF8();
        if (raw.length > 0) {
            this._writeBytes(raw);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue,"    public void writeRawValue(SerializableString text) throws IOException {
        this._verifyValueWrite(""write a raw (unencoded) value"");
        byte[] raw = text.asUnquotedUTF8();
        if (raw.length > 0) {
            this._writeBytes(raw);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw,"    public final void writeRaw(char[] cbuf, int offset, int len) throws IOException {
        int len3 = len + len + len;
        if (this._outputTail + len3 > this._outputEnd) {
            if (this._outputEnd < len3) {
                this._writeSegmentedRaw(cbuf, offset, len);
                return;
            }
            this._flushBuffer();
        }
        len += offset;
        block0: while (offset < len) {
            char ch;
            while ((ch = cbuf[offset]) <= '\u007f') {
                this._outputBuffer[this._outputTail++] = (byte)ch;
                if (++offset < len) continue;
                break block0;
            }
            ch = cbuf[offset++];
            if (ch < '\u0800') {
                this._outputBuffer[this._outputTail++] = (byte)(0xC0 | ch >> 6);
                this._outputBuffer[this._outputTail++] = (byte)(0x80 | ch & 0x3F);
                continue;
            }
            offset = this._outputRawMultiByteChar(ch, cbuf, offset, len);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw,"    public void writeRaw(char ch) throws IOException {
        if (this._outputTail + 3 >= this._outputEnd) {
            this._flushBuffer();
        }
        byte[] bbuf = this._outputBuffer;
        if (ch <= '\u007f') {
            bbuf[this._outputTail++] = (byte)ch;
        } else if (ch < '\u0800') {
            bbuf[this._outputTail++] = (byte)(0xC0 | ch >> 6);
            bbuf[this._outputTail++] = (byte)(0x80 | ch & 0x3F);
        } else {
            this._outputRawMultiByteChar(ch, null, 0, 0);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw,"    private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException {
        int end = this._outputEnd;
        byte[] bbuf = this._outputBuffer;
        int inputEnd = offset + len;
        block0: while (offset < inputEnd) {
            char ch;
            while ((ch = cbuf[offset]) < '\u0080') {
                if (this._outputTail >= end) {
                    this._flushBuffer();
                }
                bbuf[this._outputTail++] = (byte)ch;
                if (++offset < inputEnd) continue;
                break block0;
            }
            if (this._outputTail + 3 >= this._outputEnd) {
                this._flushBuffer();
            }
            if ((ch = cbuf[offset++]) < '\u0800') {
                bbuf[this._outputTail++] = (byte)(0xC0 | ch >> 6);
                bbuf[this._outputTail++] = (byte)(0x80 | ch & 0x3F);
                continue;
            }
            offset = this._outputRawMultiByteChar(ch, cbuf, offset, inputEnd);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeRawSegment,"    private void _writeRawSegment(char[] cbuf, int offset, int end) throws IOException {
        block0: while (offset < end) {
            char ch;
            while ((ch = cbuf[offset]) <= '\u007f') {
                this._outputBuffer[this._outputTail++] = (byte)ch;
                if (++offset < end) continue;
                break block0;
            }
            ch = cbuf[offset++];
            if (ch < '\u0800') {
                this._outputBuffer[this._outputTail++] = (byte)(0xC0 | ch >> 6);
                this._outputBuffer[this._outputTail++] = (byte)(0x80 | ch & 0x3F);
                continue;
            }
            offset = this._outputRawMultiByteChar(ch, cbuf, offset, end);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary,"    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException {
        this._verifyValueWrite(""write a binary value"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._writeBinary(b64variant, data, offset, offset + len);
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary,"    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException {
        int bytes;
        this._verifyValueWrite(""write a binary value"");
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        byte[] encodingBuffer = this._ioContext.allocBase64Buffer();
        try {
            if (dataLength < 0) {
                bytes = this._writeBinary(b64variant, data, encodingBuffer);
            } else {
                int missing = this._writeBinary(b64variant, data, encodingBuffer, dataLength);
                if (missing > 0) {
                    this._reportError(""Too few bytes available: missing "" + missing + "" bytes (out of "" + dataLength + "")"");
                }
                bytes = dataLength;
            }
        }
        finally {
            this._ioContext.releaseBase64Buffer(encodingBuffer);
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        return bytes;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber,"    public void writeNumber(short s) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (this._outputTail + 6 >= this._outputEnd) {
            this._flushBuffer();
        }
        if (this._cfgNumbersAsStrings) {
            this._writeQuotedShort(s);
            return;
        }
        this._outputTail = NumberOutput.outputInt((int)s, this._outputBuffer, this._outputTail);
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedShort,"    private final void _writeQuotedShort(short s) throws IOException {
        if (this._outputTail + 8 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._outputTail = NumberOutput.outputInt((int)s, this._outputBuffer, this._outputTail);
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber,"    public void writeNumber(int i) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (this._outputTail + 11 >= this._outputEnd) {
            this._flushBuffer();
        }
        if (this._cfgNumbersAsStrings) {
            this._writeQuotedInt(i);
            return;
        }
        this._outputTail = NumberOutput.outputInt(i, this._outputBuffer, this._outputTail);
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedInt,"    private final void _writeQuotedInt(int i) throws IOException {
        if (this._outputTail + 13 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._outputTail = NumberOutput.outputInt(i, this._outputBuffer, this._outputTail);
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber,"    public void writeNumber(long l) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (this._cfgNumbersAsStrings) {
            this._writeQuotedLong(l);
            return;
        }
        if (this._outputTail + 21 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputTail = NumberOutput.outputLong(l, this._outputBuffer, this._outputTail);
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedLong,"    private final void _writeQuotedLong(long l) throws IOException {
        if (this._outputTail + 23 >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this._outputTail = NumberOutput.outputLong(l, this._outputBuffer, this._outputTail);
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber,"    public void writeNumber(BigInteger value) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (value == null) {
            this._writeNull();
        } else if (this._cfgNumbersAsStrings) {
            this._writeQuotedRaw(value.toString());
        } else {
            this.writeRaw(value.toString());
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber,"    public void writeNumber(double d) throws IOException {
        if (this._cfgNumbersAsStrings || (Double.isNaN(d) || Double.isInfinite(d)) && JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(this._features)) {
            this.writeString(String.valueOf(d));
            return;
        }
        this._verifyValueWrite(""write a number"");
        this.writeRaw(String.valueOf(d));
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber,"    public void writeNumber(float f) throws IOException {
        if (this._cfgNumbersAsStrings || (Float.isNaN(f) || Float.isInfinite(f)) && JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(this._features)) {
            this.writeString(String.valueOf(f));
            return;
        }
        this._verifyValueWrite(""write a number"");
        this.writeRaw(String.valueOf(f));
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber,"    public void writeNumber(BigDecimal value) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (value == null) {
            this._writeNull();
        } else if (this._cfgNumbersAsStrings) {
            this._writeQuotedRaw(this._asString(value));
        } else {
            this.writeRaw(this._asString(value));
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber,"    public void writeNumber(String encodedValue) throws IOException {
        this._verifyValueWrite(""write a number"");
        if (this._cfgNumbersAsStrings) {
            this._writeQuotedRaw(encodedValue);
        } else {
            this.writeRaw(encodedValue);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw,"    private final void _writeQuotedRaw(String value) throws IOException {
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
        this.writeRaw(value);
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = this._quoteChar;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean,"    public void writeBoolean(boolean state) throws IOException {
        this._verifyValueWrite(""write a boolean value"");
        if (this._outputTail + 5 >= this._outputEnd) {
            this._flushBuffer();
        }
        byte[] keyword = state ? TRUE_BYTES : FALSE_BYTES;
        int len = keyword.length;
        System.arraycopy(keyword, 0, this._outputBuffer, this._outputTail, len);
        this._outputTail += len;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNull,"    public void writeNull() throws IOException {
        this._verifyValueWrite(""write a null"");
        this._writeNull();
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite,"    protected final void _verifyValueWrite(String typeMsg) throws IOException {
        int b;
        int status = this._writeContext.writeValue();
        if (this._cfgPrettyPrinter != null) {
            this._verifyPrettyValueWrite(typeMsg, status);
            return;
        }
        switch (status) {
            default: {
                return;
            }
            case 1: {
                b = 44;
                break;
            }
            case 2: {
                b = 58;
                break;
            }
            case 3: {
                byte[] raw;
                if (this._rootValueSeparator != null && (raw = this._rootValueSeparator.asUnquotedUTF8()).length > 0) {
                    this._writeBytes(raw);
                }
                return;
            }
            case 5: {
                this._reportCantWriteValueExpectName(typeMsg);
                return;
            }
        }
        if (this._outputTail >= this._outputEnd) {
            this._flushBuffer();
        }
        this._outputBuffer[this._outputTail++] = b;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush,"    public void flush() throws IOException {
        this._flushBuffer();
        if (this._outputStream != null && this.isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {
            this._outputStream.flush();
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator.close,"    public void close() throws IOException {
        super.close();
        if (this._outputBuffer != null && this.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {
            while (true) {
                JsonStreamContext ctxt;
                if ((ctxt = this.getOutputContext()).inArray()) {
                    this.writeEndArray();
                    continue;
                }
                if (!ctxt.inObject()) break;
                this.writeEndObject();
            }
        }
        this._flushBuffer();
        this._outputTail = 0;
        if (this._outputStream != null) {
            if (this._ioContext.isResourceManaged() || this.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {
                this._outputStream.close();
            } else if (this.isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {
                this._outputStream.flush();
            }
        }
        this._releaseBuffers();
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._releaseBuffers,"    protected void _releaseBuffers() {
        char[] cbuf;
        byte[] buf = this._outputBuffer;
        if (buf != null && this._bufferRecyclable) {
            this._outputBuffer = null;
            this._ioContext.releaseWriteEncodingBuffer(buf);
        }
        if ((cbuf = this._charBuffer) != null) {
            this._charBuffer = null;
            this._ioContext.releaseConcatBuffer(cbuf);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes,"    private final void _writeBytes(byte[] bytes) throws IOException {
        int len = bytes.length;
        if (this._outputTail + len > this._outputEnd) {
            this._flushBuffer();
            if (len > 512) {
                this._outputStream.write(bytes, 0, len);
                return;
            }
        }
        System.arraycopy(bytes, 0, this._outputBuffer, this._outputTail, len);
        this._outputTail += len;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes,"    private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException {
        if (this._outputTail + len > this._outputEnd) {
            this._flushBuffer();
            if (len > 512) {
                this._outputStream.write(bytes, offset, len);
                return;
            }
        }
        System.arraycopy(bytes, offset, this._outputBuffer, this._outputTail, len);
        this._outputTail += len;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments,"    private final void _writeStringSegments(String text, boolean addQuotes) throws IOException {
        int len;
        if (addQuotes) {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = this._quoteChar;
        }
        int offset = 0;
        for (int left = text.length(); left > 0; left -= len) {
            len = Math.min(this._outputMaxContiguous, left);
            if (this._outputTail + len > this._outputEnd) {
                this._flushBuffer();
            }
            this._writeStringSegment(text, offset, len);
            offset += len;
        }
        if (addQuotes) {
            if (this._outputTail >= this._outputEnd) {
                this._flushBuffer();
            }
            this._outputBuffer[this._outputTail++] = this._quoteChar;
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments,"    private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException {
        int len;
        do {
            if (this._outputTail + (len = Math.min(this._outputMaxContiguous, totalLen)) > this._outputEnd) {
                this._flushBuffer();
            }
            this._writeStringSegment(cbuf, offset, len);
            offset += len;
        } while ((totalLen -= len) > 0);
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments,"    private final void _writeStringSegments(String text, int offset, int totalLen) throws IOException {
        int len;
        do {
            if (this._outputTail + (len = Math.min(this._outputMaxContiguous, totalLen)) > this._outputEnd) {
                this._flushBuffer();
            }
            this._writeStringSegment(text, offset, len);
            offset += len;
        } while ((totalLen -= len) > 0);
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment,"    private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException {
        char ch;
        len += offset;
        int outputPtr = this._outputTail;
        byte[] outputBuffer = this._outputBuffer;
        int[] escCodes = this._outputEscapes;
        while (offset < len && (ch = cbuf[offset]) <= '\u007f' && escCodes[ch] == 0) {
            outputBuffer[outputPtr++] = (byte)ch;
            ++offset;
        }
        this._outputTail = outputPtr;
        if (offset < len) {
            if (this._characterEscapes != null) {
                this._writeCustomStringSegment2(cbuf, offset, len);
            } else if (this._maximumNonEscapedChar == 0) {
                this._writeStringSegment2(cbuf, offset, len);
            } else {
                this._writeStringSegmentASCII2(cbuf, offset, len);
            }
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment,"    private final void _writeStringSegment(String text, int offset, int len) throws IOException {
        char ch;
        len += offset;
        int outputPtr = this._outputTail;
        byte[] outputBuffer = this._outputBuffer;
        int[] escCodes = this._outputEscapes;
        while (offset < len && (ch = text.charAt(offset)) <= '\u007f' && escCodes[ch] == 0) {
            outputBuffer[outputPtr++] = (byte)ch;
            ++offset;
        }
        this._outputTail = outputPtr;
        if (offset < len) {
            if (this._characterEscapes != null) {
                this._writeCustomStringSegment2(text, offset, len);
            } else if (this._maximumNonEscapedChar == 0) {
                this._writeStringSegment2(text, offset, len);
            } else {
                this._writeStringSegmentASCII2(text, offset, len);
            }
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2,"    private final void _writeStringSegment2(char[] cbuf, int offset, int end) throws IOException {
        if (this._outputTail + 6 * (end - offset) > this._outputEnd) {
            this._flushBuffer();
        }
        int outputPtr = this._outputTail;
        byte[] outputBuffer = this._outputBuffer;
        int[] escCodes = this._outputEscapes;
        while (offset < end) {
            char ch;
            if ((ch = cbuf[offset++]) <= '\u007f') {
                if (escCodes[ch] == 0) {
                    outputBuffer[outputPtr++] = (byte)ch;
                    continue;
                }
                int escape = escCodes[ch];
                if (escape > 0) {
                    outputBuffer[outputPtr++] = 92;
                    outputBuffer[outputPtr++] = (byte)escape;
                    continue;
                }
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            if (ch <= '\u07ff') {
                outputBuffer[outputPtr++] = (byte)(0xC0 | ch >> 6);
                outputBuffer[outputPtr++] = (byte)(0x80 | ch & 0x3F);
                continue;
            }
            outputPtr = this._outputMultiByteChar(ch, outputPtr);
        }
        this._outputTail = outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2,"    private final void _writeStringSegment2(String text, int offset, int end) throws IOException {
        if (this._outputTail + 6 * (end - offset) > this._outputEnd) {
            this._flushBuffer();
        }
        int outputPtr = this._outputTail;
        byte[] outputBuffer = this._outputBuffer;
        int[] escCodes = this._outputEscapes;
        while (offset < end) {
            char ch;
            if ((ch = text.charAt(offset++)) <= '\u007f') {
                if (escCodes[ch] == 0) {
                    outputBuffer[outputPtr++] = (byte)ch;
                    continue;
                }
                int escape = escCodes[ch];
                if (escape > 0) {
                    outputBuffer[outputPtr++] = 92;
                    outputBuffer[outputPtr++] = (byte)escape;
                    continue;
                }
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            if (ch <= '\u07ff') {
                outputBuffer[outputPtr++] = (byte)(0xC0 | ch >> 6);
                outputBuffer[outputPtr++] = (byte)(0x80 | ch & 0x3F);
                continue;
            }
            outputPtr = this._outputMultiByteChar(ch, outputPtr);
        }
        this._outputTail = outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2,"    private final void _writeStringSegmentASCII2(char[] cbuf, int offset, int end) throws IOException {
        if (this._outputTail + 6 * (end - offset) > this._outputEnd) {
            this._flushBuffer();
        }
        int outputPtr = this._outputTail;
        byte[] outputBuffer = this._outputBuffer;
        int[] escCodes = this._outputEscapes;
        int maxUnescaped = this._maximumNonEscapedChar;
        while (offset < end) {
            char ch;
            if ((ch = cbuf[offset++]) <= '\u007f') {
                if (escCodes[ch] == 0) {
                    outputBuffer[outputPtr++] = (byte)ch;
                    continue;
                }
                int escape = escCodes[ch];
                if (escape > 0) {
                    outputBuffer[outputPtr++] = 92;
                    outputBuffer[outputPtr++] = (byte)escape;
                    continue;
                }
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            if (ch > maxUnescaped) {
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            if (ch <= '\u07ff') {
                outputBuffer[outputPtr++] = (byte)(0xC0 | ch >> 6);
                outputBuffer[outputPtr++] = (byte)(0x80 | ch & 0x3F);
                continue;
            }
            outputPtr = this._outputMultiByteChar(ch, outputPtr);
        }
        this._outputTail = outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2,"    private final void _writeStringSegmentASCII2(String text, int offset, int end) throws IOException {
        if (this._outputTail + 6 * (end - offset) > this._outputEnd) {
            this._flushBuffer();
        }
        int outputPtr = this._outputTail;
        byte[] outputBuffer = this._outputBuffer;
        int[] escCodes = this._outputEscapes;
        int maxUnescaped = this._maximumNonEscapedChar;
        while (offset < end) {
            char ch;
            if ((ch = text.charAt(offset++)) <= '\u007f') {
                if (escCodes[ch] == 0) {
                    outputBuffer[outputPtr++] = (byte)ch;
                    continue;
                }
                int escape = escCodes[ch];
                if (escape > 0) {
                    outputBuffer[outputPtr++] = 92;
                    outputBuffer[outputPtr++] = (byte)escape;
                    continue;
                }
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            if (ch > maxUnescaped) {
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            if (ch <= '\u07ff') {
                outputBuffer[outputPtr++] = (byte)(0xC0 | ch >> 6);
                outputBuffer[outputPtr++] = (byte)(0x80 | ch & 0x3F);
                continue;
            }
            outputPtr = this._outputMultiByteChar(ch, outputPtr);
        }
        this._outputTail = outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2,"    private final void _writeCustomStringSegment2(char[] cbuf, int offset, int end) throws IOException {
        if (this._outputTail + 6 * (end - offset) > this._outputEnd) {
            this._flushBuffer();
        }
        int outputPtr = this._outputTail;
        byte[] outputBuffer = this._outputBuffer;
        int[] escCodes = this._outputEscapes;
        int maxUnescaped = this._maximumNonEscapedChar <= 0 ? 65535 : this._maximumNonEscapedChar;
        CharacterEscapes customEscapes = this._characterEscapes;
        while (offset < end) {
            int ch;
            if ((ch = cbuf[offset++]) <= 127) {
                if (escCodes[ch] == 0) {
                    outputBuffer[outputPtr++] = (byte)ch;
                    continue;
                }
                int escape = escCodes[ch];
                if (escape > 0) {
                    outputBuffer[outputPtr++] = 92;
                    outputBuffer[outputPtr++] = (byte)escape;
                    continue;
                }
                if (escape == -2) {
                    SerializableString esc = customEscapes.getEscapeSequence(ch);
                    if (esc == null) {
                        this._reportError(""Invalid custom escape definitions; custom escape not found for character code 0x"" + Integer.toHexString(ch) + "", although was supposed to have one"");
                    }
                    outputPtr = this._writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);
                    continue;
                }
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            if (ch > maxUnescaped) {
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            SerializableString esc = customEscapes.getEscapeSequence(ch);
            if (esc != null) {
                outputPtr = this._writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);
                continue;
            }
            if (ch <= 2047) {
                outputBuffer[outputPtr++] = (byte)(0xC0 | ch >> 6);
                outputBuffer[outputPtr++] = (byte)(0x80 | ch & 0x3F);
                continue;
            }
            outputPtr = this._outputMultiByteChar(ch, outputPtr);
        }
        this._outputTail = outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2,"    private final void _writeCustomStringSegment2(String text, int offset, int end) throws IOException {
        if (this._outputTail + 6 * (end - offset) > this._outputEnd) {
            this._flushBuffer();
        }
        int outputPtr = this._outputTail;
        byte[] outputBuffer = this._outputBuffer;
        int[] escCodes = this._outputEscapes;
        int maxUnescaped = this._maximumNonEscapedChar <= 0 ? 65535 : this._maximumNonEscapedChar;
        CharacterEscapes customEscapes = this._characterEscapes;
        while (offset < end) {
            int ch;
            if ((ch = text.charAt(offset++)) <= 127) {
                if (escCodes[ch] == 0) {
                    outputBuffer[outputPtr++] = (byte)ch;
                    continue;
                }
                int escape = escCodes[ch];
                if (escape > 0) {
                    outputBuffer[outputPtr++] = 92;
                    outputBuffer[outputPtr++] = (byte)escape;
                    continue;
                }
                if (escape == -2) {
                    SerializableString esc = customEscapes.getEscapeSequence(ch);
                    if (esc == null) {
                        this._reportError(""Invalid custom escape definitions; custom escape not found for character code 0x"" + Integer.toHexString(ch) + "", although was supposed to have one"");
                    }
                    outputPtr = this._writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);
                    continue;
                }
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            if (ch > maxUnescaped) {
                outputPtr = this._writeGenericEscape(ch, outputPtr);
                continue;
            }
            SerializableString esc = customEscapes.getEscapeSequence(ch);
            if (esc != null) {
                outputPtr = this._writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);
                continue;
            }
            if (ch <= 2047) {
                outputBuffer[outputPtr++] = (byte)(0xC0 | ch >> 6);
                outputBuffer[outputPtr++] = (byte)(0x80 | ch & 0x3F);
                continue;
            }
            outputPtr = this._outputMultiByteChar(ch, outputPtr);
        }
        this._outputTail = outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape,"    private final int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException {
        byte[] raw = esc.asUnquotedUTF8();
        int len = raw.length;
        if (len > 6) {
            return this._handleLongCustomEscape(outputBuffer, outputPtr, this._outputEnd, raw, remainingChars);
        }
        System.arraycopy(raw, 0, outputBuffer, outputPtr, len);
        return outputPtr + len;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape,"    private final int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException {
        int len = raw.length;
        if (outputPtr + len > outputEnd) {
            this._outputTail = outputPtr;
            this._flushBuffer();
            outputPtr = this._outputTail;
            if (len > outputBuffer.length) {
                this._outputStream.write(raw, 0, len);
                return outputPtr;
            }
            System.arraycopy(raw, 0, outputBuffer, outputPtr, len);
            outputPtr += len;
        }
        if (outputPtr + 6 * remainingChars > outputEnd) {
            this._flushBuffer();
            return this._outputTail;
        }
        return outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segments,"    private final void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException {
        int len;
        do {
            len = Math.min(this._outputMaxContiguous, totalLen);
            this._writeUTF8Segment(utf8, offset, len);
            offset += len;
        } while ((totalLen -= len) > 0);
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment,"    private final void _writeUTF8Segment(byte[] utf8, int offset, int len) throws IOException, JsonGenerationException {
        int[] escCodes = this._outputEscapes;
        int ptr = offset;
        int end = offset + len;
        while (ptr < end) {
            byte ch;
            if ((ch = utf8[ptr++]) < 0 || escCodes[ch] == 0) continue;
            this._writeUTF8Segment2(utf8, offset, len);
            return;
        }
        if (this._outputTail + len > this._outputEnd) {
            this._flushBuffer();
        }
        System.arraycopy(utf8, offset, this._outputBuffer, this._outputTail, len);
        this._outputTail += len;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment2,"    private final void _writeUTF8Segment2(byte[] utf8, int offset, int len) throws IOException, JsonGenerationException {
        int outputPtr = this._outputTail;
        if (outputPtr + len * 6 > this._outputEnd) {
            this._flushBuffer();
            outputPtr = this._outputTail;
        }
        byte[] outputBuffer = this._outputBuffer;
        int[] escCodes = this._outputEscapes;
        len += offset;
        while (offset < len) {
            byte b;
            byte ch;
            if ((ch = (b = utf8[offset++])) < 0 || escCodes[ch] == 0) {
                outputBuffer[outputPtr++] = b;
                continue;
            }
            int escape = escCodes[ch];
            if (escape > 0) {
                outputBuffer[outputPtr++] = 92;
                outputBuffer[outputPtr++] = (byte)escape;
                continue;
            }
            outputPtr = this._writeGenericEscape(ch, outputPtr);
        }
        this._outputTail = outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary,"    protected final void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, int inputEnd) throws IOException, JsonGenerationException {
        int safeInputEnd = inputEnd - 3;
        int safeOutputEnd = this._outputEnd - 6;
        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        while (inputPtr <= safeInputEnd) {
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            int b24 = input[inputPtr++] << 8;
            b24 |= input[inputPtr++] & 0xFF;
            b24 = b24 << 8 | input[inputPtr++] & 0xFF;
            this._outputTail = b64variant.encodeBase64Chunk(b24, this._outputBuffer, this._outputTail);
            if (--chunksBeforeLF > 0) continue;
            this._outputBuffer[this._outputTail++] = 92;
            this._outputBuffer[this._outputTail++] = 110;
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
        int inputLeft = inputEnd - inputPtr;
        if (inputLeft > 0) {
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            int b24 = input[inputPtr++] << 16;
            if (inputLeft == 2) {
                b24 |= (input[inputPtr++] & 0xFF) << 8;
            }
            this._outputTail = b64variant.encodeBase64Partial(b24, inputLeft, this._outputBuffer, this._outputTail);
        }
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary,"    protected final int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException {
        int b24;
        int inputPtr = 0;
        int inputEnd = 0;
        int lastFullOffset = -3;
        int safeOutputEnd = this._outputEnd - 6;
        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        while (bytesLeft > 2) {
            if (inputPtr > lastFullOffset) {
                inputEnd = this._readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);
                inputPtr = 0;
                if (inputEnd < 3) break;
                lastFullOffset = inputEnd - 3;
            }
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            b24 = readBuffer[inputPtr++] << 8;
            b24 |= readBuffer[inputPtr++] & 0xFF;
            b24 = b24 << 8 | readBuffer[inputPtr++] & 0xFF;
            bytesLeft -= 3;
            this._outputTail = b64variant.encodeBase64Chunk(b24, this._outputBuffer, this._outputTail);
            if (--chunksBeforeLF > 0) continue;
            this._outputBuffer[this._outputTail++] = 92;
            this._outputBuffer[this._outputTail++] = 110;
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
        if (bytesLeft > 0) {
            inputEnd = this._readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);
            inputPtr = 0;
            if (inputEnd > 0) {
                int amount;
                if (this._outputTail > safeOutputEnd) {
                    this._flushBuffer();
                }
                b24 = readBuffer[inputPtr++] << 16;
                if (inputPtr < inputEnd) {
                    b24 |= (readBuffer[inputPtr] & 0xFF) << 8;
                    amount = 2;
                } else {
                    amount = 1;
                }
                this._outputTail = b64variant.encodeBase64Partial(b24, amount, this._outputBuffer, this._outputTail);
                bytesLeft -= amount;
            }
        }
        return bytesLeft;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary,"    protected final int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException {
        int b24;
        int inputPtr = 0;
        int inputEnd = 0;
        int lastFullOffset = -3;
        int bytesDone = 0;
        int safeOutputEnd = this._outputEnd - 6;
        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        while (true) {
            if (inputPtr > lastFullOffset) {
                inputEnd = this._readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length);
                inputPtr = 0;
                if (inputEnd < 3) break;
                lastFullOffset = inputEnd - 3;
            }
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            b24 = readBuffer[inputPtr++] << 8;
            b24 |= readBuffer[inputPtr++] & 0xFF;
            b24 = b24 << 8 | readBuffer[inputPtr++] & 0xFF;
            bytesDone += 3;
            this._outputTail = b64variant.encodeBase64Chunk(b24, this._outputBuffer, this._outputTail);
            if (--chunksBeforeLF > 0) continue;
            this._outputBuffer[this._outputTail++] = 92;
            this._outputBuffer[this._outputTail++] = 110;
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
        if (inputPtr < inputEnd) {
            if (this._outputTail > safeOutputEnd) {
                this._flushBuffer();
            }
            b24 = readBuffer[inputPtr++] << 16;
            int amount = 1;
            if (inputPtr < inputEnd) {
                b24 |= (readBuffer[inputPtr] & 0xFF) << 8;
                amount = 2;
            }
            bytesDone += amount;
            this._outputTail = b64variant.encodeBase64Partial(b24, amount, this._outputBuffer, this._outputTail);
        }
        return bytesDone;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore,"    private final int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException {
        int length;
        int i = 0;
        while (inputPtr < inputEnd) {
            readBuffer[i++] = readBuffer[inputPtr++];
        }
        inputPtr = 0;
        inputEnd = i;
        maxRead = Math.min(maxRead, readBuffer.length);
        while ((length = maxRead - inputEnd) != 0) {
            int count = in.read(readBuffer, inputEnd, length);
            if (count < 0) {
                return inputEnd;
            }
            if ((inputEnd += count) < 3) continue;
        }
        return inputEnd;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar,"    private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {
        if (ch >= 55296 && ch <= 57343) {
            if (inputOffset >= inputEnd || cbuf == null) {
                this._reportError(String.format(""Split surrogate on writeRaw() input (last character): first character 0x%4x"", ch));
            }
            this._outputSurrogates(ch, cbuf[inputOffset]);
            return inputOffset + 1;
        }
        byte[] bbuf = this._outputBuffer;
        bbuf[this._outputTail++] = (byte)(0xE0 | ch >> 12);
        bbuf[this._outputTail++] = (byte)(0x80 | ch >> 6 & 0x3F);
        bbuf[this._outputTail++] = (byte)(0x80 | ch & 0x3F);
        return inputOffset;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates,"    protected final void _outputSurrogates(int surr1, int surr2) throws IOException {
        int c = this._decodeSurrogate(surr1, surr2);
        if (this._outputTail + 4 > this._outputEnd) {
            this._flushBuffer();
        }
        byte[] bbuf = this._outputBuffer;
        bbuf[this._outputTail++] = (byte)(0xF0 | c >> 18);
        bbuf[this._outputTail++] = (byte)(0x80 | c >> 12 & 0x3F);
        bbuf[this._outputTail++] = (byte)(0x80 | c >> 6 & 0x3F);
        bbuf[this._outputTail++] = (byte)(0x80 | c & 0x3F);
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMultiByteChar,"    private final int _outputMultiByteChar(int ch, int outputPtr) throws IOException {
        byte[] bbuf = this._outputBuffer;
        if (ch >= 55296 && ch <= 57343) {
            bbuf[outputPtr++] = 92;
            bbuf[outputPtr++] = 117;
            bbuf[outputPtr++] = HEX_CHARS[ch >> 12 & 0xF];
            bbuf[outputPtr++] = HEX_CHARS[ch >> 8 & 0xF];
            bbuf[outputPtr++] = HEX_CHARS[ch >> 4 & 0xF];
            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];
        } else {
            bbuf[outputPtr++] = (byte)(0xE0 | ch >> 12);
            bbuf[outputPtr++] = (byte)(0x80 | ch >> 6 & 0x3F);
            bbuf[outputPtr++] = (byte)(0x80 | ch & 0x3F);
        }
        return outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeNull,"    private final void _writeNull() throws IOException {
        if (this._outputTail + 4 >= this._outputEnd) {
            this._flushBuffer();
        }
        System.arraycopy(NULL_BYTES, 0, this._outputBuffer, this._outputTail, 4);
        this._outputTail += 4;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeGenericEscape,"    private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException {
        byte[] bbuf = this._outputBuffer;
        bbuf[outputPtr++] = 92;
        bbuf[outputPtr++] = 117;
        if (charToEscape > 255) {
            int hi = charToEscape >> 8 & 0xFF;
            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];
            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];
            charToEscape &= 0xFF;
        } else {
            bbuf[outputPtr++] = 48;
            bbuf[outputPtr++] = 48;
        }
        bbuf[outputPtr++] = HEX_CHARS[charToEscape >> 4];
        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];
        return outputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer,"    protected final void _flushBuffer() throws IOException {
        int len = this._outputTail;
        if (len > 0) {
            this._outputTail = 0;
            this._outputStream.write(this._outputBuffer, 0, len);
        }
    }
"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCodec,"    public ObjectCodec getCodec() {
        return this._objectCodec;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.setCodec,"    public void setCodec(ObjectCodec c) {
        this._objectCodec = c;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered,"    public int releaseBuffered(OutputStream out) throws IOException {
        int count = this._inputEnd - this._inputPtr;
        if (count < 1) {
            return 0;
        }
        int origPtr = this._inputPtr;
        out.write(this._inputBuffer, origPtr, count);
        return count;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getInputSource,"    public Object getInputSource() {
        return this._inputStream;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMore,"    protected final boolean _loadMore() throws IOException {
        int bufSize = this._inputEnd;
        this._currInputProcessed += (long)this._inputEnd;
        this._currInputRowStart -= this._inputEnd;
        this._nameStartOffset -= bufSize;
        if (this._inputStream != null) {
            int space = this._inputBuffer.length;
            if (space == 0) {
                return false;
            }
            int count = this._inputStream.read(this._inputBuffer, 0, space);
            if (count > 0) {
                this._inputPtr = 0;
                this._inputEnd = count;
                return true;
            }
            this._closeInput();
            if (count == 0) {
                throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + this._inputBuffer.length + "" bytes"");
            }
        }
        return false;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadToHaveAtLeast,"    protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {
        if (this._inputStream == null) {
            return false;
        }
        int amount = this._inputEnd - this._inputPtr;
        if (amount > 0 && this._inputPtr > 0) {
            int ptr = this._inputPtr;
            this._currInputProcessed += (long)ptr;
            this._currInputRowStart -= ptr;
            this._nameStartOffset -= ptr;
            System.arraycopy(this._inputBuffer, ptr, this._inputBuffer, 0, amount);
            this._inputEnd = amount;
        } else {
            this._inputEnd = 0;
        }
        this._inputPtr = 0;
        while (this._inputEnd < minAvailable) {
            int count = this._inputStream.read(this._inputBuffer, this._inputEnd, this._inputBuffer.length - this._inputEnd);
            if (count < 1) {
                this._closeInput();
                if (count == 0) {
                    throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + amount + "" bytes"");
                }
                return false;
            }
            this._inputEnd += count;
        }
        return true;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeInput,"    protected void _closeInput() throws IOException {
        if (this._inputStream != null) {
            if (this._ioContext.isResourceManaged() || this.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) {
                this._inputStream.close();
            }
            this._inputStream = null;
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._releaseBuffers,"    protected void _releaseBuffers() throws IOException {
        byte[] buf;
        super._releaseBuffers();
        this._symbols.release();
        if (this._bufferRecyclable && (buf = this._inputBuffer) != null) {
            this._inputBuffer = ByteArrayBuilder.NO_BYTES;
            this._ioContext.releaseReadIOBuffer(buf);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText,"    public String getText() throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                return this._finishAndReturnString();
            }
            return this._textBuffer.contentsAsString();
        }
        return this._getText2(this._currToken);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText,"    public int getText(Writer writer) throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                this._finishString();
            }
            return this._textBuffer.contentsToWriter(writer);
        }
        if (t == JsonToken.FIELD_NAME) {
            String n = this._parsingContext.getCurrentName();
            writer.write(n);
            return n.length();
        }
        if (t != null) {
            if (t.isNumeric()) {
                return this._textBuffer.contentsToWriter(writer);
            }
            char[] ch = t.asCharArray();
            writer.write(ch);
            return ch.length;
        }
        return 0;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString,"    public String getValueAsString() throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                return this._finishAndReturnString();
            }
            return this._textBuffer.contentsAsString();
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this.getCurrentName();
        }
        return super.getValueAsString(null);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString,"    public String getValueAsString(String defValue) throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                return this._finishAndReturnString();
            }
            return this._textBuffer.contentsAsString();
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this.getCurrentName();
        }
        return super.getValueAsString(defValue);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt,"    public int getValueAsInt() throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) {
            if ((this._numTypesValid & 1) == 0) {
                if (this._numTypesValid == 0) {
                    return this._parseIntValue();
                }
                if ((this._numTypesValid & 1) == 0) {
                    this.convertNumberToInt();
                }
            }
            return this._numberInt;
        }
        return super.getValueAsInt(0);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt,"    public int getValueAsInt(int defValue) throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) {
            if ((this._numTypesValid & 1) == 0) {
                if (this._numTypesValid == 0) {
                    return this._parseIntValue();
                }
                if ((this._numTypesValid & 1) == 0) {
                    this.convertNumberToInt();
                }
            }
            return this._numberInt;
        }
        return super.getValueAsInt(defValue);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2,"    protected final String _getText2(JsonToken t) {
        if (t == null) {
            return null;
        }
        switch (t.id()) {
            case 5: {
                return this._parsingContext.getCurrentName();
            }
            case 6: 
            case 7: 
            case 8: {
                return this._textBuffer.contentsAsString();
            }
        }
        return t.asString();
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters,"    public char[] getTextCharacters() throws IOException {
        if (this._currToken != null) {
            switch (this._currToken.id()) {
                case 5: {
                    if (!this._nameCopied) {
                        String name = this._parsingContext.getCurrentName();
                        int nameLen = name.length();
                        if (this._nameCopyBuffer == null) {
                            this._nameCopyBuffer = this._ioContext.allocNameCopyBuffer(nameLen);
                        } else if (this._nameCopyBuffer.length < nameLen) {
                            this._nameCopyBuffer = new char[nameLen];
                        }
                        name.getChars(0, nameLen, this._nameCopyBuffer, 0);
                        this._nameCopied = true;
                    }
                    return this._nameCopyBuffer;
                }
                case 6: {
                    if (this._tokenIncomplete) {
                        this._tokenIncomplete = false;
                        this._finishString();
                    }
                }
                case 7: 
                case 8: {
                    return this._textBuffer.getTextBuffer();
                }
            }
            return this._currToken.asCharArray();
        }
        return null;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength,"    public int getTextLength() throws IOException {
        if (this._currToken != null) {
            switch (this._currToken.id()) {
                case 5: {
                    return this._parsingContext.getCurrentName().length();
                }
                case 6: {
                    if (this._tokenIncomplete) {
                        this._tokenIncomplete = false;
                        this._finishString();
                    }
                }
                case 7: 
                case 8: {
                    return this._textBuffer.size();
                }
            }
            return this._currToken.asCharArray().length;
        }
        return 0;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset,"    public int getTextOffset() throws IOException {
        if (this._currToken != null) {
            switch (this._currToken.id()) {
                case 5: {
                    return 0;
                }
                case 6: {
                    if (this._tokenIncomplete) {
                        this._tokenIncomplete = false;
                        this._finishString();
                    }
                }
                case 7: 
                case 8: {
                    return this._textBuffer.getTextOffset();
                }
            }
        }
        return 0;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue,"    public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
        if (this._currToken != JsonToken.VALUE_STRING && (this._currToken != JsonToken.VALUE_EMBEDDED_OBJECT || this._binaryValue == null)) {
            this._reportError(""Current token ("" + (Object)((Object)this._currToken) + "") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"");
        }
        if (this._tokenIncomplete) {
            try {
                this._binaryValue = this._decodeBase64(b64variant);
            }
            catch (IllegalArgumentException iae) {
                throw this._constructError(""Failed to decode VALUE_STRING as base64 ("" + b64variant + ""): "" + iae.getMessage());
            }
            this._tokenIncomplete = false;
        } else if (this._binaryValue == null) {
            ByteArrayBuilder builder = this._getByteArrayBuilder();
            this._decodeBase64(this.getText(), builder, b64variant);
            this._binaryValue = builder.toByteArray();
        }
        return this._binaryValue;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue,"    public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
        if (!this._tokenIncomplete || this._currToken != JsonToken.VALUE_STRING) {
            byte[] b = this.getBinaryValue(b64variant);
            out.write(b);
            return b.length;
        }
        byte[] buf = this._ioContext.allocBase64Buffer();
        try {
            int n = this._readBinary(b64variant, out, buf);
            return n;
        }
        finally {
            this._ioContext.releaseBase64Buffer(buf);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary,"    protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException {
        int outputPtr = 0;
        int outputEnd = buffer.length - 3;
        int outputCount = 0;
        while (true) {
            int ch;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((ch = this._inputBuffer[this._inputPtr++] & 0xFF) <= 32) continue;
            int bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (ch == 34) break;
                bits = this._decodeBase64Escape(b64variant, ch, 0);
                if (bits < 0) continue;
            }
            if (outputPtr > outputEnd) {
                outputCount += outputPtr;
                out.write(buffer, 0, outputPtr);
                outputPtr = 0;
            }
            int decodedData = bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++] & 0xFF)) < 0) {
                bits = this._decodeBase64Escape(b64variant, ch, 1);
            }
            decodedData = decodedData << 6 | bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++] & 0xFF)) < 0) {
                if (bits != -2) {
                    if (ch == 34 && !b64variant.usesPadding()) {
                        buffer[outputPtr++] = (byte)(decodedData >>= 4);
                        break;
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 2);
                }
                if (bits == -2) {
                    if (this._inputPtr >= this._inputEnd) {
                        this._loadMoreGuaranteed();
                    }
                    if (!b64variant.usesPaddingChar(ch = this._inputBuffer[this._inputPtr++] & 0xFF)) {
                        throw this.reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                    buffer[outputPtr++] = (byte)(decodedData >>= 4);
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++] & 0xFF)) < 0) {
                if (bits != -2) {
                    if (ch == 34 && !b64variant.usesPadding()) {
                        buffer[outputPtr++] = (byte)((decodedData >>= 2) >> 8);
                        buffer[outputPtr++] = (byte)decodedData;
                        break;
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 3);
                }
                if (bits == -2) {
                    buffer[outputPtr++] = (byte)((decodedData >>= 2) >> 8);
                    buffer[outputPtr++] = (byte)decodedData;
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            buffer[outputPtr++] = (byte)(decodedData >> 16);
            buffer[outputPtr++] = (byte)(decodedData >> 8);
            buffer[outputPtr++] = (byte)decodedData;
        }
        this._tokenIncomplete = false;
        if (outputPtr > 0) {
            outputCount += outputPtr;
            out.write(buffer, 0, outputPtr);
        }
        return outputCount;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken,"    public JsonToken nextToken() throws IOException {
        JsonToken t;
        int i;
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this._nextAfterName();
        }
        this._numTypesValid = 0;
        if (this._tokenIncomplete) {
            this._skipString();
        }
        if ((i = this._skipWSOrEnd()) < 0) {
            this.close();
            this._currToken = null;
            return null;
        }
        this._binaryValue = null;
        if (i == 93) {
            this._updateLocation();
            if (!this._parsingContext.inArray()) {
                this._reportMismatchedEndMarker(i, '}');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_ARRAY;
            return this._currToken;
        }
        if (i == 125) {
            this._updateLocation();
            if (!this._parsingContext.inObject()) {
                this._reportMismatchedEndMarker(i, ']');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_OBJECT;
            return this._currToken;
        }
        if (this._parsingContext.expectComma()) {
            if (i != 44) {
                this._reportUnexpectedChar(i, ""was expecting comma to separate "" + this._parsingContext.typeDesc() + "" entries"");
            }
            i = this._skipWS();
        }
        if (!this._parsingContext.inObject()) {
            this._updateLocation();
            return this._nextTokenNotInObject(i);
        }
        this._updateNameLocation();
        String n = this._parseName(i);
        this._parsingContext.setCurrentName(n);
        this._currToken = JsonToken.FIELD_NAME;
        i = this._skipColon();
        this._updateLocation();
        if (i == 34) {
            this._tokenIncomplete = true;
            this._nextToken = JsonToken.VALUE_STRING;
            return this._currToken;
        }
        switch (i) {
            case 45: {
                t = this._parseNegNumber();
                break;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                t = this._parsePosNumber(i);
                break;
            }
            case 102: {
                this._matchToken(""false"", 1);
                t = JsonToken.VALUE_FALSE;
                break;
            }
            case 110: {
                this._matchToken(""null"", 1);
                t = JsonToken.VALUE_NULL;
                break;
            }
            case 116: {
                this._matchToken(""true"", 1);
                t = JsonToken.VALUE_TRUE;
                break;
            }
            case 91: {
                t = JsonToken.START_ARRAY;
                break;
            }
            case 123: {
                t = JsonToken.START_OBJECT;
                break;
            }
            default: {
                t = this._handleUnexpectedValue(i);
            }
        }
        this._nextToken = t;
        return this._currToken;
    "
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject,"    private final JsonToken _nextTokenNotInObject(int i) throws IOException {
        if (i == 34) {
            this._tokenIncomplete = true;
            this._currToken = JsonToken.VALUE_STRING;
            return this._currToken;
        }
        switch (i) {
            case 91: {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
                this._currToken = JsonToken.START_ARRAY;
                return this._currToken;
            }
            case 123: {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
                this._currToken = JsonToken.START_OBJECT;
                return this._currToken;
            }
            case 116: {
                this._matchToken(""true"", 1);
                this._currToken = JsonToken.VALUE_TRUE;
                return this._currToken;
            }
            case 102: {
                this._matchToken(""false"", 1);
                this._currToken = JsonToken.VALUE_FALSE;
                return this._currToken;
            }
            case 110: {
                this._matchToken(""null"", 1);
                this._currToken = JsonToken.VALUE_NULL;
                return this._currToken;
            }
            case 45: {
                this._currToken = this._parseNegNumber();
                return this._currToken;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                this._currToken = this._parsePosNumber(i);
                return this._currToken;
            }
        }
        this._currToken = this._handleUnexpectedValue(i);
        return this._currToken;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextAfterName,"    private final JsonToken _nextAfterName() {
        this._nameCopied = false;
        JsonToken t = this._nextToken;
        this._nextToken = null;
        if (t == JsonToken.START_ARRAY) {
            this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
        }
        this._currToken = t;
        return this._currToken;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.finishToken,"    public void finishToken() throws IOException {
        if (this._tokenIncomplete) {
            this._tokenIncomplete = false;
            this._finishString();
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName,"    public boolean nextFieldName(SerializableString str) throws IOException {
        int end;
        byte[] nameBytes;
        int len;
        int i;
        this._numTypesValid = 0;
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nextAfterName();
            return false;
        }
        if (this._tokenIncomplete) {
            this._skipString();
        }
        if ((i = this._skipWSOrEnd()) < 0) {
            this.close();
            this._currToken = null;
            return false;
        }
        this._binaryValue = null;
        if (i == 93) {
            this._updateLocation();
            if (!this._parsingContext.inArray()) {
                this._reportMismatchedEndMarker(i, '}');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_ARRAY;
            return false;
        }
        if (i == 125) {
            this._updateLocation();
            if (!this._parsingContext.inObject()) {
                this._reportMismatchedEndMarker(i, ']');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_OBJECT;
            return false;
        }
        if (this._parsingContext.expectComma()) {
            if (i != 44) {
                this._reportUnexpectedChar(i, ""was expecting comma to separate "" + this._parsingContext.typeDesc() + "" entries"");
            }
            i = this._skipWS();
        }
        if (!this._parsingContext.inObject()) {
            this._updateLocation();
            this._nextTokenNotInObject(i);
            return false;
        }
        this._updateNameLocation();
        if (i == 34 && this._inputPtr + (len = (nameBytes = str.asQuotedUTF8()).length) + 4 < this._inputEnd && this._inputBuffer[end = this._inputPtr + len] == 34) {
            int offset = 0;
            int ptr = this._inputPtr;
            while (true) {
                if (ptr == end) {
                    this._parsingContext.setCurrentName(str.getValue());
                    i = this._skipColonFast(ptr + 1);
                    this._isNextTokenNameYes(i);
                    return true;
                }
                if (nameBytes[offset] != this._inputBuffer[ptr]) break;
                ++offset;
                ++ptr;
            }
        }
        return this._isNextTokenNameMaybe(i, str);
    "
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName,"    public String nextFieldName() throws IOException {
        JsonToken t;
        int i;
        this._numTypesValid = 0;
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nextAfterName();
            return null;
        }
        if (this._tokenIncomplete) {
            this._skipString();
        }
        if ((i = this._skipWSOrEnd()) < 0) {
            this.close();
            this._currToken = null;
            return null;
        }
        this._binaryValue = null;
        if (i == 93) {
            this._updateLocation();
            if (!this._parsingContext.inArray()) {
                this._reportMismatchedEndMarker(i, '}');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_ARRAY;
            return null;
        }
        if (i == 125) {
            this._updateLocation();
            if (!this._parsingContext.inObject()) {
                this._reportMismatchedEndMarker(i, ']');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_OBJECT;
            return null;
        }
        if (this._parsingContext.expectComma()) {
            if (i != 44) {
                this._reportUnexpectedChar(i, ""was expecting comma to separate "" + this._parsingContext.typeDesc() + "" entries"");
            }
            i = this._skipWS();
        }
        if (!this._parsingContext.inObject()) {
            this._updateLocation();
            this._nextTokenNotInObject(i);
            return null;
        }
        this._updateNameLocation();
        String nameStr = this._parseName(i);
        this._parsingContext.setCurrentName(nameStr);
        this._currToken = JsonToken.FIELD_NAME;
        i = this._skipColon();
        this._updateLocation();
        if (i == 34) {
            this._tokenIncomplete = true;
            this._nextToken = JsonToken.VALUE_STRING;
            return nameStr;
        }
        switch (i) {
            case 45: {
                t = this._parseNegNumber();
                break;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                t = this._parsePosNumber(i);
                break;
            }
            case 102: {
                this._matchToken(""false"", 1);
                t = JsonToken.VALUE_FALSE;
                break;
            }
            case 110: {
                this._matchToken(""null"", 1);
                t = JsonToken.VALUE_NULL;
                break;
            }
            case 116: {
                this._matchToken(""true"", 1);
                t = JsonToken.VALUE_TRUE;
                break;
            }
            case 91: {
                t = JsonToken.START_ARRAY;
                break;
            }
            case 123: {
                t = JsonToken.START_OBJECT;
                break;
            }
            default: {
                t = this._handleUnexpectedValue(i);
            }
        }
        this._nextToken = t;
        return nameStr;
    "
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColonFast,"    private final int _skipColonFast(int ptr) throws IOException {
        byte i;
        if ((i = this._inputBuffer[ptr++]) == 58) {
            if ((i = this._inputBuffer[ptr++]) > 32) {
                if (i != 47 && i != 35) {
                    this._inputPtr = ptr;
                    return i;
                }
            } else if ((i == 32 || i == 9) && (i = this._inputBuffer[ptr++]) > 32 && i != 47 && i != 35) {
                this._inputPtr = ptr;
                return i;
            }
            this._inputPtr = ptr - 1;
            return this._skipColon2(true);
        }
        if (i == 32 || i == 9) {
            i = this._inputBuffer[ptr++];
        }
        if (i == 58) {
            if ((i = this._inputBuffer[ptr++]) > 32) {
                if (i != 47 && i != 35) {
                    this._inputPtr = ptr;
                    return i;
                }
            } else if ((i == 32 || i == 9) && (i = this._inputBuffer[ptr++]) > 32 && i != 47 && i != 35) {
                this._inputPtr = ptr;
                return i;
            }
            this._inputPtr = ptr - 1;
            return this._skipColon2(true);
        }
        this._inputPtr = ptr - 1;
        return this._skipColon2(false);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameYes,"    private final void _isNextTokenNameYes(int i) throws IOException {
        this._currToken = JsonToken.FIELD_NAME;
        this._updateLocation();
        switch (i) {
            case 34: {
                this._tokenIncomplete = true;
                this._nextToken = JsonToken.VALUE_STRING;
                return;
            }
            case 91: {
                this._nextToken = JsonToken.START_ARRAY;
                return;
            }
            case 123: {
                this._nextToken = JsonToken.START_OBJECT;
                return;
            }
            case 116: {
                this._matchToken(""true"", 1);
                this._nextToken = JsonToken.VALUE_TRUE;
                return;
            }
            case 102: {
                this._matchToken(""false"", 1);
                this._nextToken = JsonToken.VALUE_FALSE;
                return;
            }
            case 110: {
                this._matchToken(""null"", 1);
                this._nextToken = JsonToken.VALUE_NULL;
                return;
            }
            case 45: {
                this._nextToken = this._parseNegNumber();
                return;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                this._nextToken = this._parsePosNumber(i);
                return;
            }
        }
        this._nextToken = this._handleUnexpectedValue(i);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameMaybe,"    private final boolean _isNextTokenNameMaybe(int i, SerializableString str) throws IOException {
        JsonToken t;
        String n = this._parseName(i);
        this._parsingContext.setCurrentName(n);
        boolean match = n.equals(str.getValue());
        this._currToken = JsonToken.FIELD_NAME;
        i = this._skipColon();
        this._updateLocation();
        if (i == 34) {
            this._tokenIncomplete = true;
            this._nextToken = JsonToken.VALUE_STRING;
            return match;
        }
        switch (i) {
            case 91: {
                t = JsonToken.START_ARRAY;
                break;
            }
            case 123: {
                t = JsonToken.START_OBJECT;
                break;
            }
            case 116: {
                this._matchToken(""true"", 1);
                t = JsonToken.VALUE_TRUE;
                break;
            }
            case 102: {
                this._matchToken(""false"", 1);
                t = JsonToken.VALUE_FALSE;
                break;
            }
            case 110: {
                this._matchToken(""null"", 1);
                t = JsonToken.VALUE_NULL;
                break;
            }
            case 45: {
                t = this._parseNegNumber();
                break;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                t = this._parsePosNumber(i);
                break;
            }
            default: {
                t = this._handleUnexpectedValue(i);
            }
        }
        this._nextToken = t;
        return match;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextTextValue,"    public String nextTextValue() throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_STRING) {
                if (this._tokenIncomplete) {
                    this._tokenIncomplete = false;
                    return this._finishAndReturnString();
                }
                return this._textBuffer.contentsAsString();
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return null;
        }
        return this.nextToken() == JsonToken.VALUE_STRING ? this.getText() : null;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue,"    public int nextIntValue(int defaultValue) throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_NUMBER_INT) {
                return this.getIntValue();
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return defaultValue;
        }
        return this.nextToken() == JsonToken.VALUE_NUMBER_INT ? this.getIntValue() : defaultValue;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue,"    public long nextLongValue(long defaultValue) throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_NUMBER_INT) {
                return this.getLongValue();
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return defaultValue;
        }
        return this.nextToken() == JsonToken.VALUE_NUMBER_INT ? this.getLongValue() : defaultValue;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextBooleanValue,"    public Boolean nextBooleanValue() throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_TRUE) {
                return Boolean.TRUE;
            }
            if (t == JsonToken.VALUE_FALSE) {
                return Boolean.FALSE;
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return null;
        }
        JsonToken t = this.nextToken();
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        return null;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parsePosNumber,"    protected JsonToken _parsePosNumber(int c) throws IOException {
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        if (c == 48) {
            c = this._verifyNoLeadingZeroes();
        }
        outBuf[0] = (char)c;
        int intLen = 1;
        int outPtr = 1;
        int end = this._inputPtr + outBuf.length - 1;
        if (end > this._inputEnd) {
            end = this._inputEnd;
        }
        while (true) {
            if (this._inputPtr >= end) {
                return this._parseNumber2(outBuf, outPtr, false, intLen);
            }
            if ((c = this._inputBuffer[this._inputPtr++] & 0xFF) < 48 || c > 57) break;
            ++intLen;
            outBuf[outPtr++] = (char)c;
        }
        if (c == 46 || c == 101 || c == 69) {
            return this._parseFloat(outBuf, outPtr, c, false, intLen);
        }
        --this._inputPtr;
        this._textBuffer.setCurrentLength(outPtr);
        if (this._parsingContext.inRoot()) {
            this._verifyRootSpace(c);
        }
        return this.resetInt(false, intLen);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNegNumber,"    protected JsonToken _parseNegNumber() throws IOException {
        int c;
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int outPtr = 0;
        outBuf[outPtr++] = 45;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if ((c = this._inputBuffer[this._inputPtr++] & 0xFF) < 48 || c > 57) {
            return this._handleInvalidNumberStart(c, true);
        }
        if (c == 48) {
            c = this._verifyNoLeadingZeroes();
        }
        outBuf[outPtr++] = (char)c;
        int intLen = 1;
        int end = this._inputPtr + outBuf.length - outPtr;
        if (end > this._inputEnd) {
            end = this._inputEnd;
        }
        while (true) {
            if (this._inputPtr >= end) {
                return this._parseNumber2(outBuf, outPtr, true, intLen);
            }
            if ((c = this._inputBuffer[this._inputPtr++] & 0xFF) < 48 || c > 57) break;
            ++intLen;
            outBuf[outPtr++] = (char)c;
        }
        if (c == 46 || c == 101 || c == 69) {
            return this._parseFloat(outBuf, outPtr, c, true, intLen);
        }
        --this._inputPtr;
        this._textBuffer.setCurrentLength(outPtr);
        if (this._parsingContext.inRoot()) {
            this._verifyRootSpace(c);
        }
        return this.resetInt(true, intLen);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2,"    private final JsonToken _parseNumber2(char[] outBuf, int outPtr, boolean negative, int intPartLength) throws IOException {
        while (true) {
            int c;
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._textBuffer.setCurrentLength(outPtr);
                return this.resetInt(negative, intPartLength);
            }
            if ((c = this._inputBuffer[this._inputPtr++] & 0xFF) > 57 || c < 48) {
                if (c != 46 && c != 101 && c != 69) break;
                return this._parseFloat(outBuf, outPtr, c, negative, intPartLength);
            }
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char)c;
            ++intPartLength;
        }
        --this._inputPtr;
        this._textBuffer.setCurrentLength(outPtr);
        if (this._parsingContext.inRoot()) {
            this._verifyRootSpace(this._inputBuffer[this._inputPtr++] & 0xFF);
        }
        return this.resetInt(negative, intPartLength);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._verifyNoLeadingZeroes,"    private final int _verifyNoLeadingZeroes() throws IOException {
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            return 48;
        }
        int ch = this._inputBuffer[this._inputPtr] & 0xFF;
        if (ch < 48 || ch > 57) {
            return 48;
        }
        if (!this.isEnabled(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {
            this.reportInvalidNumber(""Leading zeroes not allowed"");
        }
        ++this._inputPtr;
        if (ch == 48) {
            while (this._inputPtr < this._inputEnd || this._loadMore()) {
                ch = this._inputBuffer[this._inputPtr] & 0xFF;
                if (ch < 48 || ch > 57) {
                    return 48;
                }
                ++this._inputPtr;
                if (ch == 48) continue;
                break;
            }
        }
        return ch;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat,"    private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c, boolean negative, int integerPartLength) throws IOException {
        int fractLen = 0;
        boolean eof = false;
        if (c == 46) {
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char)c;
            while (true) {
                if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                    eof = true;
                    break;
                }
                if ((c = this._inputBuffer[this._inputPtr++] & 0xFF) < 48 || c > 57) break;
                ++fractLen;
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = (char)c;
            }
            if (fractLen == 0) {
                this.reportUnexpectedNumberChar(c, ""Decimal point not followed by a digit"");
            }
        }
        int expLen = 0;
        if (c == 101 || c == 69) {
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char)c;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((c = this._inputBuffer[this._inputPtr++] & 0xFF) == 45 || c == 43) {
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = (char)c;
                if (this._inputPtr >= this._inputEnd) {
                    this._loadMoreGuaranteed();
                }
                c = this._inputBuffer[this._inputPtr++] & 0xFF;
            }
            while (c <= 57 && c >= 48) {
                ++expLen;
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = (char)c;
                if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                    eof = true;
                    break;
                }
                c = this._inputBuffer[this._inputPtr++] & 0xFF;
            }
            if (expLen == 0) {
                this.reportUnexpectedNumberChar(c, ""Exponent indicator not followed by a digit"");
            }
        }
        if (!eof) {
            --this._inputPtr;
            if (this._parsingContext.inRoot()) {
                this._verifyRootSpace(c);
            }
        }
        this._textBuffer.setCurrentLength(outPtr);
        return this.resetFloat(negative, integerPartLength, fractLen, expLen);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._verifyRootSpace,"    private final void _verifyRootSpace(int ch) throws IOException {
        ++this._inputPtr;
        switch (ch) {
            case 9: 
            case 32: {
                return;
            }
            case 13: {
                this._skipCR();
                return;
            }
            case 10: {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                return;
            }
        }
        this._reportMissingRootWS(ch);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName,"    protected final String _parseName(int i) throws IOException {
        int q;
        if (i != 34) {
            return this._handleOddName(i);
        }
        if (this._inputPtr + 13 > this._inputEnd) {
            return this.slowParseName();
        }
        int[] codes = _icLatin1;
        byte[] input = this._inputBuffer;
        if (codes[q = input[this._inputPtr++] & 0xFF] == 0) {
            if (codes[i = input[this._inputPtr++] & 0xFF] == 0) {
                q = q << 8 | i;
                if (codes[i = input[this._inputPtr++] & 0xFF] == 0) {
                    q = q << 8 | i;
                    if (codes[i = input[this._inputPtr++] & 0xFF] == 0) {
                        q = q << 8 | i;
                        if (codes[i = input[this._inputPtr++] & 0xFF] == 0) {
                            this._quad1 = q;
                            return this.parseMediumName(i);
                        }
                        if (i == 34) {
                            return this.findName(q, 4);
                        }
                        return this.parseName(q, i, 4);
                    }
                    if (i == 34) {
                        return this.findName(q, 3);
                    }
                    return this.parseName(q, i, 3);
                }
                if (i == 34) {
                    return this.findName(q, 2);
                }
                return this.parseName(q, i, 2);
            }
            if (i == 34) {
                return this.findName(q, 1);
            }
            return this.parseName(q, i, 1);
        }
        if (q == 34) {
            return """";
        }
        return this.parseName(0, q, 0);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName,"    protected final String parseMediumName(int q2) throws IOException {
        int i;
        int[] codes = _icLatin1;
        byte[] input = this._inputBuffer;
        if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, 1);
            }
            return this.parseName(this._quad1, q2, i, 1);
        }
        q2 = q2 << 8 | i;
        if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, 2);
            }
            return this.parseName(this._quad1, q2, i, 2);
        }
        q2 = q2 << 8 | i;
        if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, 3);
            }
            return this.parseName(this._quad1, q2, i, 3);
        }
        q2 = q2 << 8 | i;
        if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, 4);
            }
            return this.parseName(this._quad1, q2, i, 4);
        }
        return this.parseMediumName2(i, q2);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2,"    protected final String parseMediumName2(int q3, int q2) throws IOException {
        int i;
        int[] codes = _icLatin1;
        byte[] input = this._inputBuffer;
        if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, q3, 1);
            }
            return this.parseName(this._quad1, q2, q3, i, 1);
        }
        q3 = q3 << 8 | i;
        if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, q3, 2);
            }
            return this.parseName(this._quad1, q2, q3, i, 2);
        }
        q3 = q3 << 8 | i;
        if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, q3, 3);
            }
            return this.parseName(this._quad1, q2, q3, i, 3);
        }
        q3 = q3 << 8 | i;
        if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, q3, 4);
            }
            return this.parseName(this._quad1, q2, q3, i, 4);
        }
        return this.parseLongName(i, q2, q3);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName,"    protected final String parseLongName(int q, int q2, int q3) throws IOException {
        this._quadBuffer[0] = this._quad1;
        this._quadBuffer[1] = q2;
        this._quadBuffer[2] = q3;
        byte[] input = this._inputBuffer;
        int[] codes = _icLatin1;
        int qlen = 3;
        while (this._inputPtr + 4 <= this._inputEnd) {
            int i;
            if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
                if (i == 34) {
                    return this.findName(this._quadBuffer, qlen, q, 1);
                }
                return this.parseEscapedName(this._quadBuffer, qlen, q, i, 1);
            }
            q = q << 8 | i;
            if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
                if (i == 34) {
                    return this.findName(this._quadBuffer, qlen, q, 2);
                }
                return this.parseEscapedName(this._quadBuffer, qlen, q, i, 2);
            }
            q = q << 8 | i;
            if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
                if (i == 34) {
                    return this.findName(this._quadBuffer, qlen, q, 3);
                }
                return this.parseEscapedName(this._quadBuffer, qlen, q, i, 3);
            }
            q = q << 8 | i;
            if (codes[i = input[this._inputPtr++] & 0xFF] != 0) {
                if (i == 34) {
                    return this.findName(this._quadBuffer, qlen, q, 4);
                }
                return this.parseEscapedName(this._quadBuffer, qlen, q, i, 4);
            }
            if (qlen >= this._quadBuffer.length) {
                this._quadBuffer = UTF8StreamJsonParser.growArrayBy(this._quadBuffer, qlen);
            }
            this._quadBuffer[qlen++] = q;
            q = i;
        }
        return this.parseEscapedName(this._quadBuffer, qlen, 0, q, 0);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.slowParseName,"    protected String slowParseName() throws IOException {
        int i;
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            this._reportInvalidEOF("": was expecting closing '\""' for name"", JsonToken.FIELD_NAME);
        }
        if ((i = this._inputBuffer[this._inputPtr++] & 0xFF) == 34) {
            return """";
        }
        return this.parseEscapedName(this._quadBuffer, 0, 0, i, 0);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName,"    private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException {
        return this.parseEscapedName(this._quadBuffer, 0, q1, ch, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName,"    private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException {
        this._quadBuffer[0] = q1;
        return this.parseEscapedName(this._quadBuffer, 1, q2, ch, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName,"    private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException {
        this._quadBuffer[0] = q1;
        this._quadBuffer[1] = q2;
        return this.parseEscapedName(this._quadBuffer, 2, q3, ch, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName,"    protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes) throws IOException {
        String name;
        int[] codes = _icLatin1;
        while (true) {
            if (codes[ch] != 0) {
                if (ch == 34) break;
                if (ch != 92) {
                    this._throwUnquotedSpace(ch, ""name"");
                } else {
                    ch = this._decodeEscaped();
                }
                if (ch > 127) {
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
                            this._quadBuffer = quads;
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    if (ch < 2048) {
                        currQuad = currQuad << 8 | (0xC0 | ch >> 6);
                        ++currQuadBytes;
                    } else {
                        currQuad = currQuad << 8 | (0xE0 | ch >> 12);
                        if (++currQuadBytes >= 4) {
                            if (qlen >= quads.length) {
                                quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
                                this._quadBuffer = quads;
                            }
                            quads[qlen++] = currQuad;
                            currQuad = 0;
                            currQuadBytes = 0;
                        }
                        currQuad = currQuad << 8 | (0x80 | ch >> 6 & 0x3F);
                        ++currQuadBytes;
                    }
                    ch = 0x80 | ch & 0x3F;
                }
            }
            if (currQuadBytes < 4) {
                ++currQuadBytes;
                currQuad = currQuad << 8 | ch;
            } else {
                if (qlen >= quads.length) {
                    quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
                    this._quadBuffer = quads;
                }
                quads[qlen++] = currQuad;
                currQuad = ch;
                currQuadBytes = 1;
            }
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
            ch = this._inputBuffer[this._inputPtr++] & 0xFF;
        }
        if (currQuadBytes > 0) {
            if (qlen >= quads.length) {
                quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
                this._quadBuffer = quads;
            }
            quads[qlen++] = UTF8StreamJsonParser.pad(currQuad, currQuadBytes);
        }
        if ((name = this._symbols.findName(quads, qlen)) == null) {
            name = this.addName(quads, qlen, currQuadBytes);
        }
        return name;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName,"    protected String _handleOddName(int ch) throws IOException {
        String name;
        int[] codes;
        if (ch == 39 && this.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES)) {
            return this._parseAposName();
        }
        if (!this.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
            char c = (char)this._decodeCharForError(ch);
            this._reportUnexpectedChar(c, ""was expecting double-quote to start field name"");
        }
        if ((codes = CharTypes.getInputCodeUtf8JsNames())[ch] != 0) {
            this._reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
        }
        int[] quads = this._quadBuffer;
        int qlen = 0;
        int currQuad = 0;
        int currQuadBytes = 0;
        while (true) {
            if (currQuadBytes < 4) {
                ++currQuadBytes;
                currQuad = currQuad << 8 | ch;
            } else {
                if (qlen >= quads.length) {
                    this._quadBuffer = quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
                }
                quads[qlen++] = currQuad;
                currQuad = ch;
                currQuadBytes = 1;
            }
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
            if (codes[ch = this._inputBuffer[this._inputPtr] & 0xFF] != 0) break;
            ++this._inputPtr;
        }
        if (currQuadBytes > 0) {
            if (qlen >= quads.length) {
                this._quadBuffer = quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
        }
        if ((name = this._symbols.findName(quads, qlen)) == null) {
            name = this.addName(quads, qlen, currQuadBytes);
        }
        return name;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseAposName,"    protected String _parseAposName() throws IOException {
        String name;
        int ch;
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            this._reportInvalidEOF("": was expecting closing ''' for field name"", JsonToken.FIELD_NAME);
        }
        if ((ch = this._inputBuffer[this._inputPtr++] & 0xFF) == 39) {
            return """";
        }
        int[] quads = this._quadBuffer;
        int qlen = 0;
        int currQuad = 0;
        int currQuadBytes = 0;
        int[] codes = _icLatin1;
        while (ch != 39) {
            if (ch != 34 && codes[ch] != 0) {
                if (ch != 92) {
                    this._throwUnquotedSpace(ch, ""name"");
                } else {
                    ch = this._decodeEscaped();
                }
                if (ch > 127) {
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            this._quadBuffer = quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    if (ch < 2048) {
                        currQuad = currQuad << 8 | (0xC0 | ch >> 6);
                        ++currQuadBytes;
                    } else {
                        currQuad = currQuad << 8 | (0xE0 | ch >> 12);
                        if (++currQuadBytes >= 4) {
                            if (qlen >= quads.length) {
                                this._quadBuffer = quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
                            }
                            quads[qlen++] = currQuad;
                            currQuad = 0;
                            currQuadBytes = 0;
                        }
                        currQuad = currQuad << 8 | (0x80 | ch >> 6 & 0x3F);
                        ++currQuadBytes;
                    }
                    ch = 0x80 | ch & 0x3F;
                }
            }
            if (currQuadBytes < 4) {
                ++currQuadBytes;
                currQuad = currQuad << 8 | ch;
            } else {
                if (qlen >= quads.length) {
                    this._quadBuffer = quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
                }
                quads[qlen++] = currQuad;
                currQuad = ch;
                currQuadBytes = 1;
            }
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
            ch = this._inputBuffer[this._inputPtr++] & 0xFF;
        }
        if (currQuadBytes > 0) {
            if (qlen >= quads.length) {
                this._quadBuffer = quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
            }
            quads[qlen++] = UTF8StreamJsonParser.pad(currQuad, currQuadBytes);
        }
        if ((name = this._symbols.findName(quads, qlen)) == null) {
            name = this.addName(quads, qlen, currQuadBytes);
        }
        return name;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName,"    private final String findName(int q1, int lastQuadBytes) throws JsonParseException {
        String name = this._symbols.findName(q1 = UTF8StreamJsonParser.pad(q1, lastQuadBytes));
        if (name != null) {
            return name;
        }
        this._quadBuffer[0] = q1;
        return this.addName(this._quadBuffer, 1, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName,"    private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException {
        String name = this._symbols.findName(q1, q2 = UTF8StreamJsonParser.pad(q2, lastQuadBytes));
        if (name != null) {
            return name;
        }
        this._quadBuffer[0] = q1;
        this._quadBuffer[1] = q2;
        return this.addName(this._quadBuffer, 2, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName,"    private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException {
        String name = this._symbols.findName(q1, q2, q3 = UTF8StreamJsonParser.pad(q3, lastQuadBytes));
        if (name != null) {
            return name;
        }
        int[] quads = this._quadBuffer;
        quads[0] = q1;
        quads[1] = q2;
        quads[2] = UTF8StreamJsonParser.pad(q3, lastQuadBytes);
        return this.addName(quads, 3, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName,"    private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException {
        if (qlen >= quads.length) {
            quads = UTF8StreamJsonParser.growArrayBy(quads, quads.length);
            this._quadBuffer = quads;
        }
        quads[qlen++] = UTF8StreamJsonParser.pad(lastQuad, lastQuadBytes);
        String name = this._symbols.findName(quads, qlen);
        if (name == null) {
            return this.addName(quads, qlen, lastQuadBytes);
        }
        return name;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName,"    private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException {
        int lastQuad;
        int byteLen = (qlen << 2) - 4 + lastQuadBytes;
        if (lastQuadBytes < 4) {
            lastQuad = quads[qlen - 1];
            quads[qlen - 1] = lastQuad << (4 - lastQuadBytes << 3);
        } else {
            lastQuad = 0;
        }
        char[] cbuf = this._textBuffer.emptyAndGetCurrentSegment();
        int cix = 0;
        int ix = 0;
        while (ix < byteLen) {
            int ch = quads[ix >> 2];
            int byteIx = ix & 3;
            ch = ch >> (3 - byteIx << 3) & 0xFF;
            ++ix;
            if (ch > 127) {
                int needed;
                if ((ch & 0xE0) == 192) {
                    ch &= 0x1F;
                    needed = 1;
                } else if ((ch & 0xF0) == 224) {
                    ch &= 0xF;
                    needed = 2;
                } else if ((ch & 0xF8) == 240) {
                    ch &= 7;
                    needed = 3;
                } else {
                    this._reportInvalidInitial(ch);
                    ch = 1;
                    needed = 1;
                }
                if (ix + needed > byteLen) {
                    this._reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
                }
                int ch2 = quads[ix >> 2];
                byteIx = ix & 3;
                ++ix;
                if (((ch2 >>= 3 - byteIx << 3) & 0xC0) != 128) {
                    this._reportInvalidOther(ch2);
                }
                ch = ch << 6 | ch2 & 0x3F;
                if (needed > 1) {
                    ch2 = quads[ix >> 2];
                    byteIx = ix & 3;
                    ++ix;
                    if (((ch2 >>= 3 - byteIx << 3) & 0xC0) != 128) {
                        this._reportInvalidOther(ch2);
                    }
                    ch = ch << 6 | ch2 & 0x3F;
                    if (needed > 2) {
                        ch2 = quads[ix >> 2];
                        byteIx = ix & 3;
                        ++ix;
                        if (((ch2 >>= 3 - byteIx << 3) & 0xC0) != 128) {
                            this._reportInvalidOther(ch2 & 0xFF);
                        }
                        ch = ch << 6 | ch2 & 0x3F;
                    }
                }
                if (needed > 2) {
                    ch -= 65536;
                    if (cix >= cbuf.length) {
                        cbuf = this._textBuffer.expandCurrentSegment();
                    }
                    cbuf[cix++] = (char)(55296 + (ch >> 10));
                    ch = 0xDC00 | ch & 0x3FF;
                }
            }
            if (cix >= cbuf.length) {
                cbuf = this._textBuffer.expandCurrentSegment();
            }
            cbuf[cix++] = (char)ch;
        }
        String baseName = new String(cbuf, 0, cix);
        if (lastQuadBytes < 4) {
            quads[qlen - 1] = lastQuad;
        }
        return this._symbols.addName(baseName, quads, qlen);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMoreGuaranteed,"    protected void _loadMoreGuaranteed() throws IOException {
        if (!this._loadMore()) {
            this._reportInvalidEOF();
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString,"    protected void _finishString() throws IOException {
        int ptr = this._inputPtr;
        if (ptr >= this._inputEnd) {
            this._loadMoreGuaranteed();
            ptr = this._inputPtr;
        }
        int outPtr = 0;
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int[] codes = _icUTF8;
        int max = Math.min(this._inputEnd, ptr + outBuf.length);
        byte[] inputBuffer = this._inputBuffer;
        while (ptr < max) {
            int c = inputBuffer[ptr] & 0xFF;
            if (codes[c] != 0) {
                if (c != 34) break;
                this._inputPtr = ptr + 1;
                this._textBuffer.setCurrentLength(outPtr);
                return;
            }
            ++ptr;
            outBuf[outPtr++] = (char)c;
        }
        this._inputPtr = ptr;
        this._finishString2(outBuf, outPtr);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString,"    protected String _finishAndReturnString() throws IOException {
        int ptr = this._inputPtr;
        if (ptr >= this._inputEnd) {
            this._loadMoreGuaranteed();
            ptr = this._inputPtr;
        }
        int outPtr = 0;
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int[] codes = _icUTF8;
        int max = Math.min(this._inputEnd, ptr + outBuf.length);
        byte[] inputBuffer = this._inputBuffer;
        while (ptr < max) {
            int c = inputBuffer[ptr] & 0xFF;
            if (codes[c] != 0) {
                if (c != 34) break;
                this._inputPtr = ptr + 1;
                return this._textBuffer.setCurrentAndReturn(outPtr);
            }
            ++ptr;
            outBuf[outPtr++] = (char)c;
        }
        this._inputPtr = ptr;
        this._finishString2(outBuf, outPtr);
        return this._textBuffer.contentsAsString();
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2,"    private final void _finishString2(char[] outBuf, int outPtr) throws IOException {
        int[] codes = _icUTF8;
        byte[] inputBuffer = this._inputBuffer;
        while (true) {
            int c;
            int ptr;
            block15: {
                if ((ptr = this._inputPtr) >= this._inputEnd) {
                    this._loadMoreGuaranteed();
                    ptr = this._inputPtr;
                }
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                int max = Math.min(this._inputEnd, ptr + (outBuf.length - outPtr));
                while (ptr < max) {
                    if (codes[c = inputBuffer[ptr++] & 0xFF] == 0) {
                        outBuf[outPtr++] = (char)c;
                        continue;
                    }
                    break block15;
                }
                this._inputPtr = ptr;
                continue;
            }
            this._inputPtr = ptr;
            if (c == 34) break;
            switch (codes[c]) {
                case 1: {
                    c = this._decodeEscaped();
                    break;
                }
                case 2: {
                    c = this._decodeUtf8_2(c);
                    break;
                }
                case 3: {
                    if (this._inputEnd - this._inputPtr >= 2) {
                        c = this._decodeUtf8_3fast(c);
                        break;
                    }
                    c = this._decodeUtf8_3(c);
                    break;
                }
                case 4: {
                    c = this._decodeUtf8_4(c);
                    outBuf[outPtr++] = (char)(0xD800 | c >> 10);
                    if (outPtr >= outBuf.length) {
                        outBuf = this._textBuffer.finishCurrentSegment();
                        outPtr = 0;
                    }
                    c = 0xDC00 | c & 0x3FF;
                    break;
                }
                default: {
                    if (c < 32) {
                        this._throwUnquotedSpace(c, ""string value"");
                        break;
                    }
                    this._reportInvalidChar(c);
                }
            }
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char)c;
        }
        this._textBuffer.setCurrentLength(outPtr);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipString,"    protected void _skipString() throws IOException {
        this._tokenIncomplete = false;
        int[] codes = _icUTF8;
        byte[] inputBuffer = this._inputBuffer;
        block6: while (true) {
            int c;
            int ptr;
            block10: {
                int max;
                if ((ptr = this._inputPtr) >= (max = this._inputEnd)) {
                    this._loadMoreGuaranteed();
                    ptr = this._inputPtr;
                    max = this._inputEnd;
                }
                while (ptr < max) {
                    if (codes[c = inputBuffer[ptr++] & 0xFF] == 0) continue;
                    break block10;
                }
                this._inputPtr = ptr;
                continue;
            }
            this._inputPtr = ptr;
            if (c == 34) break;
            switch (codes[c]) {
                case 1: {
                    this._decodeEscaped();
                    continue block6;
                }
                case 2: {
                    this._skipUtf8_2();
                    continue block6;
                }
                case 3: {
                    this._skipUtf8_3();
                    continue block6;
                }
                case 4: {
                    this._skipUtf8_4(c);
                    continue block6;
                }
            }
            if (c < 32) {
                this._throwUnquotedSpace(c, ""string value"");
                continue;
            }
            this._reportInvalidChar(c);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue,"    protected JsonToken _handleUnexpectedValue(int c) throws IOException {
        switch (c) {
            case 93: {
                if (!this._parsingContext.inArray()) break;
            }
            case 44: {
                if (this.isEnabled(JsonParser.Feature.ALLOW_MISSING_VALUES)) {
                    --this._inputPtr;
                    return JsonToken.VALUE_NULL;
                }
            }
            case 125: {
                this._reportUnexpectedChar(c, ""expected a value"");
            }
            case 39: {
                if (!this.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES)) break;
                return this._handleApos();
            }
            case 78: {
                this._matchToken(""NaN"", 1);
                if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                    return this.resetAsNaN(""NaN"", Double.NaN);
                }
                this._reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
                break;
            }
            case 73: {
                this._matchToken(""Infinity"", 1);
                if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                    return this.resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
                }
                this._reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
                break;
            }
            case 43: {
                if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                    this._reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);
                }
                return this._handleInvalidNumberStart(this._inputBuffer[this._inputPtr++] & 0xFF, false);
            }
        }
        if (Character.isJavaIdentifierStart(c)) {
            this._reportInvalidToken("""" + (char)c, ""('true', 'false' or 'null')"");
        }
        this._reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
        return null;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleApos,"    protected JsonToken _handleApos() throws IOException {
        int c = 0;
        int outPtr = 0;
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int[] codes = _icUTF8;
        byte[] inputBuffer = this._inputBuffer;
        block6: while (true) {
            int max;
            int max2;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            if ((max2 = this._inputPtr + (outBuf.length - outPtr)) < (max = this._inputEnd)) {
                max = max2;
            }
            while (true) {
                if (this._inputPtr >= max) continue block6;
                if ((c = inputBuffer[this._inputPtr++] & 0xFF) == 39 || codes[c] != 0) break;
                outBuf[outPtr++] = (char)c;
            }
            if (c == 39) break;
            switch (codes[c]) {
                case 1: {
                    c = this._decodeEscaped();
                    break;
                }
                case 2: {
                    c = this._decodeUtf8_2(c);
                    break;
                }
                case 3: {
                    if (this._inputEnd - this._inputPtr >= 2) {
                        c = this._decodeUtf8_3fast(c);
                        break;
                    }
                    c = this._decodeUtf8_3(c);
                    break;
                }
                case 4: {
                    c = this._decodeUtf8_4(c);
                    outBuf[outPtr++] = (char)(0xD800 | c >> 10);
                    if (outPtr >= outBuf.length) {
                        outBuf = this._textBuffer.finishCurrentSegment();
                        outPtr = 0;
                    }
                    c = 0xDC00 | c & 0x3FF;
                    break;
                }
                default: {
                    if (c < 32) {
                        this._throwUnquotedSpace(c, ""string value"");
                    }
                    this._reportInvalidChar(c);
                }
            }
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char)c;
        }
        this._textBuffer.setCurrentLength(outPtr);
        return JsonToken.VALUE_STRING;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart,"    protected JsonToken _handleInvalidNumberStart(int ch, boolean neg) throws IOException {
        while (ch == 73) {
            String match;
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_FLOAT);
            }
            if ((ch = this._inputBuffer[this._inputPtr++]) == 78) {
                match = neg ? ""-INF"" : ""+INF"";
            } else {
                if (ch != 110) break;
                match = neg ? ""-Infinity"" : ""+Infinity"";
            }
            this._matchToken(match, 3);
            if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return this.resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
            }
            this._reportError(""Non-standard token '"" + match + ""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
        }
        this.reportUnexpectedNumberChar(ch, ""expected digit (0-9) to follow minus sign, for valid numeric value"");
        return null;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken,"    protected final void _matchToken(String matchStr, int i) throws IOException {
        int len = matchStr.length();
        if (this._inputPtr + len >= this._inputEnd) {
            this._matchToken2(matchStr, i);
            return;
        }
        do {
            if (this._inputBuffer[this._inputPtr] != matchStr.charAt(i)) {
                this._reportInvalidToken(matchStr.substring(0, i));
            }
            ++this._inputPtr;
        } while (++i < len);
        int ch = this._inputBuffer[this._inputPtr] & 0xFF;
        if (ch >= 48 && ch != 93 && ch != 125) {
            this._checkMatchEnd(matchStr, i, ch);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken2,"    private final void _matchToken2(String matchStr, int i) throws IOException {
        int len = matchStr.length();
        do {
            if (this._inputPtr >= this._inputEnd && !this._loadMore() || this._inputBuffer[this._inputPtr] != matchStr.charAt(i)) {
                this._reportInvalidToken(matchStr.substring(0, i));
            }
            ++this._inputPtr;
        } while (++i < len);
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            return;
        }
        int ch = this._inputBuffer[this._inputPtr] & 0xFF;
        if (ch >= 48 && ch != 93 && ch != 125) {
            this._checkMatchEnd(matchStr, i, ch);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._checkMatchEnd,"    private final void _checkMatchEnd(String matchStr, int i, int ch) throws IOException {
        char c = (char)this._decodeCharForError(ch);
        if (Character.isJavaIdentifierPart(c)) {
            this._reportInvalidToken(matchStr.substring(0, i));
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipWS,"    private final int _skipWS() throws IOException {
        while (this._inputPtr < this._inputEnd) {
            int i;
            if ((i = this._inputBuffer[this._inputPtr++] & 0xFF) > 32) {
                if (i == 47 || i == 35) {
                    --this._inputPtr;
                    return this._skipWS2();
                }
                return i;
            }
            if (i == 32) continue;
            if (i == 10) {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == 13) {
                this._skipCR();
                continue;
            }
            if (i == 9) continue;
            this._throwInvalidSpace(i);
        }
        return this._skipWS2();
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipWS2,"    private final int _skipWS2() throws IOException {
        while (this._inputPtr < this._inputEnd || this._loadMore()) {
            int i;
            if ((i = this._inputBuffer[this._inputPtr++] & 0xFF) > 32) {
                if (i == 47) {
                    this._skipComment();
                    continue;
                }
                if (i == 35 && this._skipYAMLComment()) continue;
                return i;
            }
            if (i == 32) continue;
            if (i == 10) {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == 13) {
                this._skipCR();
                continue;
            }
            if (i == 9) continue;
            this._throwInvalidSpace(i);
        }
        throw this._constructError(""Unexpected end-of-input within/between "" + this._parsingContext.typeDesc() + "" entries"");
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipWSOrEnd,"    private final int _skipWSOrEnd() throws IOException {
        int i;
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            return this._eofAsNextChar();
        }
        if ((i = this._inputBuffer[this._inputPtr++] & 0xFF) > 32) {
            if (i == 47 || i == 35) {
                --this._inputPtr;
                return this._skipWSOrEnd2();
            }
            return i;
        }
        if (i != 32) {
            if (i == 10) {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
            } else if (i == 13) {
                this._skipCR();
            } else if (i != 9) {
                this._throwInvalidSpace(i);
            }
        }
        while (this._inputPtr < this._inputEnd) {
            if ((i = this._inputBuffer[this._inputPtr++] & 0xFF) > 32) {
                if (i == 47 || i == 35) {
                    --this._inputPtr;
                    return this._skipWSOrEnd2();
                }
                return i;
            }
            if (i == 32) continue;
            if (i == 10) {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == 13) {
                this._skipCR();
                continue;
            }
            if (i == 9) continue;
            this._throwInvalidSpace(i);
        }
        return this._skipWSOrEnd2();
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipWSOrEnd2,"    private final int _skipWSOrEnd2() throws IOException {
        while (this._inputPtr < this._inputEnd || this._loadMore()) {
            int i;
            if ((i = this._inputBuffer[this._inputPtr++] & 0xFF) > 32) {
                if (i == 47) {
                    this._skipComment();
                    continue;
                }
                if (i == 35 && this._skipYAMLComment()) continue;
                return i;
            }
            if (i == 32) continue;
            if (i == 10) {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == 13) {
                this._skipCR();
                continue;
            }
            if (i == 9) continue;
            this._throwInvalidSpace(i);
        }
        return this._eofAsNextChar();
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColon,"    private final int _skipColon() throws IOException {
        if (this._inputPtr + 4 >= this._inputEnd) {
            return this._skipColon2(false);
        }
        byte i = this._inputBuffer[this._inputPtr];
        if (i == 58) {
            if ((i = this._inputBuffer[++this._inputPtr]) > 32) {
                if (i == 47 || i == 35) {
                    return this._skipColon2(true);
                }
                ++this._inputPtr;
                return i;
            }
            if ((i == 32 || i == 9) && (i = this._inputBuffer[++this._inputPtr]) > 32) {
                if (i == 47 || i == 35) {
                    return this._skipColon2(true);
                }
                ++this._inputPtr;
                return i;
            }
            return this._skipColon2(true);
        }
        if (i == 32 || i == 9) {
            i = this._inputBuffer[++this._inputPtr];
        }
        if (i == 58) {
            if ((i = this._inputBuffer[++this._inputPtr]) > 32) {
                if (i == 47 || i == 35) {
                    return this._skipColon2(true);
                }
                ++this._inputPtr;
                return i;
            }
            if ((i == 32 || i == 9) && (i = this._inputBuffer[++this._inputPtr]) > 32) {
                if (i == 47 || i == 35) {
                    return this._skipColon2(true);
                }
                ++this._inputPtr;
                return i;
            }
            return this._skipColon2(true);
        }
        return this._skipColon2(false);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColon2,"    private final int _skipColon2(boolean gotColon) throws IOException {
        while (this._inputPtr < this._inputEnd || this._loadMore()) {
            int i;
            if ((i = this._inputBuffer[this._inputPtr++] & 0xFF) > 32) {
                if (i == 47) {
                    this._skipComment();
                    continue;
                }
                if (i == 35 && this._skipYAMLComment()) continue;
                if (gotColon) {
                    return i;
                }
                if (i != 58) {
                    this._reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");
                }
                gotColon = true;
                continue;
            }
            if (i == 32) continue;
            if (i == 10) {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == 13) {
                this._skipCR();
                continue;
            }
            if (i == 9) continue;
            this._throwInvalidSpace(i);
        }
        this._reportInvalidEOF("" within/between "" + this._parsingContext.typeDesc() + "" entries"", null);
        return -1;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipComment,"    private final void _skipComment() throws IOException {
        int c;
        if (!this.isEnabled(JsonParser.Feature.ALLOW_COMMENTS)) {
            this._reportUnexpectedChar(47, ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"");
        }
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            this._reportInvalidEOF("" in a comment"", null);
        }
        if ((c = this._inputBuffer[this._inputPtr++] & 0xFF) == 47) {
            this._skipLine();
        } else if (c == 42) {
            this._skipCComment();
        } else {
            this._reportUnexpectedChar(c, ""was expecting either '*' or '/' for a comment"");
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCComment,"    private final void _skipCComment() throws IOException {
        int[] codes = CharTypes.getInputCodeComment();
        block8: while (this._inputPtr < this._inputEnd || this._loadMore()) {
            int i;
            int code;
            if ((code = codes[i = this._inputBuffer[this._inputPtr++] & 0xFF]) == 0) continue;
            switch (code) {
                case 42: {
                    if (this._inputPtr >= this._inputEnd && !this._loadMore()) break block8;
                    if (this._inputBuffer[this._inputPtr] != 47) continue block8;
                    ++this._inputPtr;
                    return;
                }
                case 10: {
                    ++this._currInputRow;
                    this._currInputRowStart = this._inputPtr;
                    break;
                }
                case 13: {
                    this._skipCR();
                    break;
                }
                case 2: {
                    this._skipUtf8_2();
                    break;
                }
                case 3: {
                    this._skipUtf8_3();
                    break;
                }
                case 4: {
                    this._skipUtf8_4(i);
                    break;
                }
                default: {
                    this._reportInvalidChar(i);
                }
            }
        }
        this._reportInvalidEOF("" in a comment"", null);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipYAMLComment,"    private final boolean _skipYAMLComment() throws IOException {
        if (!this.isEnabled(JsonParser.Feature.ALLOW_YAML_COMMENTS)) {
            return false;
        }
        this._skipLine();
        return true;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipLine,"    private final void _skipLine() throws IOException {
        int[] codes = CharTypes.getInputCodeComment();
        block8: while (this._inputPtr < this._inputEnd || this._loadMore()) {
            int i;
            int code;
            if ((code = codes[i = this._inputBuffer[this._inputPtr++] & 0xFF]) == 0) continue;
            switch (code) {
                case 10: {
                    ++this._currInputRow;
                    this._currInputRowStart = this._inputPtr;
                    return;
                }
                case 13: {
                    this._skipCR();
                    return;
                }
                case 42: {
                    continue block8;
                }
                case 2: {
                    this._skipUtf8_2();
                    continue block8;
                }
                case 3: {
                    this._skipUtf8_3();
                    continue block8;
                }
                case 4: {
                    this._skipUtf8_4(i);
                    continue block8;
                }
            }
            if (code >= 0) continue;
            this._reportInvalidChar(i);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeEscaped,"    protected char _decodeEscaped() throws IOException {
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            this._reportInvalidEOF("" in character escape sequence"", JsonToken.VALUE_STRING);
        }
        byte c = this._inputBuffer[this._inputPtr++];
        switch (c) {
            case 98: {
                return '\b';
            }
            case 116: {
                return '\t';
            }
            case 110: {
                return '\n';
            }
            case 102: {
                return '\f';
            }
            case 114: {
                return '\r';
            }
            case 34: 
            case 47: 
            case 92: {
                return (char)c;
            }
            case 117: {
                break;
            }
            default: {
                return this._handleUnrecognizedCharacterEscape((char)this._decodeCharForError(c));
            }
        }
        int value = 0;
        for (int i = 0; i < 4; ++i) {
            byte ch;
            int digit;
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOF("" in character escape sequence"", JsonToken.VALUE_STRING);
            }
            if ((digit = CharTypes.charToHex(ch = this._inputBuffer[this._inputPtr++])) < 0) {
                this._reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
            }
            value = value << 4 | digit;
        }
        return (char)value;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError,"    protected int _decodeCharForError(int firstByte) throws IOException {
        int c = firstByte & 0xFF;
        if (c > 127) {
            int needed;
            if ((c & 0xE0) == 192) {
                c &= 0x1F;
                needed = 1;
            } else if ((c & 0xF0) == 224) {
                c &= 0xF;
                needed = 2;
            } else if ((c & 0xF8) == 240) {
                c &= 7;
                needed = 3;
            } else {
                this._reportInvalidInitial(c & 0xFF);
                needed = 1;
            }
            int d = this.nextByte();
            if ((d & 0xC0) != 128) {
                this._reportInvalidOther(d & 0xFF);
            }
            c = c << 6 | d & 0x3F;
            if (needed > 1) {
                d = this.nextByte();
                if ((d & 0xC0) != 128) {
                    this._reportInvalidOther(d & 0xFF);
                }
                c = c << 6 | d & 0x3F;
                if (needed > 2) {
                    d = this.nextByte();
                    if ((d & 0xC0) != 128) {
                        this._reportInvalidOther(d & 0xFF);
                    }
                    c = c << 6 | d & 0x3F;
                }
            }
        }
        return c;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_2,"    private final int _decodeUtf8_2(int c) throws IOException {
        byte d;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        return (c & 0x1F) << 6 | d & 0x3F;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3,"    private final int _decodeUtf8_3(int c1) throws IOException {
        byte d;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        c1 &= 0xF;
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        int c = c1 << 6 | d & 0x3F;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        c = c << 6 | d & 0x3F;
        return c;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3fast,"    private final int _decodeUtf8_3fast(int c1) throws IOException {
        byte d;
        c1 &= 0xF;
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        int c = c1 << 6 | d & 0x3F;
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        c = c << 6 | d & 0x3F;
        return c;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_4,"    private final int _decodeUtf8_4(int c) throws IOException {
        byte d;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        c = (c & 7) << 6 | d & 0x3F;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        c = c << 6 | d & 0x3F;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        return (c << 6 | d & 0x3F) - 65536;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipUtf8_2,"    private final void _skipUtf8_2() throws IOException {
        byte c;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((c = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(c & 0xFF, this._inputPtr);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipUtf8_3,"    private final void _skipUtf8_3() throws IOException {
        byte c;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((c = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(c & 0xFF, this._inputPtr);
        }
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((c = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(c & 0xFF, this._inputPtr);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipUtf8_4,"    private final void _skipUtf8_4(int c) throws IOException {
        byte d;
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        if (((d = this._inputBuffer[this._inputPtr++]) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF, this._inputPtr);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCR,"    protected final void _skipCR() throws IOException {
        if ((this._inputPtr < this._inputEnd || this._loadMore()) && this._inputBuffer[this._inputPtr] == 10) {
            ++this._inputPtr;
        }
        ++this._currInputRow;
        this._currInputRowStart = this._inputPtr;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextByte,"    private int nextByte() throws IOException {
        if (this._inputPtr >= this._inputEnd) {
            this._loadMoreGuaranteed();
        }
        return this._inputBuffer[this._inputPtr++] & 0xFF;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken,"    protected void _reportInvalidToken(String matchedPart) throws IOException {
        this._reportInvalidToken(matchedPart, ""'null', 'true', 'false' or NaN"");
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken,"    protected void _reportInvalidToken(String matchedPart, String msg) throws IOException {
        byte i;
        char c;
        StringBuilder sb = new StringBuilder(matchedPart);
        int maxTokenLength = 256;
        while (sb.length() < 256 && (this._inputPtr < this._inputEnd || this._loadMore()) && Character.isJavaIdentifierPart(c = (char)this._decodeCharForError(i = this._inputBuffer[this._inputPtr++]))) {
            sb.append(c);
        }
        if (sb.length() == 256) {
            sb.append(""..."");
        }
        this._reportError(""Unrecognized token '"" + sb.toString() + ""': was expecting "" + msg);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar,"    protected void _reportInvalidChar(int c) throws JsonParseException {
        if (c < 32) {
            this._throwInvalidSpace(c);
        }
        this._reportInvalidInitial(c);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial,"    protected void _reportInvalidInitial(int mask) throws JsonParseException {
        this._reportError(""Invalid UTF-8 start byte 0x"" + Integer.toHexString(mask));
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther,"    protected void _reportInvalidOther(int mask) throws JsonParseException {
        this._reportError(""Invalid UTF-8 middle byte 0x"" + Integer.toHexString(mask));
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther,"    protected void _reportInvalidOther(int mask, int ptr) throws JsonParseException {
        this._inputPtr = ptr;
        this._reportInvalidOther(mask);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy,"    public static int[] growArrayBy(int[] arr, int more) {
        if (arr == null) {
            return new int[more];
        }
        return Arrays.copyOf(arr, arr.length + more);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64,"    protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException {
        ByteArrayBuilder builder = this._getByteArrayBuilder();
        while (true) {
            int ch;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((ch = this._inputBuffer[this._inputPtr++] & 0xFF) <= 32) continue;
            int bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (ch == 34) {
                    return builder.toByteArray();
                }
                bits = this._decodeBase64Escape(b64variant, ch, 0);
                if (bits < 0) continue;
            }
            int decodedData = bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++] & 0xFF)) < 0) {
                bits = this._decodeBase64Escape(b64variant, ch, 1);
            }
            decodedData = decodedData << 6 | bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++] & 0xFF)) < 0) {
                if (bits != -2) {
                    if (ch == 34 && !b64variant.usesPadding()) {
                        builder.append(decodedData >>= 4);
                        return builder.toByteArray();
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 2);
                }
                if (bits == -2) {
                    if (this._inputPtr >= this._inputEnd) {
                        this._loadMoreGuaranteed();
                    }
                    if (!b64variant.usesPaddingChar(ch = this._inputBuffer[this._inputPtr++] & 0xFF)) {
                        throw this.reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                    builder.append(decodedData >>= 4);
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++] & 0xFF)) < 0) {
                if (bits != -2) {
                    if (ch == 34 && !b64variant.usesPadding()) {
                        builder.appendTwoBytes(decodedData >>= 2);
                        return builder.toByteArray();
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 3);
                }
                if (bits == -2) {
                    builder.appendTwoBytes(decodedData >>= 2);
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            builder.appendThreeBytes(decodedData);
        }
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation,"    public JsonLocation getTokenLocation() {
        Object src = this._ioContext.getSourceReference();
        if (this._currToken == JsonToken.FIELD_NAME) {
            long total = this._currInputProcessed + (long)(this._nameStartOffset - 1);
            return new JsonLocation(src, total, -1L, this._nameStartRow, this._nameStartCol);
        }
        return new JsonLocation(src, this._tokenInputTotal - 1L, -1L, this._tokenInputRow, this._tokenInputCol);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCurrentLocation,"    public JsonLocation getCurrentLocation() {
        int col = this._inputPtr - this._currInputRowStart + 1;
        return new JsonLocation(this._ioContext.getSourceReference(), this._currInputProcessed + (long)this._inputPtr, -1L, this._currInputRow, col);
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._updateLocation,"    private final void _updateLocation() {
        this._tokenInputRow = this._currInputRow;
        int ptr = this._inputPtr;
        this._tokenInputTotal = this._currInputProcessed + (long)ptr;
        this._tokenInputCol = ptr - this._currInputRowStart;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._updateNameLocation,"    private final void _updateNameLocation() {
        int ptr;
        this._nameStartRow = this._currInputRow;
        this._nameStartOffset = ptr = this._inputPtr;
        this._nameStartCol = ptr - this._currInputRowStart;
    }"
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.pad,"    private static final int pad(int q, int bytes) {
        return bytes == 4 ? q : q | -1 << (bytes << 3);
    }
"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getCodec,"    public ObjectCodec getCodec() {
        return this._objectCodec;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.setCodec,"    public void setCodec(ObjectCodec c) {
        this._objectCodec = c;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.releaseBuffered,"    public int releaseBuffered(OutputStream out) throws IOException {
        return 0;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getInputSource,"    public Object getInputSource() {
        return this._inputData;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._closeInput,"    protected void _closeInput() throws IOException {
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._releaseBuffers,"    protected void _releaseBuffers() throws IOException {
        super._releaseBuffers();
        this._symbols.release();
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getText,"    public String getText() throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                return this._finishAndReturnString();
            }
            return this._textBuffer.contentsAsString();
        }
        return this._getText2(this._currToken);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getText,"    public int getText(Writer writer) throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                this._finishString();
            }
            return this._textBuffer.contentsToWriter(writer);
        }
        if (t == JsonToken.FIELD_NAME) {
            String n = this._parsingContext.getCurrentName();
            writer.write(n);
            return n.length();
        }
        if (t != null) {
            if (t.isNumeric()) {
                return this._textBuffer.contentsToWriter(writer);
            }
            char[] ch = t.asCharArray();
            writer.write(ch);
            return ch.length;
        }
        return 0;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsString,"    public String getValueAsString() throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                return this._finishAndReturnString();
            }
            return this._textBuffer.contentsAsString();
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this.getCurrentName();
        }
        return super.getValueAsString(null);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsString,"    public String getValueAsString(String defValue) throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                return this._finishAndReturnString();
            }
            return this._textBuffer.contentsAsString();
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this.getCurrentName();
        }
        return super.getValueAsString(defValue);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsInt,"    public int getValueAsInt() throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) {
            if ((this._numTypesValid & 1) == 0) {
                if (this._numTypesValid == 0) {
                    return this._parseIntValue();
                }
                if ((this._numTypesValid & 1) == 0) {
                    this.convertNumberToInt();
                }
            }
            return this._numberInt;
        }
        return super.getValueAsInt(0);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsInt,"    public int getValueAsInt(int defValue) throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) {
            if ((this._numTypesValid & 1) == 0) {
                if (this._numTypesValid == 0) {
                    return this._parseIntValue();
                }
                if ((this._numTypesValid & 1) == 0) {
                    this.convertNumberToInt();
                }
            }
            return this._numberInt;
        }
        return super.getValueAsInt(defValue);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._getText2,"    protected final String _getText2(JsonToken t) {
        if (t == null) {
            return null;
        }
        switch (t.id()) {
            case 5: {
                return this._parsingContext.getCurrentName();
            }
            case 6: 
            case 7: 
            case 8: {
                return this._textBuffer.contentsAsString();
            }
        }
        return t.asString();
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTextCharacters,"    public char[] getTextCharacters() throws IOException {
        if (this._currToken != null) {
            switch (this._currToken.id()) {
                case 5: {
                    if (!this._nameCopied) {
                        String name = this._parsingContext.getCurrentName();
                        int nameLen = name.length();
                        if (this._nameCopyBuffer == null) {
                            this._nameCopyBuffer = this._ioContext.allocNameCopyBuffer(nameLen);
                        } else if (this._nameCopyBuffer.length < nameLen) {
                            this._nameCopyBuffer = new char[nameLen];
                        }
                        name.getChars(0, nameLen, this._nameCopyBuffer, 0);
                        this._nameCopied = true;
                    }
                    return this._nameCopyBuffer;
                }
                case 6: {
                    if (this._tokenIncomplete) {
                        this._tokenIncomplete = false;
                        this._finishString();
                    }
                }
                case 7: 
                case 8: {
                    return this._textBuffer.getTextBuffer();
                }
            }
            return this._currToken.asCharArray();
        }
        return null;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTextLength,"    public int getTextLength() throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                this._finishString();
            }
            return this._textBuffer.size();
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this._parsingContext.getCurrentName().length();
        }
        if (this._currToken != null) {
            if (this._currToken.isNumeric()) {
                return this._textBuffer.size();
            }
            return this._currToken.asCharArray().length;
        }
        return 0;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTextOffset,"    public int getTextOffset() throws IOException {
        if (this._currToken != null) {
            switch (this._currToken.id()) {
                case 5: {
                    return 0;
                }
                case 6: {
                    if (this._tokenIncomplete) {
                        this._tokenIncomplete = false;
                        this._finishString();
                    }
                }
                case 7: 
                case 8: {
                    return this._textBuffer.getTextOffset();
                }
            }
        }
        return 0;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getBinaryValue,"    public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
        if (this._currToken != JsonToken.VALUE_STRING && (this._currToken != JsonToken.VALUE_EMBEDDED_OBJECT || this._binaryValue == null)) {
            this._reportError(""Current token ("" + (Object)((Object)this._currToken) + "") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"");
        }
        if (this._tokenIncomplete) {
            try {
                this._binaryValue = this._decodeBase64(b64variant);
            }
            catch (IllegalArgumentException iae) {
                throw this._constructError(""Failed to decode VALUE_STRING as base64 ("" + b64variant + ""): "" + iae.getMessage());
            }
            this._tokenIncomplete = false;
        } else if (this._binaryValue == null) {
            ByteArrayBuilder builder = this._getByteArrayBuilder();
            this._decodeBase64(this.getText(), builder, b64variant);
            this._binaryValue = builder.toByteArray();
        }
        return this._binaryValue;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue,"    public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
        if (!this._tokenIncomplete || this._currToken != JsonToken.VALUE_STRING) {
            byte[] b = this.getBinaryValue(b64variant);
            out.write(b);
            return b.length;
        }
        byte[] buf = this._ioContext.allocBase64Buffer();
        try {
            int n = this._readBinary(b64variant, out, buf);
            return n;
        }
        finally {
            this._ioContext.releaseBase64Buffer(buf);
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._readBinary,"    protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException {
        int outputPtr = 0;
        int outputEnd = buffer.length - 3;
        int outputCount = 0;
        while (true) {
            int ch;
            if ((ch = this._inputData.readUnsignedByte()) <= 32) {
                continue;
            }
            int bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (ch == 34) break;
                bits = this._decodeBase64Escape(b64variant, ch, 0);
                if (bits < 0) continue;
            }
            if (outputPtr > outputEnd) {
                outputCount += outputPtr;
                out.write(buffer, 0, outputPtr);
                outputPtr = 0;
            }
            int decodedData = bits;
            ch = this._inputData.readUnsignedByte();
            bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                bits = this._decodeBase64Escape(b64variant, ch, 1);
            }
            decodedData = decodedData << 6 | bits;
            ch = this._inputData.readUnsignedByte();
            bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (bits != -2) {
                    if (ch == 34 && !b64variant.usesPadding()) {
                        buffer[outputPtr++] = (byte)(decodedData >>= 4);
                        break;
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 2);
                }
                if (bits == -2) {
                    ch = this._inputData.readUnsignedByte();
                    if (!b64variant.usesPaddingChar(ch)) {
                        throw this.reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                    buffer[outputPtr++] = (byte)(decodedData >>= 4);
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            ch = this._inputData.readUnsignedByte();
            bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (bits != -2) {
                    if (ch == 34 && !b64variant.usesPadding()) {
                        buffer[outputPtr++] = (byte)((decodedData >>= 2) >> 8);
                        buffer[outputPtr++] = (byte)decodedData;
                        break;
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 3);
                }
                if (bits == -2) {
                    buffer[outputPtr++] = (byte)((decodedData >>= 2) >> 8);
                    buffer[outputPtr++] = (byte)decodedData;
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            buffer[outputPtr++] = (byte)(decodedData >> 16);
            buffer[outputPtr++] = (byte)(decodedData >> 8);
            buffer[outputPtr++] = (byte)decodedData;
        }
        this._tokenIncomplete = false;
        if (outputPtr > 0) {
            outputCount += outputPtr;
            out.write(buffer, 0, outputPtr);
        }
        return outputCount;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextToken,"    public JsonToken nextToken() throws IOException {
        JsonToken t;
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this._nextAfterName();
        }
        this._numTypesValid = 0;
        if (this._tokenIncomplete) {
            this._skipString();
        }
        int i = this._skipWS();
        this._binaryValue = null;
        this._tokenInputRow = this._currInputRow;
        if (i == 93) {
            if (!this._parsingContext.inArray()) {
                this._reportMismatchedEndMarker(i, '}');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_ARRAY;
            return this._currToken;
        }
        if (i == 125) {
            if (!this._parsingContext.inObject()) {
                this._reportMismatchedEndMarker(i, ']');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_OBJECT;
            return this._currToken;
        }
        if (this._parsingContext.expectComma()) {
            if (i != 44) {
                this._reportUnexpectedChar(i, ""was expecting comma to separate "" + this._parsingContext.typeDesc() + "" entries"");
            }
            i = this._skipWS();
        }
        if (!this._parsingContext.inObject()) {
            return this._nextTokenNotInObject(i);
        }
        String n = this._parseName(i);
        this._parsingContext.setCurrentName(n);
        this._currToken = JsonToken.FIELD_NAME;
        i = this._skipColon();
        if (i == 34) {
            this._tokenIncomplete = true;
            this._nextToken = JsonToken.VALUE_STRING;
            return this._currToken;
        }
        switch (i) {
            case 45: {
                t = this._parseNegNumber();
                break;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                t = this._parsePosNumber(i);
                break;
            }
            case 102: {
                this._matchToken(""false"", 1);
                t = JsonToken.VALUE_FALSE;
                break;
            }
            case 110: {
                this._matchToken(""null"", 1);
                t = JsonToken.VALUE_NULL;
                break;
            }
            case 116: {
                this._matchToken(""true"", 1);
                t = JsonToken.VALUE_TRUE;
                break;
            }
            case 91: {
                t = JsonToken.START_ARRAY;
                break;
            }
            case 123: {
                t = JsonToken.START_OBJECT;
                break;
            }
            default: {
                t = this._handleUnexpectedValue(i);
            }
        }
        this._nextToken = t;
        return this._currToken;
    "
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._nextTokenNotInObject,"    private final JsonToken _nextTokenNotInObject(int i) throws IOException {
        if (i == 34) {
            this._tokenIncomplete = true;
            this._currToken = JsonToken.VALUE_STRING;
            return this._currToken;
        }
        switch (i) {
            case 91: {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
                this._currToken = JsonToken.START_ARRAY;
                return this._currToken;
            }
            case 123: {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
                this._currToken = JsonToken.START_OBJECT;
                return this._currToken;
            }
            case 116: {
                this._matchToken(""true"", 1);
                this._currToken = JsonToken.VALUE_TRUE;
                return this._currToken;
            }
            case 102: {
                this._matchToken(""false"", 1);
                this._currToken = JsonToken.VALUE_FALSE;
                return this._currToken;
            }
            case 110: {
                this._matchToken(""null"", 1);
                this._currToken = JsonToken.VALUE_NULL;
                return this._currToken;
            }
            case 45: {
                this._currToken = this._parseNegNumber();
                return this._currToken;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                this._currToken = this._parsePosNumber(i);
                return this._currToken;
            }
        }
        this._currToken = this._handleUnexpectedValue(i);
        return this._currToken;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._nextAfterName,"    private final JsonToken _nextAfterName() {
        this._nameCopied = false;
        JsonToken t = this._nextToken;
        this._nextToken = null;
        if (t == JsonToken.START_ARRAY) {
            this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
        }
        this._currToken = t;
        return this._currToken;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.finishToken,"    public void finishToken() throws IOException {
        if (this._tokenIncomplete) {
            this._tokenIncomplete = false;
            this._finishString();
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextFieldName,"    public String nextFieldName() throws IOException {
        JsonToken t;
        this._numTypesValid = 0;
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nextAfterName();
            return null;
        }
        if (this._tokenIncomplete) {
            this._skipString();
        }
        int i = this._skipWS();
        this._binaryValue = null;
        this._tokenInputRow = this._currInputRow;
        if (i == 93) {
            if (!this._parsingContext.inArray()) {
                this._reportMismatchedEndMarker(i, '}');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_ARRAY;
            return null;
        }
        if (i == 125) {
            if (!this._parsingContext.inObject()) {
                this._reportMismatchedEndMarker(i, ']');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_OBJECT;
            return null;
        }
        if (this._parsingContext.expectComma()) {
            if (i != 44) {
                this._reportUnexpectedChar(i, ""was expecting comma to separate "" + this._parsingContext.typeDesc() + "" entries"");
            }
            i = this._skipWS();
        }
        if (!this._parsingContext.inObject()) {
            this._nextTokenNotInObject(i);
            return null;
        }
        String nameStr = this._parseName(i);
        this._parsingContext.setCurrentName(nameStr);
        this._currToken = JsonToken.FIELD_NAME;
        i = this._skipColon();
        if (i == 34) {
            this._tokenIncomplete = true;
            this._nextToken = JsonToken.VALUE_STRING;
            return nameStr;
        }
        switch (i) {
            case 45: {
                t = this._parseNegNumber();
                break;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                t = this._parsePosNumber(i);
                break;
            }
            case 102: {
                this._matchToken(""false"", 1);
                t = JsonToken.VALUE_FALSE;
                break;
            }
            case 110: {
                this._matchToken(""null"", 1);
                t = JsonToken.VALUE_NULL;
                break;
            }
            case 116: {
                this._matchToken(""true"", 1);
                t = JsonToken.VALUE_TRUE;
                break;
            }
            case 91: {
                t = JsonToken.START_ARRAY;
                break;
            }
            case 123: {
                t = JsonToken.START_OBJECT;
                break;
            }
            default: {
                t = this._handleUnexpectedValue(i);
            }
        }
        this._nextToken = t;
        return nameStr;
    "
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextTextValue,"    public String nextTextValue() throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_STRING) {
                if (this._tokenIncomplete) {
                    this._tokenIncomplete = false;
                    return this._finishAndReturnString();
                }
                return this._textBuffer.contentsAsString();
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return null;
        }
        return this.nextToken() == JsonToken.VALUE_STRING ? this.getText() : null;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextIntValue,"    public int nextIntValue(int defaultValue) throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_NUMBER_INT) {
                return this.getIntValue();
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return defaultValue;
        }
        return this.nextToken() == JsonToken.VALUE_NUMBER_INT ? this.getIntValue() : defaultValue;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextLongValue,"    public long nextLongValue(long defaultValue) throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_NUMBER_INT) {
                return this.getLongValue();
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return defaultValue;
        }
        return this.nextToken() == JsonToken.VALUE_NUMBER_INT ? this.getLongValue() : defaultValue;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextBooleanValue,"    public Boolean nextBooleanValue() throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_TRUE) {
                return Boolean.TRUE;
            }
            if (t == JsonToken.VALUE_FALSE) {
                return Boolean.FALSE;
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return null;
        }
        JsonToken t = this.nextToken();
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        return null;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parsePosNumber,"    protected JsonToken _parsePosNumber(int c) throws IOException {
        int outPtr;
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        if (c == 48) {
            c = this._handleLeadingZeroes();
            if (c <= 57 && c >= 48) {
                outPtr = 0;
            } else {
                outBuf[0] = 48;
                outPtr = 1;
            }
        } else {
            outBuf[0] = (char)c;
            c = this._inputData.readUnsignedByte();
            outPtr = 1;
        }
        int intLen = outPtr;
        while (c <= 57 && c >= 48) {
            ++intLen;
            outBuf[outPtr++] = (char)c;
            c = this._inputData.readUnsignedByte();
        }
        if (c == 46 || c == 101 || c == 69) {
            return this._parseFloat(outBuf, outPtr, c, false, intLen);
        }
        this._textBuffer.setCurrentLength(outPtr);
        if (this._parsingContext.inRoot()) {
            this._verifyRootSpace();
        } else {
            this._nextByte = c;
        }
        return this.resetInt(false, intLen);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseNegNumber,"* Enabled force condition propagation
* Lifted jumps to return sites
*/
    protected JsonToken _parseNegNumber() throws IOException {
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int outPtr = 0;
        outBuf[outPtr++] = 45;
        int c = this._inputData.readUnsignedByte();
        outBuf[outPtr++] = (char)c;
        if (c <= 48) {
            if (c != 48) return this._handleInvalidNumberStart(c, true);
            c = this._handleLeadingZeroes();
        } else {
            if (c > 57) {
                return this._handleInvalidNumberStart(c, true);
            }
            c = this._inputData.readUnsignedByte();
        }
        int intLen = 1;
        while (c <= 57 && c >= 48) {
            ++intLen;
            outBuf[outPtr++] = (char)c;
            c = this._inputData.readUnsignedByte();
        }
        if (c == 46 || c == 101 || c == 69) {
            return this._parseFloat(outBuf, outPtr, c, true, intLen);
        }
        this._textBuffer.setCurrentLength(outPtr);
        this._nextByte = c;
        if (!this._parsingContext.inRoot()) return this.resetInt(true, intLen);
        this._verifyRootSpace();
        return this.resetInt(true, intLen);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleLeadingZeroes,"    private final int _handleLeadingZeroes() throws IOException {
        int ch = this._inputData.readUnsignedByte();
        if (ch < 48 || ch > 57) {
            return ch;
        }
        if (!this.isEnabled(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {
            this.reportInvalidNumber(""Leading zeroes not allowed"");
        }
        while (ch == 48) {
            ch = this._inputData.readUnsignedByte();
        }
        return ch;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat,"    private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c, boolean negative, int integerPartLength) throws IOException {
        int fractLen = 0;
        if (c == 46) {
            outBuf[outPtr++] = (char)c;
            while ((c = this._inputData.readUnsignedByte()) >= 48 && c <= 57) {
                ++fractLen;
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = (char)c;
            }
            if (fractLen == 0) {
                this.reportUnexpectedNumberChar(c, ""Decimal point not followed by a digit"");
            }
        }
        int expLen = 0;
        if (c == 101 || c == 69) {
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char)c;
            c = this._inputData.readUnsignedByte();
            if (c == 45 || c == 43) {
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = (char)c;
                c = this._inputData.readUnsignedByte();
            }
            while (c <= 57 && c >= 48) {
                ++expLen;
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = (char)c;
                c = this._inputData.readUnsignedByte();
            }
            if (expLen == 0) {
                this.reportUnexpectedNumberChar(c, ""Exponent indicator not followed by a digit"");
            }
        }
        this._nextByte = c;
        if (this._parsingContext.inRoot()) {
            this._verifyRootSpace();
        }
        this._textBuffer.setCurrentLength(outPtr);
        return this.resetFloat(negative, integerPartLength, fractLen, expLen);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._verifyRootSpace,"    private final void _verifyRootSpace() throws IOException {
        int ch = this._nextByte;
        if (ch <= 32) {
            this._nextByte = -1;
            if (ch == 13 || ch == 10) {
                ++this._currInputRow;
            }
            return;
        }
        this._reportMissingRootWS(ch);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseName,"    protected final String _parseName(int i) throws IOException {
        if (i != 34) {
            return this._handleOddName(i);
        }
        int[] codes = _icLatin1;
        int q = this._inputData.readUnsignedByte();
        if (codes[q] == 0) {
            i = this._inputData.readUnsignedByte();
            if (codes[i] == 0) {
                q = q << 8 | i;
                i = this._inputData.readUnsignedByte();
                if (codes[i] == 0) {
                    q = q << 8 | i;
                    i = this._inputData.readUnsignedByte();
                    if (codes[i] == 0) {
                        q = q << 8 | i;
                        i = this._inputData.readUnsignedByte();
                        if (codes[i] == 0) {
                            this._quad1 = q;
                            return this._parseMediumName(i);
                        }
                        if (i == 34) {
                            return this.findName(q, 4);
                        }
                        return this.parseName(q, i, 4);
                    }
                    if (i == 34) {
                        return this.findName(q, 3);
                    }
                    return this.parseName(q, i, 3);
                }
                if (i == 34) {
                    return this.findName(q, 2);
                }
                return this.parseName(q, i, 2);
            }
            if (i == 34) {
                return this.findName(q, 1);
            }
            return this.parseName(q, i, 1);
        }
        if (q == 34) {
            return """";
        }
        return this.parseName(0, q, 0);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName,"    private final String _parseMediumName(int q2) throws IOException {
        int[] codes = _icLatin1;
        int i = this._inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, 1);
            }
            return this.parseName(this._quad1, q2, i, 1);
        }
        q2 = q2 << 8 | i;
        i = this._inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, 2);
            }
            return this.parseName(this._quad1, q2, i, 2);
        }
        q2 = q2 << 8 | i;
        i = this._inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, 3);
            }
            return this.parseName(this._quad1, q2, i, 3);
        }
        q2 = q2 << 8 | i;
        i = this._inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, 4);
            }
            return this.parseName(this._quad1, q2, i, 4);
        }
        return this._parseMediumName2(i, q2);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName2,"    private final String _parseMediumName2(int q3, int q2) throws IOException {
        int[] codes = _icLatin1;
        int i = this._inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, q3, 1);
            }
            return this.parseName(this._quad1, q2, q3, i, 1);
        }
        q3 = q3 << 8 | i;
        i = this._inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, q3, 2);
            }
            return this.parseName(this._quad1, q2, q3, i, 2);
        }
        q3 = q3 << 8 | i;
        i = this._inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, q3, 3);
            }
            return this.parseName(this._quad1, q2, q3, i, 3);
        }
        q3 = q3 << 8 | i;
        i = this._inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == 34) {
                return this.findName(this._quad1, q2, q3, 4);
            }
            return this.parseName(this._quad1, q2, q3, i, 4);
        }
        return this._parseLongName(i, q2, q3);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseLongName,"    private final String _parseLongName(int q, int q2, int q3) throws IOException {
        this._quadBuffer[0] = this._quad1;
        this._quadBuffer[1] = q2;
        this._quadBuffer[2] = q3;
        int[] codes = _icLatin1;
        int qlen = 3;
        while (true) {
            int i;
            if (codes[i = this._inputData.readUnsignedByte()] != 0) {
                if (i == 34) {
                    return this.findName(this._quadBuffer, qlen, q, 1);
                }
                return this.parseEscapedName(this._quadBuffer, qlen, q, i, 1);
            }
            q = q << 8 | i;
            i = this._inputData.readUnsignedByte();
            if (codes[i] != 0) {
                if (i == 34) {
                    return this.findName(this._quadBuffer, qlen, q, 2);
                }
                return this.parseEscapedName(this._quadBuffer, qlen, q, i, 2);
            }
            q = q << 8 | i;
            i = this._inputData.readUnsignedByte();
            if (codes[i] != 0) {
                if (i == 34) {
                    return this.findName(this._quadBuffer, qlen, q, 3);
                }
                return this.parseEscapedName(this._quadBuffer, qlen, q, i, 3);
            }
            q = q << 8 | i;
            i = this._inputData.readUnsignedByte();
            if (codes[i] != 0) {
                if (i == 34) {
                    return this.findName(this._quadBuffer, qlen, q, 4);
                }
                return this.parseEscapedName(this._quadBuffer, qlen, q, i, 4);
            }
            if (qlen >= this._quadBuffer.length) {
                this._quadBuffer = UTF8DataInputJsonParser._growArrayBy(this._quadBuffer, qlen);
            }
            this._quadBuffer[qlen++] = q;
            q = i;
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName,"    private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException {
        return this.parseEscapedName(this._quadBuffer, 0, q1, ch, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName,"    private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException {
        this._quadBuffer[0] = q1;
        return this.parseEscapedName(this._quadBuffer, 1, q2, ch, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName,"    private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException {
        this._quadBuffer[0] = q1;
        this._quadBuffer[1] = q2;
        return this.parseEscapedName(this._quadBuffer, 2, q3, ch, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName,"    protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes) throws IOException {
        String name;
        int[] codes = _icLatin1;
        while (true) {
            if (codes[ch] != 0) {
                if (ch == 34) break;
                if (ch != 92) {
                    this._throwUnquotedSpace(ch, ""name"");
                } else {
                    ch = this._decodeEscaped();
                }
                if (ch > 127) {
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
                            this._quadBuffer = quads;
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    if (ch < 2048) {
                        currQuad = currQuad << 8 | (0xC0 | ch >> 6);
                        ++currQuadBytes;
                    } else {
                        currQuad = currQuad << 8 | (0xE0 | ch >> 12);
                        if (++currQuadBytes >= 4) {
                            if (qlen >= quads.length) {
                                quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
                                this._quadBuffer = quads;
                            }
                            quads[qlen++] = currQuad;
                            currQuad = 0;
                            currQuadBytes = 0;
                        }
                        currQuad = currQuad << 8 | (0x80 | ch >> 6 & 0x3F);
                        ++currQuadBytes;
                    }
                    ch = 0x80 | ch & 0x3F;
                }
            }
            if (currQuadBytes < 4) {
                ++currQuadBytes;
                currQuad = currQuad << 8 | ch;
            } else {
                if (qlen >= quads.length) {
                    quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
                    this._quadBuffer = quads;
                }
                quads[qlen++] = currQuad;
                currQuad = ch;
                currQuadBytes = 1;
            }
            ch = this._inputData.readUnsignedByte();
        }
        if (currQuadBytes > 0) {
            if (qlen >= quads.length) {
                quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
                this._quadBuffer = quads;
            }
            quads[qlen++] = UTF8DataInputJsonParser.pad(currQuad, currQuadBytes);
        }
        if ((name = this._symbols.findName(quads, qlen)) == null) {
            name = this.addName(quads, qlen, currQuadBytes);
        }
        return name;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleOddName,"    protected String _handleOddName(int ch) throws IOException {
        String name;
        int[] codes;
        if (ch == 39 && this.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES)) {
            return this._parseAposName();
        }
        if (!this.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
            char c = (char)this._decodeCharForError(ch);
            this._reportUnexpectedChar(c, ""was expecting double-quote to start field name"");
        }
        if ((codes = CharTypes.getInputCodeUtf8JsNames())[ch] != 0) {
            this._reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
        }
        int[] quads = this._quadBuffer;
        int qlen = 0;
        int currQuad = 0;
        int currQuadBytes = 0;
        do {
            if (currQuadBytes < 4) {
                ++currQuadBytes;
                currQuad = currQuad << 8 | ch;
                continue;
            }
            if (qlen >= quads.length) {
                this._quadBuffer = quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        } while (codes[ch = this._inputData.readUnsignedByte()] == 0);
        this._nextByte = ch;
        if (currQuadBytes > 0) {
            if (qlen >= quads.length) {
                this._quadBuffer = quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
        }
        if ((name = this._symbols.findName(quads, qlen)) == null) {
            name = this.addName(quads, qlen, currQuadBytes);
        }
        return name;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseAposName,"    protected String _parseAposName() throws IOException {
        String name;
        int ch = this._inputData.readUnsignedByte();
        if (ch == 39) {
            return """";
        }
        int[] quads = this._quadBuffer;
        int qlen = 0;
        int currQuad = 0;
        int currQuadBytes = 0;
        int[] codes = _icLatin1;
        while (ch != 39) {
            if (ch != 34 && codes[ch] != 0) {
                if (ch != 92) {
                    this._throwUnquotedSpace(ch, ""name"");
                } else {
                    ch = this._decodeEscaped();
                }
                if (ch > 127) {
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            this._quadBuffer = quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    if (ch < 2048) {
                        currQuad = currQuad << 8 | (0xC0 | ch >> 6);
                        ++currQuadBytes;
                    } else {
                        currQuad = currQuad << 8 | (0xE0 | ch >> 12);
                        if (++currQuadBytes >= 4) {
                            if (qlen >= quads.length) {
                                this._quadBuffer = quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
                            }
                            quads[qlen++] = currQuad;
                            currQuad = 0;
                            currQuadBytes = 0;
                        }
                        currQuad = currQuad << 8 | (0x80 | ch >> 6 & 0x3F);
                        ++currQuadBytes;
                    }
                    ch = 0x80 | ch & 0x3F;
                }
            }
            if (currQuadBytes < 4) {
                ++currQuadBytes;
                currQuad = currQuad << 8 | ch;
            } else {
                if (qlen >= quads.length) {
                    this._quadBuffer = quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
                }
                quads[qlen++] = currQuad;
                currQuad = ch;
                currQuadBytes = 1;
            }
            ch = this._inputData.readUnsignedByte();
        }
        if (currQuadBytes > 0) {
            if (qlen >= quads.length) {
                this._quadBuffer = quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
            }
            quads[qlen++] = UTF8DataInputJsonParser.pad(currQuad, currQuadBytes);
        }
        if ((name = this._symbols.findName(quads, qlen)) == null) {
            name = this.addName(quads, qlen, currQuadBytes);
        }
        return name;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName,"    private final String findName(int q1, int lastQuadBytes) throws JsonParseException {
        String name = this._symbols.findName(q1 = UTF8DataInputJsonParser.pad(q1, lastQuadBytes));
        if (name != null) {
            return name;
        }
        this._quadBuffer[0] = q1;
        return this.addName(this._quadBuffer, 1, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName,"    private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException {
        String name = this._symbols.findName(q1, q2 = UTF8DataInputJsonParser.pad(q2, lastQuadBytes));
        if (name != null) {
            return name;
        }
        this._quadBuffer[0] = q1;
        this._quadBuffer[1] = q2;
        return this.addName(this._quadBuffer, 2, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName,"    private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException {
        String name = this._symbols.findName(q1, q2, q3 = UTF8DataInputJsonParser.pad(q3, lastQuadBytes));
        if (name != null) {
            return name;
        }
        int[] quads = this._quadBuffer;
        quads[0] = q1;
        quads[1] = q2;
        quads[2] = UTF8DataInputJsonParser.pad(q3, lastQuadBytes);
        return this.addName(quads, 3, lastQuadBytes);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName,"    private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException {
        if (qlen >= quads.length) {
            quads = UTF8DataInputJsonParser._growArrayBy(quads, quads.length);
            this._quadBuffer = quads;
        }
        quads[qlen++] = UTF8DataInputJsonParser.pad(lastQuad, lastQuadBytes);
        String name = this._symbols.findName(quads, qlen);
        if (name == null) {
            return this.addName(quads, qlen, lastQuadBytes);
        }
        return name;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.addName,"    private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException {
        int lastQuad;
        int byteLen = (qlen << 2) - 4 + lastQuadBytes;
        if (lastQuadBytes < 4) {
            lastQuad = quads[qlen - 1];
            quads[qlen - 1] = lastQuad << (4 - lastQuadBytes << 3);
        } else {
            lastQuad = 0;
        }
        char[] cbuf = this._textBuffer.emptyAndGetCurrentSegment();
        int cix = 0;
        int ix = 0;
        while (ix < byteLen) {
            int ch = quads[ix >> 2];
            int byteIx = ix & 3;
            ch = ch >> (3 - byteIx << 3) & 0xFF;
            ++ix;
            if (ch > 127) {
                int needed;
                if ((ch & 0xE0) == 192) {
                    ch &= 0x1F;
                    needed = 1;
                } else if ((ch & 0xF0) == 224) {
                    ch &= 0xF;
                    needed = 2;
                } else if ((ch & 0xF8) == 240) {
                    ch &= 7;
                    needed = 3;
                } else {
                    this._reportInvalidInitial(ch);
                    ch = 1;
                    needed = 1;
                }
                if (ix + needed > byteLen) {
                    this._reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
                }
                int ch2 = quads[ix >> 2];
                byteIx = ix & 3;
                ++ix;
                if (((ch2 >>= 3 - byteIx << 3) & 0xC0) != 128) {
                    this._reportInvalidOther(ch2);
                }
                ch = ch << 6 | ch2 & 0x3F;
                if (needed > 1) {
                    ch2 = quads[ix >> 2];
                    byteIx = ix & 3;
                    ++ix;
                    if (((ch2 >>= 3 - byteIx << 3) & 0xC0) != 128) {
                        this._reportInvalidOther(ch2);
                    }
                    ch = ch << 6 | ch2 & 0x3F;
                    if (needed > 2) {
                        ch2 = quads[ix >> 2];
                        byteIx = ix & 3;
                        ++ix;
                        if (((ch2 >>= 3 - byteIx << 3) & 0xC0) != 128) {
                            this._reportInvalidOther(ch2 & 0xFF);
                        }
                        ch = ch << 6 | ch2 & 0x3F;
                    }
                }
                if (needed > 2) {
                    ch -= 65536;
                    if (cix >= cbuf.length) {
                        cbuf = this._textBuffer.expandCurrentSegment();
                    }
                    cbuf[cix++] = (char)(55296 + (ch >> 10));
                    ch = 0xDC00 | ch & 0x3FF;
                }
            }
            if (cix >= cbuf.length) {
                cbuf = this._textBuffer.expandCurrentSegment();
            }
            cbuf[cix++] = (char)ch;
        }
        String baseName = new String(cbuf, 0, cix);
        if (lastQuadBytes < 4) {
            quads[qlen - 1] = lastQuad;
        }
        return this._symbols.addName(baseName, quads, qlen);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString,"    protected void _finishString() throws IOException {
        int outPtr = 0;
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int[] codes = _icUTF8;
        int outEnd = outBuf.length;
        do {
            int c;
            if (codes[c = this._inputData.readUnsignedByte()] != 0) {
                if (c == 34) {
                    this._textBuffer.setCurrentLength(outPtr);
                    return;
                }
                this._finishString2(outBuf, outPtr, c);
                return;
            }
            outBuf[outPtr++] = (char)c;
        } while (outPtr < outEnd);
        this._finishString2(outBuf, outPtr, this._inputData.readUnsignedByte());
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishAndReturnString,"    private String _finishAndReturnString() throws IOException {
        int outPtr = 0;
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int[] codes = _icUTF8;
        int outEnd = outBuf.length;
        do {
            int c;
            if (codes[c = this._inputData.readUnsignedByte()] != 0) {
                if (c == 34) {
                    return this._textBuffer.setCurrentAndReturn(outPtr);
                }
                this._finishString2(outBuf, outPtr, c);
                return this._textBuffer.contentsAsString();
            }
            outBuf[outPtr++] = (char)c;
        } while (outPtr < outEnd);
        this._finishString2(outBuf, outPtr, this._inputData.readUnsignedByte());
        return this._textBuffer.contentsAsString();
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString2,"    private final void _finishString2(char[] outBuf, int outPtr, int c) throws IOException {
        int[] codes = _icUTF8;
        int outEnd = outBuf.length;
        while (true) {
            if (codes[c] == 0) {
                if (outPtr >= outEnd) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                    outEnd = outBuf.length;
                }
                outBuf[outPtr++] = (char)c;
                c = this._inputData.readUnsignedByte();
                continue;
            }
            if (c == 34) break;
            switch (codes[c]) {
                case 1: {
                    c = this._decodeEscaped();
                    break;
                }
                case 2: {
                    c = this._decodeUtf8_2(c);
                    break;
                }
                case 3: {
                    c = this._decodeUtf8_3(c);
                    break;
                }
                case 4: {
                    c = this._decodeUtf8_4(c);
                    outBuf[outPtr++] = (char)(0xD800 | c >> 10);
                    if (outPtr >= outBuf.length) {
                        outBuf = this._textBuffer.finishCurrentSegment();
                        outPtr = 0;
                        outEnd = outBuf.length;
                    }
                    c = 0xDC00 | c & 0x3FF;
                    break;
                }
                default: {
                    if (c < 32) {
                        this._throwUnquotedSpace(c, ""string value"");
                        break;
                    }
                    this._reportInvalidChar(c);
                }
            }
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
                outEnd = outBuf.length;
            }
            outBuf[outPtr++] = (char)c;
            c = this._inputData.readUnsignedByte();
        }
        this._textBuffer.setCurrentLength(outPtr);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipString,"    protected void _skipString() throws IOException {
        this._tokenIncomplete = false;
        int[] codes = _icUTF8;
        block6: while (true) {
            int c;
            if (codes[c = this._inputData.readUnsignedByte()] == 0) {
                continue;
            }
            if (c == 34) break;
            switch (codes[c]) {
                case 1: {
                    this._decodeEscaped();
                    continue block6;
                }
                case 2: {
                    this._skipUtf8_2();
                    continue block6;
                }
                case 3: {
                    this._skipUtf8_3();
                    continue block6;
                }
                case 4: {
                    this._skipUtf8_4();
                    continue block6;
                }
            }
            if (c < 32) {
                this._throwUnquotedSpace(c, ""string value"");
                continue;
            }
            this._reportInvalidChar(c);
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleUnexpectedValue,"    protected JsonToken _handleUnexpectedValue(int c) throws IOException {
        switch (c) {
            case 93: {
                if (!this._parsingContext.inArray()) break;
            }
            case 44: {
                if (this.isEnabled(JsonParser.Feature.ALLOW_MISSING_VALUES)) {
                    this._nextByte = c;
                    return JsonToken.VALUE_NULL;
                }
            }
            case 125: {
                this._reportUnexpectedChar(c, ""expected a value"");
            }
            case 39: {
                if (!this.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES)) break;
                return this._handleApos();
            }
            case 78: {
                this._matchToken(""NaN"", 1);
                if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                    return this.resetAsNaN(""NaN"", Double.NaN);
                }
                this._reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
                break;
            }
            case 73: {
                this._matchToken(""Infinity"", 1);
                if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                    return this.resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
                }
                this._reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
                break;
            }
            case 43: {
                return this._handleInvalidNumberStart(this._inputData.readUnsignedByte(), false);
            }
        }
        if (Character.isJavaIdentifierStart(c)) {
            this._reportInvalidToken(c, """" + (char)c, ""('true', 'false' or 'null')"");
        }
        this._reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
        return null;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleApos,"    protected JsonToken _handleApos() throws IOException {
        int c = 0;
        int outPtr = 0;
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int[] codes = _icUTF8;
        block6: while (true) {
            int outEnd = outBuf.length;
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
                outEnd = outBuf.length;
            }
            while ((c = this._inputData.readUnsignedByte()) != 39) {
                if (codes[c] == 0) {
                    outBuf[outPtr++] = (char)c;
                    if (outPtr < outEnd) continue;
                    continue block6;
                }
                switch (codes[c]) {
                    case 1: {
                        c = this._decodeEscaped();
                        break;
                    }
                    case 2: {
                        c = this._decodeUtf8_2(c);
                        break;
                    }
                    case 3: {
                        c = this._decodeUtf8_3(c);
                        break;
                    }
                    case 4: {
                        c = this._decodeUtf8_4(c);
                        outBuf[outPtr++] = (char)(0xD800 | c >> 10);
                        if (outPtr >= outBuf.length) {
                            outBuf = this._textBuffer.finishCurrentSegment();
                            outPtr = 0;
                        }
                        c = 0xDC00 | c & 0x3FF;
                        break;
                    }
                    default: {
                        if (c < 32) {
                            this._throwUnquotedSpace(c, ""string value"");
                        }
                        this._reportInvalidChar(c);
                    }
                }
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = (char)c;
                continue block6;
            }
            break;
        }
        this._textBuffer.setCurrentLength(outPtr);
        return JsonToken.VALUE_STRING;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart,"    protected JsonToken _handleInvalidNumberStart(int ch, boolean neg) throws IOException {
        while (ch == 73) {
            String match;
            ch = this._inputData.readUnsignedByte();
            if (ch == 78) {
                match = neg ? ""-INF"" : ""+INF"";
            } else {
                if (ch != 110) break;
                match = neg ? ""-Infinity"" : ""+Infinity"";
            }
            this._matchToken(match, 3);
            if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                return this.resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
            }
            this._reportError(""Non-standard token '"" + match + ""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
        }
        this.reportUnexpectedNumberChar(ch, ""expected digit (0-9) to follow minus sign, for valid numeric value"");
        return null;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._matchToken,"    protected final void _matchToken(String matchStr, int i) throws IOException {
        int ch;
        int len = matchStr.length();
        do {
            if ((ch = this._inputData.readUnsignedByte()) == matchStr.charAt(i)) continue;
            this._reportInvalidToken(ch, matchStr.substring(0, i));
        } while (++i < len);
        ch = this._inputData.readUnsignedByte();
        if (ch >= 48 && ch != 93 && ch != 125) {
            this._checkMatchEnd(matchStr, i, ch);
        }
        this._nextByte = ch;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._checkMatchEnd,"    private final void _checkMatchEnd(String matchStr, int i, int ch) throws IOException {
        char c = (char)this._decodeCharForError(ch);
        if (Character.isJavaIdentifierPart(c)) {
            this._reportInvalidToken(c, matchStr.substring(0, i));
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipWS,"    private final int _skipWS() throws IOException {
        int i = this._nextByte;
        if (i < 0) {
            i = this._inputData.readUnsignedByte();
        } else {
            this._nextByte = -1;
        }
        while (true) {
            if (i > 32) {
                if (i == 47 || i == 35) {
                    return this._skipWSComment(i);
                }
                return i;
            }
            if (i == 13 || i == 10) {
                ++this._currInputRow;
            }
            i = this._inputData.readUnsignedByte();
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipWSComment,"* Enabled force condition propagation
* Lifted jumps to return sites
*/
    private final int _skipWSComment(int i) throws IOException {
        while (true) {
            if (i > 32) {
                if (i == 47) {
                    this._skipComment();
                } else {
                    if (i != 35) return i;
                    if (!this._skipYAMLComment()) {
                        return i;
                    }
                }
            } else if (i == 13 || i == 10) {
                ++this._currInputRow;
            }
            i = this._inputData.readUnsignedByte();
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipColon,"    private final int _skipColon() throws IOException {
        int i = this._nextByte;
        if (i < 0) {
            i = this._inputData.readUnsignedByte();
        } else {
            this._nextByte = -1;
        }
        if (i == 58) {
            i = this._inputData.readUnsignedByte();
            if (i > 32) {
                if (i == 47 || i == 35) {
                    return this._skipColon2(i, true);
                }
                return i;
            }
            if ((i == 32 || i == 9) && (i = this._inputData.readUnsignedByte()) > 32) {
                if (i == 47 || i == 35) {
                    return this._skipColon2(i, true);
                }
                return i;
            }
            return this._skipColon2(i, true);
        }
        if (i == 32 || i == 9) {
            i = this._inputData.readUnsignedByte();
        }
        if (i == 58) {
            i = this._inputData.readUnsignedByte();
            if (i > 32) {
                if (i == 47 || i == 35) {
                    return this._skipColon2(i, true);
                }
                return i;
            }
            if ((i == 32 || i == 9) && (i = this._inputData.readUnsignedByte()) > 32) {
                if (i == 47 || i == 35) {
                    return this._skipColon2(i, true);
                }
                return i;
            }
            return this._skipColon2(i, true);
        }
        return this._skipColon2(i, false);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipColon2,"    private final int _skipColon2(int i, boolean gotColon) throws IOException {
        while (true) {
            if (i > 32) {
                if (i == 47) {
                    this._skipComment();
                } else if (i != 35 || !this._skipYAMLComment()) {
                    if (gotColon) {
                        return i;
                    }
                    if (i != 58) {
                        this._reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");
                    }
                    gotColon = true;
                }
            } else if (i == 13 || i == 10) {
                ++this._currInputRow;
            }
            i = this._inputData.readUnsignedByte();
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipComment,"    private final void _skipComment() throws IOException {
        int c;
        if (!this.isEnabled(JsonParser.Feature.ALLOW_COMMENTS)) {
            this._reportUnexpectedChar(47, ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"");
        }
        if ((c = this._inputData.readUnsignedByte()) == 47) {
            this._skipLine();
        } else if (c == 42) {
            this._skipCComment();
        } else {
            this._reportUnexpectedChar(c, ""was expecting either '*' or '/' for a comment"");
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipCComment,"    private final void _skipCComment() throws IOException {
        int[] codes = CharTypes.getInputCodeComment();
        int i = this._inputData.readUnsignedByte();
        block7: while (true) {
            int code;
            if ((code = codes[i]) != 0) {
                switch (code) {
                    case 42: {
                        i = this._inputData.readUnsignedByte();
                        if (i != 47) continue block7;
                        return;
                    }
                    case 10: 
                    case 13: {
                        ++this._currInputRow;
                        break;
                    }
                    case 2: {
                        this._skipUtf8_2();
                        break;
                    }
                    case 3: {
                        this._skipUtf8_3();
                        break;
                    }
                    case 4: {
                        this._skipUtf8_4();
                        break;
                    }
                    default: {
                        this._reportInvalidChar(i);
                    }
                }
            }
            i = this._inputData.readUnsignedByte();
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipYAMLComment,"    private final boolean _skipYAMLComment() throws IOException {
        if (!this.isEnabled(JsonParser.Feature.ALLOW_YAML_COMMENTS)) {
            return false;
        }
        this._skipLine();
        return true;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipLine,"    private final void _skipLine() throws IOException {
        int[] codes = CharTypes.getInputCodeComment();
        block7: while (true) {
            int i;
            int code;
            if ((code = codes[i = this._inputData.readUnsignedByte()]) == 0) {
                continue;
            }
            switch (code) {
                case 10: 
                case 13: {
                    ++this._currInputRow;
                    return;
                }
                case 42: {
                    continue block7;
                }
                case 2: {
                    this._skipUtf8_2();
                    continue block7;
                }
                case 3: {
                    this._skipUtf8_3();
                    continue block7;
                }
                case 4: {
                    this._skipUtf8_4();
                    continue block7;
                }
            }
            if (code >= 0) continue;
            this._reportInvalidChar(i);
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeEscaped,"    protected char _decodeEscaped() throws IOException {
        int c = this._inputData.readUnsignedByte();
        switch (c) {
            case 98: {
                return '\b';
            }
            case 116: {
                return '\t';
            }
            case 110: {
                return '\n';
            }
            case 102: {
                return '\f';
            }
            case 114: {
                return '\r';
            }
            case 34: 
            case 47: 
            case 92: {
                return (char)c;
            }
            case 117: {
                break;
            }
            default: {
                return this._handleUnrecognizedCharacterEscape((char)this._decodeCharForError(c));
            }
        }
        int value = 0;
        for (int i = 0; i < 4; ++i) {
            int ch = this._inputData.readUnsignedByte();
            int digit = CharTypes.charToHex(ch);
            if (digit < 0) {
                this._reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
            }
            value = value << 4 | digit;
        }
        return (char)value;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeCharForError,"    protected int _decodeCharForError(int firstByte) throws IOException {
        int c = firstByte & 0xFF;
        if (c > 127) {
            int needed;
            if ((c & 0xE0) == 192) {
                c &= 0x1F;
                needed = 1;
            } else if ((c & 0xF0) == 224) {
                c &= 0xF;
                needed = 2;
            } else if ((c & 0xF8) == 240) {
                c &= 7;
                needed = 3;
            } else {
                this._reportInvalidInitial(c & 0xFF);
                needed = 1;
            }
            int d = this._inputData.readUnsignedByte();
            if ((d & 0xC0) != 128) {
                this._reportInvalidOther(d & 0xFF);
            }
            c = c << 6 | d & 0x3F;
            if (needed > 1) {
                d = this._inputData.readUnsignedByte();
                if ((d & 0xC0) != 128) {
                    this._reportInvalidOther(d & 0xFF);
                }
                c = c << 6 | d & 0x3F;
                if (needed > 2) {
                    d = this._inputData.readUnsignedByte();
                    if ((d & 0xC0) != 128) {
                        this._reportInvalidOther(d & 0xFF);
                    }
                    c = c << 6 | d & 0x3F;
                }
            }
        }
        return c;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_2,"    private final int _decodeUtf8_2(int c) throws IOException {
        int d = this._inputData.readUnsignedByte();
        if ((d & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF);
        }
        return (c & 0x1F) << 6 | d & 0x3F;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_3,"    private final int _decodeUtf8_3(int c1) throws IOException {
        c1 &= 0xF;
        int d = this._inputData.readUnsignedByte();
        if ((d & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF);
        }
        int c = c1 << 6 | d & 0x3F;
        d = this._inputData.readUnsignedByte();
        if ((d & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF);
        }
        c = c << 6 | d & 0x3F;
        return c;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_4,"    private final int _decodeUtf8_4(int c) throws IOException {
        int d = this._inputData.readUnsignedByte();
        if ((d & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF);
        }
        c = (c & 7) << 6 | d & 0x3F;
        d = this._inputData.readUnsignedByte();
        if ((d & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF);
        }
        c = c << 6 | d & 0x3F;
        d = this._inputData.readUnsignedByte();
        if ((d & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF);
        }
        return (c << 6 | d & 0x3F) - 65536;
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipUtf8_2,"    private final void _skipUtf8_2() throws IOException {
        int c = this._inputData.readUnsignedByte();
        if ((c & 0xC0) != 128) {
            this._reportInvalidOther(c & 0xFF);
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipUtf8_3,"    private final void _skipUtf8_3() throws IOException {
        int c = this._inputData.readUnsignedByte();
        if ((c & 0xC0) != 128) {
            this._reportInvalidOther(c & 0xFF);
        }
        if (((c = this._inputData.readUnsignedByte()) & 0xC0) != 128) {
            this._reportInvalidOther(c & 0xFF);
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipUtf8_4,"    private final void _skipUtf8_4() throws IOException {
        int d = this._inputData.readUnsignedByte();
        if ((d & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF);
        }
        if (((d = this._inputData.readUnsignedByte()) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF);
        }
        if (((d = this._inputData.readUnsignedByte()) & 0xC0) != 128) {
            this._reportInvalidOther(d & 0xFF);
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken,"    protected void _reportInvalidToken(int ch, String matchedPart) throws IOException {
        this._reportInvalidToken(ch, matchedPart, ""'null', 'true', 'false' or NaN"");
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken,"    protected void _reportInvalidToken(int ch, String matchedPart, String msg) throws IOException {
        char c;
        StringBuilder sb = new StringBuilder(matchedPart);
        while (Character.isJavaIdentifierPart(c = (char)this._decodeCharForError(ch))) {
            sb.append(c);
            ch = this._inputData.readUnsignedByte();
        }
        this._reportError(""Unrecognized token '"" + sb.toString() + ""': was expecting "" + msg);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidChar,"    protected void _reportInvalidChar(int c) throws JsonParseException {
        if (c < 32) {
            this._throwInvalidSpace(c);
        }
        this._reportInvalidInitial(c);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidInitial,"    protected void _reportInvalidInitial(int mask) throws JsonParseException {
        this._reportError(""Invalid UTF-8 start byte 0x"" + Integer.toHexString(mask));
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidOther,"    private void _reportInvalidOther(int mask) throws JsonParseException {
        this._reportError(""Invalid UTF-8 middle byte 0x"" + Integer.toHexString(mask));
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._growArrayBy,"    private static int[] _growArrayBy(int[] arr, int more) {
        if (arr == null) {
            return new int[more];
        }
        return Arrays.copyOf(arr, arr.length + more);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeBase64,"    protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException {
        ByteArrayBuilder builder = this._getByteArrayBuilder();
        while (true) {
            int ch;
            if ((ch = this._inputData.readUnsignedByte()) <= 32) {
                continue;
            }
            int bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (ch == 34) {
                    return builder.toByteArray();
                }
                bits = this._decodeBase64Escape(b64variant, ch, 0);
                if (bits < 0) continue;
            }
            int decodedData = bits;
            ch = this._inputData.readUnsignedByte();
            bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                bits = this._decodeBase64Escape(b64variant, ch, 1);
            }
            decodedData = decodedData << 6 | bits;
            ch = this._inputData.readUnsignedByte();
            bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (bits != -2) {
                    if (ch == 34 && !b64variant.usesPadding()) {
                        builder.append(decodedData >>= 4);
                        return builder.toByteArray();
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 2);
                }
                if (bits == -2) {
                    ch = this._inputData.readUnsignedByte();
                    if (!b64variant.usesPaddingChar(ch)) {
                        throw this.reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                    builder.append(decodedData >>= 4);
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            ch = this._inputData.readUnsignedByte();
            bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (bits != -2) {
                    if (ch == 34 && !b64variant.usesPadding()) {
                        builder.appendTwoBytes(decodedData >>= 2);
                        return builder.toByteArray();
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 3);
                }
                if (bits == -2) {
                    builder.appendTwoBytes(decodedData >>= 2);
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            builder.appendThreeBytes(decodedData);
        }
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTokenLocation,"    public JsonLocation getTokenLocation() {
        Object src = this._ioContext.getSourceReference();
        return new JsonLocation(src, -1L, -1L, this._tokenInputRow, -1);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getCurrentLocation,"    public JsonLocation getCurrentLocation() {
        Object src = this._ioContext.getSourceReference();
        return new JsonLocation(src, -1L, -1L, this._currInputRow, -1);
    }"
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.pad,"    private static final int pad(int q, int bytes) {
        return bytes == 4 ? q : q | -1 << (bytes << 3);
    }
"
com.fasterxml.jackson.core.json.PackageVersion.version,"    public Version version() {
        return VERSION;
    }
"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.detectEncoding,"    public JsonEncoding detectEncoding() throws IOException {
        JsonEncoding enc;
        int i16;
        boolean foundEncoding = false;
        if (this.ensureLoaded(4)) {
            int quad = this._inputBuffer[this._inputPtr] << 24 | (this._inputBuffer[this._inputPtr + 1] & 0xFF) << 16 | (this._inputBuffer[this._inputPtr + 2] & 0xFF) << 8 | this._inputBuffer[this._inputPtr + 3] & 0xFF;
            if (this.handleBOM(quad)) {
                foundEncoding = true;
            } else if (this.checkUTF32(quad)) {
                foundEncoding = true;
            } else if (this.checkUTF16(quad >>> 16)) {
                foundEncoding = true;
            }
        } else if (this.ensureLoaded(2) && this.checkUTF16(i16 = (this._inputBuffer[this._inputPtr] & 0xFF) << 8 | this._inputBuffer[this._inputPtr + 1] & 0xFF)) {
            foundEncoding = true;
        }
        if (!foundEncoding) {
            enc = JsonEncoding.UTF8;
        } else {
            switch (this._bytesPerChar) {
                case 1: {
                    enc = JsonEncoding.UTF8;
                    break;
                }
                case 2: {
                    enc = this._bigEndian ? JsonEncoding.UTF16_BE : JsonEncoding.UTF16_LE;
                    break;
                }
                case 4: {
                    enc = this._bigEndian ? JsonEncoding.UTF32_BE : JsonEncoding.UTF32_LE;
                    break;
                }
                default: {
                    throw new RuntimeException(""Internal error"");
                }
            }
        }
        this._context.setEncoding(enc);
        return enc;
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipUTF8BOM,"    public static int skipUTF8BOM(DataInput input) throws IOException {
        int b = input.readUnsignedByte();
        if (b != 239) {
            return b;
        }
        b = input.readUnsignedByte();
        if (b != 187) {
            throw new IOException(""Unexpected byte 0x"" + Integer.toHexString(b) + "" following 0xEF; should get 0xBB as part of UTF-8 BOM"");
        }
        b = input.readUnsignedByte();
        if (b != 191) {
            throw new IOException(""Unexpected byte 0x"" + Integer.toHexString(b) + "" following 0xEF 0xBB; should get 0xBF as part of UTF-8 BOM"");
        }
        return input.readUnsignedByte();
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructReader,"    public Reader constructReader() throws IOException {
        JsonEncoding enc = this._context.getEncoding();
        switch (enc.bits()) {
            case 8: 
            case 16: {
                InputStream in = this._in;
                if (in == null) {
                    in = new ByteArrayInputStream(this._inputBuffer, this._inputPtr, this._inputEnd);
                } else if (this._inputPtr < this._inputEnd) {
                    in = new MergedStream(this._context, in, this._inputBuffer, this._inputPtr, this._inputEnd);
                }
                return new InputStreamReader(in, enc.getJavaName());
            }
            case 32: {
                return new UTF32Reader(this._context, this._in, this._inputBuffer, this._inputPtr, this._inputEnd, this._context.getEncoding().isBigEndian());
            }
        }
        throw new RuntimeException(""Internal error"");
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser,"    public JsonParser constructParser(int parserFeatures, ObjectCodec codec, ByteQuadsCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols, int factoryFeatures) throws IOException {
        JsonEncoding enc = this.detectEncoding();
        if (enc == JsonEncoding.UTF8 && JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(factoryFeatures)) {
            ByteQuadsCanonicalizer can = rootByteSymbols.makeChild(factoryFeatures);
            return new UTF8StreamJsonParser(this._context, parserFeatures, this._in, codec, can, this._inputBuffer, this._inputPtr, this._inputEnd, this._bufferRecyclable);
        }
        return new ReaderBasedJsonParser(this._context, parserFeatures, this.constructReader(), codec, rootCharSymbols.makeChild(factoryFeatures));
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.hasJSONFormat,"    public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException {
        int ch;
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        byte b = acc.nextByte();
        if (b == -17) {
            if (!acc.hasMoreBytes()) {
                return MatchStrength.INCONCLUSIVE;
            }
            if (acc.nextByte() != -69) {
                return MatchStrength.NO_MATCH;
            }
            if (!acc.hasMoreBytes()) {
                return MatchStrength.INCONCLUSIVE;
            }
            if (acc.nextByte() != -65) {
                return MatchStrength.NO_MATCH;
            }
            if (!acc.hasMoreBytes()) {
                return MatchStrength.INCONCLUSIVE;
            }
            b = acc.nextByte();
        }
        if ((ch = ByteSourceJsonBootstrapper.skipSpace(acc, b)) < 0) {
            return MatchStrength.INCONCLUSIVE;
        }
        if (ch == 123) {
            ch = ByteSourceJsonBootstrapper.skipSpace(acc);
            if (ch < 0) {
                return MatchStrength.INCONCLUSIVE;
            }
            if (ch == 34 || ch == 125) {
                return MatchStrength.SOLID_MATCH;
            }
            return MatchStrength.NO_MATCH;
        }
        if (ch == 91) {
            ch = ByteSourceJsonBootstrapper.skipSpace(acc);
            if (ch < 0) {
                return MatchStrength.INCONCLUSIVE;
            }
            if (ch == 93 || ch == 91) {
                return MatchStrength.SOLID_MATCH;
            }
            return MatchStrength.SOLID_MATCH;
        }
        MatchStrength strength = MatchStrength.WEAK_MATCH;
        if (ch == 34) {
            return strength;
        }
        if (ch <= 57 && ch >= 48) {
            return strength;
        }
        if (ch == 45) {
            ch = ByteSourceJsonBootstrapper.skipSpace(acc);
            if (ch < 0) {
                return MatchStrength.INCONCLUSIVE;
            }
            return ch <= 57 && ch >= 48 ? strength : MatchStrength.NO_MATCH;
        }
        if (ch == 110) {
            return ByteSourceJsonBootstrapper.tryMatch(acc, ""ull"", strength);
        }
        if (ch == 116) {
            return ByteSourceJsonBootstrapper.tryMatch(acc, ""rue"", strength);
        }
        if (ch == 102) {
            return ByteSourceJsonBootstrapper.tryMatch(acc, ""alse"", strength);
        }
        return MatchStrength.NO_MATCH;
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.tryMatch,"    private static MatchStrength tryMatch(InputAccessor acc, String matchStr, MatchStrength fullMatchStrength) throws IOException {
        int len = matchStr.length();
        for (int i = 0; i < len; ++i) {
            if (!acc.hasMoreBytes()) {
                return MatchStrength.INCONCLUSIVE;
            }
            if (acc.nextByte() == matchStr.charAt(i)) continue;
            return MatchStrength.NO_MATCH;
        }
        return fullMatchStrength;
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace,"    private static int skipSpace(InputAccessor acc) throws IOException {
        if (!acc.hasMoreBytes()) {
            return -1;
        }
        return ByteSourceJsonBootstrapper.skipSpace(acc, acc.nextByte());
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace,"    private static int skipSpace(InputAccessor acc, byte b) throws IOException {
        int ch;
        while ((ch = b & 0xFF) == 32 || ch == 13 || ch == 10 || ch == 9) {
            if (!acc.hasMoreBytes()) {
                return -1;
            }
            b = acc.nextByte();
        }
        return ch;
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.handleBOM,"    private boolean handleBOM(int quad) throws IOException {
        switch (quad) {
            case 65279: {
                this._bigEndian = true;
                this._inputPtr += 4;
                this._bytesPerChar = 4;
                return true;
            }
            case -131072: {
                this._inputPtr += 4;
                this._bytesPerChar = 4;
                this._bigEndian = false;
                return true;
            }
            case 65534: {
                this.reportWeirdUCS4(""2143"");
                break;
            }
            case -16842752: {
                this.reportWeirdUCS4(""3412"");
                break;
            }
        }
        int msw = quad >>> 16;
        if (msw == 65279) {
            this._inputPtr += 2;
            this._bytesPerChar = 2;
            this._bigEndian = true;
            return true;
        }
        if (msw == 65534) {
            this._inputPtr += 2;
            this._bytesPerChar = 2;
            this._bigEndian = false;
            return true;
        }
        if (quad >>> 8 == 0xEFBBBF) {
            this._inputPtr += 3;
            this._bytesPerChar = 1;
            this._bigEndian = true;
            return true;
        }
        return false;
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.checkUTF32,"    private boolean checkUTF32(int quad) throws IOException {
        if (quad >> 8 == 0) {
            this._bigEndian = true;
        } else if ((quad & 0xFFFFFF) == 0) {
            this._bigEndian = false;
        } else if ((quad & 0xFF00FFFF) == 0) {
            this.reportWeirdUCS4(""3412"");
        } else if ((quad & 0xFFFF00FF) == 0) {
            this.reportWeirdUCS4(""2143"");
        } else {
            return false;
        }
        this._bytesPerChar = 4;
        return true;
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.checkUTF16,"    private boolean checkUTF16(int i16) {
        if ((i16 & 0xFF00) == 0) {
            this._bigEndian = true;
        } else if ((i16 & 0xFF) == 0) {
            this._bigEndian = false;
        } else {
            return false;
        }
        this._bytesPerChar = 2;
        return true;
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.reportWeirdUCS4,"    private void reportWeirdUCS4(String type) throws IOException {
        throw new CharConversionException(""Unsupported UCS-4 endianness ("" + type + "") detected"");
    }"
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.ensureLoaded,"    protected boolean ensureLoaded(int minimum) throws IOException {
        int count;
        for (int gotten = this._inputEnd - this._inputPtr; gotten < minimum; gotten += count) {
            count = this._in == null ? -1 : this._in.read(this._inputBuffer, this._inputEnd, this._inputBuffer.length - this._inputEnd);
            if (count < 1) {
                return false;
            }
            this._inputEnd += count;
        }
        return true;
    }
"
com.fasterxml.jackson.core.json.JsonWriteContext.reset,"    protected JsonWriteContext reset(int type) {
        this._type = type;
        this._index = -1;
        this._currentName = null;
        this._gotName = false;
        this._currentValue = null;
        if (this._dups != null) {
            this._dups.reset();
        }
        return this;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.withDupDetector,"    public JsonWriteContext withDupDetector(DupDetector dups) {
        this._dups = dups;
        return this;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.getCurrentValue,"    public Object getCurrentValue() {
        return this._currentValue;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.setCurrentValue,"    public void setCurrentValue(Object v) {
        this._currentValue = v;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext,"    public static JsonWriteContext createRootContext() {
        return JsonWriteContext.createRootContext(null);
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext,"    public static JsonWriteContext createRootContext(DupDetector dd) {
        return new JsonWriteContext(0, null, dd);
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.createChildArrayContext,"    public JsonWriteContext createChildArrayContext() {
        JsonWriteContext ctxt = this._child;
        if (ctxt == null) {
            this._child = ctxt = new JsonWriteContext(1, this, this._dups == null ? null : this._dups.child());
            return ctxt;
        }
        return ctxt.reset(1);
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.createChildObjectContext,"    public JsonWriteContext createChildObjectContext() {
        JsonWriteContext ctxt = this._child;
        if (ctxt == null) {
            this._child = ctxt = new JsonWriteContext(2, this, this._dups == null ? null : this._dups.child());
            return ctxt;
        }
        return ctxt.reset(2);
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.getParent,"    public final JsonWriteContext getParent() {
        return this._parent;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.getCurrentName,"    public final String getCurrentName() {
        return this._currentName;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.clearAndGetParent,"    public JsonWriteContext clearAndGetParent() {
        this._currentValue = null;
        return this._parent;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.getDupDetector,"    public DupDetector getDupDetector() {
        return this._dups;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.writeFieldName,"    public int writeFieldName(String name) throws JsonProcessingException {
        if (this._type != 2 || this._gotName) {
            return 4;
        }
        this._gotName = true;
        this._currentName = name;
        if (this._dups != null) {
            this._checkDup(this._dups, name);
        }
        return this._index < 0 ? 0 : 1;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext._checkDup,"    private final void _checkDup(DupDetector dd, String name) throws JsonProcessingException {
        if (dd.isDup(name)) {
            Object src = dd.getSource();
            throw new JsonGenerationException(""Duplicate field '"" + name + ""'"", src instanceof JsonGenerator ? (JsonGenerator)src : null);
        }
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.writeValue,"    public int writeValue() {
        if (this._type == 2) {
            if (!this._gotName) {
                return 5;
            }
            this._gotName = false;
            ++this._index;
            return 2;
        }
        if (this._type == 1) {
            int ix;
            return (ix = this._index++) < 0 ? 0 : 1;
        }
        ++this._index;
        return this._index == 0 ? 0 : 3;
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.appendDesc,"    protected void appendDesc(StringBuilder sb) {
        if (this._type == 2) {
            sb.append('{');
            if (this._currentName != null) {
                sb.append('\""');
                sb.append(this._currentName);
                sb.append('\""');
            } else {
                sb.append('?');
            }
            sb.append('}');
        } else if (this._type == 1) {
            sb.append('[');
            sb.append(this.getCurrentIndex());
            sb.append(']');
        } else {
            sb.append(""/"");
        }
    }"
com.fasterxml.jackson.core.json.JsonWriteContext.toString,"    public String toString() {
        StringBuilder sb = new StringBuilder(64);
        this.appendDesc(sb);
        return sb.toString();
    }
"
com.fasterxml.jackson.core.json.DupDetector.rootDetector,"    public static DupDetector rootDetector(JsonParser p) {
        return new DupDetector(p);
    }"
com.fasterxml.jackson.core.json.DupDetector.rootDetector,"    public static DupDetector rootDetector(JsonGenerator g) {
        return new DupDetector(g);
    }"
com.fasterxml.jackson.core.json.DupDetector.child,"    public DupDetector child() {
        return new DupDetector(this._source);
    }"
com.fasterxml.jackson.core.json.DupDetector.reset,"    public void reset() {
        this._firstName = null;
        this._secondName = null;
        this._seen = null;
    }"
com.fasterxml.jackson.core.json.DupDetector.findLocation,"    public JsonLocation findLocation() {
        if (this._source instanceof JsonParser) {
            return ((JsonParser)this._source).getCurrentLocation();
        }
        return null;
    }"
com.fasterxml.jackson.core.json.DupDetector.getSource,"    public Object getSource() {
        return this._source;
    }"
com.fasterxml.jackson.core.json.DupDetector.isDup,"    public boolean isDup(String name) throws JsonParseException {
        if (this._firstName == null) {
            this._firstName = name;
            return false;
        }
        if (name.equals(this._firstName)) {
            return true;
        }
        if (this._secondName == null) {
            this._secondName = name;
            return false;
        }
        if (name.equals(this._secondName)) {
            return true;
        }
        if (this._seen == null) {
            this._seen = new HashSet(16);
            this._seen.add(this._firstName);
            this._seen.add(this._secondName);
        }
        return !this._seen.add(name);
    }
"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getCodec,"    public ObjectCodec getCodec() {
        return this._objectCodec;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.setCodec,"    public void setCodec(ObjectCodec c) {
        this._objectCodec = c;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.releaseBuffered,"    public int releaseBuffered(Writer w) throws IOException {
        int count = this._inputEnd - this._inputPtr;
        if (count < 1) {
            return 0;
        }
        int origPtr = this._inputPtr;
        w.write(this._inputBuffer, origPtr, count);
        return count;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getInputSource,"    public Object getInputSource() {
        return this._reader;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar,"    protected char getNextChar(String eofMsg) throws IOException {
        return this.getNextChar(eofMsg, null);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar,"    protected char getNextChar(String eofMsg, JsonToken forToken) throws IOException {
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            this._reportInvalidEOF(eofMsg, forToken);
        }
        return this._inputBuffer[this._inputPtr++];
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._closeInput,"    protected void _closeInput() throws IOException {
        if (this._reader != null) {
            if (this._ioContext.isResourceManaged() || this.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) {
                this._reader.close();
            }
            this._reader = null;
        }
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._releaseBuffers,"    protected void _releaseBuffers() throws IOException {
        char[] buf;
        super._releaseBuffers();
        this._symbols.release();
        if (this._bufferRecyclable && (buf = this._inputBuffer) != null) {
            this._inputBuffer = null;
            this._ioContext.releaseTokenBuffer(buf);
        }
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._loadMoreGuaranteed,"    protected void _loadMoreGuaranteed() throws IOException {
        if (!this._loadMore()) {
            this._reportInvalidEOF();
        }
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._loadMore,"    protected boolean _loadMore() throws IOException {
        int bufSize = this._inputEnd;
        this._currInputProcessed += (long)bufSize;
        this._currInputRowStart -= bufSize;
        this._nameStartOffset -= (long)bufSize;
        if (this._reader != null) {
            int count = this._reader.read(this._inputBuffer, 0, this._inputBuffer.length);
            if (count > 0) {
                this._inputPtr = 0;
                this._inputEnd = count;
                return true;
            }
            this._closeInput();
            if (count == 0) {
                throw new IOException(""Reader returned 0 characters when trying to read "" + this._inputEnd);
            }
        }
        return false;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText,"    public final String getText() throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                this._finishString();
            }
            return this._textBuffer.contentsAsString();
        }
        return this._getText2(t);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText,"    public int getText(Writer writer) throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                this._finishString();
            }
            return this._textBuffer.contentsToWriter(writer);
        }
        if (t == JsonToken.FIELD_NAME) {
            String n = this._parsingContext.getCurrentName();
            writer.write(n);
            return n.length();
        }
        if (t != null) {
            if (t.isNumeric()) {
                return this._textBuffer.contentsToWriter(writer);
            }
            char[] ch = t.asCharArray();
            writer.write(ch);
            return ch.length;
        }
        return 0;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString,"    public final String getValueAsString() throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                this._finishString();
            }
            return this._textBuffer.contentsAsString();
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this.getCurrentName();
        }
        return super.getValueAsString(null);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString,"    public final String getValueAsString(String defValue) throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            if (this._tokenIncomplete) {
                this._tokenIncomplete = false;
                this._finishString();
            }
            return this._textBuffer.contentsAsString();
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this.getCurrentName();
        }
        return super.getValueAsString(defValue);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._getText2,"    protected final String _getText2(JsonToken t) {
        if (t == null) {
            return null;
        }
        switch (t.id()) {
            case 5: {
                return this._parsingContext.getCurrentName();
            }
            case 6: 
            case 7: 
            case 8: {
                return this._textBuffer.contentsAsString();
            }
        }
        return t.asString();
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextCharacters,"    public final char[] getTextCharacters() throws IOException {
        if (this._currToken != null) {
            switch (this._currToken.id()) {
                case 5: {
                    if (!this._nameCopied) {
                        String name = this._parsingContext.getCurrentName();
                        int nameLen = name.length();
                        if (this._nameCopyBuffer == null) {
                            this._nameCopyBuffer = this._ioContext.allocNameCopyBuffer(nameLen);
                        } else if (this._nameCopyBuffer.length < nameLen) {
                            this._nameCopyBuffer = new char[nameLen];
                        }
                        name.getChars(0, nameLen, this._nameCopyBuffer, 0);
                        this._nameCopied = true;
                    }
                    return this._nameCopyBuffer;
                }
                case 6: {
                    if (this._tokenIncomplete) {
                        this._tokenIncomplete = false;
                        this._finishString();
                    }
                }
                case 7: 
                case 8: {
                    return this._textBuffer.getTextBuffer();
                }
            }
            return this._currToken.asCharArray();
        }
        return null;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextLength,"    public final int getTextLength() throws IOException {
        if (this._currToken != null) {
            switch (this._currToken.id()) {
                case 5: {
                    return this._parsingContext.getCurrentName().length();
                }
                case 6: {
                    if (this._tokenIncomplete) {
                        this._tokenIncomplete = false;
                        this._finishString();
                    }
                }
                case 7: 
                case 8: {
                    return this._textBuffer.size();
                }
            }
            return this._currToken.asCharArray().length;
        }
        return 0;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextOffset,"    public final int getTextOffset() throws IOException {
        if (this._currToken != null) {
            switch (this._currToken.id()) {
                case 5: {
                    return 0;
                }
                case 6: {
                    if (this._tokenIncomplete) {
                        this._tokenIncomplete = false;
                        this._finishString();
                    }
                }
                case 7: 
                case 8: {
                    return this._textBuffer.getTextOffset();
                }
            }
        }
        return 0;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getBinaryValue,"    public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
        if (this._currToken != JsonToken.VALUE_STRING && (this._currToken != JsonToken.VALUE_EMBEDDED_OBJECT || this._binaryValue == null)) {
            this._reportError(""Current token ("" + (Object)((Object)this._currToken) + "") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"");
        }
        if (this._tokenIncomplete) {
            try {
                this._binaryValue = this._decodeBase64(b64variant);
            }
            catch (IllegalArgumentException iae) {
                throw this._constructError(""Failed to decode VALUE_STRING as base64 ("" + b64variant + ""): "" + iae.getMessage());
            }
            this._tokenIncomplete = false;
        } else if (this._binaryValue == null) {
            ByteArrayBuilder builder = this._getByteArrayBuilder();
            this._decodeBase64(this.getText(), builder, b64variant);
            this._binaryValue = builder.toByteArray();
        }
        return this._binaryValue;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.readBinaryValue,"    public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
        if (!this._tokenIncomplete || this._currToken != JsonToken.VALUE_STRING) {
            byte[] b = this.getBinaryValue(b64variant);
            out.write(b);
            return b.length;
        }
        byte[] buf = this._ioContext.allocBase64Buffer();
        try {
            int n = this._readBinary(b64variant, out, buf);
            return n;
        }
        finally {
            this._ioContext.releaseBase64Buffer(buf);
        }
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._readBinary,"    protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException {
        int outputPtr = 0;
        int outputEnd = buffer.length - 3;
        int outputCount = 0;
        while (true) {
            char ch;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((ch = this._inputBuffer[this._inputPtr++]) <= ' ') continue;
            int bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (ch == '\""') break;
                bits = this._decodeBase64Escape(b64variant, ch, 0);
                if (bits < 0) continue;
            }
            if (outputPtr > outputEnd) {
                outputCount += outputPtr;
                out.write(buffer, 0, outputPtr);
                outputPtr = 0;
            }
            int decodedData = bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++])) < 0) {
                bits = this._decodeBase64Escape(b64variant, ch, 1);
            }
            decodedData = decodedData << 6 | bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++])) < 0) {
                if (bits != -2) {
                    if (ch == '\""' && !b64variant.usesPadding()) {
                        buffer[outputPtr++] = (byte)(decodedData >>= 4);
                        break;
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 2);
                }
                if (bits == -2) {
                    if (this._inputPtr >= this._inputEnd) {
                        this._loadMoreGuaranteed();
                    }
                    if (!b64variant.usesPaddingChar(ch = this._inputBuffer[this._inputPtr++])) {
                        throw this.reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                    buffer[outputPtr++] = (byte)(decodedData >>= 4);
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++])) < 0) {
                if (bits != -2) {
                    if (ch == '\""' && !b64variant.usesPadding()) {
                        buffer[outputPtr++] = (byte)((decodedData >>= 2) >> 8);
                        buffer[outputPtr++] = (byte)decodedData;
                        break;
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 3);
                }
                if (bits == -2) {
                    buffer[outputPtr++] = (byte)((decodedData >>= 2) >> 8);
                    buffer[outputPtr++] = (byte)decodedData;
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            buffer[outputPtr++] = (byte)(decodedData >> 16);
            buffer[outputPtr++] = (byte)(decodedData >> 8);
            buffer[outputPtr++] = (byte)decodedData;
        }
        this._tokenIncomplete = false;
        if (outputPtr > 0) {
            outputCount += outputPtr;
            out.write(buffer, 0, outputPtr);
        }
        return outputCount;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken,"    public final JsonToken nextToken() throws IOException {
        JsonToken t;
        boolean inObject;
        int i;
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this._nextAfterName();
        }
        this._numTypesValid = 0;
        if (this._tokenIncomplete) {
            this._skipString();
        }
        if ((i = this._skipWSOrEnd()) < 0) {
            this.close();
            this._currToken = null;
            return null;
        }
        this._binaryValue = null;
        if (i == 93) {
            this._updateLocation();
            if (!this._parsingContext.inArray()) {
                this._reportMismatchedEndMarker(i, '}');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_ARRAY;
            return this._currToken;
        }
        if (i == 125) {
            this._updateLocation();
            if (!this._parsingContext.inObject()) {
                this._reportMismatchedEndMarker(i, ']');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_OBJECT;
            return this._currToken;
        }
        if (this._parsingContext.expectComma()) {
            i = this._skipComma(i);
        }
        if (inObject = this._parsingContext.inObject()) {
            this._updateNameLocation();
            String name = i == 34 ? this._parseName() : this._handleOddName(i);
            this._parsingContext.setCurrentName(name);
            this._currToken = JsonToken.FIELD_NAME;
            i = this._skipColon();
        }
        this._updateLocation();
        switch (i) {
            case 34: {
                this._tokenIncomplete = true;
                t = JsonToken.VALUE_STRING;
                break;
            }
            case 91: {
                if (!inObject) {
                    this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
                }
                t = JsonToken.START_ARRAY;
                break;
            }
            case 123: {
                if (!inObject) {
                    this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
                }
                t = JsonToken.START_OBJECT;
                break;
            }
            case 125: {
                this._reportUnexpectedChar(i, ""expected a value"");
            }
            case 116: {
                this._matchTrue();
                t = JsonToken.VALUE_TRUE;
                break;
            }
            case 102: {
                this._matchFalse();
                t = JsonToken.VALUE_FALSE;
                break;
            }
            case 110: {
                this._matchNull();
                t = JsonToken.VALUE_NULL;
                break;
            }
            case 45: {
                t = this._parseNegNumber();
                break;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                t = this._parsePosNumber(i);
                break;
            }
            default: {
                t = this._handleOddValue(i);
            }
        }
        if (inObject) {
            this._nextToken = t;
            return this._currToken;
        }
        this._currToken = t;
        return t;
    "
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nextAfterName,"    private final JsonToken _nextAfterName() {
        this._nameCopied = false;
        JsonToken t = this._nextToken;
        this._nextToken = null;
        if (t == JsonToken.START_ARRAY) {
            this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
        }
        this._currToken = t;
        return this._currToken;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.finishToken,"    public void finishToken() throws IOException {
        if (this._tokenIncomplete) {
            this._tokenIncomplete = false;
            this._finishString();
        }
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName,"    public boolean nextFieldName(SerializableString sstr) throws IOException {
        int end;
        char[] nameChars;
        int len;
        int i;
        this._numTypesValid = 0;
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nextAfterName();
            return false;
        }
        if (this._tokenIncomplete) {
            this._skipString();
        }
        if ((i = this._skipWSOrEnd()) < 0) {
            this.close();
            this._currToken = null;
            return false;
        }
        this._binaryValue = null;
        if (i == 93) {
            this._updateLocation();
            if (!this._parsingContext.inArray()) {
                this._reportMismatchedEndMarker(i, '}');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_ARRAY;
            return false;
        }
        if (i == 125) {
            this._updateLocation();
            if (!this._parsingContext.inObject()) {
                this._reportMismatchedEndMarker(i, ']');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_OBJECT;
            return false;
        }
        if (this._parsingContext.expectComma()) {
            i = this._skipComma(i);
        }
        if (!this._parsingContext.inObject()) {
            this._updateLocation();
            this._nextTokenNotInObject(i);
            return false;
        }
        this._updateNameLocation();
        if (i == 34 && this._inputPtr + (len = (nameChars = sstr.asQuotedChars()).length) + 4 < this._inputEnd && this._inputBuffer[end = this._inputPtr + len] == '\""') {
            int offset = 0;
            int ptr = this._inputPtr;
            while (true) {
                if (ptr == end) {
                    this._parsingContext.setCurrentName(sstr.getValue());
                    this._isNextTokenNameYes(this._skipColonFast(ptr + 1));
                    return true;
                }
                if (nameChars[offset] != this._inputBuffer[ptr]) break;
                ++offset;
                ++ptr;
            }
        }
        return this._isNextTokenNameMaybe(i, sstr.getValue());
    "
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName,"    public String nextFieldName() throws IOException {
        JsonToken t;
        int i;
        this._numTypesValid = 0;
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nextAfterName();
            return null;
        }
        if (this._tokenIncomplete) {
            this._skipString();
        }
        if ((i = this._skipWSOrEnd()) < 0) {
            this.close();
            this._currToken = null;
            return null;
        }
        this._binaryValue = null;
        if (i == 93) {
            this._updateLocation();
            if (!this._parsingContext.inArray()) {
                this._reportMismatchedEndMarker(i, '}');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_ARRAY;
            return null;
        }
        if (i == 125) {
            this._updateLocation();
            if (!this._parsingContext.inObject()) {
                this._reportMismatchedEndMarker(i, ']');
            }
            this._parsingContext = this._parsingContext.clearAndGetParent();
            this._currToken = JsonToken.END_OBJECT;
            return null;
        }
        if (this._parsingContext.expectComma()) {
            i = this._skipComma(i);
        }
        if (!this._parsingContext.inObject()) {
            this._updateLocation();
            this._nextTokenNotInObject(i);
            return null;
        }
        this._updateNameLocation();
        String name = i == 34 ? this._parseName() : this._handleOddName(i);
        this._parsingContext.setCurrentName(name);
        this._currToken = JsonToken.FIELD_NAME;
        i = this._skipColon();
        this._updateLocation();
        if (i == 34) {
            this._tokenIncomplete = true;
            this._nextToken = JsonToken.VALUE_STRING;
            return name;
        }
        switch (i) {
            case 45: {
                t = this._parseNegNumber();
                break;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                t = this._parsePosNumber(i);
                break;
            }
            case 102: {
                this._matchFalse();
                t = JsonToken.VALUE_FALSE;
                break;
            }
            case 110: {
                this._matchNull();
                t = JsonToken.VALUE_NULL;
                break;
            }
            case 116: {
                this._matchTrue();
                t = JsonToken.VALUE_TRUE;
                break;
            }
            case 91: {
                t = JsonToken.START_ARRAY;
                break;
            }
            case 123: {
                t = JsonToken.START_OBJECT;
                break;
            }
            default: {
                t = this._handleOddValue(i);
            }
        }
        this._nextToken = t;
        return name;
    "
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameYes,"    private final void _isNextTokenNameYes(int i) throws IOException {
        this._currToken = JsonToken.FIELD_NAME;
        this._updateLocation();
        switch (i) {
            case 34: {
                this._tokenIncomplete = true;
                this._nextToken = JsonToken.VALUE_STRING;
                return;
            }
            case 91: {
                this._nextToken = JsonToken.START_ARRAY;
                return;
            }
            case 123: {
                this._nextToken = JsonToken.START_OBJECT;
                return;
            }
            case 116: {
                this._matchToken(""true"", 1);
                this._nextToken = JsonToken.VALUE_TRUE;
                return;
            }
            case 102: {
                this._matchToken(""false"", 1);
                this._nextToken = JsonToken.VALUE_FALSE;
                return;
            }
            case 110: {
                this._matchToken(""null"", 1);
                this._nextToken = JsonToken.VALUE_NULL;
                return;
            }
            case 45: {
                this._nextToken = this._parseNegNumber();
                return;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                this._nextToken = this._parsePosNumber(i);
                return;
            }
        }
        this._nextToken = this._handleOddValue(i);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameMaybe,"    protected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException {
        JsonToken t;
        String name = i == 34 ? this._parseName() : this._handleOddName(i);
        this._parsingContext.setCurrentName(name);
        this._currToken = JsonToken.FIELD_NAME;
        i = this._skipColon();
        this._updateLocation();
        if (i == 34) {
            this._tokenIncomplete = true;
            this._nextToken = JsonToken.VALUE_STRING;
            return nameToMatch.equals(name);
        }
        switch (i) {
            case 45: {
                t = this._parseNegNumber();
                break;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                t = this._parsePosNumber(i);
                break;
            }
            case 102: {
                this._matchFalse();
                t = JsonToken.VALUE_FALSE;
                break;
            }
            case 110: {
                this._matchNull();
                t = JsonToken.VALUE_NULL;
                break;
            }
            case 116: {
                this._matchTrue();
                t = JsonToken.VALUE_TRUE;
                break;
            }
            case 91: {
                t = JsonToken.START_ARRAY;
                break;
            }
            case 123: {
                t = JsonToken.START_OBJECT;
                break;
            }
            default: {
                t = this._handleOddValue(i);
            }
        }
        this._nextToken = t;
        return nameToMatch.equals(name);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nextTokenNotInObject,"    private final JsonToken _nextTokenNotInObject(int i) throws IOException {
        if (i == 34) {
            this._tokenIncomplete = true;
            this._currToken = JsonToken.VALUE_STRING;
            return this._currToken;
        }
        switch (i) {
            case 91: {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
                this._currToken = JsonToken.START_ARRAY;
                return this._currToken;
            }
            case 123: {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
                this._currToken = JsonToken.START_OBJECT;
                return this._currToken;
            }
            case 116: {
                this._matchToken(""true"", 1);
                this._currToken = JsonToken.VALUE_TRUE;
                return this._currToken;
            }
            case 102: {
                this._matchToken(""false"", 1);
                this._currToken = JsonToken.VALUE_FALSE;
                return this._currToken;
            }
            case 110: {
                this._matchToken(""null"", 1);
                this._currToken = JsonToken.VALUE_NULL;
                return this._currToken;
            }
            case 45: {
                this._currToken = this._parseNegNumber();
                return this._currToken;
            }
            case 48: 
            case 49: 
            case 50: 
            case 51: 
            case 52: 
            case 53: 
            case 54: 
            case 55: 
            case 56: 
            case 57: {
                this._currToken = this._parsePosNumber(i);
                return this._currToken;
            }
            case 44: 
            case 93: {
                if (!this.isEnabled(JsonParser.Feature.ALLOW_MISSING_VALUES)) break;
                --this._inputPtr;
                this._currToken = JsonToken.VALUE_NULL;
                return this._currToken;
            }
        }
        this._currToken = this._handleOddValue(i);
        return this._currToken;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextTextValue,"    public final String nextTextValue() throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_STRING) {
                if (this._tokenIncomplete) {
                    this._tokenIncomplete = false;
                    this._finishString();
                }
                return this._textBuffer.contentsAsString();
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return null;
        }
        return this.nextToken() == JsonToken.VALUE_STRING ? this.getText() : null;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextIntValue,"    public final int nextIntValue(int defaultValue) throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_NUMBER_INT) {
                return this.getIntValue();
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return defaultValue;
        }
        return this.nextToken() == JsonToken.VALUE_NUMBER_INT ? this.getIntValue() : defaultValue;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextLongValue,"    public final long nextLongValue(long defaultValue) throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_NUMBER_INT) {
                return this.getLongValue();
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return defaultValue;
        }
        return this.nextToken() == JsonToken.VALUE_NUMBER_INT ? this.getLongValue() : defaultValue;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextBooleanValue,"    public final Boolean nextBooleanValue() throws IOException {
        if (this._currToken == JsonToken.FIELD_NAME) {
            this._nameCopied = false;
            JsonToken t = this._nextToken;
            this._nextToken = null;
            this._currToken = t;
            if (t == JsonToken.VALUE_TRUE) {
                return Boolean.TRUE;
            }
            if (t == JsonToken.VALUE_FALSE) {
                return Boolean.FALSE;
            }
            if (t == JsonToken.START_ARRAY) {
                this._parsingContext = this._parsingContext.createChildArrayContext(this._tokenInputRow, this._tokenInputCol);
            } else if (t == JsonToken.START_OBJECT) {
                this._parsingContext = this._parsingContext.createChildObjectContext(this._tokenInputRow, this._tokenInputCol);
            }
            return null;
        }
        JsonToken t = this.nextToken();
        if (t != null) {
            int id = t.id();
            if (id == 9) {
                return Boolean.TRUE;
            }
            if (id == 10) {
                return Boolean.FALSE;
            }
        }
        return null;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parsePosNumber,"    protected final JsonToken _parsePosNumber(int ch) throws IOException {
        int ptr = this._inputPtr;
        int startPtr = ptr - 1;
        int inputLen = this._inputEnd;
        if (ch == 48) {
            return this._parseNumber2(false, startPtr);
        }
        int intLen = 1;
        while (true) {
            if (ptr >= inputLen) {
                this._inputPtr = startPtr;
                return this._parseNumber2(false, startPtr);
            }
            if ((ch = this._inputBuffer[ptr++]) < 48 || ch > 57) break;
            ++intLen;
        }
        if (ch == 46 || ch == 101 || ch == 69) {
            this._inputPtr = ptr;
            return this._parseFloat(ch, startPtr, ptr, false, intLen);
        }
        this._inputPtr = --ptr;
        if (this._parsingContext.inRoot()) {
            this._verifyRootSpace(ch);
        }
        int len = ptr - startPtr;
        this._textBuffer.resetWithShared(this._inputBuffer, startPtr, len);
        return this.resetInt(false, intLen);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat,"    private final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen) throws IOException {
        int inputLen = this._inputEnd;
        int fractLen = 0;
        if (ch == 46) {
            while (true) {
                if (ptr >= inputLen) {
                    return this._parseNumber2(neg, startPtr);
                }
                if ((ch = this._inputBuffer[ptr++]) < 48 || ch > 57) break;
                ++fractLen;
            }
            if (fractLen == 0) {
                this.reportUnexpectedNumberChar(ch, ""Decimal point not followed by a digit"");
            }
        }
        int expLen = 0;
        if (ch == 101 || ch == 69) {
            if (ptr >= inputLen) {
                this._inputPtr = startPtr;
                return this._parseNumber2(neg, startPtr);
            }
            if ((ch = this._inputBuffer[ptr++]) == 45 || ch == 43) {
                if (ptr >= inputLen) {
                    this._inputPtr = startPtr;
                    return this._parseNumber2(neg, startPtr);
                }
                ch = this._inputBuffer[ptr++];
            }
            while (ch <= 57 && ch >= 48) {
                ++expLen;
                if (ptr >= inputLen) {
                    this._inputPtr = startPtr;
                    return this._parseNumber2(neg, startPtr);
                }
                ch = this._inputBuffer[ptr++];
            }
            if (expLen == 0) {
                this.reportUnexpectedNumberChar(ch, ""Exponent indicator not followed by a digit"");
            }
        }
        this._inputPtr = --ptr;
        if (this._parsingContext.inRoot()) {
            this._verifyRootSpace(ch);
        }
        int len = ptr - startPtr;
        this._textBuffer.resetWithShared(this._inputBuffer, startPtr, len);
        return this.resetFloat(neg, intLen, fractLen, expLen);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNegNumber,"    protected final JsonToken _parseNegNumber() throws IOException {
        char ch;
        int ptr = this._inputPtr;
        int startPtr = ptr - 1;
        int inputLen = this._inputEnd;
        if (ptr >= inputLen) {
            return this._parseNumber2(true, startPtr);
        }
        if ((ch = this._inputBuffer[ptr++]) > '9' || ch < '0') {
            this._inputPtr = ptr;
            return this._handleInvalidNumberStart(ch, true);
        }
        if (ch == '0') {
            return this._parseNumber2(true, startPtr);
        }
        int intLen = 1;
        while (true) {
            if (ptr >= inputLen) {
                return this._parseNumber2(true, startPtr);
            }
            if ((ch = this._inputBuffer[ptr++]) < '0' || ch > '9') break;
            ++intLen;
        }
        if (ch == '.' || ch == 'e' || ch == 'E') {
            this._inputPtr = ptr;
            return this._parseFloat(ch, startPtr, ptr, true, intLen);
        }
        this._inputPtr = --ptr;
        if (this._parsingContext.inRoot()) {
            this._verifyRootSpace(ch);
        }
        int len = ptr - startPtr;
        this._textBuffer.resetWithShared(this._inputBuffer, startPtr, len);
        return this.resetInt(true, intLen);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber2,"    private final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException {
        char c;
        this._inputPtr = neg ? startPtr + 1 : startPtr;
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int outPtr = 0;
        if (neg) {
            outBuf[outPtr++] = 45;
        }
        int intLen = 0;
        char c2 = c = this._inputPtr < this._inputEnd ? this._inputBuffer[this._inputPtr++] : this.getNextChar(""No digit following minus sign"", JsonToken.VALUE_NUMBER_INT);
        if (c == '0') {
            c = this._verifyNoLeadingZeroes();
        }
        boolean eof = false;
        while (c >= '0' && c <= '9') {
            ++intLen;
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = c;
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                c = '\u0000';
                eof = true;
                break;
            }
            c = this._inputBuffer[this._inputPtr++];
        }
        if (intLen == 0) {
            return this._handleInvalidNumberStart(c, neg);
        }
        int fractLen = 0;
        if (c == '.') {
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = c;
            while (true) {
                if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                    eof = true;
                    break;
                }
                if ((c = this._inputBuffer[this._inputPtr++]) < '0' || c > '9') break;
                ++fractLen;
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = c;
            }
            if (fractLen == 0) {
                this.reportUnexpectedNumberChar(c, ""Decimal point not followed by a digit"");
            }
        }
        int expLen = 0;
        if (c == 'e' || c == 'E') {
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = c;
            char c3 = c = this._inputPtr < this._inputEnd ? this._inputBuffer[this._inputPtr++] : this.getNextChar(""expected a digit for number exponent"");
            if (c == '-' || c == '+') {
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = c;
                char c4 = c = this._inputPtr < this._inputEnd ? this._inputBuffer[this._inputPtr++] : this.getNextChar(""expected a digit for number exponent"");
            }
            while (c <= '9' && c >= '0') {
                ++expLen;
                if (outPtr >= outBuf.length) {
                    outBuf = this._textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                outBuf[outPtr++] = c;
                if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                    eof = true;
                    break;
                }
                c = this._inputBuffer[this._inputPtr++];
            }
            if (expLen == 0) {
                this.reportUnexpectedNumberChar(c, ""Exponent indicator not followed by a digit"");
            }
        }
        if (!eof) {
            --this._inputPtr;
            if (this._parsingContext.inRoot()) {
                this._verifyRootSpace(c);
            }
        }
        this._textBuffer.setCurrentLength(outPtr);
        return this.reset(neg, intLen, fractLen, expLen);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._verifyNoLeadingZeroes,"    private final char _verifyNoLeadingZeroes() throws IOException {
        char ch;
        if (this._inputPtr < this._inputEnd && ((ch = this._inputBuffer[this._inputPtr]) < '0' || ch > '9')) {
            return '0';
        }
        return this._verifyNLZ2();
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._verifyNLZ2,"    private char _verifyNLZ2() throws IOException {
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            return '0';
        }
        char ch = this._inputBuffer[this._inputPtr];
        if (ch < '0' || ch > '9') {
            return '0';
        }
        if (!this.isEnabled(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {
            this.reportInvalidNumber(""Leading zeroes not allowed"");
        }
        ++this._inputPtr;
        if (ch == '0') {
            while (this._inputPtr < this._inputEnd || this._loadMore()) {
                ch = this._inputBuffer[this._inputPtr];
                if (ch < '0' || ch > '9') {
                    return '0';
                }
                ++this._inputPtr;
                if (ch == '0') continue;
                break;
            }
        }
        return ch;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart,"    protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException {
        if (ch == 73) {
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);
            }
            if ((ch = this._inputBuffer[this._inputPtr++]) == 78) {
                String match = negative ? ""-INF"" : ""+INF"";
                this._matchToken(match, 3);
                if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                    return this.resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
                }
                this._reportError(""Non-standard token '"" + match + ""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            } else if (ch == 110) {
                String match = negative ? ""-Infinity"" : ""+Infinity"";
                this._matchToken(match, 3);
                if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                    return this.resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
                }
                this._reportError(""Non-standard token '"" + match + ""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
            }
        }
        this.reportUnexpectedNumberChar(ch, ""expected digit (0-9) to follow minus sign, for valid numeric value"");
        return null;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._verifyRootSpace,"    private final void _verifyRootSpace(int ch) throws IOException {
        ++this._inputPtr;
        switch (ch) {
            case 9: 
            case 32: {
                return;
            }
            case 13: {
                this._skipCR();
                return;
            }
            case 10: {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                return;
            }
        }
        this._reportMissingRootWS(ch);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName,"    protected final String _parseName() throws IOException {
        int ptr;
        int hash = this._hashSeed;
        int[] codes = _icLatin1;
        for (ptr = this._inputPtr; ptr < this._inputEnd; ++ptr) {
            char ch = this._inputBuffer[ptr];
            if (ch < codes.length && codes[ch] != 0) {
                if (ch != '\""') break;
                int start = this._inputPtr;
                this._inputPtr = ptr + 1;
                return this._symbols.findSymbol(this._inputBuffer, start, ptr - start, hash);
            }
            hash = hash * 33 + ch;
        }
        int start = this._inputPtr;
        this._inputPtr = ptr;
        return this._parseName2(start, hash, 34);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName2,"    private String _parseName2(int startPtr, int hash, int endChar) throws IOException {
        this._textBuffer.resetWithShared(this._inputBuffer, startPtr, this._inputPtr - startPtr);
        char[] outBuf = this._textBuffer.getCurrentSegment();
        int outPtr = this._textBuffer.getCurrentSegmentSize();
        while (true) {
            char c;
            char i;
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
            if ((i = (c = this._inputBuffer[this._inputPtr++])) <= '\\') {
                if (i == '\\') {
                    c = this._decodeEscaped();
                } else if (i <= endChar) {
                    if (i == endChar) break;
                    if (i < ' ') {
                        this._throwUnquotedSpace(i, ""name"");
                    }
                }
            }
            hash = hash * 33 + c;
            outBuf[outPtr++] = c;
            if (outPtr < outBuf.length) continue;
            outBuf = this._textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        this._textBuffer.setCurrentLength(outPtr);
        TextBuffer tb = this._textBuffer;
        char[] buf = tb.getTextBuffer();
        int start = tb.getTextOffset();
        int len = tb.size();
        return this._symbols.findSymbol(buf, start, len, hash);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName,"    protected String _handleOddName(int i) throws IOException {
        int[] codes;
        int maxCode;
        boolean firstOk;
        if (i == 39 && this.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES)) {
            return this._parseAposName();
        }
        if (!this.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
            this._reportUnexpectedChar(i, ""was expecting double-quote to start field name"");
        }
        if (!(firstOk = i < (maxCode = (codes = CharTypes.getInputCodeLatin1JsNames()).length) ? codes[i] == 0 : Character.isJavaIdentifierPart((char)i))) {
            this._reportUnexpectedChar(i, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
        }
        int ptr = this._inputPtr;
        int hash = this._hashSeed;
        int inputLen = this._inputEnd;
        if (ptr < inputLen) {
            do {
                char ch;
                if ((ch = this._inputBuffer[ptr]) < maxCode) {
                    if (codes[ch] != 0) {
                        int start = this._inputPtr - 1;
                        this._inputPtr = ptr;
                        return this._symbols.findSymbol(this._inputBuffer, start, ptr - start, hash);
                    }
                } else if (!Character.isJavaIdentifierPart(ch)) {
                    int start = this._inputPtr - 1;
                    this._inputPtr = ptr;
                    return this._symbols.findSymbol(this._inputBuffer, start, ptr - start, hash);
                }
                hash = hash * 33 + ch;
            } while (++ptr < inputLen);
        }
        int start = this._inputPtr - 1;
        this._inputPtr = ptr;
        return this._handleOddName2(start, hash, codes);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseAposName,"    protected String _parseAposName() throws IOException {
        int ptr = this._inputPtr;
        int hash = this._hashSeed;
        int inputLen = this._inputEnd;
        if (ptr < inputLen) {
            int[] codes = _icLatin1;
            int maxCode = codes.length;
            do {
                char ch;
                if ((ch = this._inputBuffer[ptr]) == '\'') {
                    int start = this._inputPtr;
                    this._inputPtr = ptr + 1;
                    return this._symbols.findSymbol(this._inputBuffer, start, ptr - start, hash);
                }
                if (ch < maxCode && codes[ch] != 0) break;
                hash = hash * 33 + ch;
            } while (++ptr < inputLen);
        }
        int start = this._inputPtr;
        this._inputPtr = ptr;
        return this._parseName2(start, hash, 39);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue,"    protected JsonToken _handleOddValue(int i) throws IOException {
        switch (i) {
            case 39: {
                if (!this.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES)) break;
                return this._handleApos();
            }
            case 93: {
                if (!this._parsingContext.inArray()) break;
            }
            case 44: {
                if (!this.isEnabled(JsonParser.Feature.ALLOW_MISSING_VALUES)) break;
                --this._inputPtr;
                return JsonToken.VALUE_NULL;
            }
            case 78: {
                this._matchToken(""NaN"", 1);
                if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                    return this.resetAsNaN(""NaN"", Double.NaN);
                }
                this._reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
                break;
            }
            case 73: {
                this._matchToken(""Infinity"", 1);
                if (this.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
                    return this.resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
                }
                this._reportError(""Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");
                break;
            }
            case 43: {
                if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                    this._reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);
                }
                return this._handleInvalidNumberStart(this._inputBuffer[this._inputPtr++], false);
            }
        }
        if (Character.isJavaIdentifierStart(i)) {
            this._reportInvalidToken("""" + (char)i, ""('true', 'false' or 'null')"");
        }
        this._reportUnexpectedChar(i, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");
        return null;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleApos,"    protected JsonToken _handleApos() throws IOException {
        char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();
        int outPtr = this._textBuffer.getCurrentSegmentSize();
        while (true) {
            char c;
            char i;
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOF("": was expecting closing quote for a string value"", JsonToken.VALUE_STRING);
            }
            if ((i = (c = this._inputBuffer[this._inputPtr++])) <= '\\') {
                if (i == '\\') {
                    c = this._decodeEscaped();
                } else if (i <= '\'') {
                    if (i == '\'') break;
                    if (i < ' ') {
                        this._throwUnquotedSpace(i, ""string value"");
                    }
                }
            }
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = c;
        }
        this._textBuffer.setCurrentLength(outPtr);
        return JsonToken.VALUE_STRING;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName2,"    private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException {
        char c;
        char i;
        this._textBuffer.resetWithShared(this._inputBuffer, startPtr, this._inputPtr - startPtr);
        char[] outBuf = this._textBuffer.getCurrentSegment();
        int outPtr = this._textBuffer.getCurrentSegmentSize();
        int maxCode = codes.length;
        while ((this._inputPtr < this._inputEnd || this._loadMore()) && !((i = (c = this._inputBuffer[this._inputPtr])) <= maxCode ? codes[i] != 0 : !Character.isJavaIdentifierPart(c))) {
            ++this._inputPtr;
            hash = hash * 33 + i;
            outBuf[outPtr++] = c;
            if (outPtr < outBuf.length) continue;
            outBuf = this._textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        this._textBuffer.setCurrentLength(outPtr);
        TextBuffer tb = this._textBuffer;
        char[] buf = tb.getTextBuffer();
        int start = tb.getTextOffset();
        int len = tb.size();
        return this._symbols.findSymbol(buf, start, len, hash);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._finishString,"    protected final void _finishString() throws IOException {
        int ptr = this._inputPtr;
        int inputLen = this._inputEnd;
        if (ptr < inputLen) {
            int[] codes = _icLatin1;
            int maxCode = codes.length;
            do {
                char ch;
                if ((ch = this._inputBuffer[ptr]) >= maxCode || codes[ch] == 0) continue;
                if (ch != '\""') break;
                this._textBuffer.resetWithShared(this._inputBuffer, this._inputPtr, ptr - this._inputPtr);
                this._inputPtr = ptr + 1;
                return;
            } while (++ptr < inputLen);
        }
        this._textBuffer.resetWithCopy(this._inputBuffer, this._inputPtr, ptr - this._inputPtr);
        this._inputPtr = ptr;
        this._finishString2();
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._finishString2,"    protected void _finishString2() throws IOException {
        char[] outBuf = this._textBuffer.getCurrentSegment();
        int outPtr = this._textBuffer.getCurrentSegmentSize();
        int[] codes = _icLatin1;
        int maxCode = codes.length;
        while (true) {
            char c;
            char i;
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOF("": was expecting closing quote for a string value"", JsonToken.VALUE_STRING);
            }
            if ((i = (c = this._inputBuffer[this._inputPtr++])) < maxCode && codes[i] != 0) {
                if (i == '\""') break;
                if (i == '\\') {
                    c = this._decodeEscaped();
                } else if (i < ' ') {
                    this._throwUnquotedSpace(i, ""string value"");
                }
            }
            if (outPtr >= outBuf.length) {
                outBuf = this._textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = c;
        }
        this._textBuffer.setCurrentLength(outPtr);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipString,"    protected final void _skipString() throws IOException {
        this._tokenIncomplete = false;
        int inPtr = this._inputPtr;
        int inLen = this._inputEnd;
        char[] inBuf = this._inputBuffer;
        while (true) {
            char c;
            char i;
            if (inPtr >= inLen) {
                this._inputPtr = inPtr;
                if (!this._loadMore()) {
                    this._reportInvalidEOF("": was expecting closing quote for a string value"", JsonToken.VALUE_STRING);
                }
                inPtr = this._inputPtr;
                inLen = this._inputEnd;
            }
            if ((i = (c = inBuf[inPtr++])) > '\\') continue;
            if (i == '\\') {
                this._inputPtr = inPtr;
                this._decodeEscaped();
                inPtr = this._inputPtr;
                inLen = this._inputEnd;
                continue;
            }
            if (i > '\""') continue;
            if (i == '\""') break;
            if (i >= ' ') continue;
            this._inputPtr = inPtr;
            this._throwUnquotedSpace(i, ""string value"");
        }
        this._inputPtr = inPtr;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipCR,"    protected final void _skipCR() throws IOException {
        if ((this._inputPtr < this._inputEnd || this._loadMore()) && this._inputBuffer[this._inputPtr] == '\n') {
            ++this._inputPtr;
        }
        ++this._currInputRow;
        this._currInputRowStart = this._inputPtr;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColon,"    private final int _skipColon() throws IOException {
        if (this._inputPtr + 4 >= this._inputEnd) {
            return this._skipColon2(false);
        }
        char c = this._inputBuffer[this._inputPtr];
        if (c == ':') {
            char i;
            if ((i = this._inputBuffer[++this._inputPtr]) > ' ') {
                if (i == '/' || i == '#') {
                    return this._skipColon2(true);
                }
                ++this._inputPtr;
                return i;
            }
            if ((i == ' ' || i == '\t') && (i = this._inputBuffer[++this._inputPtr]) > ' ') {
                if (i == '/' || i == '#') {
                    return this._skipColon2(true);
                }
                ++this._inputPtr;
                return i;
            }
            return this._skipColon2(true);
        }
        if (c == ' ' || c == '\t') {
            c = this._inputBuffer[++this._inputPtr];
        }
        if (c == ':') {
            char i;
            if ((i = this._inputBuffer[++this._inputPtr]) > ' ') {
                if (i == '/' || i == '#') {
                    return this._skipColon2(true);
                }
                ++this._inputPtr;
                return i;
            }
            if ((i == ' ' || i == '\t') && (i = this._inputBuffer[++this._inputPtr]) > ' ') {
                if (i == '/' || i == '#') {
                    return this._skipColon2(true);
                }
                ++this._inputPtr;
                return i;
            }
            return this._skipColon2(true);
        }
        return this._skipColon2(false);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColon2,"    private final int _skipColon2(boolean gotColon) throws IOException {
        while (this._inputPtr < this._inputEnd || this._loadMore()) {
            char i;
            if ((i = this._inputBuffer[this._inputPtr++]) > ' ') {
                if (i == '/') {
                    this._skipComment();
                    continue;
                }
                if (i == '#' && this._skipYAMLComment()) continue;
                if (gotColon) {
                    return i;
                }
                if (i != ':') {
                    this._reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");
                }
                gotColon = true;
                continue;
            }
            if (i >= ' ') continue;
            if (i == '\n') {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == '\r') {
                this._skipCR();
                continue;
            }
            if (i == '\t') continue;
            this._throwInvalidSpace(i);
        }
        this._reportInvalidEOF("" within/between "" + this._parsingContext.typeDesc() + "" entries"", null);
        return -1;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColonFast,"    private final int _skipColonFast(int ptr) throws IOException {
        boolean gotColon;
        char i;
        if ((i = this._inputBuffer[ptr++]) == ':') {
            if ((i = this._inputBuffer[ptr++]) > ' ') {
                if (i != '/' && i != '#') {
                    this._inputPtr = ptr;
                    return i;
                }
            } else if ((i == ' ' || i == '\t') && (i = this._inputBuffer[ptr++]) > ' ' && i != '/' && i != '#') {
                this._inputPtr = ptr;
                return i;
            }
            this._inputPtr = ptr - 1;
            return this._skipColon2(true);
        }
        if (i == ' ' || i == '\t') {
            i = this._inputBuffer[ptr++];
        }
        boolean bl = gotColon = i == ':';
        if (gotColon) {
            if ((i = this._inputBuffer[ptr++]) > ' ') {
                if (i != '/' && i != '#') {
                    this._inputPtr = ptr;
                    return i;
                }
            } else if ((i == ' ' || i == '\t') && (i = this._inputBuffer[ptr++]) > ' ' && i != '/' && i != '#') {
                this._inputPtr = ptr;
                return i;
            }
        }
        this._inputPtr = ptr - 1;
        return this._skipColon2(gotColon);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipComma,"    private final int _skipComma(int i) throws IOException {
        if (i != 44) {
            this._reportUnexpectedChar(i, ""was expecting comma to separate "" + this._parsingContext.typeDesc() + "" entries"");
        }
        while (this._inputPtr < this._inputEnd) {
            if ((i = this._inputBuffer[this._inputPtr++]) > 32) {
                if (i == 47 || i == 35) {
                    --this._inputPtr;
                    return this._skipAfterComma2();
                }
                return i;
            }
            if (i >= 32) continue;
            if (i == 10) {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == 13) {
                this._skipCR();
                continue;
            }
            if (i == 9) continue;
            this._throwInvalidSpace(i);
        }
        return this._skipAfterComma2();
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipAfterComma2,"    private final int _skipAfterComma2() throws IOException {
        while (this._inputPtr < this._inputEnd || this._loadMore()) {
            char i;
            if ((i = this._inputBuffer[this._inputPtr++]) > ' ') {
                if (i == '/') {
                    this._skipComment();
                    continue;
                }
                if (i == '#' && this._skipYAMLComment()) continue;
                return i;
            }
            if (i >= ' ') continue;
            if (i == '\n') {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == '\r') {
                this._skipCR();
                continue;
            }
            if (i == '\t') continue;
            this._throwInvalidSpace(i);
        }
        throw this._constructError(""Unexpected end-of-input within/between "" + this._parsingContext.typeDesc() + "" entries"");
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd,"    private final int _skipWSOrEnd() throws IOException {
        char i;
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            return this._eofAsNextChar();
        }
        if ((i = this._inputBuffer[this._inputPtr++]) > ' ') {
            if (i == '/' || i == '#') {
                --this._inputPtr;
                return this._skipWSOrEnd2();
            }
            return i;
        }
        if (i != ' ') {
            if (i == '\n') {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
            } else if (i == '\r') {
                this._skipCR();
            } else if (i != '\t') {
                this._throwInvalidSpace(i);
            }
        }
        while (this._inputPtr < this._inputEnd) {
            if ((i = this._inputBuffer[this._inputPtr++]) > ' ') {
                if (i == '/' || i == '#') {
                    --this._inputPtr;
                    return this._skipWSOrEnd2();
                }
                return i;
            }
            if (i == ' ') continue;
            if (i == '\n') {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == '\r') {
                this._skipCR();
                continue;
            }
            if (i == '\t') continue;
            this._throwInvalidSpace(i);
        }
        return this._skipWSOrEnd2();
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd2,"    private int _skipWSOrEnd2() throws IOException {
        while (this._inputPtr < this._inputEnd || this._loadMore()) {
            char i;
            if ((i = this._inputBuffer[this._inputPtr++]) > ' ') {
                if (i == '/') {
                    this._skipComment();
                    continue;
                }
                if (i == '#' && this._skipYAMLComment()) continue;
                return i;
            }
            if (i == ' ') continue;
            if (i == '\n') {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == '\r') {
                this._skipCR();
                continue;
            }
            if (i == '\t') continue;
            this._throwInvalidSpace(i);
        }
        return this._eofAsNextChar();
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipComment,"    private void _skipComment() throws IOException {
        char c;
        if (!this.isEnabled(JsonParser.Feature.ALLOW_COMMENTS)) {
            this._reportUnexpectedChar(47, ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"");
        }
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            this._reportInvalidEOF("" in a comment"", null);
        }
        if ((c = this._inputBuffer[this._inputPtr++]) == '/') {
            this._skipLine();
        } else if (c == '*') {
            this._skipCComment();
        } else {
            this._reportUnexpectedChar(c, ""was expecting either '*' or '/' for a comment"");
        }
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipCComment,"    private void _skipCComment() throws IOException {
        while (this._inputPtr < this._inputEnd || this._loadMore()) {
            char i;
            if ((i = this._inputBuffer[this._inputPtr++]) > '*') continue;
            if (i == '*') {
                if (this._inputPtr >= this._inputEnd && !this._loadMore()) break;
                if (this._inputBuffer[this._inputPtr] != '/') continue;
                ++this._inputPtr;
                return;
            }
            if (i >= ' ') continue;
            if (i == '\n') {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                continue;
            }
            if (i == '\r') {
                this._skipCR();
                continue;
            }
            if (i == '\t') continue;
            this._throwInvalidSpace(i);
        }
        this._reportInvalidEOF("" in a comment"", null);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipYAMLComment,"    private boolean _skipYAMLComment() throws IOException {
        if (!this.isEnabled(JsonParser.Feature.ALLOW_YAML_COMMENTS)) {
            return false;
        }
        this._skipLine();
        return true;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipLine,"    private void _skipLine() throws IOException {
        while (this._inputPtr < this._inputEnd || this._loadMore()) {
            char i;
            if ((i = this._inputBuffer[this._inputPtr++]) >= ' ') continue;
            if (i == '\n') {
                ++this._currInputRow;
                this._currInputRowStart = this._inputPtr;
                break;
            }
            if (i == '\r') {
                this._skipCR();
                break;
            }
            if (i == '\t') continue;
            this._throwInvalidSpace(i);
        }
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._decodeEscaped,"    protected char _decodeEscaped() throws IOException {
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            this._reportInvalidEOF("" in character escape sequence"", JsonToken.VALUE_STRING);
        }
        char c = this._inputBuffer[this._inputPtr++];
        switch (c) {
            case 'b': {
                return '\b';
            }
            case 't': {
                return '\t';
            }
            case 'n': {
                return '\n';
            }
            case 'f': {
                return '\f';
            }
            case 'r': {
                return '\r';
            }
            case '\""': 
            case '/': 
            case '\\': {
                return c;
            }
            case 'u': {
                break;
            }
            default: {
                return this._handleUnrecognizedCharacterEscape(c);
            }
        }
        int value = 0;
        for (int i = 0; i < 4; ++i) {
            char ch;
            int digit;
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidEOF("" in character escape sequence"", JsonToken.VALUE_STRING);
            }
            if ((digit = CharTypes.charToHex(ch = this._inputBuffer[this._inputPtr++])) < 0) {
                this._reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
            }
            value = value << 4 | digit;
        }
        return (char)value;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchTrue,"    private final void _matchTrue() throws IOException {
        char c;
        char[] b;
        int ptr = this._inputPtr;
        if (ptr + 3 < this._inputEnd && (b = this._inputBuffer)[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e' && ((c = b[++ptr]) < '0' || c == ']' || c == '}')) {
            this._inputPtr = ptr;
            return;
        }
        this._matchToken(""true"", 1);
    "
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchFalse,"    private final void _matchFalse() throws IOException {
        char c;
        char[] b;
        int ptr = this._inputPtr;
        if (ptr + 4 < this._inputEnd && (b = this._inputBuffer)[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e' && ((c = b[++ptr]) < '0' || c == ']' || c == '}')) {
            this._inputPtr = ptr;
            return;
        }
        this._matchToken(""false"", 1);
    "
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchNull,"    private final void _matchNull() throws IOException {
        char c;
        char[] b;
        int ptr = this._inputPtr;
        if (ptr + 3 < this._inputEnd && (b = this._inputBuffer)[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l' && ((c = b[++ptr]) < '0' || c == ']' || c == '}')) {
            this._inputPtr = ptr;
            return;
        }
        this._matchToken(""null"", 1);
    "
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken,"    protected final void _matchToken(String matchStr, int i) throws IOException {
        int len = matchStr.length();
        do {
            if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
                this._reportInvalidToken(matchStr.substring(0, i));
            }
            if (this._inputBuffer[this._inputPtr] != matchStr.charAt(i)) {
                this._reportInvalidToken(matchStr.substring(0, i));
            }
            ++this._inputPtr;
        } while (++i < len);
        if (this._inputPtr >= this._inputEnd && !this._loadMore()) {
            return;
        }
        char c = this._inputBuffer[this._inputPtr];
        if (c < '0' || c == ']' || c == '}') {
            return;
        }
        if (Character.isJavaIdentifierPart(c)) {
            this._reportInvalidToken(matchStr.substring(0, i));
        }
    "
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._decodeBase64,"    protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException {
        ByteArrayBuilder builder = this._getByteArrayBuilder();
        while (true) {
            char ch;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((ch = this._inputBuffer[this._inputPtr++]) <= ' ') continue;
            int bits = b64variant.decodeBase64Char(ch);
            if (bits < 0) {
                if (ch == '\""') {
                    return builder.toByteArray();
                }
                bits = this._decodeBase64Escape(b64variant, ch, 0);
                if (bits < 0) continue;
            }
            int decodedData = bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++])) < 0) {
                bits = this._decodeBase64Escape(b64variant, ch, 1);
            }
            decodedData = decodedData << 6 | bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++])) < 0) {
                if (bits != -2) {
                    if (ch == '\""' && !b64variant.usesPadding()) {
                        builder.append(decodedData >>= 4);
                        return builder.toByteArray();
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 2);
                }
                if (bits == -2) {
                    if (this._inputPtr >= this._inputEnd) {
                        this._loadMoreGuaranteed();
                    }
                    if (!b64variant.usesPaddingChar(ch = this._inputBuffer[this._inputPtr++])) {
                        throw this.reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                    builder.append(decodedData >>= 4);
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            if (this._inputPtr >= this._inputEnd) {
                this._loadMoreGuaranteed();
            }
            if ((bits = b64variant.decodeBase64Char(ch = this._inputBuffer[this._inputPtr++])) < 0) {
                if (bits != -2) {
                    if (ch == '\""' && !b64variant.usesPadding()) {
                        builder.appendTwoBytes(decodedData >>= 2);
                        return builder.toByteArray();
                    }
                    bits = this._decodeBase64Escape(b64variant, ch, 3);
                }
                if (bits == -2) {
                    builder.appendTwoBytes(decodedData >>= 2);
                    continue;
                }
            }
            decodedData = decodedData << 6 | bits;
            builder.appendThreeBytes(decodedData);
        }
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTokenLocation,"    public JsonLocation getTokenLocation() {
        Object src = this._ioContext.getSourceReference();
        if (this._currToken == JsonToken.FIELD_NAME) {
            long total = this._currInputProcessed + (this._nameStartOffset - 1L);
            return new JsonLocation(src, -1L, total, this._nameStartRow, this._nameStartCol);
        }
        return new JsonLocation(src, -1L, this._tokenInputTotal - 1L, this._tokenInputRow, this._tokenInputCol);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getCurrentLocation,"    public JsonLocation getCurrentLocation() {
        int col = this._inputPtr - this._currInputRowStart + 1;
        return new JsonLocation(this._ioContext.getSourceReference(), -1L, this._currInputProcessed + (long)this._inputPtr, this._currInputRow, col);
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._updateLocation,"    private final void _updateLocation() {
        int ptr = this._inputPtr;
        this._tokenInputTotal = this._currInputProcessed + (long)ptr;
        this._tokenInputRow = this._currInputRow;
        this._tokenInputCol = ptr - this._currInputRowStart;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._updateNameLocation,"    private final void _updateNameLocation() {
        int ptr = this._inputPtr;
        this._nameStartOffset = ptr;
        this._nameStartRow = this._currInputRow;
        this._nameStartCol = ptr - this._currInputRowStart;
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken,"    protected void _reportInvalidToken(String matchedPart) throws IOException {
        this._reportInvalidToken(matchedPart, ""'null', 'true', 'false' or NaN"");
    }"
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken,"    protected void _reportInvalidToken(String matchedPart, String msg) throws IOException {
        char c;
        StringBuilder sb = new StringBuilder(matchedPart);
        int maxTokenLength = 256;
        while (sb.length() < 256 && (this._inputPtr < this._inputEnd || this._loadMore()) && Character.isJavaIdentifierPart(c = this._inputBuffer[this._inputPtr])) {
            ++this._inputPtr;
            sb.append(c);
        }
        if (sb.length() == 256) {
            sb.append(""..."");
        }
        this._reportError(""Unrecognized token '"" + sb.toString() + ""': was expecting "" + msg);
    }
"
com.fasterxml.jackson.core.json.JsonReadContext.reset,"    protected void reset(int type, int lineNr, int colNr) {
        this._type = type;
        this._index = -1;
        this._lineNr = lineNr;
        this._columnNr = colNr;
        this._currentName = null;
        this._currentValue = null;
        if (this._dups != null) {
            this._dups.reset();
        }
    }"
com.fasterxml.jackson.core.json.JsonReadContext.withDupDetector,"    public JsonReadContext withDupDetector(DupDetector dups) {
        this._dups = dups;
        return this;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.getCurrentValue,"    public Object getCurrentValue() {
        return this._currentValue;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.setCurrentValue,"    public void setCurrentValue(Object v) {
        this._currentValue = v;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.createRootContext,"    public static JsonReadContext createRootContext(int lineNr, int colNr, DupDetector dups) {
        return new JsonReadContext(null, dups, 0, lineNr, colNr);
    }"
com.fasterxml.jackson.core.json.JsonReadContext.createRootContext,"    public static JsonReadContext createRootContext(DupDetector dups) {
        return new JsonReadContext(null, dups, 0, 1, 0);
    }"
com.fasterxml.jackson.core.json.JsonReadContext.createChildArrayContext,"    public JsonReadContext createChildArrayContext(int lineNr, int colNr) {
        JsonReadContext ctxt = this._child;
        if (ctxt == null) {
            this._child = ctxt = new JsonReadContext(this, this._dups == null ? null : this._dups.child(), 1, lineNr, colNr);
        } else {
            ctxt.reset(1, lineNr, colNr);
        }
        return ctxt;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.createChildObjectContext,"    public JsonReadContext createChildObjectContext(int lineNr, int colNr) {
        JsonReadContext ctxt = this._child;
        if (ctxt == null) {
            this._child = ctxt = new JsonReadContext(this, this._dups == null ? null : this._dups.child(), 2, lineNr, colNr);
            return ctxt;
        }
        ctxt.reset(2, lineNr, colNr);
        return ctxt;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.getCurrentName,"    public String getCurrentName() {
        return this._currentName;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.getParent,"    public JsonReadContext getParent() {
        return this._parent;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.clearAndGetParent,"    public JsonReadContext clearAndGetParent() {
        this._currentValue = null;
        return this._parent;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.getStartLocation,"    public JsonLocation getStartLocation(Object srcRef) {
        long totalChars = -1L;
        return new JsonLocation(srcRef, totalChars, this._lineNr, this._columnNr);
    }"
com.fasterxml.jackson.core.json.JsonReadContext.getDupDetector,"    public DupDetector getDupDetector() {
        return this._dups;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.expectComma,"    public boolean expectComma() {
        int ix = ++this._index;
        return this._type != 0 && ix > 0;
    }"
com.fasterxml.jackson.core.json.JsonReadContext.setCurrentName,"    public void setCurrentName(String name) throws JsonProcessingException {
        this._currentName = name;
        if (this._dups != null) {
            this._checkDup(this._dups, name);
        }
    }"
com.fasterxml.jackson.core.json.JsonReadContext._checkDup,"    private void _checkDup(DupDetector dd, String name) throws JsonProcessingException {
        if (dd.isDup(name)) {
            Object src = dd.getSource();
            throw new JsonParseException(src instanceof JsonParser ? (JsonParser)src : null, ""Duplicate field '"" + name + ""'"");
        }
    }"
com.fasterxml.jackson.core.json.JsonReadContext.toString,"    public String toString() {
        StringBuilder sb = new StringBuilder(64);
        switch (this._type) {
            case 0: {
                sb.append(""/"");
                break;
            }
            case 1: {
                sb.append('[');
                sb.append(this.getCurrentIndex());
                sb.append(']');
                break;
            }
            default: {
                sb.append('{');
                if (this._currentName != null) {
                    sb.append('\""');
                    CharTypes.appendQuoted(sb, this._currentName);
                    sb.append('\""');
                } else {
                    sb.append('?');
                }
                sb.append('}');
            }
        }
        return sb.toString();
    }
"
com.fasterxml.jackson.core.type.ResolvedType.getRawClass,
com.fasterxml.jackson.core.type.ResolvedType.hasRawClass,
com.fasterxml.jackson.core.type.ResolvedType.isAbstract,
com.fasterxml.jackson.core.type.ResolvedType.isConcrete,
com.fasterxml.jackson.core.type.ResolvedType.isThrowable,
com.fasterxml.jackson.core.type.ResolvedType.isArrayType,
com.fasterxml.jackson.core.type.ResolvedType.isEnumType,
com.fasterxml.jackson.core.type.ResolvedType.isInterface,
com.fasterxml.jackson.core.type.ResolvedType.isPrimitive,
com.fasterxml.jackson.core.type.ResolvedType.isFinal,
com.fasterxml.jackson.core.type.ResolvedType.isContainerType,
com.fasterxml.jackson.core.type.ResolvedType.isCollectionLikeType,
com.fasterxml.jackson.core.type.ResolvedType.isReferenceType,"    public boolean isReferenceType() {
        return this.getReferencedType() != null;
    }"
com.fasterxml.jackson.core.type.ResolvedType.isMapLikeType,
com.fasterxml.jackson.core.type.ResolvedType.hasGenericTypes,
com.fasterxml.jackson.core.type.ResolvedType.getParameterSource,"    public Class<?> getParameterSource() {
        return null;
    }"
com.fasterxml.jackson.core.type.ResolvedType.getKeyType,
com.fasterxml.jackson.core.type.ResolvedType.getContentType,
com.fasterxml.jackson.core.type.ResolvedType.getReferencedType,
com.fasterxml.jackson.core.type.ResolvedType.containedTypeCount,
com.fasterxml.jackson.core.type.ResolvedType.containedType,
com.fasterxml.jackson.core.type.ResolvedType.containedTypeName,
com.fasterxml.jackson.core.type.ResolvedType.toCanonical,"    public abstract String toCanonical();
"
com.fasterxml.jackson.core.type.TypeReference.getType,"    public Type getType() {
        return this._type;
    }"
com.fasterxml.jackson.core.type.TypeReference.compareTo,"    public int compareTo(TypeReference<T> o) {
        return 0;
    }
"
com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch,"    public boolean hasMatch() {
        return this._match != null;
    }"
com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength,"    public MatchStrength getMatchStrength() {
        return this._matchStrength == null ? MatchStrength.INCONCLUSIVE : this._matchStrength;
    }"
com.fasterxml.jackson.core.format.DataFormatMatcher.getMatch,"    public JsonFactory getMatch() {
        return this._match;
    }"
com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchedFormatName,"    public String getMatchedFormatName() {
        return this._match.getFormatName();
    }"
com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch,"    public JsonParser createParserWithMatch() throws IOException {
        if (this._match == null) {
            return null;
        }
        if (this._originalStream == null) {
            return this._match.createParser(this._bufferedData, this._bufferedStart, this._bufferedLength);
        }
        return this._match.createParser(this.getDataStream());
    }"
com.fasterxml.jackson.core.format.DataFormatMatcher.getDataStream,"    public InputStream getDataStream() {
        if (this._originalStream == null) {
            return new ByteArrayInputStream(this._bufferedData, this._bufferedStart, this._bufferedLength);
        }
        return new MergedStream(null, this._originalStream, this._bufferedData, this._bufferedStart, this._bufferedLength);
    }
"
com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch,"    public DataFormatDetector withOptimalMatch(MatchStrength optMatch) {
        if (optMatch == this._optimalMatch) {
            return this;
        }
        return new DataFormatDetector(this._detectors, optMatch, this._minimalMatch, this._maxInputLookahead);
    }"
com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch,"    public DataFormatDetector withMinimalMatch(MatchStrength minMatch) {
        if (minMatch == this._minimalMatch) {
            return this;
        }
        return new DataFormatDetector(this._detectors, this._optimalMatch, minMatch, this._maxInputLookahead);
    }"
com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead,"    public DataFormatDetector withMaxInputLookahead(int lookaheadBytes) {
        if (lookaheadBytes == this._maxInputLookahead) {
            return this;
        }
        return new DataFormatDetector(this._detectors, this._optimalMatch, this._minimalMatch, lookaheadBytes);
    }"
com.fasterxml.jackson.core.format.DataFormatDetector.findFormat,"    public DataFormatMatcher findFormat(InputStream in) throws IOException {
        return this._findFormat(new InputAccessor.Std(in, new byte[this._maxInputLookahead]));
    }"
com.fasterxml.jackson.core.format.DataFormatDetector.findFormat,"    public DataFormatMatcher findFormat(byte[] fullInputData) throws IOException {
        return this._findFormat(new InputAccessor.Std(fullInputData));
    }"
com.fasterxml.jackson.core.format.DataFormatDetector.findFormat,"    public DataFormatMatcher findFormat(byte[] fullInputData, int offset, int len) throws IOException {
        return this._findFormat(new InputAccessor.Std(fullInputData, offset, len));
    }"
com.fasterxml.jackson.core.format.DataFormatDetector.toString,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append('[');
        int len = this._detectors.length;
        if (len > 0) {
            sb.append(this._detectors[0].getFormatName());
            for (int i = 1; i < len; ++i) {
                sb.append("", "");
                sb.append(this._detectors[i].getFormatName());
            }
        }
        sb.append(']');
        return sb.toString();
    }"
com.fasterxml.jackson.core.format.DataFormatDetector._findFormat,"    private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException {
        JsonFactory bestMatch = null;
        Enum bestMatchStrength = null;
        for (JsonFactory f : this._detectors) {
            acc.reset();
            MatchStrength strength = f.hasFormat(acc);
            if (strength == null || strength.ordinal() < this._minimalMatch.ordinal() || bestMatch != null && bestMatchStrength.ordinal() >= strength.ordinal()) continue;
            bestMatch = f;
            bestMatchStrength = strength;
            if (strength.ordinal() >= this._optimalMatch.ordinal()) break;
        }
        return acc.createMatcher(bestMatch, (MatchStrength)bestMatchStrength);
    }
"
com.fasterxml.jackson.core.format.InputAccessor.hasMoreBytes,
com.fasterxml.jackson.core.format.InputAccessor.nextByte,
com.fasterxml.jackson.core.format.InputAccessor.reset,
com.fasterxml.jackson.core.format.InputAccessor.hasMoreBytes,"        public boolean hasMoreBytes() throws IOException {
            if (this._ptr < this._bufferedEnd) {
                return true;
            }
            if (this._in == null) {
                return false;
            }
            int amount = this._buffer.length - this._ptr;
            if (amount < 1) {
                return false;
            }
            int count = this._in.read(this._buffer, this._ptr, amount);
            if (count <= 0) {
                return false;
            }
            this._bufferedEnd += count;
            return true;
        }"
com.fasterxml.jackson.core.format.InputAccessor.nextByte,"        public byte nextByte() throws IOException {
            if (this._ptr >= this._bufferedEnd && !this.hasMoreBytes()) {
                throw new EOFException(""Failed auto-detect: could not read more than "" + this._ptr + "" bytes (max buffer size: "" + this._buffer.length + "")"");
            }
            return this._buffer[this._ptr++];
        }"
com.fasterxml.jackson.core.format.InputAccessor.reset,"        public void reset() {
            this._ptr = this._bufferedStart;
        }"
com.fasterxml.jackson.core.format.InputAccessor.createMatcher,"        public DataFormatMatcher createMatcher(JsonFactory match, MatchStrength matchStrength) {
            return new DataFormatMatcher(this._in, this._buffer, this._bufferedStart, this._bufferedEnd - this._bufferedStart, match, matchStrength);
        }
    "
com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeElement,"    public TokenFilter includeElement(int index) {
        JsonPointer next = this._pathToMatch.matchElement(index);
        if (next == null) {
            return null;
        }
        if (next.matches()) {
            return TokenFilter.INCLUDE_ALL;
        }
        return new JsonPointerBasedFilter(next);
    }"
com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeProperty,"    public TokenFilter includeProperty(String name) {
        JsonPointer next = this._pathToMatch.matchProperty(name);
        if (next == null) {
            return null;
        }
        if (next.matches()) {
            return TokenFilter.INCLUDE_ALL;
        }
        return new JsonPointerBasedFilter(next);
    }"
com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.filterStartArray,"    public TokenFilter filterStartArray() {
        return this;
    }"
com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.filterStartObject,"    public TokenFilter filterStartObject() {
        return this;
    }"
com.fasterxml.jackson.core.filter.JsonPointerBasedFilter._includeScalar,"    protected boolean _includeScalar() {
        return this._pathToMatch.matches();
    }"
com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.toString,"    public String toString() {
        return ""[JsonPointerFilter at: "" + this._pathToMatch + ""]"";
    }
"
com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject,"    public TokenFilter filterStartObject() {
        return this;
    }"
com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray,"    public TokenFilter filterStartArray() {
        return this;
    }"
com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject,"    public void filterFinishObject() {
    }"
com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray,"    public void filterFinishArray() {
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeProperty,"    public TokenFilter includeProperty(String name) {
        return this;
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeElement,"    public TokenFilter includeElement(int index) {
        return this;
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue,"    public TokenFilter includeRootValue(int index) {
        return this;
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeValue,"    public boolean includeValue(JsonParser p) throws IOException {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean,"    public boolean includeBoolean(boolean value) {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeNull,"    public boolean includeNull() {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeString,"    public boolean includeString(String value) {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeNumber,"    public boolean includeNumber(int v) {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeNumber,"    public boolean includeNumber(long v) {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeNumber,"    public boolean includeNumber(float v) {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeNumber,"    public boolean includeNumber(double v) {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeNumber,"    public boolean includeNumber(BigDecimal v) {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeNumber,"    public boolean includeNumber(BigInteger v) {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeBinary,"    public boolean includeBinary() {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue,"    public boolean includeRawValue() {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue,"    public boolean includeEmbeddedValue(Object ob) {
        return this._includeScalar();
    }"
com.fasterxml.jackson.core.filter.TokenFilter.toString,"    public String toString() {
        if (this == INCLUDE_ALL) {
            return ""TokenFilter.INCLUDE_ALL"";
        }
        return super.toString();
    }"
com.fasterxml.jackson.core.filter.TokenFilter._includeScalar,"    protected boolean _includeScalar() {
        return true;
    }
"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFilter,"    public TokenFilter getFilter() {
        return this.rootFilter;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getMatchCount,"    public int getMatchCount() {
        return this._matchCount;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken,"    public JsonToken getCurrentToken() {
        return this._currToken;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken,"    public JsonToken currentToken() {
        return this._currToken;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentTokenId,"    public final int getCurrentTokenId() {
        JsonToken t = this._currToken;
        return t == null ? 0 : t.id();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId,"    public final int currentTokenId() {
        JsonToken t = this._currToken;
        return t == null ? 0 : t.id();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken,"    public boolean hasCurrentToken() {
        return this._currToken != null;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId,"    public boolean hasTokenId(int id) {
        JsonToken t = this._currToken;
        if (t == null) {
            return 0 == id;
        }
        return t.id() == id;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken,"    public final boolean hasToken(JsonToken t) {
        return this._currToken == t;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken,"    public boolean isExpectedStartArrayToken() {
        return this._currToken == JsonToken.START_ARRAY;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartObjectToken,"    public boolean isExpectedStartObjectToken() {
        return this._currToken == JsonToken.START_OBJECT;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentLocation,"    public JsonLocation getCurrentLocation() {
        return this.delegate.getCurrentLocation();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getParsingContext,"    public JsonStreamContext getParsingContext() {
        return this._filterContext();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName,"    public String getCurrentName() throws IOException {
        JsonStreamContext ctxt = this._filterContext();
        if (this._currToken == JsonToken.START_OBJECT || this._currToken == JsonToken.START_ARRAY) {
            JsonStreamContext parent = ctxt.getParent();
            return parent == null ? null : parent.getCurrentName();
        }
        return ctxt.getCurrentName();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken,"    public void clearCurrentToken() {
        if (this._currToken != null) {
            this._lastClearedToken = this._currToken;
            this._currToken = null;
        }
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken,"    public JsonToken getLastClearedToken() {
        return this._lastClearedToken;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName,"    public void overrideCurrentName(String name) {
        throw new UnsupportedOperationException(""Can not currently override name during filtering read"");
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken,"    public JsonToken nextToken() throws IOException {
        JsonToken t;
        block32: {
            TokenFilterContext ctxt;
            if (!this._allowMultipleMatches && this._currToken != null && this._exposedContext == null) {
                if (this._currToken.isStructEnd() && this._headContext.isStartHandled()) {
                    this._currToken = null;
                    return null;
                }
                if (this._currToken.isScalarValue() && !this._headContext.isStartHandled() && !this._includePath && this._itemFilter == TokenFilter.INCLUDE_ALL) {
                    this._currToken = null;
                    return null;
                }
            }
            if ((ctxt = this._exposedContext) != null) {
                do {
                    if ((t = ctxt.nextTokenToRead()) != null) {
                        this._currToken = t;
                        return t;
                    }
                    if (ctxt == this._headContext) {
                        this._exposedContext = null;
                        if (ctxt.inArray()) {
                            this._currToken = t = this.delegate.getCurrentToken();
                            return t;
                        }
                        break block32;
                    }
                    this._exposedContext = ctxt = this._headContext.findChildOf(ctxt);
                } while (ctxt != null);
                throw this._constructError(""Unexpected problem: chain of filtered context broken"");
            }
        }
        if ((t = this.delegate.nextToken()) == null) {
            this._currToken = t;
            return t;
        }
        switch (t.id()) {
            case 3: {
                TokenFilter f = this._itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    this._headContext = this._headContext.createChildArrayContext(f, true);
                    this._currToken = t;
                    return this._currToken;
                }
                if (f == null) {
                    this.delegate.skipChildren();
                    break;
                }
                if ((f = this._headContext.checkValue(f)) == null) {
                    this.delegate.skipChildren();
                    break;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartArray();
                }
                this._itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    this._headContext = this._headContext.createChildArrayContext(f, true);
                    this._currToken = t;
                    return this._currToken;
                }
                this._headContext = this._headContext.createChildArrayContext(f, false);
                if (!this._includePath || (t = this._nextTokenWithBuffering(this._headContext)) == null) break;
                this._currToken = t;
                return t;
            }
            case 1: {
                TokenFilter f = this._itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    this._headContext = this._headContext.createChildObjectContext(f, true);
                    this._currToken = t;
                    return this._currToken;
                }
                if (f == null) {
                    this.delegate.skipChildren();
                    break;
                }
                if ((f = this._headContext.checkValue(f)) == null) {
                    this.delegate.skipChildren();
                    break;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartObject();
                }
                this._itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    this._headContext = this._headContext.createChildObjectContext(f, true);
                    this._currToken = t;
                    return this._currToken;
                }
                this._headContext = this._headContext.createChildObjectContext(f, false);
                if (!this._includePath || (t = this._nextTokenWithBuffering(this._headContext)) == null) break;
                this._currToken = t;
                return t;
            }
            case 2: 
            case 4: {
                boolean returnEnd = this._headContext.isStartHandled();
                TokenFilter f = this._headContext.getFilter();
                if (f != null && f != TokenFilter.INCLUDE_ALL) {
                    f.filterFinishArray();
                }
                this._headContext = this._headContext.getParent();
                this._itemFilter = this._headContext.getFilter();
                if (!returnEnd) break;
                this._currToken = t;
                return this._currToken;
            }
            case 5: {
                String name = this.delegate.getCurrentName();
                TokenFilter f = this._headContext.setFieldName(name);
                if (f == TokenFilter.INCLUDE_ALL) {
                    this._itemFilter = f;
                    if (!this._includePath && this._includeImmediateParent && !this._headContext.isStartHandled()) {
                        t = this._headContext.nextTokenToRead();
                        this._exposedContext = this._headContext;
                    }
                    this._currToken = t;
                    return this._currToken;
                }
                if (f == null) {
                    this.delegate.nextToken();
                    this.delegate.skipChildren();
                    break;
                }
                if ((f = f.includeProperty(name)) == null) {
                    this.delegate.nextToken();
                    this.delegate.skipChildren();
                    break;
                }
                this._itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL && this._includePath) {
                    this._currToken = t;
                    return this._currToken;
                }
                if (!this._includePath || (t = this._nextTokenWithBuffering(this._headContext)) == null) break;
                this._currToken = t;
                return t;
            }
            default: {
                TokenFilter f = this._itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    this._currToken = t;
                    return this._currToken;
                }
                if (f == null || (f = this._headContext.checkValue(f)) != TokenFilter.INCLUDE_ALL && (f == null || !f.includeValue(this.delegate))) break;
                this._currToken = t;
                return this._currToken;
            }
        }
        return this._nextToken2();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextToken2,"    protected final JsonToken _nextToken2() throws IOException {
        JsonToken t;
        block6: while (true) {
            TokenFilter f;
            if ((t = this.delegate.nextToken()) == null) {
                this._currToken = t;
                return t;
            }
            switch (t.id()) {
                case 3: {
                    f = this._itemFilter;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        this._headContext = this._headContext.createChildArrayContext(f, true);
                        this._currToken = t;
                        return this._currToken;
                    }
                    if (f == null) {
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    if ((f = this._headContext.checkValue(f)) == null) {
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    if (f != TokenFilter.INCLUDE_ALL) {
                        f = f.filterStartArray();
                    }
                    this._itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        this._headContext = this._headContext.createChildArrayContext(f, true);
                        this._currToken = t;
                        return this._currToken;
                    }
                    this._headContext = this._headContext.createChildArrayContext(f, false);
                    if (!this._includePath || (t = this._nextTokenWithBuffering(this._headContext)) == null) continue block6;
                    this._currToken = t;
                    return t;
                }
                case 1: {
                    f = this._itemFilter;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        this._headContext = this._headContext.createChildObjectContext(f, true);
                        this._currToken = t;
                        return this._currToken;
                    }
                    if (f == null) {
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    if ((f = this._headContext.checkValue(f)) == null) {
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    if (f != TokenFilter.INCLUDE_ALL) {
                        f = f.filterStartObject();
                    }
                    this._itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        this._headContext = this._headContext.createChildObjectContext(f, true);
                        this._currToken = t;
                        return this._currToken;
                    }
                    this._headContext = this._headContext.createChildObjectContext(f, false);
                    if (!this._includePath || (t = this._nextTokenWithBuffering(this._headContext)) == null) continue block6;
                    this._currToken = t;
                    return t;
                }
                case 2: 
                case 4: {
                    boolean returnEnd = this._headContext.isStartHandled();
                    f = this._headContext.getFilter();
                    if (f != null && f != TokenFilter.INCLUDE_ALL) {
                        f.filterFinishArray();
                    }
                    this._headContext = this._headContext.getParent();
                    this._itemFilter = this._headContext.getFilter();
                    if (!returnEnd) continue block6;
                    this._currToken = t;
                    return this._currToken;
                }
                case 5: {
                    String name = this.delegate.getCurrentName();
                    f = this._headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        this._itemFilter = f;
                        this._currToken = t;
                        return this._currToken;
                    }
                    if (f == null) {
                        this.delegate.nextToken();
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    if ((f = f.includeProperty(name)) == null) {
                        this.delegate.nextToken();
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    this._itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        if (!this._includePath) continue block6;
                        this._currToken = t;
                        return this._currToken;
                    }
                    if (!this._includePath || (t = this._nextTokenWithBuffering(this._headContext)) == null) continue block6;
                    this._currToken = t;
                    return t;
                }
            }
            f = this._itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                this._currToken = t;
                return this._currToken;
            }
            if (f != null && ((f = this._headContext.checkValue(f)) == TokenFilter.INCLUDE_ALL || f != null && f.includeValue(this.delegate))) break;
        }
        this._currToken = t;
        return this._currToken;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering,"    protected final JsonToken _nextTokenWithBuffering(TokenFilterContext buffRoot) throws IOException {
        block6: while (true) {
            TokenFilter f;
            JsonToken t;
            if ((t = this.delegate.nextToken()) == null) {
                return t;
            }
            switch (t.id()) {
                case 3: {
                    f = this._headContext.checkValue(this._itemFilter);
                    if (f == null) {
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    if (f != TokenFilter.INCLUDE_ALL) {
                        f = f.filterStartArray();
                    }
                    this._itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        this._headContext = this._headContext.createChildArrayContext(f, true);
                        return this._nextBuffered(buffRoot);
                    }
                    this._headContext = this._headContext.createChildArrayContext(f, false);
                    continue block6;
                }
                case 1: {
                    f = this._itemFilter;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        this._headContext = this._headContext.createChildObjectContext(f, true);
                        return t;
                    }
                    if (f == null) {
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    if ((f = this._headContext.checkValue(f)) == null) {
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    if (f != TokenFilter.INCLUDE_ALL) {
                        f = f.filterStartObject();
                    }
                    this._itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        this._headContext = this._headContext.createChildObjectContext(f, true);
                        return this._nextBuffered(buffRoot);
                    }
                    this._headContext = this._headContext.createChildObjectContext(f, false);
                    continue block6;
                }
                case 2: 
                case 4: {
                    f = this._headContext.getFilter();
                    if (f != null && f != TokenFilter.INCLUDE_ALL) {
                        f.filterFinishArray();
                    }
                    boolean gotEnd = this._headContext == buffRoot;
                    boolean returnEnd = gotEnd && this._headContext.isStartHandled();
                    this._headContext = this._headContext.getParent();
                    this._itemFilter = this._headContext.getFilter();
                    if (returnEnd) {
                        return t;
                    }
                    if (!gotEnd && this._headContext != buffRoot) continue block6;
                    return null;
                }
                case 5: {
                    String name = this.delegate.getCurrentName();
                    f = this._headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        this._itemFilter = f;
                        return this._nextBuffered(buffRoot);
                    }
                    if (f == null) {
                        this.delegate.nextToken();
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    if ((f = f.includeProperty(name)) == null) {
                        this.delegate.nextToken();
                        this.delegate.skipChildren();
                        continue block6;
                    }
                    this._itemFilter = f;
                    if (f != TokenFilter.INCLUDE_ALL) continue block6;
                    return this._nextBuffered(buffRoot);
                }
            }
            f = this._itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                return this._nextBuffered(buffRoot);
            }
            if (f != null && ((f = this._headContext.checkValue(f)) == TokenFilter.INCLUDE_ALL || f != null && f.includeValue(this.delegate))) break;
        }
        return this._nextBuffered(buffRoot);
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextBuffered,"    private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException {
        this._exposedContext = buffRoot;
        TokenFilterContext ctxt = buffRoot;
        JsonToken t = ctxt.nextTokenToRead();
        if (t != null) {
            return t;
        }
        do {
            if (ctxt == this._headContext) {
                throw this._constructError(""Internal error: failed to locate expected buffered tokens"");
            }
            this._exposedContext = ctxt = this._exposedContext.findChildOf(ctxt);
            if (ctxt != null) continue;
            throw this._constructError(""Unexpected problem: chain of filtered context broken"");
        } while ((t = this._exposedContext.nextTokenToRead()) == null);
        return t;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextValue,"    public JsonToken nextValue() throws IOException {
        JsonToken t = this.nextToken();
        if (t == JsonToken.FIELD_NAME) {
            t = this.nextToken();
        }
        return t;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.skipChildren,"    public JsonParser skipChildren() throws IOException {
        if (this._currToken != JsonToken.START_OBJECT && this._currToken != JsonToken.START_ARRAY) {
            return this;
        }
        int open = 1;
        while (true) {
            JsonToken t;
            if ((t = this.nextToken()) == null) {
                return this;
            }
            if (t.isStructStart()) {
                ++open;
                continue;
            }
            if (t.isStructEnd() && --open == 0) break;
        }
        return this;
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText,"    public String getText() throws IOException {
        return this.delegate.getText();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTextCharacters,"    public boolean hasTextCharacters() {
        return this.delegate.hasTextCharacters();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters,"    public char[] getTextCharacters() throws IOException {
        return this.delegate.getTextCharacters();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength,"    public int getTextLength() throws IOException {
        return this.delegate.getTextLength();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset,"    public int getTextOffset() throws IOException {
        return this.delegate.getTextOffset();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBigIntegerValue,"    public BigInteger getBigIntegerValue() throws IOException {
        return this.delegate.getBigIntegerValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBooleanValue,"    public boolean getBooleanValue() throws IOException {
        return this.delegate.getBooleanValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getByteValue,"    public byte getByteValue() throws IOException {
        return this.delegate.getByteValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getShortValue,"    public short getShortValue() throws IOException {
        return this.delegate.getShortValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue,"    public BigDecimal getDecimalValue() throws IOException {
        return this.delegate.getDecimalValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue,"    public double getDoubleValue() throws IOException {
        return this.delegate.getDoubleValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFloatValue,"    public float getFloatValue() throws IOException {
        return this.delegate.getFloatValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getIntValue,"    public int getIntValue() throws IOException {
        return this.delegate.getIntValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue,"    public long getLongValue() throws IOException {
        return this.delegate.getLongValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberType,"    public JsonParser.NumberType getNumberType() throws IOException {
        return this.delegate.getNumberType();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberValue,"    public Number getNumberValue() throws IOException {
        return this.delegate.getNumberValue();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt,"    public int getValueAsInt() throws IOException {
        return this.delegate.getValueAsInt();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt,"    public int getValueAsInt(int defaultValue) throws IOException {
        return this.delegate.getValueAsInt(defaultValue);
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong,"    public long getValueAsLong() throws IOException {
        return this.delegate.getValueAsLong();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong,"    public long getValueAsLong(long defaultValue) throws IOException {
        return this.delegate.getValueAsLong(defaultValue);
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble,"    public double getValueAsDouble() throws IOException {
        return this.delegate.getValueAsDouble();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble,"    public double getValueAsDouble(double defaultValue) throws IOException {
        return this.delegate.getValueAsDouble(defaultValue);
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean,"    public boolean getValueAsBoolean() throws IOException {
        return this.delegate.getValueAsBoolean();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean,"    public boolean getValueAsBoolean(boolean defaultValue) throws IOException {
        return this.delegate.getValueAsBoolean(defaultValue);
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString,"    public String getValueAsString() throws IOException {
        return this.delegate.getValueAsString();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString,"    public String getValueAsString(String defaultValue) throws IOException {
        return this.delegate.getValueAsString(defaultValue);
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getEmbeddedObject,"    public Object getEmbeddedObject() throws IOException {
        return this.delegate.getEmbeddedObject();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue,"    public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
        return this.delegate.getBinaryValue(b64variant);
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue,"    public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
        return this.delegate.readBinaryValue(b64variant, out);
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTokenLocation,"    public JsonLocation getTokenLocation() {
        return this.delegate.getTokenLocation();
    }"
com.fasterxml.jackson.core.filter.FilteringParserDelegate._filterContext,"    protected JsonStreamContext _filterContext() {
        if (this._exposedContext != null) {
            return this._exposedContext;
        }
        return this._headContext;
    }
"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilter,"    public TokenFilter getFilter() {
        return this.rootFilter;
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilterContext,"    public JsonStreamContext getFilterContext() {
        return this._filterContext;
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getMatchCount,"    public int getMatchCount() {
        return this._matchCount;
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getOutputContext,"    public JsonStreamContext getOutputContext() {
        return this._filterContext;
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray,"    public void writeStartArray() throws IOException {
        if (this._itemFilter == null) {
            this._filterContext = this._filterContext.createChildArrayContext(null, false);
            return;
        }
        if (this._itemFilter == TokenFilter.INCLUDE_ALL) {
            this._filterContext = this._filterContext.createChildArrayContext(this._itemFilter, true);
            this.delegate.writeStartArray();
            return;
        }
        this._itemFilter = this._filterContext.checkValue(this._itemFilter);
        if (this._itemFilter == null) {
            this._filterContext = this._filterContext.createChildArrayContext(null, false);
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            this._itemFilter = this._itemFilter.filterStartArray();
        }
        if (this._itemFilter == TokenFilter.INCLUDE_ALL) {
            this._checkParentPath();
            this._filterContext = this._filterContext.createChildArrayContext(this._itemFilter, true);
            this.delegate.writeStartArray();
        } else {
            this._filterContext = this._filterContext.createChildArrayContext(this._itemFilter, false);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray,"    public void writeStartArray(int size) throws IOException {
        if (this._itemFilter == null) {
            this._filterContext = this._filterContext.createChildArrayContext(null, false);
            return;
        }
        if (this._itemFilter == TokenFilter.INCLUDE_ALL) {
            this._filterContext = this._filterContext.createChildArrayContext(this._itemFilter, true);
            this.delegate.writeStartArray(size);
            return;
        }
        this._itemFilter = this._filterContext.checkValue(this._itemFilter);
        if (this._itemFilter == null) {
            this._filterContext = this._filterContext.createChildArrayContext(null, false);
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            this._itemFilter = this._itemFilter.filterStartArray();
        }
        if (this._itemFilter == TokenFilter.INCLUDE_ALL) {
            this._checkParentPath();
            this._filterContext = this._filterContext.createChildArrayContext(this._itemFilter, true);
            this.delegate.writeStartArray(size);
        } else {
            this._filterContext = this._filterContext.createChildArrayContext(this._itemFilter, false);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray,"    public void writeEndArray() throws IOException {
        this._filterContext = this._filterContext.closeArray(this.delegate);
        if (this._filterContext != null) {
            this._itemFilter = this._filterContext.getFilter();
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject,"    public void writeStartObject() throws IOException {
        if (this._itemFilter == null) {
            this._filterContext = this._filterContext.createChildObjectContext(this._itemFilter, false);
            return;
        }
        if (this._itemFilter == TokenFilter.INCLUDE_ALL) {
            this._filterContext = this._filterContext.createChildObjectContext(this._itemFilter, true);
            this.delegate.writeStartObject();
            return;
        }
        TokenFilter f = this._filterContext.checkValue(this._itemFilter);
        if (f == null) {
            return;
        }
        if (f != TokenFilter.INCLUDE_ALL) {
            f = f.filterStartObject();
        }
        if (f == TokenFilter.INCLUDE_ALL) {
            this._checkParentPath();
            this._filterContext = this._filterContext.createChildObjectContext(f, true);
            this.delegate.writeStartObject();
        } else {
            this._filterContext = this._filterContext.createChildObjectContext(f, false);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject,"    public void writeStartObject(Object forValue) throws IOException {
        if (this._itemFilter == null) {
            this._filterContext = this._filterContext.createChildObjectContext(this._itemFilter, false);
            return;
        }
        if (this._itemFilter == TokenFilter.INCLUDE_ALL) {
            this._filterContext = this._filterContext.createChildObjectContext(this._itemFilter, true);
            this.delegate.writeStartObject(forValue);
            return;
        }
        TokenFilter f = this._filterContext.checkValue(this._itemFilter);
        if (f == null) {
            return;
        }
        if (f != TokenFilter.INCLUDE_ALL) {
            f = f.filterStartObject();
        }
        if (f == TokenFilter.INCLUDE_ALL) {
            this._checkParentPath();
            this._filterContext = this._filterContext.createChildObjectContext(f, true);
            this.delegate.writeStartObject(forValue);
        } else {
            this._filterContext = this._filterContext.createChildObjectContext(f, false);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndObject,"    public void writeEndObject() throws IOException {
        this._filterContext = this._filterContext.closeObject(this.delegate);
        if (this._filterContext != null) {
            this._itemFilter = this._filterContext.getFilter();
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName,"    public void writeFieldName(String name) throws IOException {
        TokenFilter state = this._filterContext.setFieldName(name);
        if (state == null) {
            this._itemFilter = null;
            return;
        }
        if (state == TokenFilter.INCLUDE_ALL) {
            this._itemFilter = state;
            this.delegate.writeFieldName(name);
            return;
        }
        this._itemFilter = state = state.includeProperty(name);
        if (state == TokenFilter.INCLUDE_ALL) {
            this._checkPropertyParentPath();
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName,"    public void writeFieldName(SerializableString name) throws IOException {
        TokenFilter state = this._filterContext.setFieldName(name.getValue());
        if (state == null) {
            this._itemFilter = null;
            return;
        }
        if (state == TokenFilter.INCLUDE_ALL) {
            this._itemFilter = state;
            this.delegate.writeFieldName(name);
            return;
        }
        this._itemFilter = state = state.includeProperty(name.getValue());
        if (state == TokenFilter.INCLUDE_ALL) {
            this._checkPropertyParentPath();
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString,"    public void writeString(String value) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeString(value)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeString(value);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString,"    public void writeString(char[] text, int offset, int len) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            String value = new String(text, offset, len);
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeString(value)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeString(text, offset, len);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString,"    public void writeString(SerializableString value) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeString(value.getValue())) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeString(value);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String,"    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeRawUTF8String(text, offset, length);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String,"    public void writeUTF8String(byte[] text, int offset, int length) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeUTF8String(text, offset, length);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw,"    public void writeRaw(String text) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeRaw(text);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw,"    public void writeRaw(String text, int offset, int len) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeRaw(text);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw,"    public void writeRaw(SerializableString text) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeRaw(text);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw,"    public void writeRaw(char[] text, int offset, int len) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeRaw(text, offset, len);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw,"    public void writeRaw(char c) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeRaw(c);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue,"    public void writeRawValue(String text) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeRaw(text);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue,"    public void writeRawValue(String text, int offset, int len) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeRaw(text, offset, len);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue,"    public void writeRawValue(char[] text, int offset, int len) throws IOException {
        if (this._checkRawValueWrite()) {
            this.delegate.writeRaw(text, offset, len);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary,"    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {
        if (this._checkBinaryWrite()) {
            this.delegate.writeBinary(b64variant, data, offset, len);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary,"    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {
        if (this._checkBinaryWrite()) {
            return this.delegate.writeBinary(b64variant, data, dataLength);
        }
        return -1;
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber,"    public void writeNumber(short v) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeNumber(v)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber,"    public void writeNumber(int v) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeNumber(v)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber,"    public void writeNumber(long v) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeNumber(v)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber,"    public void writeNumber(BigInteger v) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeNumber(v)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber,"    public void writeNumber(double v) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeNumber(v)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber,"    public void writeNumber(float v) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeNumber(v)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber,"    public void writeNumber(BigDecimal v) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeNumber(v)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeNumber(v);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber,"    public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeRawValue()) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeNumber(encodedValue);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean,"    public void writeBoolean(boolean v) throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeBoolean(v)) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeBoolean(v);
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNull,"    public void writeNull() throws IOException {
        if (this._itemFilter == null) {
            return;
        }
        if (this._itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter state = this._filterContext.checkValue(this._itemFilter);
            if (state == null) {
                return;
            }
            if (state != TokenFilter.INCLUDE_ALL && !state.includeNull()) {
                return;
            }
            this._checkParentPath();
        }
        this.delegate.writeNull();
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField,"    public void writeOmittedField(String fieldName) throws IOException {
        if (this._itemFilter != null) {
            this.delegate.writeOmittedField(fieldName);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId,"    public void writeObjectId(Object id) throws IOException {
        if (this._itemFilter != null) {
            this.delegate.writeObjectId(id);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef,"    public void writeObjectRef(Object id) throws IOException {
        if (this._itemFilter != null) {
            this.delegate.writeObjectRef(id);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId,"    public void writeTypeId(Object id) throws IOException {
        if (this._itemFilter != null) {
            this.delegate.writeTypeId(id);
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath,"    protected void _checkParentPath() throws IOException {
        ++this._matchCount;
        if (this._includePath) {
            this._filterContext.writePath(this.delegate);
        }
        if (!this._allowMultipleMatches) {
            this._filterContext.skipParentChecks();
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkPropertyParentPath,"    protected void _checkPropertyParentPath() throws IOException {
        ++this._matchCount;
        if (this._includePath) {
            this._filterContext.writePath(this.delegate);
        } else if (this._includeImmediateParent) {
            this._filterContext.writeImmediatePath(this.delegate);
        }
        if (!this._allowMultipleMatches) {
            this._filterContext.skipParentChecks();
        }
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkBinaryWrite,"    protected boolean _checkBinaryWrite() throws IOException {
        if (this._itemFilter == null) {
            return false;
        }
        if (this._itemFilter == TokenFilter.INCLUDE_ALL) {
            return true;
        }
        if (this._itemFilter.includeBinary()) {
            this._checkParentPath();
            return true;
        }
        return false;
    }"
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkRawValueWrite,"    protected boolean _checkRawValueWrite() throws IOException {
        if (this._itemFilter == null) {
            return false;
        }
        if (this._itemFilter == TokenFilter.INCLUDE_ALL) {
            return true;
        }
        if (this._itemFilter.includeRawValue()) {
            this._checkParentPath();
            return true;
        }
        return false;
    }
"
com.fasterxml.jackson.core.filter.TokenFilterContext.reset,"    protected TokenFilterContext reset(int type, TokenFilter filter, boolean startWritten) {
        this._type = type;
        this._filter = filter;
        this._index = -1;
        this._currentName = null;
        this._startHandled = startWritten;
        this._needToHandleName = false;
        return this;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.createRootContext,"    public static TokenFilterContext createRootContext(TokenFilter filter) {
        return new TokenFilterContext(0, null, filter, true);
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.createChildArrayContext,"    public TokenFilterContext createChildArrayContext(TokenFilter filter, boolean writeStart) {
        TokenFilterContext ctxt = this._child;
        if (ctxt == null) {
            this._child = ctxt = new TokenFilterContext(1, this, filter, writeStart);
            return ctxt;
        }
        return ctxt.reset(1, filter, writeStart);
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.createChildObjectContext,"    public TokenFilterContext createChildObjectContext(TokenFilter filter, boolean writeStart) {
        TokenFilterContext ctxt = this._child;
        if (ctxt == null) {
            this._child = ctxt = new TokenFilterContext(2, this, filter, writeStart);
            return ctxt;
        }
        return ctxt.reset(2, filter, writeStart);
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.setFieldName,"    public TokenFilter setFieldName(String name) throws JsonProcessingException {
        this._currentName = name;
        this._needToHandleName = true;
        return this._filter;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.checkValue,"    public TokenFilter checkValue(TokenFilter filter) {
        if (this._type == 2) {
            return filter;
        }
        int ix = ++this._index;
        if (this._type == 1) {
            return filter.includeElement(ix);
        }
        return filter.includeRootValue(ix);
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.writePath,"    public void writePath(JsonGenerator gen) throws IOException {
        if (this._filter == null || this._filter == TokenFilter.INCLUDE_ALL) {
            return;
        }
        if (this._parent != null) {
            this._parent._writePath(gen);
        }
        if (this._startHandled) {
            if (this._needToHandleName) {
                gen.writeFieldName(this._currentName);
            }
        } else {
            this._startHandled = true;
            if (this._type == 2) {
                gen.writeStartObject();
                gen.writeFieldName(this._currentName);
            } else if (this._type == 1) {
                gen.writeStartArray();
            }
        }
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.writeImmediatePath,"    public void writeImmediatePath(JsonGenerator gen) throws IOException {
        if (this._filter == null || this._filter == TokenFilter.INCLUDE_ALL) {
            return;
        }
        if (this._startHandled) {
            if (this._needToHandleName) {
                gen.writeFieldName(this._currentName);
            }
        } else {
            this._startHandled = true;
            if (this._type == 2) {
                gen.writeStartObject();
                if (this._needToHandleName) {
                    gen.writeFieldName(this._currentName);
                }
            } else if (this._type == 1) {
                gen.writeStartArray();
            }
        }
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext._writePath,"    private void _writePath(JsonGenerator gen) throws IOException {
        if (this._filter == null || this._filter == TokenFilter.INCLUDE_ALL) {
            return;
        }
        if (this._parent != null) {
            this._parent._writePath(gen);
        }
        if (this._startHandled) {
            if (this._needToHandleName) {
                this._needToHandleName = false;
                gen.writeFieldName(this._currentName);
            }
        } else {
            this._startHandled = true;
            if (this._type == 2) {
                gen.writeStartObject();
                if (this._needToHandleName) {
                    this._needToHandleName = false;
                    gen.writeFieldName(this._currentName);
                }
            } else if (this._type == 1) {
                gen.writeStartArray();
            }
        }
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.closeArray,"    public TokenFilterContext closeArray(JsonGenerator gen) throws IOException {
        if (this._startHandled) {
            gen.writeEndArray();
        }
        if (this._filter != null && this._filter != TokenFilter.INCLUDE_ALL) {
            this._filter.filterFinishArray();
        }
        return this._parent;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.closeObject,"    public TokenFilterContext closeObject(JsonGenerator gen) throws IOException {
        if (this._startHandled) {
            gen.writeEndObject();
        }
        if (this._filter != null && this._filter != TokenFilter.INCLUDE_ALL) {
            this._filter.filterFinishObject();
        }
        return this._parent;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.skipParentChecks,"    public void skipParentChecks() {
        this._filter = null;
        TokenFilterContext ctxt = this._parent;
        while (ctxt != null) {
            this._parent._filter = null;
            ctxt = ctxt._parent;
        }
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.getCurrentValue,"    public Object getCurrentValue() {
        return null;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.setCurrentValue,"    public void setCurrentValue(Object v) {
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.getParent,"    public final TokenFilterContext getParent() {
        return this._parent;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.getCurrentName,"    public final String getCurrentName() {
        return this._currentName;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.getFilter,"    public TokenFilter getFilter() {
        return this._filter;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.isStartHandled,"    public boolean isStartHandled() {
        return this._startHandled;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.nextTokenToRead,"    public JsonToken nextTokenToRead() {
        if (!this._startHandled) {
            this._startHandled = true;
            if (this._type == 2) {
                return JsonToken.START_OBJECT;
            }
            return JsonToken.START_ARRAY;
        }
        if (this._needToHandleName && this._type == 2) {
            this._needToHandleName = false;
            return JsonToken.FIELD_NAME;
        }
        return null;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.findChildOf,"    public TokenFilterContext findChildOf(TokenFilterContext parent) {
        if (this._parent == parent) {
            return this;
        }
        TokenFilterContext curr = this._parent;
        while (curr != null) {
            TokenFilterContext p = curr._parent;
            if (p == parent) {
                return curr;
            }
            curr = p;
        }
        return null;
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.appendDesc,"    protected void appendDesc(StringBuilder sb) {
        if (this._parent != null) {
            this._parent.appendDesc(sb);
        }
        if (this._type == 2) {
            sb.append('{');
            if (this._currentName != null) {
                sb.append('\""');
                sb.append(this._currentName);
                sb.append('\""');
            } else {
                sb.append('?');
            }
            sb.append('}');
        } else if (this._type == 1) {
            sb.append('[');
            sb.append(this.getCurrentIndex());
            sb.append(']');
        } else {
            sb.append(""/"");
        }
    }"
com.fasterxml.jackson.core.filter.TokenFilterContext.toString,"    public String toString() {
        StringBuilder sb = new StringBuilder(64);
        this.appendDesc(sb);
        return sb.toString();
    }
"
com.fasterxml.jackson.core.base.GeneratorBase.version,"    public Version version() {
        return PackageVersion.VERSION;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.getCurrentValue,"    public Object getCurrentValue() {
        return this._writeContext.getCurrentValue();
    }"
com.fasterxml.jackson.core.base.GeneratorBase.setCurrentValue,"    public void setCurrentValue(Object v) {
        this._writeContext.setCurrentValue(v);
    }"
com.fasterxml.jackson.core.base.GeneratorBase.isEnabled,"    public final boolean isEnabled(JsonGenerator.Feature f) {
        return (this._features & f.getMask()) != 0;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.getFeatureMask,"    public int getFeatureMask() {
        return this._features;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.enable,"    public JsonGenerator enable(JsonGenerator.Feature f) {
        int mask = f.getMask();
        this._features |= mask;
        if ((mask & DERIVED_FEATURES_MASK) != 0) {
            if (f == JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS) {
                this._cfgNumbersAsStrings = true;
            } else if (f == JsonGenerator.Feature.ESCAPE_NON_ASCII) {
                this.setHighestNonEscapedChar(127);
            } else if (f == JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION && this._writeContext.getDupDetector() == null) {
                this._writeContext = this._writeContext.withDupDetector(DupDetector.rootDetector(this));
            }
        }
        return this;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.disable,"    public JsonGenerator disable(JsonGenerator.Feature f) {
        int mask = f.getMask();
        this._features &= ~mask;
        if ((mask & DERIVED_FEATURES_MASK) != 0) {
            if (f == JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS) {
                this._cfgNumbersAsStrings = false;
            } else if (f == JsonGenerator.Feature.ESCAPE_NON_ASCII) {
                this.setHighestNonEscapedChar(0);
            } else if (f == JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION) {
                this._writeContext = this._writeContext.withDupDetector(null);
            }
        }
        return this;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.setFeatureMask,"    public JsonGenerator setFeatureMask(int newMask) {
        int changed = newMask ^ this._features;
        this._features = newMask;
        if (changed != 0) {
            this._checkStdFeatureChanges(newMask, changed);
        }
        return this;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures,"    public JsonGenerator overrideStdFeatures(int values, int mask) {
        int oldState = this._features;
        int newState = oldState & ~mask | values & mask;
        int changed = oldState ^ newState;
        if (changed != 0) {
            this._features = newState;
            this._checkStdFeatureChanges(newState, changed);
        }
        return this;
    }"
com.fasterxml.jackson.core.base.GeneratorBase._checkStdFeatureChanges,"    protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {
        if ((changedFeatures & DERIVED_FEATURES_MASK) == 0) {
            return;
        }
        this._cfgNumbersAsStrings = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(newFeatureFlags);
        if (JsonGenerator.Feature.ESCAPE_NON_ASCII.enabledIn(changedFeatures)) {
            if (JsonGenerator.Feature.ESCAPE_NON_ASCII.enabledIn(newFeatureFlags)) {
                this.setHighestNonEscapedChar(127);
            } else {
                this.setHighestNonEscapedChar(0);
            }
        }
        if (JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION.enabledIn(changedFeatures)) {
            if (JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newFeatureFlags)) {
                if (this._writeContext.getDupDetector() == null) {
                    this._writeContext = this._writeContext.withDupDetector(DupDetector.rootDetector(this));
                }
            } else {
                this._writeContext = this._writeContext.withDupDetector(null);
            }
        }
    }"
com.fasterxml.jackson.core.base.GeneratorBase.useDefaultPrettyPrinter,"    public JsonGenerator useDefaultPrettyPrinter() {
        if (this.getPrettyPrinter() != null) {
            return this;
        }
        return this.setPrettyPrinter(this._constructDefaultPrettyPrinter());
    }"
com.fasterxml.jackson.core.base.GeneratorBase.setCodec,"    public JsonGenerator setCodec(ObjectCodec oc) {
        this._objectCodec = oc;
        return this;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.getCodec,"    public ObjectCodec getCodec() {
        return this._objectCodec;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.getOutputContext,"    public JsonStreamContext getOutputContext() {
        return this._writeContext;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeStartObject,"    public void writeStartObject(Object forValue) throws IOException {
        this.writeStartObject();
        if (this._writeContext != null && forValue != null) {
            this._writeContext.setCurrentValue(forValue);
        }
        this.setCurrentValue(forValue);
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeFieldName,"    public void writeFieldName(SerializableString name) throws IOException {
        this.writeFieldName(name.getValue());
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeString,"    public void writeString(SerializableString text) throws IOException {
        this.writeString(text.getValue());
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue,"    public void writeRawValue(String text) throws IOException {
        this._verifyValueWrite(""write raw value"");
        this.writeRaw(text);
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue,"    public void writeRawValue(String text, int offset, int len) throws IOException {
        this._verifyValueWrite(""write raw value"");
        this.writeRaw(text, offset, len);
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue,"    public void writeRawValue(char[] text, int offset, int len) throws IOException {
        this._verifyValueWrite(""write raw value"");
        this.writeRaw(text, offset, len);
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue,"    public void writeRawValue(SerializableString text) throws IOException {
        this._verifyValueWrite(""write raw value"");
        this.writeRaw(text);
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeBinary,"    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {
        this._reportUnsupportedOperation();
        return 0;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeObject,"    public void writeObject(Object value) throws IOException {
        if (value == null) {
            this.writeNull();
        } else {
            if (this._objectCodec != null) {
                this._objectCodec.writeValue(this, value);
                return;
            }
            this._writeSimpleObject(value);
        }
    }"
com.fasterxml.jackson.core.base.GeneratorBase.writeTree,"    public void writeTree(TreeNode rootNode) throws IOException {
        if (rootNode == null) {
            this.writeNull();
        } else {
            if (this._objectCodec == null) {
                throw new IllegalStateException(""No ObjectCodec defined"");
            }
            this._objectCodec.writeValue(this, rootNode);
        }
    }"
com.fasterxml.jackson.core.base.GeneratorBase.flush,
com.fasterxml.jackson.core.base.GeneratorBase.close,"    public void close() throws IOException {
        this._closed = true;
    }"
com.fasterxml.jackson.core.base.GeneratorBase.isClosed,"    public boolean isClosed() {
        return this._closed;
    }"
com.fasterxml.jackson.core.base.GeneratorBase._releaseBuffers,
com.fasterxml.jackson.core.base.GeneratorBase._verifyValueWrite,
com.fasterxml.jackson.core.base.GeneratorBase._constructDefaultPrettyPrinter,"    protected PrettyPrinter _constructDefaultPrettyPrinter() {
        return new DefaultPrettyPrinter();
    }"
com.fasterxml.jackson.core.base.GeneratorBase._asString,"    protected String _asString(BigDecimal value) throws IOException {
        if (JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(this._features)) {
            int scale = value.scale();
            if (scale < -9999 || scale > 9999) {
                this._reportError(String.format(""Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]"", scale, 9999, 9999));
            }
            return value.toPlainString();
        }
        return value.toString();
    }"
com.fasterxml.jackson.core.base.GeneratorBase._decodeSurrogate,"    protected final int _decodeSurrogate(int surr1, int surr2) throws IOException {
        if (surr2 < 56320 || surr2 > 57343) {
            String msg = ""Incomplete surrogate pair: first char 0x"" + Integer.toHexString(surr1) + "", second 0x"" + Integer.toHexString(surr2);
            this._reportError(msg);
        }
        int c = 65536 + (surr1 - 55296 << 10) + (surr2 - 56320);
        return c;
    }
"
com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken,
com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken,"    public JsonToken currentToken() {
        return this._currToken;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId,"    public int currentTokenId() {
        JsonToken t = this._currToken;
        return t == null ? 0 : t.id();
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken,"    public JsonToken getCurrentToken() {
        return this._currToken;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId,"    public int getCurrentTokenId() {
        JsonToken t = this._currToken;
        return t == null ? 0 : t.id();
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken,"    public boolean hasCurrentToken() {
        return this._currToken != null;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId,"    public boolean hasTokenId(int id) {
        JsonToken t = this._currToken;
        if (t == null) {
            return 0 == id;
        }
        return t.id() == id;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken,"    public boolean hasToken(JsonToken t) {
        return this._currToken == t;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken,"    public boolean isExpectedStartArrayToken() {
        return this._currToken == JsonToken.START_ARRAY;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken,"    public boolean isExpectedStartObjectToken() {
        return this._currToken == JsonToken.START_OBJECT;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue,"    public JsonToken nextValue() throws IOException {
        JsonToken t = this.nextToken();
        if (t == JsonToken.FIELD_NAME) {
            t = this.nextToken();
        }
        return t;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren,"    public JsonParser skipChildren() throws IOException {
        if (this._currToken != JsonToken.START_OBJECT && this._currToken != JsonToken.START_ARRAY) {
            return this;
        }
        int open = 1;
        while (true) {
            JsonToken t;
            if ((t = this.nextToken()) == null) {
                this._handleEOF();
                return this;
            }
            if (t.isStructStart()) {
                ++open;
                continue;
            }
            if (t.isStructEnd() && --open == 0) break;
        }
        return this;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF,
com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName,
com.fasterxml.jackson.core.base.ParserMinimalBase.close,
com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed,
com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext,
com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken,"    public void clearCurrentToken() {
        if (this._currToken != null) {
            this._lastClearedToken = this._currToken;
            this._currToken = null;
        }
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken,"    public JsonToken getLastClearedToken() {
        return this._lastClearedToken;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName,
com.fasterxml.jackson.core.base.ParserMinimalBase.getText,
com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters,
com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters,
com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength,
com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset,
com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue,
com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean,"    public boolean getValueAsBoolean(boolean defaultValue) throws IOException {
        JsonToken t = this._currToken;
        if (t != null) {
            switch (t.id()) {
                case 6: {
                    String str = this.getText().trim();
                    if (""true"".equals(str)) {
                        return true;
                    }
                    if (""false"".equals(str)) {
                        return false;
                    }
                    if (!this._hasTextualNull(str)) break;
                    return false;
                }
                case 7: {
                    return this.getIntValue() != 0;
                }
                case 9: {
                    return true;
                }
                case 10: 
                case 11: {
                    return false;
                }
                case 12: {
                    Object value = this.getEmbeddedObject();
                    if (!(value instanceof Boolean)) break;
                    return (Boolean)value;
                }
            }
        }
        return defaultValue;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt,"    public int getValueAsInt() throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) {
            return this.getIntValue();
        }
        return this.getValueAsInt(0);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt,"    public int getValueAsInt(int defaultValue) throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) {
            return this.getIntValue();
        }
        if (t != null) {
            switch (t.id()) {
                case 6: {
                    String str = this.getText();
                    if (this._hasTextualNull(str)) {
                        return 0;
                    }
                    return NumberInput.parseAsInt(str, defaultValue);
                }
                case 9: {
                    return 1;
                }
                case 10: {
                    return 0;
                }
                case 11: {
                    return 0;
                }
                case 12: {
                    Object value = this.getEmbeddedObject();
                    if (!(value instanceof Number)) break;
                    return ((Number)value).intValue();
                }
            }
        }
        return defaultValue;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong,"    public long getValueAsLong() throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) {
            return this.getLongValue();
        }
        return this.getValueAsLong(0L);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong,"    public long getValueAsLong(long defaultValue) throws IOException {
        JsonToken t = this._currToken;
        if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) {
            return this.getLongValue();
        }
        if (t != null) {
            switch (t.id()) {
                case 6: {
                    String str = this.getText();
                    if (this._hasTextualNull(str)) {
                        return 0L;
                    }
                    return NumberInput.parseAsLong(str, defaultValue);
                }
                case 9: {
                    return 1L;
                }
                case 10: 
                case 11: {
                    return 0L;
                }
                case 12: {
                    Object value = this.getEmbeddedObject();
                    if (!(value instanceof Number)) break;
                    return ((Number)value).longValue();
                }
            }
        }
        return defaultValue;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble,"    public double getValueAsDouble(double defaultValue) throws IOException {
        JsonToken t = this._currToken;
        if (t != null) {
            switch (t.id()) {
                case 6: {
                    String str = this.getText();
                    if (this._hasTextualNull(str)) {
                        return 0.0;
                    }
                    return NumberInput.parseAsDouble(str, defaultValue);
                }
                case 7: 
                case 8: {
                    return this.getDoubleValue();
                }
                case 9: {
                    return 1.0;
                }
                case 10: 
                case 11: {
                    return 0.0;
                }
                case 12: {
                    Object value = this.getEmbeddedObject();
                    if (!(value instanceof Number)) break;
                    return ((Number)value).doubleValue();
                }
            }
        }
        return defaultValue;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString,"    public String getValueAsString() throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            return this.getText();
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this.getCurrentName();
        }
        return this.getValueAsString(null);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString,"    public String getValueAsString(String defaultValue) throws IOException {
        if (this._currToken == JsonToken.VALUE_STRING) {
            return this.getText();
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this.getCurrentName();
        }
        if (this._currToken == null || this._currToken == JsonToken.VALUE_NULL || !this._currToken.isScalarValue()) {
            return defaultValue;
        }
        return this.getText();
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64,"    protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException {
        try {
            b64variant.decode(str, builder);
        }
        catch (IllegalArgumentException e) {
            this._reportError(e.getMessage());
        }
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull,"    protected boolean _hasTextualNull(String value) {
        return ""null"".equals(value);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar,"    protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException {
        if (ch < 0) {
            this._reportInvalidEOF();
        }
        String msg = ""Unexpected character ("" + ParserMinimalBase._getCharDesc(ch) + "")"";
        if (comment != null) {
            msg = msg + "": "" + comment;
        }
        this._reportError(msg);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF,"    protected void _reportInvalidEOF() throws JsonParseException {
        this._reportInvalidEOF("" in "" + (Object)((Object)this._currToken), this._currToken);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue,"    protected void _reportInvalidEOFInValue(JsonToken type) throws JsonParseException {
        String msg = type == JsonToken.VALUE_STRING ? "" in a String value"" : (type == JsonToken.VALUE_NUMBER_INT || type == JsonToken.VALUE_NUMBER_FLOAT ? "" in a Number value"" : "" in a value"");
        this._reportInvalidEOF(msg, type);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF,"    protected void _reportInvalidEOF(String msg, JsonToken currToken) throws JsonParseException {
        throw new JsonEOFException((JsonParser)this, currToken, ""Unexpected end-of-input"" + msg);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue,"    protected void _reportInvalidEOFInValue() throws JsonParseException {
        this._reportInvalidEOF("" in a value"");
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF,"    protected void _reportInvalidEOF(String msg) throws JsonParseException {
        throw new JsonEOFException((JsonParser)this, null, ""Unexpected end-of-input"" + msg);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS,"    protected void _reportMissingRootWS(int ch) throws JsonParseException {
        this._reportUnexpectedChar(ch, ""Expected space separating root-level values"");
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace,"    protected void _throwInvalidSpace(int i) throws JsonParseException {
        char c = (char)i;
        String msg = ""Illegal character ("" + ParserMinimalBase._getCharDesc(c) + ""): only regular white space (\\r, \\n, \\t) is allowed between tokens"";
        this._reportError(msg);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._throwUnquotedSpace,"    protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException {
        if (!this.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i > 32) {
            char c = (char)i;
            String msg = ""Illegal unquoted character ("" + ParserMinimalBase._getCharDesc(c) + ""): has to be escaped using backslash to be included in "" + ctxtDesc;
            this._reportError(msg);
        }
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._handleUnrecognizedCharacterEscape,"    protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException {
        if (this.isEnabled(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER)) {
            return ch;
        }
        if (ch == '\'' && this.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES)) {
            return ch;
        }
        this._reportError(""Unrecognized character escape "" + ParserMinimalBase._getCharDesc(ch));
        return ch;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc,"    protected static final String _getCharDesc(int ch) {
        char c = (char)ch;
        if (Character.isISOControl(c)) {
            return ""(CTRL-CHAR, code "" + ch + "")"";
        }
        if (ch > 255) {
            return ""'"" + c + ""' (code "" + ch + "" / 0x"" + Integer.toHexString(ch) + "")"";
        }
        return ""'"" + c + ""' (code "" + ch + "")"";
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._reportError,"    protected final void _reportError(String msg) throws JsonParseException {
        throw this._constructError(msg);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError,"    protected final void _wrapError(String msg, Throwable t) throws JsonParseException {
        throw this._constructError(msg, t);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal,"    protected final void _throwInternal() {
        VersionUtil.throwInternal();
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._constructError,"    protected final JsonParseException _constructError(String msg, Throwable t) {
        return new JsonParseException((JsonParser)this, msg, t);
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes,"    protected static byte[] _asciiBytes(String str) {
        byte[] b = new byte[str.length()];
        int len = str.length();
        for (int i = 0; i < len; ++i) {
            b[i] = (byte)str.charAt(i);
        }
        return b;
    }"
com.fasterxml.jackson.core.base.ParserMinimalBase._ascii,"    protected static String _ascii(byte[] b) {
        try {
            return new String(b, ""US-ASCII"");
        }
        catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
"
com.fasterxml.jackson.core.base.ParserBase.version,"    public Version version() {
        return PackageVersion.VERSION;
    }"
com.fasterxml.jackson.core.base.ParserBase.getCurrentValue,"    public Object getCurrentValue() {
        return this._parsingContext.getCurrentValue();
    }"
com.fasterxml.jackson.core.base.ParserBase.setCurrentValue,"    public void setCurrentValue(Object v) {
        this._parsingContext.setCurrentValue(v);
    }"
com.fasterxml.jackson.core.base.ParserBase.enable,"    public JsonParser enable(JsonParser.Feature f) {
        this._features |= f.getMask();
        if (f == JsonParser.Feature.STRICT_DUPLICATE_DETECTION && this._parsingContext.getDupDetector() == null) {
            this._parsingContext = this._parsingContext.withDupDetector(DupDetector.rootDetector(this));
        }
        return this;
    }"
com.fasterxml.jackson.core.base.ParserBase.disable,"    public JsonParser disable(JsonParser.Feature f) {
        this._features &= ~f.getMask();
        if (f == JsonParser.Feature.STRICT_DUPLICATE_DETECTION) {
            this._parsingContext = this._parsingContext.withDupDetector(null);
        }
        return this;
    }"
com.fasterxml.jackson.core.base.ParserBase.setFeatureMask,"    public JsonParser setFeatureMask(int newMask) {
        int changes = this._features ^ newMask;
        if (changes != 0) {
            this._features = newMask;
            this._checkStdFeatureChanges(newMask, changes);
        }
        return this;
    }"
com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures,"    public JsonParser overrideStdFeatures(int values, int mask) {
        int oldState = this._features;
        int newState = oldState & ~mask | values & mask;
        int changed = oldState ^ newState;
        if (changed != 0) {
            this._features = newState;
            this._checkStdFeatureChanges(newState, changed);
        }
        return this;
    }"
com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges,"    protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {
        int f = JsonParser.Feature.STRICT_DUPLICATE_DETECTION.getMask();
        if ((changedFeatures & f) != 0 && (newFeatureFlags & f) != 0) {
            this._parsingContext = this._parsingContext.getDupDetector() == null ? this._parsingContext.withDupDetector(DupDetector.rootDetector(this)) : this._parsingContext.withDupDetector(null);
        }
    }"
com.fasterxml.jackson.core.base.ParserBase.getCurrentName,"    public String getCurrentName() throws IOException {
        JsonReadContext parent;
        if ((this._currToken == JsonToken.START_OBJECT || this._currToken == JsonToken.START_ARRAY) && (parent = this._parsingContext.getParent()) != null) {
            return parent.getCurrentName();
        }
        return this._parsingContext.getCurrentName();
    }"
com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName,"    public void overrideCurrentName(String name) {
        JsonReadContext ctxt = this._parsingContext;
        if (this._currToken == JsonToken.START_OBJECT || this._currToken == JsonToken.START_ARRAY) {
            ctxt = ctxt.getParent();
        }
        try {
            ctxt.setCurrentName(name);
        }
        catch (IOException e) {
            throw new IllegalStateException(e);
        }
    }"
com.fasterxml.jackson.core.base.ParserBase.close,"    public void close() throws IOException {
        if (!this._closed) {
            this._closed = true;
            try {
                this._closeInput();
            }
            finally {
                this._releaseBuffers();
            }
        }
    }"
com.fasterxml.jackson.core.base.ParserBase.isClosed,"    public boolean isClosed() {
        return this._closed;
    }"
com.fasterxml.jackson.core.base.ParserBase.getParsingContext,"    public JsonReadContext getParsingContext() {
        return this._parsingContext;
    }"
com.fasterxml.jackson.core.base.ParserBase.getTokenLocation,"    public JsonLocation getTokenLocation() {
        return new JsonLocation(this._ioContext.getSourceReference(), -1L, this.getTokenCharacterOffset(), this.getTokenLineNr(), this.getTokenColumnNr());
    }"
com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation,"    public JsonLocation getCurrentLocation() {
        int col = this._inputPtr - this._currInputRowStart + 1;
        return new JsonLocation(this._ioContext.getSourceReference(), -1L, this._currInputProcessed + (long)this._inputPtr, this._currInputRow, col);
    }"
com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters,"    public boolean hasTextCharacters() {
        if (this._currToken == JsonToken.VALUE_STRING) {
            return true;
        }
        if (this._currToken == JsonToken.FIELD_NAME) {
            return this._nameCopied;
        }
        return false;
    }"
com.fasterxml.jackson.core.base.ParserBase.getBinaryValue,"    public byte[] getBinaryValue(Base64Variant variant) throws IOException {
        if (this._binaryValue == null) {
            if (this._currToken != JsonToken.VALUE_STRING) {
                this._reportError(""Current token ("" + (Object)((Object)this._currToken) + "") not VALUE_STRING, can not access as binary"");
            }
            ByteArrayBuilder builder = this._getByteArrayBuilder();
            this._decodeBase64(this.getText(), builder, variant);
            this._binaryValue = builder.toByteArray();
        }
        return this._binaryValue;
    }"
com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset,"    public long getTokenCharacterOffset() {
        return this._tokenInputTotal;
    }"
com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr,"    public int getTokenLineNr() {
        return this._tokenInputRow;
    }"
com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr,"    public int getTokenColumnNr() {
        int col = this._tokenInputCol;
        return col < 0 ? col : col + 1;
    }"
com.fasterxml.jackson.core.base.ParserBase._closeInput,
com.fasterxml.jackson.core.base.ParserBase._releaseBuffers,"    protected void _releaseBuffers() throws IOException {
        this._textBuffer.releaseBuffers();
        char[] buf = this._nameCopyBuffer;
        if (buf != null) {
            this._nameCopyBuffer = null;
            this._ioContext.releaseNameCopyBuffer(buf);
        }
    }"
com.fasterxml.jackson.core.base.ParserBase._handleEOF,"    protected void _handleEOF() throws JsonParseException {
        if (!this._parsingContext.inRoot()) {
            String marker = this._parsingContext.inArray() ? ""Array"" : ""Object"";
            this._reportInvalidEOF(String.format("": expected close marker for %s (start marker at %s)"", marker, this._parsingContext.getStartLocation(this._ioContext.getSourceReference())), null);
        }
    }"
com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar,"    protected final int _eofAsNextChar() throws JsonParseException {
        this._handleEOF();
        return -1;
    }"
com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker,"    protected void _reportMismatchedEndMarker(int actCh, char expCh) throws JsonParseException {
        String startDesc = """" + this._parsingContext.getStartLocation(this._ioContext.getSourceReference());
        this._reportError(""Unexpected close marker '"" + (char)actCh + ""': expected '"" + expCh + ""' (for "" + this._parsingContext.typeDesc() + "" starting at "" + startDesc + "")"");
    }"
com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder,"    public ByteArrayBuilder _getByteArrayBuilder() {
        if (this._byteArrayBuilder == null) {
            this._byteArrayBuilder = new ByteArrayBuilder();
        } else {
            this._byteArrayBuilder.reset();
        }
        return this._byteArrayBuilder;
    }"
com.fasterxml.jackson.core.base.ParserBase.reset,"    protected final JsonToken reset(boolean negative, int intLen, int fractLen, int expLen) {
        if (fractLen < 1 && expLen < 1) {
            return this.resetInt(negative, intLen);
        }
        return this.resetFloat(negative, intLen, fractLen, expLen);
    }"
com.fasterxml.jackson.core.base.ParserBase.resetInt,"    protected final JsonToken resetInt(boolean negative, int intLen) {
        this._numberNegative = negative;
        this._intLength = intLen;
        this._fractLength = 0;
        this._expLength = 0;
        this._numTypesValid = 0;
        return JsonToken.VALUE_NUMBER_INT;
    }"
com.fasterxml.jackson.core.base.ParserBase.resetFloat,"    protected final JsonToken resetFloat(boolean negative, int intLen, int fractLen, int expLen) {
        this._numberNegative = negative;
        this._intLength = intLen;
        this._fractLength = fractLen;
        this._expLength = expLen;
        this._numTypesValid = 0;
        return JsonToken.VALUE_NUMBER_FLOAT;
    }"
com.fasterxml.jackson.core.base.ParserBase.resetAsNaN,"    protected final JsonToken resetAsNaN(String valueStr, double value) {
        this._textBuffer.resetWithString(valueStr);
        this._numberDouble = value;
        this._numTypesValid = 8;
        return JsonToken.VALUE_NUMBER_FLOAT;
    }"
com.fasterxml.jackson.core.base.ParserBase.getNumberValue,"    public Number getNumberValue() throws IOException {
        if (this._numTypesValid == 0) {
            this._parseNumericValue(0);
        }
        if (this._currToken == JsonToken.VALUE_NUMBER_INT) {
            if ((this._numTypesValid & 1) != 0) {
                return this._numberInt;
            }
            if ((this._numTypesValid & 2) != 0) {
                return this._numberLong;
            }
            if ((this._numTypesValid & 4) != 0) {
                return this._numberBigInt;
            }
            return this._numberBigDecimal;
        }
        if ((this._numTypesValid & 0x10) != 0) {
            return this._numberBigDecimal;
        }
        if ((this._numTypesValid & 8) == 0) {
            this._throwInternal();
        }
        return this._numberDouble;
    }"
com.fasterxml.jackson.core.base.ParserBase.getNumberType,"    public JsonParser.NumberType getNumberType() throws IOException {
        if (this._numTypesValid == 0) {
            this._parseNumericValue(0);
        }
        if (this._currToken == JsonToken.VALUE_NUMBER_INT) {
            if ((this._numTypesValid & 1) != 0) {
                return JsonParser.NumberType.INT;
            }
            if ((this._numTypesValid & 2) != 0) {
                return JsonParser.NumberType.LONG;
            }
            return JsonParser.NumberType.BIG_INTEGER;
        }
        if ((this._numTypesValid & 0x10) != 0) {
            return JsonParser.NumberType.BIG_DECIMAL;
        }
        return JsonParser.NumberType.DOUBLE;
    }"
com.fasterxml.jackson.core.base.ParserBase.getIntValue,"    public int getIntValue() throws IOException {
        if ((this._numTypesValid & 1) == 0) {
            if (this._numTypesValid == 0) {
                return this._parseIntValue();
            }
            if ((this._numTypesValid & 1) == 0) {
                this.convertNumberToInt();
            }
        }
        return this._numberInt;
    }"
com.fasterxml.jackson.core.base.ParserBase.getLongValue,"    public long getLongValue() throws IOException {
        if ((this._numTypesValid & 2) == 0) {
            if (this._numTypesValid == 0) {
                this._parseNumericValue(2);
            }
            if ((this._numTypesValid & 2) == 0) {
                this.convertNumberToLong();
            }
        }
        return this._numberLong;
    }"
com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue,"    public BigInteger getBigIntegerValue() throws IOException {
        if ((this._numTypesValid & 4) == 0) {
            if (this._numTypesValid == 0) {
                this._parseNumericValue(4);
            }
            if ((this._numTypesValid & 4) == 0) {
                this.convertNumberToBigInteger();
            }
        }
        return this._numberBigInt;
    }"
com.fasterxml.jackson.core.base.ParserBase.getFloatValue,"    public float getFloatValue() throws IOException {
        double value = this.getDoubleValue();
        return (float)value;
    }"
com.fasterxml.jackson.core.base.ParserBase.getDoubleValue,"    public double getDoubleValue() throws IOException {
        if ((this._numTypesValid & 8) == 0) {
            if (this._numTypesValid == 0) {
                this._parseNumericValue(8);
            }
            if ((this._numTypesValid & 8) == 0) {
                this.convertNumberToDouble();
            }
        }
        return this._numberDouble;
    }"
com.fasterxml.jackson.core.base.ParserBase.getDecimalValue,"    public BigDecimal getDecimalValue() throws IOException {
        if ((this._numTypesValid & 0x10) == 0) {
            if (this._numTypesValid == 0) {
                this._parseNumericValue(16);
            }
            if ((this._numTypesValid & 0x10) == 0) {
                this.convertNumberToBigDecimal();
            }
        }
        return this._numberBigDecimal;
    }"
com.fasterxml.jackson.core.base.ParserBase._parseNumericValue,"    protected void _parseNumericValue(int expType) throws IOException {
        if (this._currToken == JsonToken.VALUE_NUMBER_INT) {
            char[] buf = this._textBuffer.getTextBuffer();
            int offset = this._textBuffer.getTextOffset();
            int len = this._intLength;
            if (this._numberNegative) {
                ++offset;
            }
            if (len <= 9) {
                int i = NumberInput.parseInt(buf, offset, len);
                this._numberInt = this._numberNegative ? -i : i;
                this._numTypesValid = 1;
                return;
            }
            if (len <= 18) {
                long l = NumberInput.parseLong(buf, offset, len);
                if (this._numberNegative) {
                    l = -l;
                }
                if (len == 10) {
                    if (this._numberNegative) {
                        if (l >= Integer.MIN_VALUE) {
                            this._numberInt = (int)l;
                            this._numTypesValid = 1;
                            return;
                        }
                    } else if (l <= Integer.MAX_VALUE) {
                        this._numberInt = (int)l;
                        this._numTypesValid = 1;
                        return;
                    }
                }
                this._numberLong = l;
                this._numTypesValid = 2;
                return;
            }
            this._parseSlowInt(expType, buf, offset, len);
            return;
        }
        if (this._currToken == JsonToken.VALUE_NUMBER_FLOAT) {
            this._parseSlowFloat(expType);
            return;
        }
        this._reportError(""Current token ("" + (Object)((Object)this._currToken) + "") not numeric, can not use numeric value accessors"");
    }"
com.fasterxml.jackson.core.base.ParserBase._parseIntValue,"    protected int _parseIntValue() throws IOException {
        if (this._currToken == JsonToken.VALUE_NUMBER_INT) {
            char[] buf = this._textBuffer.getTextBuffer();
            int offset = this._textBuffer.getTextOffset();
            int len = this._intLength;
            if (this._numberNegative) {
                ++offset;
            }
            if (len <= 9) {
                int i = NumberInput.parseInt(buf, offset, len);
                if (this._numberNegative) {
                    i = -i;
                }
                this._numberInt = i;
                this._numTypesValid = 1;
                return i;
            }
        }
        this._parseNumericValue(1);
        if ((this._numTypesValid & 1) == 0) {
            this.convertNumberToInt();
        }
        return this._numberInt;
    }"
com.fasterxml.jackson.core.base.ParserBase._parseSlowFloat,"    private void _parseSlowFloat(int expType) throws IOException {
        try {
            if (expType == 16) {
                this._numberBigDecimal = this._textBuffer.contentsAsDecimal();
                this._numTypesValid = 16;
            } else {
                this._numberDouble = this._textBuffer.contentsAsDouble();
                this._numTypesValid = 8;
            }
        }
        catch (NumberFormatException nex) {
            this._wrapError(""Malformed numeric value '"" + this._textBuffer.contentsAsString() + ""'"", nex);
        }
    }"
com.fasterxml.jackson.core.base.ParserBase._parseSlowInt,"    private void _parseSlowInt(int expType, char[] buf, int offset, int len) throws IOException {
        String numStr = this._textBuffer.contentsAsString();
        try {
            if (NumberInput.inLongRange(buf, offset, len, this._numberNegative)) {
                this._numberLong = Long.parseLong(numStr);
                this._numTypesValid = 2;
            } else {
                this._numberBigInt = new BigInteger(numStr);
                this._numTypesValid = 4;
            }
        }
        catch (NumberFormatException nex) {
            this._wrapError(""Malformed numeric value '"" + numStr + ""'"", nex);
        }
    }"
com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt,"    protected void convertNumberToInt() throws IOException {
        if ((this._numTypesValid & 2) != 0) {
            int result = (int)this._numberLong;
            if ((long)result != this._numberLong) {
                this._reportError(""Numeric value ("" + this.getText() + "") out of range of int"");
            }
            this._numberInt = result;
        } else if ((this._numTypesValid & 4) != 0) {
            if (BI_MIN_INT.compareTo(this._numberBigInt) > 0 || BI_MAX_INT.compareTo(this._numberBigInt) < 0) {
                this.reportOverflowInt();
            }
            this._numberInt = this._numberBigInt.intValue();
        } else if ((this._numTypesValid & 8) != 0) {
            if (this._numberDouble < -2.147483648E9 || this._numberDouble > 2.147483647E9) {
                this.reportOverflowInt();
            }
            this._numberInt = (int)this._numberDouble;
        } else if ((this._numTypesValid & 0x10) != 0) {
            if (BD_MIN_INT.compareTo(this._numberBigDecimal) > 0 || BD_MAX_INT.compareTo(this._numberBigDecimal) < 0) {
                this.reportOverflowInt();
            }
            this._numberInt = this._numberBigDecimal.intValue();
        } else {
            this._throwInternal();
        }
        this._numTypesValid |= 1;
    }"
com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong,"    protected void convertNumberToLong() throws IOException {
        if ((this._numTypesValid & 1) != 0) {
            this._numberLong = this._numberInt;
        } else if ((this._numTypesValid & 4) != 0) {
            if (BI_MIN_LONG.compareTo(this._numberBigInt) > 0 || BI_MAX_LONG.compareTo(this._numberBigInt) < 0) {
                this.reportOverflowLong();
            }
            this._numberLong = this._numberBigInt.longValue();
        } else if ((this._numTypesValid & 8) != 0) {
            if (this._numberDouble < -9.223372036854776E18 || this._numberDouble > 9.223372036854776E18) {
                this.reportOverflowLong();
            }
            this._numberLong = (long)this._numberDouble;
        } else if ((this._numTypesValid & 0x10) != 0) {
            if (BD_MIN_LONG.compareTo(this._numberBigDecimal) > 0 || BD_MAX_LONG.compareTo(this._numberBigDecimal) < 0) {
                this.reportOverflowLong();
            }
            this._numberLong = this._numberBigDecimal.longValue();
        } else {
            this._throwInternal();
        }
        this._numTypesValid |= 2;
    }"
com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger,"    protected void convertNumberToBigInteger() throws IOException {
        if ((this._numTypesValid & 0x10) != 0) {
            this._numberBigInt = this._numberBigDecimal.toBigInteger();
        } else if ((this._numTypesValid & 2) != 0) {
            this._numberBigInt = BigInteger.valueOf(this._numberLong);
        } else if ((this._numTypesValid & 1) != 0) {
            this._numberBigInt = BigInteger.valueOf(this._numberInt);
        } else if ((this._numTypesValid & 8) != 0) {
            this._numberBigInt = BigDecimal.valueOf(this._numberDouble).toBigInteger();
        } else {
            this._throwInternal();
        }
        this._numTypesValid |= 4;
    }"
com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble,"    protected void convertNumberToDouble() throws IOException {
        if ((this._numTypesValid & 0x10) != 0) {
            this._numberDouble = this._numberBigDecimal.doubleValue();
        } else if ((this._numTypesValid & 4) != 0) {
            this._numberDouble = this._numberBigInt.doubleValue();
        } else if ((this._numTypesValid & 2) != 0) {
            this._numberDouble = this._numberLong;
        } else if ((this._numTypesValid & 1) != 0) {
            this._numberDouble = this._numberInt;
        } else {
            this._throwInternal();
        }
        this._numTypesValid |= 8;
    }"
com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal,"    protected void convertNumberToBigDecimal() throws IOException {
        if ((this._numTypesValid & 8) != 0) {
            this._numberBigDecimal = NumberInput.parseBigDecimal(this.getText());
        } else if ((this._numTypesValid & 4) != 0) {
            this._numberBigDecimal = new BigDecimal(this._numberBigInt);
        } else if ((this._numTypesValid & 2) != 0) {
            this._numberBigDecimal = BigDecimal.valueOf(this._numberLong);
        } else if ((this._numTypesValid & 1) != 0) {
            this._numberBigDecimal = BigDecimal.valueOf(this._numberInt);
        } else {
            this._throwInternal();
        }
        this._numTypesValid |= 0x10;
    }"
com.fasterxml.jackson.core.base.ParserBase.reportUnexpectedNumberChar,"    protected void reportUnexpectedNumberChar(int ch, String comment) throws JsonParseException {
        String msg = ""Unexpected character ("" + ParserBase._getCharDesc(ch) + "") in numeric value"";
        if (comment != null) {
            msg = msg + "": "" + comment;
        }
        this._reportError(msg);
    }"
com.fasterxml.jackson.core.base.ParserBase.reportInvalidNumber,"    protected void reportInvalidNumber(String msg) throws JsonParseException {
        this._reportError(""Invalid numeric value: "" + msg);
    }"
com.fasterxml.jackson.core.base.ParserBase.reportOverflowInt,"    protected void reportOverflowInt() throws IOException {
        this._reportError(String.format(""Numeric value (%s) out of range of int (%d - %s)"", this.getText(), Integer.MIN_VALUE, Integer.MAX_VALUE));
    }"
com.fasterxml.jackson.core.base.ParserBase.reportOverflowLong,"    protected void reportOverflowLong() throws IOException {
        this._reportError(String.format(""Numeric value (%s) out of range of long (%d - %s)"", this.getText(), Long.MIN_VALUE, Long.MAX_VALUE));
    }"
com.fasterxml.jackson.core.base.ParserBase._decodeEscaped,"    protected char _decodeEscaped() throws IOException {
        throw new UnsupportedOperationException();
    }"
com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape,"    protected final int _decodeBase64Escape(Base64Variant b64variant, int ch, int index) throws IOException {
        if (ch != 92) {
            throw this.reportInvalidBase64Char(b64variant, ch, index);
        }
        char unescaped = this._decodeEscaped();
        if (unescaped <= ' ' && index == 0) {
            return -1;
        }
        int bits = b64variant.decodeBase64Char((int)unescaped);
        if (bits < 0) {
            throw this.reportInvalidBase64Char(b64variant, unescaped, index);
        }
        return bits;
    }"
com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape,"    protected final int _decodeBase64Escape(Base64Variant b64variant, char ch, int index) throws IOException {
        if (ch != '\\') {
            throw this.reportInvalidBase64Char(b64variant, ch, index);
        }
        char unescaped = this._decodeEscaped();
        if (unescaped <= ' ' && index == 0) {
            return -1;
        }
        int bits = b64variant.decodeBase64Char(unescaped);
        if (bits < 0) {
            throw this.reportInvalidBase64Char(b64variant, unescaped, index);
        }
        return bits;
    }"
com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char,"    protected IllegalArgumentException reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex) throws IllegalArgumentException {
        return this.reportInvalidBase64Char(b64variant, ch, bindex, null);
    }"
com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char,"    protected IllegalArgumentException reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex, String msg) throws IllegalArgumentException {
        String base = ch <= 32 ? ""Illegal white space character (code 0x"" + Integer.toHexString(ch) + "") as character #"" + (bindex + 1) + "" of 4-char base64 unit: can only used between units"" : (b64variant.usesPaddingChar(ch) ? ""Unexpected padding character ('"" + b64variant.getPaddingChar() + ""') as character #"" + (bindex + 1) + "" of 4-char base64 unit: padding only legal as 3rd or 4th character"" : (!Character.isDefined(ch) || Character.isISOControl(ch) ? ""Illegal character (code 0x"" + Integer.toHexString(ch) + "") in base64 content"" : ""Illegal character '"" + (char)ch + ""' (code 0x"" + Integer.toHexString(ch) + "") in base64 content""));
        if (msg != null) {
            base = base + "": "" + msg;
        }
        return new IllegalArgumentException(base);
    }"
com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed,"    protected void loadMoreGuaranteed() throws IOException {
        if (!this.loadMore()) {
            this._reportInvalidEOF();
        }
    }"
com.fasterxml.jackson.core.base.ParserBase.loadMore,"    protected boolean loadMore() throws IOException {
        return false;
    }"
com.fasterxml.jackson.core.base.ParserBase._finishString,"    protected void _finishString() throws IOException {
    }
"
