Method,Called_Method,function,option,Method_short,path,class_name,xml_path,Method_body
M:org.apache.cassandra.utils.memory.BufferPools:<clinit>(),(S)org.apache.cassandra.config.DatabaseDescriptor:getNetworkingCacheSizeInMB(),org.apache.cassandra.config.DatabaseDescriptor:getNetworkingCacheSizeInMB(),networking_cache_size_in_mb,<clinit>,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/memory/BufferPools.java,BufferPools,../data/xml/cassandra/BufferPools.xml,"public class BufferPools
{
    private static final Logger logger = LoggerFactory.getLogger(BufferPools.class);

    /**
     * Used by chunk cache to store decompressed data and buffers may be held by chunk cache for arbitrary period.
     */
    private static final long FILE_MEMORY_USAGE_THRESHOLD = DatabaseDescriptor.getFileCacheSizeInMB() * 1024L * 1024L;
    private static final BufferPool CHUNK_CACHE_POOL = new BufferPool(""chunk-cache"", FILE_MEMORY_USAGE_THRESHOLD, true);

    /**
     * Used by client-server or inter-node requests, buffers should be released immediately after use.
     */
    private static final long NETWORKING_MEMORY_USAGE_THRESHOLD = DatabaseDescriptor.getNetworkingCacheSizeInMB() * 1024L * 1024L;
    private static final BufferPool NETWORKING_POOL = new BufferPool(""networking"", NETWORKING_MEMORY_USAGE_THRESHOLD, false);

    static
    {
        logger.info(""Global buffer pool limit is {} for {} and {} for {}"",
                    prettyPrintMemory(FILE_MEMORY_USAGE_THRESHOLD),
                    CHUNK_CACHE_POOL.name,
                    prettyPrintMemory(NETWORKING_MEMORY_USAGE_THRESHOLD),
                    NETWORKING_POOL.name);

        CHUNK_CACHE_POOL.metrics().register3xAlias();
    }
    /**
     * Long-lived buffers used for chunk cache and other disk access
     */
    public static BufferPool forChunkCache()
    {
        return CHUNK_CACHE_POOL;
    }

    /**
     * Short-lived buffers used for internode messaging or client-server connections.
     */
    public static BufferPool forNetworking()
    {
        return NETWORKING_POOL;
    }

    public static void shutdownLocalCleaner(long timeout, TimeUnit unit) throws TimeoutException, InterruptedException
    {
        CHUNK_CACHE_POOL.shutdownLocalCleaner(timeout, unit);
        NETWORKING_POOL.shutdownLocalCleaner(timeout, unit);
    }

}
"
