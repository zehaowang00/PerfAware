Method,Called_Method,function,option,Method_short,path,class_name,xml_path,Method_body
M:org.apache.cassandra.audit.AuditLogManager:<init>(),(S)org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,<init>,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/audit/AuditLogManager.java,AuditLogManager,../data/xml/cassandra/AuditLogManager.xml,"private AuditLogManager()
    {
        final AuditLogOptions auditLogOptions = DatabaseDescriptor.getAuditLoggingOptions();

        if (auditLogOptions.enabled)
        {
            logger.info(""Audit logging is enabled."");
            auditLogger = getAuditLogger(auditLogOptions.logger);
        }
        else
        {
            logger.debug(""Audit logging is disabled."");
            auditLogger = new NoOpAuditLogger(Collections.emptyMap());
        }

        filter = AuditLogFilter.create(auditLogOptions);
    }

    "
M:org.apache.cassandra.audit.AuditLogManager:initialize(),(S)org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,initialize,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/audit/AuditLogManager.java,AuditLogManager,../data/xml/cassandra/AuditLogManager.xml,"public void initialize()
    {
        if (DatabaseDescriptor.getAuditLoggingOptions().enabled)
            registerAsListener();
    }

    "
M:org.apache.cassandra.audit.BinAuditLogger:<init>(java.util.Map),(S)org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,<init>,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/audit/BinAuditLogger.java,BinAuditLogger,../data/xml/cassandra/BinAuditLogger.xml,"public BinAuditLogger(Map<String, String> params)
    {
        AuditLogOptions auditLoggingOptions = DatabaseDescriptor.getAuditLoggingOptions();

        this.binLog = new BinLog.Builder().path(Paths.get(auditLoggingOptions.audit_logs_dir))
                                          .rollCycle(auditLoggingOptions.roll_cycle)
                                          .blocking(auditLoggingOptions.block)
                                          .maxQueueWeight(auditLoggingOptions.max_queue_weight)
                                          .maxLogSize(auditLoggingOptions.max_log_size)
                                          .archiveCommand(auditLoggingOptions.archive_command)
                                          .maxArchiveRetries(auditLoggingOptions.max_archive_retries)
                                          .build(false);
    }

    "
"M:org.apache.cassandra.service.StorageService:enableAuditLog(java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",(S)org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,enableAuditLog,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/StorageService.java,StorageService,../data/xml/cassandra/StorageService.xml,"public void enableAuditLog(String loggerName, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                               String includedUsers, String excludedUsers) throws ConfigurationException, IllegalStateException
    {
        enableAuditLog(loggerName, Collections.emptyMap(), includedKeyspaces, excludedKeyspaces, includedCategories, excludedCategories, includedUsers, excludedUsers);
    }

    
public void enableAuditLog(String loggerName, Map<String, String> parameters, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                               String includedUsers, String excludedUsers) throws ConfigurationException, IllegalStateException
    {
        loggerName = loggerName != null ? loggerName : DatabaseDescriptor.getAuditLoggingOptions().logger.class_name;

        Preconditions.checkNotNull(loggerName, ""cassandra.yaml did not have logger in audit_logging_option and not set as parameter"");
        Preconditions.checkState(FBUtilities.isAuditLoggerClassExists(loggerName), ""Unable to find AuditLogger class: ""+loggerName);

        AuditLogOptions auditLogOptions = new AuditLogOptions();
        auditLogOptions.enabled = true;
        auditLogOptions.logger = new ParameterizedClass(loggerName, parameters);
        auditLogOptions.included_keyspaces = includedKeyspaces != null ? includedKeyspaces : DatabaseDescriptor.getAuditLoggingOptions().included_keyspaces;
        auditLogOptions.excluded_keyspaces = excludedKeyspaces != null ? excludedKeyspaces : DatabaseDescriptor.getAuditLoggingOptions().excluded_keyspaces;
        auditLogOptions.included_categories = includedCategories != null ? includedCategories : DatabaseDescriptor.getAuditLoggingOptions().included_categories;
        auditLogOptions.excluded_categories = excludedCategories != null ? excludedCategories : DatabaseDescriptor.getAuditLoggingOptions().excluded_categories;
        auditLogOptions.included_users = includedUsers != null ? includedUsers : DatabaseDescriptor.getAuditLoggingOptions().included_users;
        auditLogOptions.excluded_users = excludedUsers != null ? excludedUsers : DatabaseDescriptor.getAuditLoggingOptions().excluded_users;

        AuditLogManager.instance.enable(auditLogOptions);

        logger.info(""AuditLog is enabled with logger: [{}], included_keyspaces: [{}], excluded_keyspaces: [{}], "" +
                    ""included_categories: [{}], excluded_categories: [{}], included_users: [{}], ""
                    + ""excluded_users: [{}], archive_command: [{}]"", auditLogOptions.logger, auditLogOptions.included_keyspaces, auditLogOptions.excluded_keyspaces,
                    auditLogOptions.included_categories, auditLogOptions.excluded_categories, auditLogOptions.included_users, auditLogOptions.excluded_users,
                    auditLogOptions.archive_command);

    }

    "
