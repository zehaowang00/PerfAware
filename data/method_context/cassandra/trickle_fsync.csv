Method,Called_Method,function,option,Method_short,path,class_name,xml_path,Method_body
M:org.apache.cassandra.cache.AutoSavingCache$1:<init>(),(S)org.apache.cassandra.config.DatabaseDescriptor:getTrickleFsync(),org.apache.cassandra.config.DatabaseDescriptor:getTrickleFsync(),trickle_fsync,<init>,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cache/AutoSavingCache.java,AutoSavingCache$1,../data/xml/cassandra/AutoSavingCache.xml,"AutoSavingCache<K extends CacheKey, V> 
AutoSavingCache.class
AutoSavingCache.streamFactory 
public AutoSavingCache(ICache<K, V> cache, CacheService.CacheType cacheType, CacheSerializer<K, V> cacheloader)
    {
        super(cacheType.toString(), cache);
        this.cacheType = cacheType;
        this.cacheLoader = cacheloader;
    }

    "
"M:org.apache.cassandra.io.sstable.format.big.BigTableWriter:<init>(org.apache.cassandra.io.sstable.Descriptor,long,long,java.util.UUID,boolean,org.apache.cassandra.schema.TableMetadataRef,org.apache.cassandra.io.sstable.metadata.MetadataCollector,org.apache.cassandra.db.SerializationHeader,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleNewTracker)",(S)org.apache.cassandra.config.DatabaseDescriptor:getTrickleFsync(),org.apache.cassandra.config.DatabaseDescriptor:getTrickleFsync(),trickle_fsync,<init>,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/sstable/format/big/BigTableWriter.java,BigTableWriter,../data/xml/cassandra/BigTableWriter.xml,"public BigTableWriter(Descriptor descriptor,
                          long keyCount,
                          long repairedAt,
                          UUID pendingRepair,
                          boolean isTransient,
                          TableMetadataRef metadata,
                          MetadataCollector metadataCollector, 
                          SerializationHeader header,
                          Collection<SSTableFlushObserver> observers,
                          LifecycleNewTracker lifecycleNewTracker)
    {
        super(descriptor, keyCount, repairedAt, pendingRepair, isTransient, metadata, metadataCollector, header, observers);
        lifecycleNewTracker.trackNew(this); // must track before any files are created

        if (compression)
        {
            final CompressionParams compressionParams = compressionFor(lifecycleNewTracker.opType());

            dataFile = new CompressedSequentialWriter(new File(getFilename()),
                                             descriptor.filenameFor(Component.COMPRESSION_INFO),
                                             new File(descriptor.filenameFor(Component.DIGEST)),
                                             writerOption,
                                             compressionParams,
                                             metadataCollector);
        }
        else
        {
            dataFile = new ChecksummedSequentialWriter(new File(getFilename()),
                    new File(descriptor.filenameFor(Component.CRC)),
                    new File(descriptor.filenameFor(Component.DIGEST)),
                    writerOption);
        }
        dbuilder = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).compressed(compression)
                                              .mmapped(DatabaseDescriptor.getDiskAccessMode() == Config.DiskAccessMode.mmap);
        chunkCache.ifPresent(dbuilder::withChunkCache);
        iwriter = new IndexWriter(keyCount);

        columnIndexWriter = new ColumnIndex(this.header, dataFile, descriptor.version, this.observers, getRowIndexEntrySerializer().indexInfoSerializer());
    }

    "
