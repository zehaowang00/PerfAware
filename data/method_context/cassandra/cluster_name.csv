Method,Called_Method,function,option,Method_short,path,class_name,xml_path,Method_body
"M:org.apache.cassandra.cql3.statements.DescribeStatement$5:describe(org.apache.cassandra.service.ClientState,org.apache.cassandra.schema.Keyspaces)",(S)org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),cluster_name,describe,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/statements/DescribeStatement.java,DescribeStatement$5,../data/xml/cassandra/DescribeStatement.xml,"@Override
        protected Stream<? extends SchemaElement> describe(ClientState state, Keyspaces keyspaces)
        {
            String keyspace = state.getRawKeyspace();
            Stream<KeyspaceMetadata> stream = keyspace == null ? keyspaces.stream().sorted(SchemaElement.NAME_COMPARATOR)
                                                               : Stream.of(validateKeyspace(keyspace, keyspaces));

            return stream.flatMap(k -> elementsProvider.apply(k).sorted(SchemaElement.NAME_COMPARATOR));
        }

        
@Override
            protected Stream<? extends SchemaElement> describe(ClientState state, Keyspaces keyspaces)
            {
                return keyspaces.stream().sorted(SchemaElement.NAME_COMPARATOR);
            }

            
@Override
            protected Stream<? extends SchemaElement> describe(ClientState state, Keyspaces keyspaces)
            {
                return keyspaces.stream()
                                .filter(ks -> includeSystemKeyspaces || !SchemaConstants.isSystemKeyspace(ks.name))
                                .sorted(SchemaElement.NAME_COMPARATOR)
                                .flatMap(ks -> getKeyspaceElements(ks, false));
            }

            
@Override
        protected Stream<? extends SchemaElement> describe(ClientState state, Keyspaces keyspaces)
        {
            String ks = keyspace == null ? checkNotNull(state.getRawKeyspace(), ""No keyspace specified and no current keyspace"")
                                         : keyspace;

            return elementsProvider.apply(validateKeyspace(ks, keyspaces), name);
        }

        
@Override
            protected Stream<? extends SchemaElement> describe(ClientState state, Keyspaces keyspaces)
            {
                delegate = resolve(state, keyspaces);
                return delegate.describe(state, keyspaces);
            }

            
@Override
            protected Stream<List<Object>> describe(ClientState state, Keyspaces keyspaces)
            {
                List<Object> list = new ArrayList<Object>();
                list.add(DatabaseDescriptor.getClusterName());
                list.add(trimIfPresent(DatabaseDescriptor.getPartitionerName(), ""org.apache.cassandra.dht.""));
                list.add(trimIfPresent(DatabaseDescriptor.getEndpointSnitch().getClass().getName(),
                                            ""org.apache.cassandra.locator.""));
 
                String useKs = state.getRawKeyspace();
                if (mustReturnsRangeOwnerships(useKs))
                {
                    list.add(StorageService.instance.getRangeToAddressMap(useKs)
                                                    .entrySet()
                                                    .stream()
                                                    .sorted(Comparator.comparing(Map.Entry::getKey))
                                                    .collect(Collectors.toMap(e -> e.getKey().right.toString(),
                                                                              e -> e.getValue()
                                                                                    .stream()
                                                                                    .map(r -> r.endpoint().toString())
                                                                                    .collect(Collectors.toList()))));
                }
                return Stream.of(list);
            }

            "
M:org.apache.cassandra.db.SystemKeyspace:persistLocalMetadata(),(S)org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),cluster_name,persistLocalMetadata,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/SystemKeyspace.java,SystemKeyspace,../data/xml/cassandra/SystemKeyspace.xml,"public static void persistLocalMetadata()
    {
        String req = ""INSERT INTO system.%s ("" +
                     ""key,"" +
                     ""cluster_name,"" +
                     ""release_version,"" +
                     ""cql_version,"" +
                     ""native_protocol_version,"" +
                     ""data_center,"" +
                     ""rack,"" +
                     ""partitioner,"" +
                     ""rpc_address,"" +
                     ""rpc_port,"" +
                     ""broadcast_address,"" +
                     ""broadcast_port,"" +
                     ""listen_address,"" +
                     ""listen_port"" +
                     "") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"";
        IEndpointSnitch snitch = DatabaseDescriptor.getEndpointSnitch();
        executeOnceInternal(format(req, LOCAL),
                            LOCAL,
                            DatabaseDescriptor.getClusterName(),
                            FBUtilities.getReleaseVersionString(),
                            QueryProcessor.CQL_VERSION.toString(),
                            String.valueOf(ProtocolVersion.CURRENT.asInt()),
                            snitch.getLocalDatacenter(),
                            snitch.getLocalRack(),
                            DatabaseDescriptor.getPartitioner().getClass().getName(),
                            DatabaseDescriptor.getRpcAddress(),
                            DatabaseDescriptor.getNativeTransportPort(),
                            FBUtilities.getJustBroadcastAddress(),
                            DatabaseDescriptor.getStoragePort(),
                            FBUtilities.getJustLocalAddress(),
                            DatabaseDescriptor.getStoragePort());
    }

    "
M:org.apache.cassandra.db.SystemKeyspace:checkHealth(),(S)org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),cluster_name,checkHealth,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/SystemKeyspace.java,SystemKeyspace,../data/xml/cassandra/SystemKeyspace.xml,"/**
     * One of three things will happen if you try to read the system keyspace:
     * 1. files are present and you can read them: great
     * 2. no files are there: great (new node is assumed)
     * 3. files are present but you can't read them: bad
     * @throws ConfigurationException
     */
public static void checkHealth() throws ConfigurationException
    {
        Keyspace keyspace;
        try
        {
            keyspace = Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME);
        }
        catch (AssertionError err)
        {
            // this happens when a user switches from OPP to RP.
            ConfigurationException ex = new ConfigurationException(""Could not read system keyspace!"");
            ex.initCause(err);
            throw ex;
        }
        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(LOCAL);

        String req = ""SELECT cluster_name FROM system.%s WHERE key='%s'"";
        UntypedResultSet result = executeInternal(format(req, LOCAL, LOCAL));

        if (result.isEmpty() || !result.one().has(""cluster_name""))
        {
            // this is a brand new node
            if (!cfs.getLiveSSTables().isEmpty())
                throw new ConfigurationException(""Found system keyspace files, but they couldn't be loaded!"");

            // no system files.  this is a new node.
            return;
        }

        String savedClusterName = result.one().getString(""cluster_name"");
        if (!DatabaseDescriptor.getClusterName().equals(savedClusterName))
            throw new ConfigurationException(""Saved cluster name "" + savedClusterName + "" != configured name "" + DatabaseDescriptor.getClusterName());
    }

    "
M:org.apache.cassandra.gms.GossipDigestSynVerbHandler:doVerb(org.apache.cassandra.net.Message),(S)org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),cluster_name,doVerb,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/gms/GossipDigestSynVerbHandler.java,GossipDigestSynVerbHandler,../data/xml/cassandra/GossipDigestSynVerbHandler.xml,"public void doVerb(Message<GossipDigestSyn> message)
    {
        InetAddressAndPort from = message.from();
        if (logger.isTraceEnabled())
            logger.trace(""Received a GossipDigestSynMessage from {}"", from);
        if (!Gossiper.instance.isEnabled() && !Gossiper.instance.isInShadowRound())
        {
            if (logger.isTraceEnabled())
                logger.trace(""Ignoring GossipDigestSynMessage because gossip is disabled"");
            return;
        }

        GossipDigestSyn gDigestMessage = message.payload;
        /* If the message is from a different cluster throw it away. */
        if (!gDigestMessage.clusterId.equals(DatabaseDescriptor.getClusterName()))
        {
            logger.warn(""ClusterName mismatch from {} {}!={}"", from, gDigestMessage.clusterId, DatabaseDescriptor.getClusterName());
            return;
        }

        if (gDigestMessage.partioner != null && !gDigestMessage.partioner.equals(DatabaseDescriptor.getPartitionerName()))
        {
            logger.warn(""Partitioner mismatch from {} {}!={}"", from, gDigestMessage.partioner, DatabaseDescriptor.getPartitionerName());
            return;
        }

        List<GossipDigest> gDigestList = gDigestMessage.getGossipDigests();

        // if the syn comes from a peer performing a shadow round and this node is
        // also currently in a shadow round, send back a minimal ack. This node must
        // be in the sender's seed list and doing this allows the sender to
        // differentiate between seeds from which it is partitioned and those which
        // are in their shadow round
        if (!Gossiper.instance.isEnabled() && Gossiper.instance.isInShadowRound())
        {
            // a genuine syn (as opposed to one from a node currently
            // doing a shadow round) will always contain > 0 digests
            if (gDigestList.size() > 0)
            {
                logger.debug(""Ignoring non-empty GossipDigestSynMessage because currently in gossip shadow round"");
                return;
            }

            logger.debug(""Received a shadow round syn from {}. Gossip is disabled but "" +
                         ""currently also in shadow round, responding with a minimal ack"", from);
            MessagingService.instance()
                            .send(Message.out(GOSSIP_DIGEST_ACK, new GossipDigestAck(Collections.emptyList(), Collections.emptyMap())),
                                  from);
            return;
        }

        if (logger.isTraceEnabled())
        {
            StringBuilder sb = new StringBuilder();
            for (GossipDigest gDigest : gDigestList)
            {
                sb.append(gDigest);
                sb.append("" "");
            }
            logger.trace(""Gossip syn digests are : {}"", sb);
        }

        Message<GossipDigestAck> gDigestAckMessage = gDigestList.isEmpty() ?
                                                     createShadowReply() :
                                                     createNormalReply(gDigestList);

        if (logger.isTraceEnabled())
            logger.trace(""Sending a GossipDigestAckMessage to {}"", from);
        MessagingService.instance().send(gDigestAckMessage, from);

        super.doVerb(message);
    }

    "
M:org.apache.cassandra.gms.Gossiper$GossipTask:run(),(S)org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),cluster_name,run,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/gms/Gossiper.java,Gossiper$GossipTask,../data/xml/cassandra/Gossiper.xml,"public void run()
        {
            try
            {
                //wait on messaging service to start listening
                MessagingService.instance().waitUntilListening();

                taskLock.lock();

                /* Update the local heartbeat counter. */
                endpointStateMap.get(FBUtilities.getBroadcastAddressAndPort()).getHeartBeatState().updateHeartBeat();
                if (logger.isTraceEnabled())
                    logger.trace(""My heartbeat is now {}"", endpointStateMap.get(FBUtilities.getBroadcastAddressAndPort()).getHeartBeatState().getHeartBeatVersion());
                final List<GossipDigest> gDigests = new ArrayList<>();
                Gossiper.instance.makeRandomGossipDigest(gDigests);

                if (gDigests.size() > 0)
                {
                    GossipDigestSyn digestSynMessage = new GossipDigestSyn(DatabaseDescriptor.getClusterName(),
                                                                           DatabaseDescriptor.getPartitionerName(),
                                                                           gDigests);
                    Message<GossipDigestSyn> message = Message.out(GOSSIP_DIGEST_SYN, digestSynMessage);
                    /* Gossip to some random live member */
                    boolean gossipedToSeed = doGossipToLiveMember(message);

                    /* Gossip to some unreachable member with some probability to check if he is back up */
                    maybeGossipToUnreachableMember(message);

                    /* Gossip to a seed if we did not do so above, or we have seen less nodes
                       than there are seeds.  This prevents partitions where each group of nodes
                       is only gossiping to a subset of the seeds.

                       The most straightforward check would be to check that all the seeds have been
                       verified either as live or unreachable.  To avoid that computation each round,
                       we reason that:

                       either all the live nodes are seeds, in which case non-seeds that come online
                       will introduce themselves to a member of the ring by definition,

                       or there is at least one non-seed node in the list, in which case eventually
                       someone will gossip to it, and then do a gossip to a random seed from the
                       gossipedToSeed check.

                       See CASSANDRA-150 for more exposition. */
                    if (!gossipedToSeed || liveEndpoints.size() < seeds.size())
                        maybeGossipToSeed(message);

                    doStatusCheck();
                }
            }
            catch (Exception e)
            {
                JVMStabilityInspector.inspectThrowable(e);
                logger.error(""Gossip error"", e);
            }
            finally
            {
                taskLock.unlock();
            }
        }
    }"
M:org.apache.cassandra.gms.Gossiper:doShadowRound(java.util.Set),(S)org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),cluster_name,doShadowRound,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/gms/Gossiper.java,Gossiper,../data/xml/cassandra/Gossiper.xml,"/**
     * Do a single 'shadow' round of gossip by retrieving endpoint states that will be stored exclusively in the
     * map return value, instead of endpointStateMap.
     *
     * Used when preparing to join the ring:
     * <ul>
     *     <li>when replacing a node, to get and assume its tokens</li>
     *     <li>when joining, to check that the local host id matches any previous id for the endpoint address</li>
     * </ul>
     *
     * Method is synchronized, as we use an in-progress flag to indicate that shadow round must be cleared
     * again by calling {@link Gossiper#maybeFinishShadowRound(InetAddressAndPort, boolean, Map)}. This will update
     * {@link Gossiper#endpointShadowStateMap} with received values, in order to return an immutable copy to the
     * caller of {@link Gossiper#doShadowRound()}. Therefor only a single shadow round execution is permitted at
     * the same time.
     *
     * @param peers Additional peers to try gossiping with.
     * @return endpoint states gathered during shadow round or empty map
     */
public synchronized Map<InetAddressAndPort, EndpointState> doShadowRound(Set<InetAddressAndPort> peers)
    {
        buildSeedsList();
        // it may be that the local address is the only entry in the seed + peers
        // list in which case, attempting a shadow round is pointless
        if (seeds.isEmpty() && peers.isEmpty())
            return endpointShadowStateMap;

        boolean isSeed = DatabaseDescriptor.getSeeds().contains(FBUtilities.getBroadcastAddressAndPort());
        // We double RING_DELAY if we're not a seed to increase chance of successful startup during a full cluster bounce,
        // giving the seeds a chance to startup before we fail the shadow round
        int shadowRoundDelay =  isSeed ? StorageService.RING_DELAY : StorageService.RING_DELAY * 2;
        seedsInShadowRound.clear();
        endpointShadowStateMap.clear();
        // send a completely empty syn
        List<GossipDigest> gDigests = new ArrayList<>();
        GossipDigestSyn digestSynMessage = new GossipDigestSyn(DatabaseDescriptor.getClusterName(),
                DatabaseDescriptor.getPartitionerName(),
                gDigests);
        Message<GossipDigestSyn> message = Message.out(GOSSIP_DIGEST_SYN, digestSynMessage);

        inShadowRound = true;
        boolean includePeers = false;
        int slept = 0;
        try
        {
            while (true)
            {
                if (slept % 5000 == 0)
                { // CASSANDRA-8072, retry at the beginning and every 5 seconds
                    logger.trace(""Sending shadow round GOSSIP DIGEST SYN to seeds {}"", seeds);

                    for (InetAddressAndPort seed : seeds)
                        MessagingService.instance().send(message, seed);

                    // Send to any peers we already know about, but only if a seed didn't respond.
                    if (includePeers)
                    {
                        logger.trace(""Sending shadow round GOSSIP DIGEST SYN to known peers {}"", peers);
                        for (InetAddressAndPort peer : peers)
                            MessagingService.instance().send(message, peer);
                    }
                    includePeers = true;
                }

                Thread.sleep(1000);
                if (!inShadowRound)
                    break;

                slept += 1000;
                if (slept > shadowRoundDelay)
                {
                    // if we got here no peers could be gossiped to. If we're a seed that's OK, but otherwise we stop. See CASSANDRA-13851
                    if (!isSeed)
                        throw new RuntimeException(""Unable to gossip with any peers"");

                    inShadowRound = false;
                    break;
                }
            }
        }
        catch (InterruptedException wtf)
        {
            throw new RuntimeException(wtf);
        }

        return ImmutableMap.copyOf(endpointShadowStateMap);
    }

    "
M:org.apache.cassandra.service.StorageService:getClusterName(),(S)org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),org.apache.cassandra.config.DatabaseDescriptor:getClusterName(),cluster_name,getClusterName,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/StorageService.java,StorageService,../data/xml/cassandra/StorageService.xml,"/** Returns the name of the cluster */
public String getClusterName()
    {
        return DatabaseDescriptor.getClusterName();
    }

    "
