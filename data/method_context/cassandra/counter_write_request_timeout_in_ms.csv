Method,Called_Method,function,option,Method_short,path,class_name,xml_path,Method_body
M:org.apache.cassandra.config.DatabaseDescriptor:getMinRpcTimeout(java.util.concurrent.TimeUnit),(S)org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),counter_write_request_timeout_in_ms,getMinRpcTimeout,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/config/DatabaseDescriptor.java,DatabaseDescriptor,../data/xml/cassandra/DatabaseDescriptor.xml,"/**
     * @return the minimum configured {read, write, range, truncate, misc} timeout
     */
public static long getMinRpcTimeout(TimeUnit unit)
    {
        return Longs.min(getRpcTimeout(unit),
                         getReadRpcTimeout(unit),
                         getRangeRpcTimeout(unit),
                         getWriteRpcTimeout(unit),
                         getCounterWriteRpcTimeout(unit),
                         getTruncateRpcTimeout(unit));
    }

    "
M:org.apache.cassandra.db.CounterMutation:getTimeout(java.util.concurrent.TimeUnit),(S)org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),counter_write_request_timeout_in_ms,getTimeout,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/CounterMutation.java,CounterMutation,../data/xml/cassandra/CounterMutation.xml,"public long getTimeout(TimeUnit unit)
    {
        return DatabaseDescriptor.getCounterWriteRpcTimeout(unit);
    }

    "
M:org.apache.cassandra.service.AbstractWriteResponseHandler:currentTimeoutNanos(),(S)org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),counter_write_request_timeout_in_ms,currentTimeoutNanos,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,AbstractWriteResponseHandler,../data/xml/cassandra/AbstractWriteResponseHandler.xml,"public final long currentTimeoutNanos()
    {
        long requestTimeout = writeType == WriteType.COUNTER
                              ? DatabaseDescriptor.getCounterWriteRpcTimeout(NANOSECONDS)
                              : DatabaseDescriptor.getWriteRpcTimeout(NANOSECONDS);
        return requestTimeout - (System.nanoTime() - queryStartNanoTime);
    }

    "
M:org.apache.cassandra.service.StorageProxy:getCounterWriteRpcTimeout(),(S)org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),counter_write_request_timeout_in_ms,getCounterWriteRpcTimeout,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/StorageProxy.java,StorageProxy,../data/xml/cassandra/StorageProxy.xml,"public Long getCounterWriteRpcTimeout() { return DatabaseDescriptor.getCounterWriteRpcTimeout(MILLISECONDS); }
    "
M:org.apache.cassandra.service.StorageService:getCounterWriteRpcTimeout(),(S)org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),org.apache.cassandra.config.DatabaseDescriptor:getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit),counter_write_request_timeout_in_ms,getCounterWriteRpcTimeout,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/StorageService.java,StorageService,../data/xml/cassandra/StorageService.xml,"public long getCounterWriteRpcTimeout()
    {
        return DatabaseDescriptor.getCounterWriteRpcTimeout(MILLISECONDS);
    }

    "
