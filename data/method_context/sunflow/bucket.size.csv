Method,Called_Method,function,option,Method_short,path,class_name,xml_path,Method_body
"M:org.sunflow.core.renderer.BucketRenderer:prepare(org.sunflow.core.Options,org.sunflow.core.Scene,int,int)","(M)org.sunflow.core.Options:getInt(java.lang.String,int)","org.sunflow.core.Options:getInt(java.lang.String,int)",bucket.size,prepare,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/renderer/BucketRenderer.java,BucketRenderer,../data/xml/sunflow/BucketRenderer.xml,"public boolean prepare(Options options, Scene scene, int w, int h) {
        this.scene = scene;
        imageWidth = w;
        imageHeight = h;

        // fetch options
        bucketSize = options.getInt(""bucket.size"", bucketSize);
        bucketOrderName = options.getString(""bucket.order"", bucketOrderName);
        minAADepth = options.getInt(""aa.min"", minAADepth);
        maxAADepth = options.getInt(""aa.max"", maxAADepth);
        superSampling = options.getInt(""aa.samples"", superSampling);
        displayAA = options.getBoolean(""aa.display"", displayAA);
        jitter = options.getBoolean(""aa.jitter"", jitter);
        contrastThreshold = options.getFloat(""aa.contrast"", contrastThreshold);

        // limit bucket size and compute number of buckets in each direction
        bucketSize = MathUtils.clamp(bucketSize, 16, 512);
        int numBucketsX = (imageWidth + bucketSize - 1) / bucketSize;
        int numBucketsY = (imageHeight + bucketSize - 1) / bucketSize;
        bucketOrder = BucketOrderFactory.create(bucketOrderName);
        bucketCoords = bucketOrder.getBucketSequence(numBucketsX, numBucketsY);
        // validate AA options
        minAADepth = MathUtils.clamp(minAADepth, -4, 5);
        maxAADepth = MathUtils.clamp(maxAADepth, minAADepth, 5);
        superSampling = MathUtils.clamp(superSampling, 1, 256);
        invSuperSampling = 1.0 / superSampling;
        // compute AA stepping sizes
        subPixelSize = (maxAADepth > 0) ? (1 << maxAADepth) : 1;
        minStepSize = maxAADepth >= 0 ? 1 : 1 << (-maxAADepth);
        if (minAADepth == maxAADepth)
            maxStepSize = minStepSize;
        else
            maxStepSize = minAADepth > 0 ? 1 << minAADepth : subPixelSize << (-minAADepth);
        useJitter = jitter && maxAADepth > 0;
        // compute anti-aliasing contrast thresholds
        contrastThreshold = MathUtils.clamp(contrastThreshold, 0, 1);
        thresh = contrastThreshold * (float) Math.pow(2.0f, minAADepth);
        // read filter settings from scene
        filterName = options.getString(""filter"", filterName);
        filter = FilterFactory.get(filterName);
        // adjust filter
        if (filter == null) {
            UI.printWarning(Module.BCKT, ""Unrecognized filter type: \""%s\"" - defaulting to box"", filterName);
            filter = new BoxFilter(1);
            filterName = ""box"";
        }
        fhs = filter.getSize() * 0.5f;
        fs = (int) Math.ceil(subPixelSize * (fhs - 0.5f));

        // prepare QMC sampling
        sigma = QMC.generateSigmaTable(subPixelSize << 7);
        UI.printInfo(Module.BCKT, ""Bucket renderer settings:"");
        UI.printInfo(Module.BCKT, ""  * Resolution:         %dx%d"", imageWidth, imageHeight);
        UI.printInfo(Module.BCKT, ""  * Bucket size:        %d"", bucketSize);
        UI.printInfo(Module.BCKT, ""  * Number of buckets:  %dx%d"", numBucketsX, numBucketsY);
        int pixelMinAA = (minAADepth) < 0 ? -(1 << (-minAADepth)) : (1 << minAADepth);
        int pixelMaxAA = (maxAADepth) < 0 ? -(1 << (-maxAADepth)) : (1 << maxAADepth);
        UI.printInfo(Module.BCKT, ""  * Anti-aliasing:      [%dx%d] -> [%dx%d]"", pixelMinAA, pixelMinAA, pixelMaxAA, pixelMaxAA);
        UI.printInfo(Module.BCKT, ""  * Rays per sample:    %d"", superSampling);
        UI.printInfo(Module.BCKT, ""  * Subpixel jitter:    %s"", useJitter ? ""on"" : (jitter ? ""auto-off"" : ""off""));
        UI.printInfo(Module.BCKT, ""  * Contrast threshold: %.2f"", contrastThreshold);
        UI.printInfo(Module.BCKT, ""  * Filter type:        %s"", filterName);
        UI.printInfo(Module.BCKT, ""  * Filter size:        %.2f pixels"", filter.getSize());
        return true;
    }

    "
