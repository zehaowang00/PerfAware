Method,Called_Method,function,option,Method_short,path,class_name,xml_path,Method_body
"M:main.java.Catena:catena(byte[],byte[],byte[],byte[],int)",(M)main.java.Catena:get_lambda(),main.java.Catena:get_lambda(),_lambda,catena,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"/**
	 * Main function of catena to hash a password
	 * 
	 * @param pwd			Password to be hashed
	 * @param salt			Salt of arbitrary length
	 * @param publicInput	User choosen public input
	 * @param gamma			Input for graph size
	 * @param m				User desired output length of hash
	 * 
	 * @return xTrun		Hash of pwd
	 */
public byte[] catena(byte[] pwd, byte[] salt, byte[] publicInput, byte[] gamma, int m) {
        byte[] t = this.compTweak(this.get_vId(), this.get_d(), this.get_lambda(), m, salt.length, publicInput);
        this.get_h().update(this.helper.concateByteArrays(t, pwd, salt));
        byte[] x = this.get_h().doFinal();
        this.erasePwd(pwd);
        x = this.flap((this.get_gLow() + 1) / 2, x, gamma);
        this.get_h().update(x);
        x = this.get_h().doFinal();
        byte[] gByte = new byte[1];
        int g = this.get_gLow();
        while (g <= this.get_gHigh()) {
            if (x.length < this.get_n()) {
                x = this.helper.paddWithZero(x, this.get_n());
            }
            x = this.flap(g, x, gamma);
            gByte[0] = (byte)g;
            this.get_h().update(this.helper.concateByteArrays(gByte, x));
            x = this.get_h().doFinal();
            x = this.helper.truncate(x, m);
            ++g;
        }
        return x;
    }
    "
"M:main.java.Catena:flap(int,byte[],byte[])",(M)main.java.Catena:get_lambda(),main.java.Catena:get_lambda(),_lambda,flap,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"/**
	 * flap function from catena specification
	 * 
	 * @param g
	 * @param xIn
	 * @param gamma
	 * @return
	 */
private byte[] flap(int g, byte[] xIn, byte[] gamma) {
        this.get_hPrime().reset();
        int iterations = (int)Math.pow(2.0, g);
        byte[][] v = new byte[iterations + 2][this.get_k()];
        byte[] xHinit = this.hInit(xIn);
        System.arraycopy(xHinit, 0, v[0], 0, this.get_k());
        System.arraycopy(xHinit, this.get_k(), v[1], 0, this.get_k());
        int i = 2;
        while (i < iterations + 2) {
            this.get_hPrime().update(this.helper.concateByteArrays(v[i - 1], v[i - 2]));
            v[i] = this.get_hPrime().doFinal();
            ++i;
        }
        byte[][] v2 = new byte[iterations][this.get_k()];
        System.arraycopy(v, 2, v2, 0, v2.length);
        this.get_hPrime().reset();
        v2 = this.gamma(g, v2, gamma);
        this.get_hPrime().reset();
        v2 = this.f(g, v2, this.get_lambda());
        this.get_hPrime().reset();
        v2 = this.phi(g, v2, v2[v2.length - 1]);
        return v2[v2.length - 1];
    }

    "
"M:main.java.Catena:keyDerivation(byte[],byte[],byte[],byte[],int,int,byte[])",(M)main.java.Catena:get_lambda(),main.java.Catena:get_lambda(),_lambda,keyDerivation,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"public byte[] keyDerivation(byte[] pwd, byte[] salt, byte[] publicInput, byte[] gamma, int outLen, int keySize, byte[] keyIdentifier) {
        int d = 1;
        byte[] tweak = this.compTweak(this.get_vId(), d, this.get_lambda(), outLen, salt.length, publicInput);
        this.get_h().update(this.helper.concateByteArrays(tweak, pwd, salt));
        byte[] x = this.get_h().doFinal();
        x = this.flap((this.get_gLow() + 1) / 2, x, gamma);
        this.erasePwd(pwd);
        this.get_h().update(x);
        x = this.get_h().doFinal();
        byte[] gByte = new byte[1];
        int g = this.get_gLow();
        while (g <= this.get_gHigh()) {
            if (x.length < this.get_n()) {
                x = this.helper.paddWithZero(x, this.get_n());
            }
            x = this.flap(g, x, gamma);
            gByte[0] = (byte)g;
            this.get_h().update(this.helper.concateByteArrays(gByte, x));
            x = this.get_h().doFinal();
            x = this.helper.truncate(x, outLen);
            ++g;
        }
        int limit = (int)Math.ceil((double)keySize / (double)this.get_h().getOutputSize());
        byte[] outputKey = new byte[]{};
        int i = 1;
        while (i < limit + 1) {
            byte[] iByte = this.helper.intToByteArrayLittleEndian(i, 2);
            byte[] keySizeByte = this.helper.intToByteArrayLittleEndian(keySize, 2);
            this.get_h().update(this.helper.concateByteArrays(iByte, keyIdentifier, keySizeByte, x));
            byte[] tmp = this.get_h().doFinal();
            outputKey = this.helper.concateByteArrays(outputKey, tmp);
            ++i;
        }
        return this.helper.truncate(outputKey, keySize);
    }

    "
"M:main.java.Catena:serverReliefClient(byte[],byte[],byte[],int,byte[])",(M)main.java.Catena:get_lambda(),main.java.Catena:get_lambda(),_lambda,serverReliefClient,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"public byte[] serverReliefClient(byte[] pwd, byte[] salt, byte[] aData, int outLen, byte[] gamma) {
        int d = 0;
        byte[] t = this.compTweak(this.get_vId(), d, this.get_lambda(), outLen, salt.length, aData);
        this.get_h().update(this.helper.concateByteArrays(t, pwd, salt));
        byte[] x = this.get_h().doFinal();
        x = this.flap((this.get_gLow() + 1) / 2, x, gamma);
        this.erasePwd(pwd);
        this.get_h().update(x);
        x = this.get_h().doFinal();
        if (this.get_gHigh() > this.get_gLow()) {
            byte[] gByte = new byte[1];
            int g = this.get_gLow();
            while (g < this.get_gHigh()) {
                if (x.length < this.get_n()) {
                    x = this.helper.paddWithZero(x, outLen);
                }
                x = this.flap(g, x, gamma);
                gByte[0] = (byte)g;
                this.get_h().update(this.helper.concateByteArrays(gByte, x));
                x = this.get_h().doFinal();
                x = this.helper.truncate(x, outLen);
                ++g;
            }
        }
        if (x.length < this.get_n()) {
            x = this.helper.paddWithZero(x, this.get_n());
        }
        x = this.flap(this.get_gHigh(), x, gamma);
        return x;
    }

    "
M:test.java.CatenaTest:testTweakButterfly(),(M)main.java.Catena:get_lambda(),main.java.Catena:get_lambda(),_lambda,testTweakButterfly,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/test/java/CatenaTest.java,CatenaTest,../data/xml/catena/CatenaTest.xml,"@Test
	public void testTweakButterfly(){
		DefaultInstances defaultInstance = new DefaultInstances();
		Catena c = defaultInstance.initButterfly();
	
		JSONArray jsonObj = helper.jsonParserArr(filetweakButterfly);
		for (int i = 0; i<jsonObj.length(); ++i ){
			JSONObject o = (JSONObject) jsonObj.get(i);
			
			JSONObject inputs = o.getJSONObject(""inputs"");
			JSONObject outputs = o.getJSONObject(""outputs"");
			
			int domain = inputs.getInt(""d"");
			int outLen = inputs.getInt(""outLen"");
			int sLen = inputs.getInt(""sLen"");
			String aD = inputs.getString(""aData"");
			byte[] aData = helper.string2Bytes(aD);

			String res = outputs.getString(""res"");
			
			byte[] output = c.testCompTweak(c.getVID(), domain, c.getLambda(), outLen, sLen, aData);
			
			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));
		}
	}
	
	"
M:test.java.CatenaTest:testTweakButterflyFull(),(M)main.java.Catena:get_lambda(),main.java.Catena:get_lambda(),_lambda,testTweakButterflyFull,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/test/java/CatenaTest.java,CatenaTest,../data/xml/catena/CatenaTest.xml,"@Test
	public void testTweakButterflyFull(){
		DefaultInstances defaultInstance = new DefaultInstances();
		Catena c = defaultInstance.initButterflyFull();
	
		JSONArray jsonObj = helper.jsonParserArr(filetweakButterflyFull);
		for (int i = 0; i<jsonObj.length(); ++i ){
			JSONObject o = (JSONObject) jsonObj.get(i);
			
			JSONObject inputs = o.getJSONObject(""inputs"");
			JSONObject outputs = o.getJSONObject(""outputs"");
			
			int domain = inputs.getInt(""d"");
			int outLen = inputs.getInt(""outLen"");
			int sLen = inputs.getInt(""sLen"");
			String aD = inputs.getString(""aData"");
			byte[] aData = helper.string2Bytes(aD);

			String res = outputs.getString(""res"");
			
			byte[] output = c.testCompTweak(c.getVID(), domain, c.getLambda(), outLen, sLen, aData);
			
			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));
		}
	}
	
	"
M:test.java.CatenaTest:testTweakDragonfly(),(M)main.java.Catena:get_lambda(),main.java.Catena:get_lambda(),_lambda,testTweakDragonfly,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/test/java/CatenaTest.java,CatenaTest,../data/xml/catena/CatenaTest.xml,"@Test
	public void testTweakDragonfly(){
		DefaultInstances defaultInstance = new DefaultInstances();
		Catena c = defaultInstance.initDragonfly();
	
		JSONArray jsonObj = helper.jsonParserArr(filetweakDragonfly);
		for (int i = 0; i<jsonObj.length(); ++i ){
			JSONObject o = (JSONObject) jsonObj.get(i);
			
			JSONObject inputs = o.getJSONObject(""inputs"");
			JSONObject outputs = o.getJSONObject(""outputs"");
			
			int domain = inputs.getInt(""d"");
			int outLen = inputs.getInt(""outLen"");
			int sLen = inputs.getInt(""sLen"");
			String aD = inputs.getString(""aData"");
			byte[] aData = helper.string2Bytes(aD);

			String res = outputs.getString(""res"");
			
			byte[] output = c.testCompTweak(c.getVID(), domain, c.getLambda(), outLen, sLen, aData);
			
			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));
		}
	}
	
	"
M:test.java.CatenaTest:testTweakDragonflyFull(),(M)main.java.Catena:get_lambda(),main.java.Catena:get_lambda(),_lambda,testTweakDragonflyFull,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/test/java/CatenaTest.java,CatenaTest,../data/xml/catena/CatenaTest.xml,"@Test
	public void testTweakDragonflyFull(){
		DefaultInstances defaultInstance = new DefaultInstances();
		Catena c = defaultInstance.initDragonflyFull();
	
		JSONArray jsonObj = helper.jsonParserArr(filetweakDragonflyFull);
		for (int i = 0; i<jsonObj.length(); ++i ){
			JSONObject o = (JSONObject) jsonObj.get(i);
			
			JSONObject inputs = o.getJSONObject(""inputs"");
			JSONObject outputs = o.getJSONObject(""outputs"");
			
			int domain = inputs.getInt(""d"");
			int outLen = inputs.getInt(""outLen"");
			int sLen = inputs.getInt(""sLen"");
			String aD = inputs.getString(""aData"");
			byte[] aData = helper.string2Bytes(aD);

			String res = outputs.getString(""res"");
			
			byte[] output = c.testCompTweak(c.getVID(), domain, c.getLambda(), outLen, sLen, aData);
			
			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));
		}
	}
	
	"
