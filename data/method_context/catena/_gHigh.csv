Method,Called_Method,function,option,Method_short,path,class_name,xml_path,Method_body
"M:main.java.Catena:catena(byte[],byte[],byte[],byte[],int)",(M)main.java.Catena:get_gHigh(),main.java.Catena:get_gHigh(),_gHigh,catena,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"/**
	 * Main function of catena to hash a password
	 * 
	 * @param pwd			Password to be hashed
	 * @param salt			Salt of arbitrary length
	 * @param publicInput	User choosen public input
	 * @param gamma			Input for graph size
	 * @param m				User desired output length of hash
	 * 
	 * @return xTrun		Hash of pwd
	 */
public byte[] catena(byte[] pwd, byte[] salt, byte[] publicInput, byte[] gamma, int m) {
        byte[] t = this.compTweak(this.get_vId(), this.get_d(), this.get_lambda(), m, salt.length, publicInput);
        this.get_h().update(this.helper.concateByteArrays(t, pwd, salt));
        byte[] x = this.get_h().doFinal();
        this.erasePwd(pwd);
        x = this.flap((this.get_gLow() + 1) / 2, x, gamma);
        this.get_h().update(x);
        x = this.get_h().doFinal();
        byte[] gByte = new byte[1];
        int g = this.get_gLow();
        while (g <= this.get_gHigh()) {
            if (x.length < this.get_n()) {
                x = this.helper.paddWithZero(x, this.get_n());
            }
            x = this.flap(g, x, gamma);
            gByte[0] = (byte)g;
            this.get_h().update(this.helper.concateByteArrays(gByte, x));
            x = this.get_h().doFinal();
            x = this.helper.truncate(x, m);
            ++g;
        }
        return x;
    }
    "
"M:main.java.Catena:keyedPasswordHashing(byte[],byte[],byte[],byte[],byte[],int,byte[])",(M)main.java.Catena:get_gHigh(),main.java.Catena:get_gHigh(),_gHigh,keyedPasswordHashing,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"public byte[] keyedPasswordHashing(byte[] pwd, byte[] key, byte[] salt, byte[] gamma, byte[] a_data, int out_len, byte[] userID) {
        byte[] gHighBytes = new byte[]{(byte)this.get_gHigh()};
        this.get_h().update(this.helper.concateByteArrays(key, userID, gHighBytes, key));
        byte[] z = this.helper.truncate(this.get_h().doFinal(), out_len);
        byte[] hash = this.catena(pwd, salt, a_data, gamma, out_len);
        return this.helper.xor(z, hash);
    }

    "
"M:main.java.Catena:keyDerivation(byte[],byte[],byte[],byte[],int,int,byte[])",(M)main.java.Catena:get_gHigh(),main.java.Catena:get_gHigh(),_gHigh,keyDerivation,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"public byte[] keyDerivation(byte[] pwd, byte[] salt, byte[] publicInput, byte[] gamma, int outLen, int keySize, byte[] keyIdentifier) {
        int d = 1;
        byte[] tweak = this.compTweak(this.get_vId(), d, this.get_lambda(), outLen, salt.length, publicInput);
        this.get_h().update(this.helper.concateByteArrays(tweak, pwd, salt));
        byte[] x = this.get_h().doFinal();
        x = this.flap((this.get_gLow() + 1) / 2, x, gamma);
        this.erasePwd(pwd);
        this.get_h().update(x);
        x = this.get_h().doFinal();
        byte[] gByte = new byte[1];
        int g = this.get_gLow();
        while (g <= this.get_gHigh()) {
            if (x.length < this.get_n()) {
                x = this.helper.paddWithZero(x, this.get_n());
            }
            x = this.flap(g, x, gamma);
            gByte[0] = (byte)g;
            this.get_h().update(this.helper.concateByteArrays(gByte, x));
            x = this.get_h().doFinal();
            x = this.helper.truncate(x, outLen);
            ++g;
        }
        int limit = (int)Math.ceil((double)keySize / (double)this.get_h().getOutputSize());
        byte[] outputKey = new byte[]{};
        int i = 1;
        while (i < limit + 1) {
            byte[] iByte = this.helper.intToByteArrayLittleEndian(i, 2);
            byte[] keySizeByte = this.helper.intToByteArrayLittleEndian(keySize, 2);
            this.get_h().update(this.helper.concateByteArrays(iByte, keyIdentifier, keySizeByte, x));
            byte[] tmp = this.get_h().doFinal();
            outputKey = this.helper.concateByteArrays(outputKey, tmp);
            ++i;
        }
        return this.helper.truncate(outputKey, keySize);
    }

    "
"M:main.java.Catena:serverReliefClient(byte[],byte[],byte[],int,byte[])",(M)main.java.Catena:get_gHigh(),main.java.Catena:get_gHigh(),_gHigh,serverReliefClient,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"public byte[] serverReliefClient(byte[] pwd, byte[] salt, byte[] aData, int outLen, byte[] gamma) {
        int d = 0;
        byte[] t = this.compTweak(this.get_vId(), d, this.get_lambda(), outLen, salt.length, aData);
        this.get_h().update(this.helper.concateByteArrays(t, pwd, salt));
        byte[] x = this.get_h().doFinal();
        x = this.flap((this.get_gLow() + 1) / 2, x, gamma);
        this.erasePwd(pwd);
        this.get_h().update(x);
        x = this.get_h().doFinal();
        if (this.get_gHigh() > this.get_gLow()) {
            byte[] gByte = new byte[1];
            int g = this.get_gLow();
            while (g < this.get_gHigh()) {
                if (x.length < this.get_n()) {
                    x = this.helper.paddWithZero(x, outLen);
                }
                x = this.flap(g, x, gamma);
                gByte[0] = (byte)g;
                this.get_h().update(this.helper.concateByteArrays(gByte, x));
                x = this.get_h().doFinal();
                x = this.helper.truncate(x, outLen);
                ++g;
            }
        }
        if (x.length < this.get_n()) {
            x = this.helper.paddWithZero(x, this.get_n());
        }
        x = this.flap(this.get_gHigh(), x, gamma);
        return x;
    }

    "
"M:main.java.Catena:serverReliefServer(int,byte[])",(M)main.java.Catena:get_gHigh(),main.java.Catena:get_gHigh(),_gHigh,serverReliefServer,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"public byte[] serverReliefServer(int outLen, byte[] lastHash) {
        byte[] gByte = new byte[]{(byte)this.get_gHigh()};
        this.get_h().update(this.helper.concateByteArrays(gByte, lastHash));
        return this.helper.truncate(this.get_h().doFinal(), outLen);
    }

    "
"M:main.java.Catena:proofOfWorkServer(byte[],byte[],byte[],int,byte[],int,int)",(M)main.java.Catena:get_gHigh(),main.java.Catena:get_gHigh(),_gHigh,proofOfWorkServer,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java,Catena,../data/xml/catena/Catena.xml,"public POWstruct proofOfWorkServer(byte[] pwd, byte[] salt, byte[] aData, int outLen, byte[] gamma, int p, int mode) {
        this.setD(2);
        POWstruct output = new POWstruct();
        byte[] inpPWD = new byte[pwd.length];
        System.arraycopy(pwd, 0, inpPWD, 0, pwd.length);
        output.pwd = inpPWD;
        output.salt = salt;
        output.aData = aData;
        output.gLow = this.get_gLow();
        output.gHigh = this.get_gHigh();
        output.outLen = outLen;
        output.gamma = gamma;
        output.p = p;
        output.rHash = this.catena(pwd, salt, aData, gamma, outLen);
        output.mode = mode;
        if (mode == 0) {
            byte[] inpSalt = new byte[salt.length];
            System.arraycopy(salt, 0, inpSalt, 0, salt.length);
            int a = (1 << 8 * (int)Math.ceil((double)p / 8.0)) - (1 << p);
            byte[] mask = this.helper.intToBytes(a);
            int saltLength = inpSalt.length;
            int maskLength = mask.length;
            byte[] newMask = new byte[saltLength];
            if (maskLength > saltLength) {
                System.arraycopy(mask, maskLength - saltLength, newMask, 0, saltLength);
            } else {
                System.arraycopy(mask, 0, newMask, 0, maskLength);
            }
            int newMaskLength = newMask.length;
            int i = 0;
            while (i < newMaskLength) {
                if (newMask[i] != 0) break;
                newMask[i] = -1;
                ++i;
            }
            i = 0;
            while (i < newMaskLength) {
                inpSalt[saltLength - newMaskLength + i] = (byte)(inpSalt[saltLength - newMaskLength + i] & newMask[i]);
                ++i;
            }
            output.salt = inpSalt;
            return output;
        }
        if (mode == 1) {
            output.pwd = new byte[0];
            return output;
        }
        return new POWstruct();
    }

    "
