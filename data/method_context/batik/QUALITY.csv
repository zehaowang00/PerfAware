Method,Called_Method,Jar_name,function,option,Method_short,path,class_name,xml_path,Method_body
"M:org.apache.batik.transcoder.image.JPEGTranscoder:writeImage(java.awt.image.BufferedImage,org.apache.batik.transcoder.TranscoderOutput)",(M)org.apache.batik.transcoder.TranscodingHints:getKey_QUALITY(java.lang.Object),batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_QUALITY(java.lang.Object),QUALITY,writeImage,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/image/JPEGTranscoder.java,JPEGTranscoder,../data/xml/batik/JPEGTranscoder.xml,"/**
     * Writes the specified image to the specified output.
     * @param img the image to write
     * @param output the output where to store the image
     * @throws TranscoderException if an error occured while storing the image
     */
public void writeImage(BufferedImage img, TranscoderOutput output)
            throws TranscoderException {
        OutputStream ostream = output.getOutputStream();
        // The outputstream wrapper protects the JPEG encoder from
        // exceptions due to stream closings.  If it gets an exception
        // it nulls out the stream and just ignores any future calls.
        ostream = new OutputStreamWrapper(ostream);

        try {
            float quality;
            if (hints.containsKey(KEY_QUALITY)) {
                quality = (Float) hints.get(KEY_QUALITY);
            } else {
                TranscoderException te;
                te = new TranscoderException
                    (Messages.formatMessage(""jpeg.unspecifiedQuality"", null));
                handler.error(te);
                quality = 0.75f;
            }

            ImageWriter writer = ImageWriterRegistry.getInstance()
                .getWriterFor(""image/jpeg"");
            ImageWriterParams params = new ImageWriterParams();
            params.setJPEGQuality(quality, true);
            float PixSzMM = userAgent.getPixelUnitToMillimeter();
            int PixSzInch = (int)(25.4 / PixSzMM + 0.5);
            params.setResolution(PixSzInch);
            writer.writeImage(img, ostream, params);
            ostream.flush();
        } catch (IOException ex) {
            throw new TranscoderException(ex);
        }
    }

    "
