Method,Called_Method,Jar_name,function,option,Method_short,path,class_name,xml_path,Method_body
"M:org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter:writeImage(org.apache.batik.transcoder.image.PNGTranscoder,java.awt.image.BufferedImage,org.apache.batik.transcoder.TranscoderOutput)",(M)org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,writeImage,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-codec/src/main/java/org/apache/batik/ext/awt/image/codec/png/PNGTranscoderInternalCodecWriteAdapter.java,PNGTranscoderInternalCodecWriteAdapter,../data/xml/batik/PNGTranscoderInternalCodecWriteAdapter.xml,"/**
     * @throws TranscoderException
     * @see org.apache.batik.transcoder.image.PNGTranscoder.WriteAdapter#writeImage(
     * org.apache.batik.transcoder.image.PNGTranscoder, java.awt.image.BufferedImage,
     * org.apache.batik.transcoder.TranscoderOutput)
     */
public void writeImage(PNGTranscoder transcoder, BufferedImage img,
            TranscoderOutput output) throws TranscoderException {
        TranscodingHints hints = transcoder.getTranscodingHints();

        int n=-1;
        if (hints.containsKey(PNGTranscoder.KEY_INDEXED)) {
            n= (Integer) hints.get(PNGTranscoder.KEY_INDEXED);
            if (n==1||n==2||n==4||n==8)
                //PNGEncodeParam.Palette can handle these numbers only.
                img = IndexImage.getIndexedImage(img,1<<n);
        }

        PNGEncodeParam params = PNGEncodeParam.getDefaultEncodeParam(img);
        if (params instanceof PNGEncodeParam.RGB) {
            ((PNGEncodeParam.RGB)params).setBackgroundRGB
                (new int [] { 255, 255, 255 });
        }

        // If they specify GAMMA key with a value of '0' then omit
        // gamma chunk.  If they do not provide a GAMMA then just
        // generate an sRGB chunk. Otherwise supress the sRGB chunk
        // and just generate gamma and chroma chunks.
        if (hints.containsKey(PNGTranscoder.KEY_GAMMA)) {
            float gamma = (Float) hints.get(PNGTranscoder.KEY_GAMMA);
            if (gamma > 0) {
                params.setGamma(gamma);
            }
            params.setChromaticity(PNGTranscoder.DEFAULT_CHROMA);
        }  else {
            // We generally want an sRGB chunk and our encoding intent
            // is perceptual
            params.setSRGBIntent(PNGEncodeParam.INTENT_PERCEPTUAL);
        }


        float PixSzMM = transcoder.getUserAgent().getPixelUnitToMillimeter();
        // num Pixs in 1 Meter
        int numPix      = (int)((1000/PixSzMM)+0.5);
        params.setPhysicalDimension(numPix, numPix, 1); // 1 means 'pix/meter'

        try {
            OutputStream ostream = output.getOutputStream();
            PNGImageEncoder pngEncoder = new PNGImageEncoder(ostream, params);
            pngEncoder.encode(img);
            ostream.flush();
        } catch (IOException ex) {
            throw new TranscoderException(ex);
        }
    }

}"
"M:org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter:writeImage(org.apache.batik.transcoder.image.PNGTranscoder,java.awt.image.BufferedImage,org.apache.batik.transcoder.TranscoderOutput)",(M)org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,writeImage,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-codec/src/main/java/org/apache/batik/ext/awt/image/codec/png/PNGTranscoderInternalCodecWriteAdapter.java,PNGTranscoderInternalCodecWriteAdapter,../data/xml/batik/PNGTranscoderInternalCodecWriteAdapter.xml,"/**
     * @throws TranscoderException
     * @see org.apache.batik.transcoder.image.PNGTranscoder.WriteAdapter#writeImage(
     * org.apache.batik.transcoder.image.PNGTranscoder, java.awt.image.BufferedImage,
     * org.apache.batik.transcoder.TranscoderOutput)
     */
public void writeImage(PNGTranscoder transcoder, BufferedImage img,
            TranscoderOutput output) throws TranscoderException {
        TranscodingHints hints = transcoder.getTranscodingHints();

        int n=-1;
        if (hints.containsKey(PNGTranscoder.KEY_INDEXED)) {
            n= (Integer) hints.get(PNGTranscoder.KEY_INDEXED);
            if (n==1||n==2||n==4||n==8)
                //PNGEncodeParam.Palette can handle these numbers only.
                img = IndexImage.getIndexedImage(img,1<<n);
        }

        PNGEncodeParam params = PNGEncodeParam.getDefaultEncodeParam(img);
        if (params instanceof PNGEncodeParam.RGB) {
            ((PNGEncodeParam.RGB)params).setBackgroundRGB
                (new int [] { 255, 255, 255 });
        }

        // If they specify GAMMA key with a value of '0' then omit
        // gamma chunk.  If they do not provide a GAMMA then just
        // generate an sRGB chunk. Otherwise supress the sRGB chunk
        // and just generate gamma and chroma chunks.
        if (hints.containsKey(PNGTranscoder.KEY_GAMMA)) {
            float gamma = (Float) hints.get(PNGTranscoder.KEY_GAMMA);
            if (gamma > 0) {
                params.setGamma(gamma);
            }
            params.setChromaticity(PNGTranscoder.DEFAULT_CHROMA);
        }  else {
            // We generally want an sRGB chunk and our encoding intent
            // is perceptual
            params.setSRGBIntent(PNGEncodeParam.INTENT_PERCEPTUAL);
        }


        float PixSzMM = transcoder.getUserAgent().getPixelUnitToMillimeter();
        // num Pixs in 1 Meter
        int numPix      = (int)((1000/PixSzMM)+0.5);
        params.setPhysicalDimension(numPix, numPix, 1); // 1 means 'pix/meter'

        try {
            OutputStream ostream = output.getOutputStream();
            PNGImageEncoder pngEncoder = new PNGImageEncoder(ostream, params);
            pngEncoder.encode(img);
            ostream.flush();
        } catch (IOException ex) {
            throw new TranscoderException(ex);
        }
    }

}"
"M:org.apache.batik.ext.awt.image.codec.imageio.PNGTranscoderImageIOWriteAdapter:writeImage(org.apache.batik.transcoder.image.PNGTranscoder,java.awt.image.BufferedImage,org.apache.batik.transcoder.TranscoderOutput)",(M)org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,writeImage,/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-codec/src/main/java/org/apache/batik/ext/awt/image/codec/imageio/PNGTranscoderImageIOWriteAdapter.java,PNGTranscoderImageIOWriteAdapter,../data/xml/batik/PNGTranscoderImageIOWriteAdapter.xml,"/**
     * @throws TranscoderException 
     * @see org.apache.batik.transcoder.image.PNGTranscoder.WriteAdapter#writeImage(
     * org.apache.batik.transcoder.image.PNGTranscoder, java.awt.image.BufferedImage,
     * org.apache.batik.transcoder.TranscoderOutput)
     */
public void writeImage(PNGTranscoder transcoder, BufferedImage img,
            TranscoderOutput output) throws TranscoderException {

        TranscodingHints hints = transcoder.getTranscodingHints();

        int n = -1;
        if (hints.containsKey(PNGTranscoder.KEY_INDEXED)) {
            n= (Integer) hints.get(PNGTranscoder.KEY_INDEXED);
            if (n==1||n==2||n==4||n==8) 
                //PNGEncodeParam.Palette can handle these numbers only.
                img = IndexImage.getIndexedImage(img, 1<<n);
        }

        ImageWriter writer = ImageWriterRegistry.getInstance()
            .getWriterFor(""image/png"");
        ImageWriterParams params = new ImageWriterParams();

        /* NYI!!!!!
        PNGEncodeParam params = PNGEncodeParam.getDefaultEncodeParam(img);
        if (params instanceof PNGEncodeParam.RGB) {
            ((PNGEncodeParam.RGB)params).setBackgroundRGB
                (new int [] { 255, 255, 255 });
        }*/

        // If they specify GAMMA key with a value of '0' then omit
        // gamma chunk.  If they do not provide a GAMMA then just
        // generate an sRGB chunk. Otherwise supress the sRGB chunk
        // and just generate gamma and chroma chunks.
        /* NYI!!!!!!
        if (hints.containsKey(PNGTranscoder.KEY_GAMMA)) {
            float gamma = ((Float)hints.get(PNGTranscoder.KEY_GAMMA)).floatValue();
            if (gamma > 0) {
                params.setGamma(gamma);
            }
            params.setChromaticity(PNGTranscoder.DEFAULT_CHROMA);
        }  else {
            // We generally want an sRGB chunk and our encoding intent
            // is perceptual
            params.setSRGBIntent(PNGEncodeParam.INTENT_PERCEPTUAL);
        }*/


        float PixSzMM = transcoder.getUserAgent().getPixelUnitToMillimeter();
        int PixSzInch = (int)(25.4 / PixSzMM + 0.5);
        params.setResolution(PixSzInch);

        try {
            OutputStream ostream = output.getOutputStream();
            writer.writeImage(img, ostream, params);
            ostream.flush();
        } catch (IOException ex) {
            throw new TranscoderException(ex);
        }
    }

}"
