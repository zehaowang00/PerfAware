{
    "performance_sensitive": "Yes",
    "config_name": "concurrent_materialized_view_writes",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "/**\n * Manages {@link View}'s for a single {@link ColumnFamilyStore}. All of the views for that table are created when this\n * manager is initialized.\n *\n * The main purposes of the manager are to provide a single location for updates to be vetted to see whether they update\n * any views {@link #updatesAffectView(Collection, boolean)}, provide locks to prevent multiple\n * updates from creating incoherent updates in the view {@link #acquireLockFor(int)}, and\n * to affect change on the view.\n *\n * TODO: I think we can get rid of that class. For addition/removal of view by names, we could move it Keyspace. And we\n * not sure it's even worth keeping viewsByName as none of the related operation are performance sensitive so we could\n * find the view by iterating over the CFStore.viewManager directly.\n * For the lock, it could move to Keyspace too, but I don't remmenber why it has to be at the keyspace level and if it\n * can be at the table level, maybe that's where it should be.\n */\npublic class ViewManager\n{\n    private static final Logger logger = LoggerFactory.getLogger(ViewManager.class);\n\n    private static final Striped<Lock> LOCKS = Striped.lazyWeakLock(DatabaseDescriptor.getConcurrentViewWriters() * 1024);\n\n    private static final boolean enableCoordinatorBatchlog = Boolean.getBoolean(\"cassandra.mv_enable_coordinator_batchlog\");\n\n    private final ConcurrentMap<String, View> viewsByName = new ConcurrentHashMap<>();\n    private final ConcurrentMap<TableId, TableViews> viewsByBaseTable = new ConcurrentHashMap<>();\n    private final Keyspace keyspace;\n\n    public ViewManager(Keyspace keyspace)\n    {\n        this.keyspace = keyspace;\n    }\n\n    public boolean updatesAffectView(Collection<? extends IMutation> mutations, boolean coordinatorBatchlog)\n    {\n        if (!enableCoordinatorBatchlog && coordinatorBatchlog)\n            return false;\n\n        for (IMutation mutation : mutations)\n        {\n            for (PartitionUpdate update : mutation.getPartitionUpdates())\n            {\n                assert keyspace.getName().equals(update.metadata().keyspace);\n\n                if (coordinatorBatchlog && keyspace.getReplicationStrategy().getReplicationFactor().allReplicas == 1)\n                    continue;\n\n                if (!forTable(update.metadata().id).updatedViews(update).isEmpty())\n                    return true;\n            }\n        }\n\n        return false;\n    }\n\n    private Iterable<View> allViews()\n    {\n        return viewsByName.values();\n    }\n\n    public void reload(boolean buildAllViews)\n    {\n        Views views = keyspace.getMetadata().views;\n        Map<String, ViewMetadata> newViewsByName = Maps.newHashMapWithExpectedSize(views.size());\n        for (ViewMetadata definition : views)\n        {\n            newViewsByName.put(definition.name(), definition);\n        }\n\n        for (Map.Entry<String, ViewMetadata> entry : newViewsByName.entrySet())\n        {\n            if (!viewsByName.containsKey(entry.getKey()))\n                addView(entry.getValue());\n        }\n\n        if (!buildAllViews)\n            return;\n\n        // Building views involves updating view build status in the system_distributed\n        // keyspace and therefore it requires ring information. This check prevents builds\n        // being submitted when Keyspaces are initialized during CassandraDaemon::setup as\n        // that happens before StorageService & gossip are initialized. After SS has been\n        // init'd we schedule builds for *all* views anyway, so this doesn't have any effect\n        // on startup. It does mean however, that builds will not be triggered if gossip is\n        // disabled via JMX or nodetool as that sets SS to an uninitialized state.\n        if (!StorageService.instance.isInitialized())\n        {\n            logger.info(\"Not submitting build tasks for views in keyspace {} as \" +\n                        \"storage service is not initialized\", keyspace.getName());\n            return;\n        }\n\n        for (View view : allViews())\n        {\n            view.build();\n            // We provide the new definition from the base metadata\n            view.updateDefinition(newViewsByName.get(view.name));\n        }\n    }\n\n    public void addView(ViewMetadata definition)\n    {\n        // Skip if the base table doesn't exist due to schema propagation issues, see CASSANDRA-13737\n        if (!keyspace.hasColumnFamilyStore(definition.baseTableId))\n        {\n            logger.warn(\"Not adding view {} because the base table {} is unknown\",\n                        definition.name(),\n                        definition.baseTableId);\n            return;\n        }\n\n        View view = new View(definition, keyspace.getColumnFamilyStore(definition.baseTableId));\n        forTable(view.getDefinition().baseTableId).add(view);\n        viewsByName.put(definition.name(), view);\n    }\n\n    /**\n     * Stops the building of the specified view, no-op if it isn't building.\n     *\n     * @param name the name of the view\n     */\n    public void dropView(String name)\n    {\n        View view = viewsByName.remove(name);\n\n        if (view == null)\n            return;\n\n        view.stopBuild();\n        forTable(view.getDefinition().baseTableId).removeByName(name);\n        SystemKeyspace.setViewRemoved(keyspace.getName(), view.name);\n        SystemDistributedKeyspace.setViewRemoved(keyspace.getName(), view.name);\n    }\n\n    public View getByName(String name)\n    {\n        return viewsByName.get(name);\n    }\n\n    public void buildAllViews()\n    {\n        for (View view : allViews())\n            view.build();\n    }\n\n    public TableViews forTable(TableId id)\n    {\n        TableViews views = viewsByBaseTable.get(id);\n        if (views == null)\n        {\n            views = new TableViews(id);\n            TableViews previous = viewsByBaseTable.putIfAbsent(id, views);\n            if (previous != null)\n                views = previous;\n        }\n        return views;\n    }\n\n    public static Lock acquireLockFor(int keyAndCfidHash)\n    {\n        Lock lock = LOCKS.get(keyAndCfidHash);\n\n        if (lock.tryLock())\n            return lock;\n\n        return null;\n    }\n}\n"
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: The `concurrent_materialized_view_writes` configuration directly impacts the performance of view management in a system where multiple updates can occur simultaneously. The use of locks to prevent incoherent updates indicates that concurrent writes can lead to significant contention and delays if not managed properly. Additionally, the code mentions that the number of concurrent view writers is determined by `DatabaseDescriptor.getConcurrentViewWriters()`, which suggests that increasing this number can lead to higher memory usage and potential performance degradation if the system is overwhelmed by concurrent operations. Therefore, this configuration has the potential for substantial performance impact due to its influence on time-intensive locking mechanisms and memory usage during concurrent operations."
        }
    ]
}