{
    "performance_sensitive": "Yes",
    "config_name": "tombstone_warn_threshold",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "/**\n * General interface for storage-engine read commands (common to both range and\n * single partition commands).\n * <p>\n * This contains all the informations needed to do a local read.\n */\npublic abstract class ReadCommand extends AbstractReadQuery\n{\n    private static final int TEST_ITERATION_DELAY_MILLIS = Integer.parseInt(System.getProperty(\"cassandra.test.read_iteration_delay_ms\", \"0\"));\n\n    protected static final Logger logger = LoggerFactory.getLogger(ReadCommand.class);\n    public static final IVersionedSerializer<ReadCommand> serializer = new Serializer();\n\n    private final Kind kind;\n\n    private final boolean isDigestQuery;\n    private final boolean acceptsTransient;\n    // if a digest query, the version for which the digest is expected. Ignored if not a digest.\n    private int digestVersion;\n\n    @Nullable\n    private final IndexMetadata index;\n\n    protected static abstract class SelectionDeserializer\n    {\n        public abstract ReadCommand deserialize(DataInputPlus in,\n                                                int version,\n                                                boolean isDigest,\n                                                int digestVersion,\n                                                boolean acceptsTransient,\n                                                TableMetadata metadata,\n                                                int nowInSec,\n                                                ColumnFilter columnFilter,\n                                                RowFilter rowFilter,\n                                                DataLimits limits,\n                                                IndexMetadata index) throws IOException;\n    }\n\n    protected enum Kind\n    {\n        SINGLE_PARTITION (SinglePartitionReadCommand.selectionDeserializer),\n        PARTITION_RANGE  (PartitionRangeReadCommand.selectionDeserializer);\n\n        private final SelectionDeserializer selectionDeserializer;\n\n        Kind(SelectionDeserializer selectionDeserializer)\n        {\n            this.selectionDeserializer = selectionDeserializer;\n        }\n    }\n\n    protected ReadCommand(Kind kind,\n                          boolean isDigestQuery,\n                          int digestVersion,\n                          boolean acceptsTransient,\n                          TableMetadata metadata,\n                          int nowInSec,\n                          ColumnFilter columnFilter,\n                          RowFilter rowFilter,\n                          DataLimits limits,\n                          IndexMetadata index)\n    {\n        super(metadata, nowInSec, columnFilter, rowFilter, limits);\n        if (acceptsTransient && isDigestQuery)\n            throw new IllegalArgumentException(\"Attempted to issue a digest response to transient replica\");\n\n        this.kind = kind;\n        this.isDigestQuery = isDigestQuery;\n        this.digestVersion = digestVersion;\n        this.acceptsTransient = acceptsTransient;\n        this.index = index;\n    }\n\n    protected abstract void serializeSelection(DataOutputPlus out, int version) throws IOException;\n    protected abstract long selectionSerializedSize(int version);\n\n    public abstract boolean isLimitedToOnePartition();\n\n    public abstract boolean isRangeRequest();\n\n    /**\n     * Creates a new <code>ReadCommand</code> instance with new limits.\n     *\n     * @param newLimits the new limits\n     * @return a new <code>ReadCommand</code> with the updated limits\n     */\n    public abstract ReadCommand withUpdatedLimit(DataLimits newLimits);\n\n    /**\n     * The configured timeout for this command.\n     *\n     * @return the configured timeout for this command.\n     */\n    public abstract long getTimeout(TimeUnit unit);\n\n    /**\n     * Whether this query is a digest one or not.\n     *\n     * @return Whether this query is a digest query.\n     */\n    public boolean isDigestQuery()\n    {\n        return isDigestQuery;\n    }\n\n    /**\n     * If the query is a digest one, the requested digest version.\n     *\n     * @return the requested digest version if the query is a digest. Otherwise, this can return\n     * anything.\n     */\n    public int digestVersion()\n    {\n        return digestVersion;\n    }\n\n    /**\n     * Sets the digest version, for when digest for that command is requested.\n     * <p>\n     * Note that we allow setting this independently of setting the command as a digest query as\n     * this allows us to use the command as a carrier of the digest version even if we only call\n     * setIsDigestQuery on some copy of it.\n     *\n     * @param digestVersion the version for the digest is this command is used for digest query..\n     * @return this read command.\n     */\n    public ReadCommand setDigestVersion(int digestVersion)\n    {\n        this.digestVersion = digestVersion;\n        return this;\n    }\n\n    /**\n     * @return Whether this query expects only a transient data response, or a full response\n     */\n    public boolean acceptsTransient()\n    {\n        return acceptsTransient;\n    }\n\n    /**\n     * Index (metadata) chosen for this query. Can be null.\n     *\n     * @return index (metadata) chosen for this query\n     */\n    @Nullable\n    public IndexMetadata indexMetadata()\n    {\n        return index;\n    }\n\n    /**\n     * The clustering index filter this command to use for the provided key.\n     * <p>\n     * Note that that method should only be called on a key actually queried by this command\n     * and in practice, this will almost always return the same filter, but for the sake of\n     * paging, the filter on the first key of a range command might be slightly different.\n     *\n     * @param key a partition key queried by this command.\n     *\n     * @return the {@code ClusteringIndexFilter} to use for the partition of key {@code key}.\n     */\n    public abstract ClusteringIndexFilter clusteringIndexFilter(DecoratedKey key);\n\n    /**\n     * Returns a copy of this command.\n     *\n     * @return a copy of this command.\n     */\n    public abstract ReadCommand copy();\n\n    /**\n     * Returns a copy of this command with acceptsTransient set to true.\n     */\n    public ReadCommand copyAsTransientQuery(Replica replica)\n    {\n        Preconditions.checkArgument(replica.isTransient(),\n                                    \"Can't make a transient request on a full replica: \" + replica);\n        return copyAsTransientQuery();\n    }\n\n    /**\n     * Returns a copy of this command with acceptsTransient set to true.\n     */\n    public ReadCommand copyAsTransientQuery(Iterable<Replica> replicas)\n    {\n        if (any(replicas, Replica::isFull))\n            throw new IllegalArgumentException(\"Can't make a transient request on full replicas: \" + Iterables.toString(filter(replicas, Replica::isFull)));\n        return copyAsTransientQuery();\n    }\n\n    protected abstract ReadCommand copyAsTransientQuery();\n\n    /**\n     * Returns a copy of this command with isDigestQuery set to true.\n     */\n    public ReadCommand copyAsDigestQuery(Replica replica)\n    {\n        Preconditions.checkArgument(replica.isFull(),\n                                    \"Can't make a digest request on a transient replica \" + replica);\n        return copyAsDigestQuery();\n    }\n\n    /**\n     * Returns a copy of this command with isDigestQuery set to true.\n     */\n    public ReadCommand copyAsDigestQuery(Iterable<Replica> replicas)\n    {\n        if (any(replicas, Replica::isTransient))\n            throw new IllegalArgumentException(\"Can't make a digest request on a transient replica \" + Iterables.toString(filter(replicas, Replica::isTransient)));\n\n        return copyAsDigestQuery();\n    }\n\n    protected abstract ReadCommand copyAsDigestQuery();\n\n    protected abstract UnfilteredPartitionIterator queryStorage(ColumnFamilyStore cfs, ReadExecutionController executionController);\n\n    /**\n     * Whether the underlying {@code ClusteringIndexFilter} is reversed or not.\n     *\n     * @return whether the underlying {@code ClusteringIndexFilter} is reversed or not.\n     */\n    public abstract boolean isReversed();\n\n    @SuppressWarnings(\"resource\")\n    public ReadResponse createResponse(UnfilteredPartitionIterator iterator, RepairedDataInfo rdi)\n    {\n        // validate that the sequence of RT markers is correct: open is followed by close, deletion times for both\n        // ends equal, and there are no dangling RT bound in any partition.\n        iterator = RTBoundValidator.validate(iterator, Stage.PROCESSED, true);\n\n        return isDigestQuery()\n               ? ReadResponse.createDigestResponse(iterator, this)\n               : ReadResponse.createDataResponse(iterator, this, rdi);\n    }\n\n    long indexSerializedSize(int version)\n    {\n        return null != index\n             ? IndexMetadata.serializer.serializedSize(index, version)\n             : 0;\n    }\n\n    public Index getIndex(ColumnFamilyStore cfs)\n    {\n        return null != index\n             ? cfs.indexManager.getIndex(index)\n             : null;\n    }\n\n    static IndexMetadata findIndex(TableMetadata table, RowFilter rowFilter)\n    {\n        if (table.indexes.isEmpty() || rowFilter.isEmpty())\n            return null;\n\n        ColumnFamilyStore cfs = Keyspace.openAndGetStore(table);\n\n        Index index = cfs.indexManager.getBestIndexFor(rowFilter);\n\n        return null != index\n             ? index.getIndexMetadata()\n             : null;\n    }\n\n    /**\n     * If the index manager for the CFS determines that there's an applicable\n     * 2i that can be used to execute this command, call its (optional)\n     * validation method to check that nothing in this command's parameters\n     * violates the implementation specific validation rules.\n     */\n    public void maybeValidateIndex()\n    {\n        if (null != index)\n            IndexRegistry.obtain(metadata()).getIndex(index).validate(this);\n    }\n\n    /**\n     * Executes this command on the local host.\n     *\n     * @param executionController the execution controller spanning this command\n     *\n     * @return an iterator over the result of executing this command locally.\n     */\n    @SuppressWarnings(\"resource\") // The result iterator is closed upon exceptions (we know it's fine to potentially not close the intermediary\n                                  // iterators created inside the try as long as we do close the original resultIterator), or by closing the result.\n    public UnfilteredPartitionIterator executeLocally(ReadExecutionController executionController)\n    {\n        long startTimeNanos = System.nanoTime();\n\n        ColumnFamilyStore cfs = Keyspace.openAndGetStore(metadata());\n        Index index = getIndex(cfs);\n\n        Index.Searcher searcher = null;\n        if (index != null)\n        {\n            if (!cfs.indexManager.isIndexQueryable(index))\n                throw new IndexNotAvailableException(index);\n\n            searcher = index.searcherFor(this);\n            Tracing.trace(\"Executing read on {}.{} using index {}\", cfs.metadata.keyspace, cfs.metadata.name, index.getIndexMetadata().name);\n        }\n\n        UnfilteredPartitionIterator iterator = (null == searcher) ? queryStorage(cfs, executionController) : searcher.search(executionController);\n        iterator = RTBoundValidator.validate(iterator, Stage.MERGED, false);\n\n        try\n        {\n            iterator = withStateTracking(iterator);\n            iterator = RTBoundValidator.validate(withoutPurgeableTombstones(iterator, cfs, executionController), Stage.PURGED, false);\n            iterator = withMetricsRecording(iterator, cfs.metric, startTimeNanos);\n\n            // If we've used a 2ndary index, we know the result already satisfy the primary expression used, so\n            // no point in checking it again.\n            RowFilter filter = (null == searcher) ? rowFilter() : index.getPostIndexQueryFilter(rowFilter());\n\n            /*\n             * TODO: We'll currently do filtering by the rowFilter here because it's convenient. However,\n             * we'll probably want to optimize by pushing it down the layer (like for dropped columns) as it\n             * would be more efficient (the sooner we discard stuff we know we don't care, the less useless\n             * processing we do on it).\n             */\n            iterator = filter.filter(iterator, nowInSec());\n\n            // apply the limits/row counter; this transformation is stopping and would close the iterator as soon\n            // as the count is observed; if that happens in the middle of an open RT, its end bound will not be included.\n            // If tracking repaired data, the counter is needed for overreading repaired data, otherwise we can\n            // optimise the case where this.limit = DataLimits.NONE which skips an unnecessary transform\n            if (executionController.isTrackingRepairedStatus())\n            {\n                DataLimits.Counter limit =\n                    limits().newCounter(nowInSec(), false, selectsFullPartition(), metadata().enforceStrictLiveness());\n                iterator = limit.applyTo(iterator);\n                // ensure that a consistent amount of repaired data is read on each replica. This causes silent\n                // overreading from the repaired data set, up to limits(). The extra data is not visible to\n                // the caller, only iterated to produce the repaired data digest.\n                iterator = executionController.getRepairedDataInfo().extend(iterator, limit);\n            }\n            else\n            {\n                iterator = limits().filter(iterator, nowInSec(), selectsFullPartition());\n            }\n\n            // because of the above, we need to append an aritifical end bound if the source iterator was stopped short by a counter.\n            return RTBoundCloser.close(iterator);\n        }\n        catch (RuntimeException | Error e)\n        {\n            iterator.close();\n            throw e;\n        }\n    }\n\n    protected abstract void recordLatency(TableMetrics metric, long latencyNanos);\n\n    public ReadExecutionController executionController(boolean trackRepairedStatus)\n    {\n        return ReadExecutionController.forCommand(this, trackRepairedStatus);\n    }\n\n    public ReadExecutionController executionController()\n    {\n        return ReadExecutionController.forCommand(this, false);\n    }\n\n    /**\n     * Wraps the provided iterator so that metrics on what is scanned by the command are recorded.\n     * This also log warning/trow TombstoneOverwhelmingException if appropriate.\n     */\n    private UnfilteredPartitionIterator withMetricsRecording(UnfilteredPartitionIterator iter, final TableMetrics metric, final long startTimeNanos)\n    {\n        class MetricRecording extends Transformation<UnfilteredRowIterator>\n        {\n            private final int failureThreshold = DatabaseDescriptor.getTombstoneFailureThreshold();\n            private final int warningThreshold = DatabaseDescriptor.getTombstoneWarnThreshold();\n\n            private final boolean respectTombstoneThresholds = !SchemaConstants.isLocalSystemKeyspace(ReadCommand.this.metadata().keyspace);\n            private final boolean enforceStrictLiveness = metadata().enforceStrictLiveness();\n\n            private int liveRows = 0;\n            private int tombstones = 0;\n\n            private DecoratedKey currentKey;\n\n            @Override\n            public UnfilteredRowIterator applyToPartition(UnfilteredRowIterator iter)\n            {\n                currentKey = iter.partitionKey();\n                return Transformation.apply(iter, this);\n            }\n\n            @Override\n            public Row applyToStatic(Row row)\n            {\n                return applyToRow(row);\n            }\n\n            @Override\n            public Row applyToRow(Row row)\n            {\n                boolean hasTombstones = false;\n                for (Cell<?> cell : row.cells())\n                {\n                    if (!cell.isLive(ReadCommand.this.nowInSec()))\n                    {\n                        countTombstone(row.clustering());\n                        hasTombstones = true; // allows to avoid counting an extra tombstone if the whole row expired\n                    }\n                }\n\n                if (row.hasLiveData(ReadCommand.this.nowInSec(), enforceStrictLiveness))\n                    ++liveRows;\n                else if (!row.primaryKeyLivenessInfo().isLive(ReadCommand.this.nowInSec())\n                        && row.hasDeletion(ReadCommand.this.nowInSec())\n                        && !hasTombstones)\n                {\n                    // We're counting primary key deletions only here.\n                    countTombstone(row.clustering());\n                }\n\n                return row;\n            }\n\n            @Override\n            public RangeTombstoneMarker applyToMarker(RangeTombstoneMarker marker)\n            {\n                countTombstone(marker.clustering());\n                return marker;\n            }\n\n            private void countTombstone(ClusteringPrefix<?> clustering)\n            {\n                ++tombstones;\n                if (tombstones > failureThreshold && respectTombstoneThresholds)\n                {\n                    String query = ReadCommand.this.toCQLString();\n                    Tracing.trace(\"Scanned over {} tombstones for query {}; query aborted (see tombstone_failure_threshold)\", failureThreshold, query);\n                    metric.tombstoneFailures.inc();\n                    throw new TombstoneOverwhelmingException(tombstones, query, ReadCommand.this.metadata(), currentKey, clustering);\n                }\n            }\n\n            @Override\n            public void onClose()\n            {\n                recordLatency(metric, System.nanoTime() - startTimeNanos);\n\n                metric.tombstoneScannedHistogram.update(tombstones);\n                metric.liveScannedHistogram.update(liveRows);\n\n                boolean warnTombstones = tombstones > warningThreshold && respectTombstoneThresholds;\n                if (warnTombstones)\n                {\n                    String msg = String.format(\n                            \"Read %d live rows and %d tombstone cells for query %1.512s; token %s (see tombstone_warn_threshold)\",\n                            liveRows, tombstones, ReadCommand.this.toCQLString(), currentKey.getToken());\n                    ClientWarn.instance.warn(msg);\n                    if (tombstones < failureThreshold)\n                    {\n                        metric.tombstoneWarnings.inc();\n                    }\n\n                    logger.warn(msg);\n                }\n\n                Tracing.trace(\"Read {} live rows and {} tombstone cells{}\",\n                        liveRows, tombstones,\n                        (warnTombstones ? \" (see tombstone_warn_threshold)\" : \"\"));\n            }\n        }\n\n        return Transformation.apply(iter, new MetricRecording());\n    }\n\n    protected class CheckForAbort extends StoppingTransformation<UnfilteredRowIterator>\n    {\n        long lastChecked = 0;\n\n        protected UnfilteredRowIterator applyToPartition(UnfilteredRowIterator partition)\n        {\n            if (maybeAbort())\n            {\n                partition.close();\n                return null;\n            }\n\n            return Transformation.apply(partition, this);\n        }\n\n        protected Row applyToRow(Row row)\n        {\n            if (TEST_ITERATION_DELAY_MILLIS > 0)\n                maybeDelayForTesting();\n\n            return maybeAbort() ? null : row;\n        }\n\n        private boolean maybeAbort()\n        {\n            /**\n             * TODO: this is not a great way to abort early; why not expressly limit checks to 10ms intervals?\n             * The value returned by approxTime.now() is updated only every\n             * {@link org.apache.cassandra.utils.MonotonicClock.SampledClock.CHECK_INTERVAL_MS}, by default 2 millis. Since MonitorableImpl\n             * relies on approxTime, we don't need to check unless the approximate time has elapsed.\n             */\n            if (lastChecked == approxTime.now())\n                return false;\n\n            lastChecked = approxTime.now();\n\n            if (isAborted())\n            {\n                stop();\n                return true;\n            }\n\n            return false;\n        }\n\n        private void maybeDelayForTesting()\n        {\n            if (!metadata().keyspace.startsWith(\"system\"))\n                FBUtilities.sleepQuietly(TEST_ITERATION_DELAY_MILLIS);\n        }\n    }\n\n    protected UnfilteredPartitionIterator withStateTracking(UnfilteredPartitionIterator iter)\n    {\n        return Transformation.apply(iter, new CheckForAbort());\n    }\n\n    /**\n     * Creates a message for this command.\n     */\n    public Message<ReadCommand> createMessage(boolean trackRepairedData)\n    {\n        return trackRepairedData\n             ? Message.outWithFlags(verb(), this, MessageFlag.CALL_BACK_ON_FAILURE, MessageFlag.TRACK_REPAIRED_DATA)\n             : Message.outWithFlag (verb(), this, MessageFlag.CALL_BACK_ON_FAILURE);\n    }\n\n    public abstract Verb verb();\n\n    protected abstract void appendCQLWhereClause(StringBuilder sb);\n\n    // Skip purgeable tombstones. We do this because it's safe to do (post-merge of the memtable and sstable at least), it\n    // can save us some bandwith, and avoid making us throw a TombstoneOverwhelmingException for purgeable tombstones (which\n    // are to some extend an artefact of compaction lagging behind and hence counting them is somewhat unintuitive).\n    protected UnfilteredPartitionIterator withoutPurgeableTombstones(UnfilteredPartitionIterator iterator, \n                                                                     ColumnFamilyStore cfs,\n                                                                     ReadExecutionController controller)\n    {\n        class WithoutPurgeableTombstones extends PurgeFunction\n        {\n            public WithoutPurgeableTombstones()\n            {\n                super(nowInSec(), cfs.gcBefore(nowInSec()), controller.oldestUnrepairedTombstone(),\n                      cfs.getCompactionStrategyManager().onlyPurgeRepairedTombstones(),\n                      iterator.metadata().enforceStrictLiveness());\n            }\n\n            protected LongPredicate getPurgeEvaluator()\n            {\n                return time -> true;\n            }\n        }\n        return Transformation.apply(iterator, new WithoutPurgeableTombstones());\n    }\n\n    /**\n     * Recreate the CQL string corresponding to this query.\n     * <p>\n     * Note that in general the returned string will not be exactly the original user string, first\n     * because there isn't always a single syntax for a given query,  but also because we don't have\n     * all the information needed (we know the non-PK columns queried but not the PK ones as internally\n     * we query them all). So this shouldn't be relied too strongly, but this should be good enough for\n     * debugging purpose which is what this is for.\n     */\n    public String toCQLString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"SELECT \").append(columnFilter().toCQLString());\n        sb.append(\" FROM \").append(metadata().keyspace).append('.').append(metadata().name);\n        appendCQLWhereClause(sb);\n\n        if (limits() != DataLimits.NONE)\n            sb.append(' ').append(limits());\n        return sb.toString();\n    }\n\n    // Monitorable interface\n    public String name()\n    {\n        return toCQLString();\n    }\n\n    @SuppressWarnings(\"resource\") // resultant iterators are closed by their callers\n    InputCollector<UnfilteredRowIterator> iteratorsForPartition(ColumnFamilyStore.ViewFragment view, ReadExecutionController controller)\n    {\n        final BiFunction<List<UnfilteredRowIterator>, RepairedDataInfo, UnfilteredRowIterator> merge =\n            (unfilteredRowIterators, repairedDataInfo) -> {\n                UnfilteredRowIterator repaired = UnfilteredRowIterators.merge(unfilteredRowIterators);\n                return repairedDataInfo.withRepairedDataInfo(repaired);\n            };\n\n        // For single partition reads, after reading up to the command's DataLimit nothing extra is required.\n        // The merged & repaired row iterator will be consumed until it's exhausted or the RepairedDataInfo's\n        // internal counter is satisfied\n        final Function<UnfilteredRowIterator, UnfilteredPartitionIterator> postLimitPartitions =\n            (rows) -> EmptyIterators.unfilteredPartition(metadata());\n        return new InputCollector<>(view, controller, merge, postLimitPartitions);\n    }\n\n    @SuppressWarnings(\"resource\") // resultant iterators are closed by their callers\n    InputCollector<UnfilteredPartitionIterator> iteratorsForRange(ColumnFamilyStore.ViewFragment view, ReadExecutionController controller)\n    {\n        final BiFunction<List<UnfilteredPartitionIterator>, RepairedDataInfo, UnfilteredPartitionIterator> merge =\n            (unfilteredPartitionIterators, repairedDataInfo) -> {\n                UnfilteredPartitionIterator repaired = UnfilteredPartitionIterators.merge(unfilteredPartitionIterators,\n                                                                                          NOOP);\n                return repairedDataInfo.withRepairedDataInfo(repaired);\n            };\n\n        // Uses identity function to provide additional partitions to be consumed after the command's\n        // DataLimits are satisfied. The input to the function will be the iterator of merged, repaired partitions\n        // which we'll keep reading until the RepairedDataInfo's internal counter is satisfied.\n        return new InputCollector<>(view, controller, merge, Function.identity());\n    }\n\n    /**\n     * Handles the collation of unfiltered row or partition iterators that comprise the\n     * input for a query. Separates them according to repaired status and of repaired\n     * status is being tracked, handles the merge and wrapping in a digest generator of\n     * the repaired iterators.\n     *\n     * Intentionally not AutoCloseable so we don't mistakenly use this in ARM blocks\n     * as this prematurely closes the underlying iterators\n     */\n    static class InputCollector<T extends AutoCloseable>\n    {\n        final RepairedDataInfo repairedDataInfo;\n        private final boolean isTrackingRepairedStatus;\n        Set<SSTableReader> repairedSSTables;\n        BiFunction<List<T>, RepairedDataInfo, T> repairedMerger;\n        Function<T, UnfilteredPartitionIterator> postLimitAdditionalPartitions;\n        List<T> repairedIters;\n        List<T> unrepairedIters;\n\n        InputCollector(ColumnFamilyStore.ViewFragment view,\n                       ReadExecutionController controller,\n                       BiFunction<List<T>, RepairedDataInfo, T> repairedMerger,\n                       Function<T, UnfilteredPartitionIterator> postLimitAdditionalPartitions)\n        {\n            this.repairedDataInfo = controller.getRepairedDataInfo();\n            this.isTrackingRepairedStatus = controller.isTrackingRepairedStatus();\n            \n            if (isTrackingRepairedStatus)\n            {\n                for (SSTableReader sstable : view.sstables)\n                {\n                    if (considerRepairedForTracking(sstable))\n                    {\n                        if (repairedSSTables == null)\n                            repairedSSTables = Sets.newHashSetWithExpectedSize(view.sstables.size());\n                        repairedSSTables.add(sstable);\n                    }\n                }\n            }\n            if (repairedSSTables == null)\n            {\n                repairedIters = Collections.emptyList();\n                unrepairedIters = new ArrayList<>(view.sstables.size());\n            }\n            else\n            {\n                repairedIters = new ArrayList<>(repairedSSTables.size());\n                // when we're done collating, we'll merge the repaired iters and add the\n                // result to the unrepaired list, so size that list accordingly\n                unrepairedIters = new ArrayList<>((view.sstables.size() - repairedSSTables.size()) + Iterables.size(view.memtables) + 1);\n            }\n            this.repairedMerger = repairedMerger;\n            this.postLimitAdditionalPartitions = postLimitAdditionalPartitions;\n        }\n\n        void addMemtableIterator(T iter)\n        {\n            unrepairedIters.add(iter);\n        }\n\n        void addSSTableIterator(SSTableReader sstable, T iter)\n        {\n            if (repairedSSTables != null && repairedSSTables.contains(sstable))\n                repairedIters.add(iter);\n            else\n                unrepairedIters.add(iter);\n        }\n\n        @SuppressWarnings(\"resource\") // the returned iterators are closed by the caller\n        List<T> finalizeIterators(ColumnFamilyStore cfs, int nowInSec, int oldestUnrepairedTombstone)\n        {\n            if (repairedIters.isEmpty())\n                return unrepairedIters;\n\n            // merge the repaired data before returning, wrapping in a digest generator\n            repairedDataInfo.prepare(cfs, nowInSec, oldestUnrepairedTombstone);\n            T repairedIter = repairedMerger.apply(repairedIters, repairedDataInfo);\n            repairedDataInfo.finalize(postLimitAdditionalPartitions.apply(repairedIter));\n            unrepairedIters.add(repairedIter);\n            return unrepairedIters;\n        }\n\n        boolean isEmpty()\n        {\n            return repairedIters.isEmpty() && unrepairedIters.isEmpty();\n        }\n\n        // For tracking purposes we consider data repaired if the sstable is either:\n        // * marked repaired\n        // * marked pending, but the local session has been committed. This reduces the window\n        //   whereby the tracking is affected by compaction backlog causing repaired sstables to\n        //   remain in the pending state\n        // If an sstable is involved in a pending repair which is not yet committed, we mark the\n        // repaired data info inconclusive, as the same data on other replicas may be in a\n        // slightly different state.\n        private boolean considerRepairedForTracking(SSTableReader sstable)\n        {\n            if (!isTrackingRepairedStatus)\n                return false;\n\n            UUID pendingRepair = sstable.getPendingRepair();\n            if (pendingRepair != ActiveRepairService.NO_PENDING_REPAIR)\n            {\n                if (ActiveRepairService.instance.consistent.local.isSessionFinalized(pendingRepair))\n                    return true;\n\n                // In the edge case where compaction is backed up long enough for the session to\n                // timeout and be purged by LocalSessions::cleanup, consider the sstable unrepaired\n                // as it will be marked unrepaired when compaction catches up\n                if (!ActiveRepairService.instance.consistent.local.sessionExists(pendingRepair))\n                    return false;\n\n                repairedDataInfo.markInconclusive();\n            }\n\n            return sstable.isRepaired();\n        }\n\n        void markInconclusive()\n        {\n            repairedDataInfo.markInconclusive();\n        }\n\n        public void close() throws Exception\n        {\n            FBUtilities.closeAll(unrepairedIters);\n            FBUtilities.closeAll(repairedIters);\n        }\n    }\n\n    @VisibleForTesting\n    public static class Serializer implements IVersionedSerializer<ReadCommand>\n    {\n        private final SchemaProvider schema;\n\n        public Serializer()\n        {\n            this(Schema.instance);\n        }\n\n        @VisibleForTesting\n        public Serializer(SchemaProvider schema)\n        {\n            this.schema = Objects.requireNonNull(schema, \"schema\");\n        }\n\n        private static int digestFlag(boolean isDigest)\n        {\n            return isDigest ? 0x01 : 0;\n        }\n\n        private static boolean isDigest(int flags)\n        {\n            return (flags & 0x01) != 0;\n        }\n\n        private static boolean acceptsTransient(int flags)\n        {\n            return (flags & 0x08) != 0;\n        }\n\n        private static int acceptsTransientFlag(boolean acceptsTransient)\n        {\n            return acceptsTransient ? 0x08 : 0;\n        }\n\n        // We don't set this flag anymore, but still look if we receive a\n        // command with it set in case someone is using thrift a mixed 3.0/4.0+\n        // cluster (which is unsupported). This is also a reminder for not\n        // re-using this flag until we drop 3.0/3.X compatibility (since it's\n        // used by these release for thrift and would thus confuse things)\n        private static boolean isForThrift(int flags)\n        {\n            return (flags & 0x02) != 0;\n        }\n\n        private static int indexFlag(boolean hasIndex)\n        {\n            return hasIndex ? 0x04 : 0;\n        }\n\n        private static boolean hasIndex(int flags)\n        {\n            return (flags & 0x04) != 0;\n        }\n\n        public void serialize(ReadCommand command, DataOutputPlus out, int version) throws IOException\n        {\n            out.writeByte(command.kind.ordinal());\n            out.writeByte(\n                    digestFlag(command.isDigestQuery())\n                    | indexFlag(null != command.indexMetadata())\n                    | acceptsTransientFlag(command.acceptsTransient())\n            );\n            if (command.isDigestQuery())\n                out.writeUnsignedVInt(command.digestVersion());\n            command.metadata().id.serialize(out);\n            out.writeInt(command.nowInSec());\n            ColumnFilter.serializer.serialize(command.columnFilter(), out, version);\n            RowFilter.serializer.serialize(command.rowFilter(), out, version);\n            DataLimits.serializer.serialize(command.limits(), out, version, command.metadata().comparator);\n            if (null != command.index)\n                IndexMetadata.serializer.serialize(command.index, out, version);\n\n            command.serializeSelection(out, version);\n        }\n\n        public ReadCommand deserialize(DataInputPlus in, int version) throws IOException\n        {\n            Kind kind = Kind.values()[in.readByte()];\n            int flags = in.readByte();\n            boolean isDigest = isDigest(flags);\n            boolean acceptsTransient = acceptsTransient(flags);\n            // Shouldn't happen or it's a user error (see comment above) but\n            // better complain loudly than doing the wrong thing.\n            if (isForThrift(flags))\n                throw new IllegalStateException(\"Received a command with the thrift flag set. \"\n                                              + \"This means thrift is in use in a mixed 3.0/3.X and 4.0+ cluster, \"\n                                              + \"which is unsupported. Make sure to stop using thrift before \"\n                                              + \"upgrading to 4.0\");\n\n            boolean hasIndex = hasIndex(flags);\n            int digestVersion = isDigest ? (int)in.readUnsignedVInt() : 0;\n            TableMetadata metadata = schema.getExistingTableMetadata(TableId.deserialize(in));\n            int nowInSec = in.readInt();\n            ColumnFilter columnFilter = ColumnFilter.serializer.deserialize(in, version, metadata);\n            RowFilter rowFilter = RowFilter.serializer.deserialize(in, version, metadata);\n            DataLimits limits = DataLimits.serializer.deserialize(in, version,  metadata.comparator);\n            IndexMetadata index = hasIndex ? deserializeIndexMetadata(in, version, metadata) : null;\n\n            return kind.selectionDeserializer.deserialize(in, version, isDigest, digestVersion, acceptsTransient, metadata, nowInSec, columnFilter, rowFilter, limits, index);\n        }\n\n        private IndexMetadata deserializeIndexMetadata(DataInputPlus in, int version, TableMetadata metadata) throws IOException\n        {\n            try\n            {\n                return IndexMetadata.serializer.deserialize(in, version, metadata);\n            }\n            catch (UnknownIndexException e)\n            {\n                logger.info(\"Couldn't find a defined index on {}.{} with the id {}. \" +\n                            \"If an index was just created, this is likely due to the schema not \" +\n                            \"being fully propagated. Local read will proceed without using the \" +\n                            \"index. Please wait for schema agreement after index creation.\",\n                            metadata.keyspace, metadata.name, e.indexId);\n                return null;\n            }\n        }\n\n        public long serializedSize(ReadCommand command, int version)\n        {\n            return 2 // kind + flags\n                   + (command.isDigestQuery() ? TypeSizes.sizeofUnsignedVInt(command.digestVersion()) : 0)\n                   + command.metadata().id.serializedSize()\n                   + TypeSizes.sizeof(command.nowInSec())\n                   + ColumnFilter.serializer.serializedSize(command.columnFilter(), version)\n                   + RowFilter.serializer.serializedSize(command.rowFilter(), version)\n                   + DataLimits.serializer.serializedSize(command.limits(), version, command.metadata().comparator)\n                   + command.selectionSerializedSize(version)\n                   + command.indexSerializedSize(version);\n        }\n    }\n}\n\npublic int getTombstoneWarnThreshold()\n    {\n        return DatabaseDescriptor.getTombstoneWarnThreshold();\n    }\n\n    "
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: The `tombstone_warn_threshold` directly influences the behavior of the system when handling tombstones during read operations. If the number of tombstones exceeds this threshold, it triggers warnings and potentially aborts queries, which can lead to significant performance degradation in scenarios with high tombstone counts. This can result in increased latency and resource consumption, especially in read-heavy workloads where tombstones are prevalent, making it a critical configuration for maintaining optimal performance."
        }
    ]
}