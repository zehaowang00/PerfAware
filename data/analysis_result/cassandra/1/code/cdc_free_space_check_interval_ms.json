{
    "performance_sensitive": "Yes",
    "config_name": "cdc_free_space_check_interval_ms",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "public class CommitLogSegmentManagerCDC extends AbstractCommitLogSegmentManager\n{\n    static final Logger logger = LoggerFactory.getLogger(CommitLogSegmentManagerCDC.class);\n    private final CDCSizeTracker cdcSizeTracker;\n\n    public CommitLogSegmentManagerCDC(final CommitLog commitLog, String storageDirectory)\n    {\n        super(commitLog, storageDirectory);\n        cdcSizeTracker = new CDCSizeTracker(this, new File(DatabaseDescriptor.getCDCLogLocation()));\n    }\n\n    @Override\n    void start()\n    {\n        cdcSizeTracker.start();\n        super.start();\n    }\n\n    public void discard(CommitLogSegment segment, boolean delete)\n    {\n        segment.close();\n        addSize(-segment.onDiskSize());\n\n        cdcSizeTracker.processDiscardedSegment(segment);\n\n        if (delete)\n            FileUtils.deleteWithConfirm(segment.logFile);\n\n        if (segment.getCDCState() != CDCState.CONTAINS)\n        {\n            // Always delete hard-link from cdc folder if this segment didn't contain CDC data. Note: File may not exist\n            // if processing discard during startup.\n            File cdcLink = segment.getCDCFile();\n            if (cdcLink.exists())\n                FileUtils.deleteWithConfirm(cdcLink);\n\n            File cdcIndexFile = segment.getCDCIndexFile();\n            if (cdcIndexFile.exists())\n                FileUtils.deleteWithConfirm(cdcIndexFile);\n        }\n    }\n\n    /**\n     * Initiates the shutdown process for the management thread. Also stops the cdc on-disk size calculator executor.\n     */\n    public void shutdown()\n    {\n        cdcSizeTracker.shutdown();\n        super.shutdown();\n    }\n\n    /**\n     * Reserve space in the current segment for the provided mutation or, if there isn't space available,\n     * create a new segment. For CDC mutations, allocation is expected to throw WTE if the segment disallows CDC mutations.\n     *\n     * @param mutation Mutation to allocate in segment manager\n     * @param size total size (overhead + serialized) of mutation\n     * @return the created Allocation object\n     * @throws CDCWriteException If segment disallows CDC mutations, we throw\n     */\n    @Override\n    public CommitLogSegment.Allocation allocate(Mutation mutation, int size) throws CDCWriteException\n    {\n        CommitLogSegment segment = allocatingFrom();\n        CommitLogSegment.Allocation alloc;\n\n        throwIfForbidden(mutation, segment);\n        while ( null == (alloc = segment.allocate(mutation, size)) )\n        {\n            // Failed to allocate, so move to a new segment with enough room if possible.\n            advanceAllocatingFrom(segment);\n            segment = allocatingFrom();\n\n            throwIfForbidden(mutation, segment);\n        }\n\n        if (mutation.trackedByCDC())\n            segment.setCDCState(CDCState.CONTAINS);\n\n        return alloc;\n    }\n\n    private void throwIfForbidden(Mutation mutation, CommitLogSegment segment) throws CDCWriteException\n    {\n        if (mutation.trackedByCDC() && segment.getCDCState() == CDCState.FORBIDDEN)\n        {\n            cdcSizeTracker.submitOverflowSizeRecalculation();\n            String logMsg = String.format(\"Rejecting mutation to keyspace %s. Free up space in %s by processing CDC logs.\",\n                mutation.getKeyspaceName(), DatabaseDescriptor.getCDCLogLocation());\n            NoSpamLogger.log(logger,\n                             NoSpamLogger.Level.WARN,\n                             10,\n                             TimeUnit.SECONDS,\n                             logMsg);\n            throw new CDCWriteException(logMsg);\n        }\n    }\n\n    /**\n     * On segment creation, flag whether the segment should accept CDC mutations or not based on the total currently\n     * allocated unflushed CDC segments and the contents of cdc_raw\n     */\n    public CommitLogSegment createSegment()\n    {\n        CommitLogSegment segment = CommitLogSegment.createSegment(commitLog, this);\n\n        // Hard link file in cdc folder for realtime tracking\n        FileUtils.createHardLink(segment.logFile, segment.getCDCFile());\n\n        cdcSizeTracker.processNewSegment(segment);\n        return segment;\n    }\n\n    /**\n     * Delete untracked segment files after replay\n     *\n     * @param file segment file that is no longer in use.\n     */\n    @Override\n    void handleReplayedSegment(final File file)\n    {\n        super.handleReplayedSegment(file);\n\n        // delete untracked cdc segment hard link files if their index files do not exist\n        File cdcFile = new File(DatabaseDescriptor.getCDCLogLocation(), file.getName());\n        File cdcIndexFile = new File(DatabaseDescriptor.getCDCLogLocation(), CommitLogDescriptor.fromFileName(file.getName()).cdcIndexFileName());\n        if (cdcFile.exists() && !cdcIndexFile.exists())\n        {\n            logger.trace(\"(Unopened) CDC segment {} is no longer needed and will be deleted now\", cdcFile);\n            FileUtils.deleteWithConfirm(cdcFile);\n        }\n    }\n\n    /**\n     * For use after replay when replayer hard-links / adds tracking of replayed segments\n     */\n    public void addCDCSize(long size)\n    {\n        cdcSizeTracker.addSize(size);\n    }\n\n    /**\n     * Tracks total disk usage of CDC subsystem, defined by the summation of all unflushed CommitLogSegments with CDC\n     * data in them and all segments archived into cdc_raw.\n     *\n     * Allows atomic increment/decrement of unflushed size, however only allows increment on flushed and requires a full\n     * directory walk to determine any potential deletions by CDC consumer.\n     */\n    private static class CDCSizeTracker extends DirectorySizeCalculator\n    {\n        private final RateLimiter rateLimiter = RateLimiter.create(1000.0 / DatabaseDescriptor.getCDCDiskCheckInterval());\n        private ExecutorService cdcSizeCalculationExecutor;\n        private CommitLogSegmentManagerCDC segmentManager;\n\n        // Used instead of size during walk to remove chance of over-allocation\n        private volatile long sizeInProgress = 0;\n\n        CDCSizeTracker(CommitLogSegmentManagerCDC segmentManager, File path)\n        {\n            super(path);\n            this.segmentManager = segmentManager;\n        }\n\n        /**\n         * Needed for stop/restart during unit tests\n         */\n        public void start()\n        {\n            size = 0;\n            cdcSizeCalculationExecutor = new ThreadPoolExecutor(1, 1, 1000, TimeUnit.SECONDS, new SynchronousQueue<>(), new ThreadPoolExecutor.DiscardPolicy());\n        }\n\n        /**\n         * Synchronous size recalculation on each segment creation/deletion call could lead to very long delays in new\n         * segment allocation, thus long delays in thread signaling to wake waiting allocation / writer threads.\n         *\n         * This can be reached either from the segment management thread in ABstractCommitLogSegmentManager or from the\n         * size recalculation executor, so we synchronize on this object to reduce the race overlap window available for\n         * size to get off.\n         *\n         * Reference DirectorySizerBench for more information about performance of the directory size recalc.\n         */\n        void processNewSegment(CommitLogSegment segment)\n        {\n            // See synchronization in CommitLogSegment.setCDCState\n            synchronized(segment.cdcStateLock)\n            {\n                segment.setCDCState(defaultSegmentSize() + totalCDCSizeOnDisk() > allowableCDCBytes()\n                                    ? CDCState.FORBIDDEN\n                                    : CDCState.PERMITTED);\n                if (segment.getCDCState() == CDCState.PERMITTED)\n                    size += defaultSegmentSize();\n            }\n\n            // Take this opportunity to kick off a recalc to pick up any consumer file deletion.\n            submitOverflowSizeRecalculation();\n        }\n\n        void processDiscardedSegment(CommitLogSegment segment)\n        {\n            // See synchronization in CommitLogSegment.setCDCState\n            synchronized(segment.cdcStateLock)\n            {\n                // Add to flushed size before decrementing unflushed so we don't have a window of false generosity\n                if (segment.getCDCState() == CDCState.CONTAINS)\n                    size += segment.onDiskSize();\n                if (segment.getCDCState() != CDCState.FORBIDDEN)\n                    size -= defaultSegmentSize();\n            }\n\n            // Take this opportunity to kick off a recalc to pick up any consumer file deletion.\n            submitOverflowSizeRecalculation();\n        }\n\n        private long allowableCDCBytes()\n        {\n            return (long)DatabaseDescriptor.getCDCSpaceInMB() * 1024 * 1024;\n        }\n\n        public void submitOverflowSizeRecalculation()\n        {\n            try\n            {\n                cdcSizeCalculationExecutor.submit(() -> recalculateOverflowSize());\n            }\n            catch (RejectedExecutionException e)\n            {\n                // Do nothing. Means we have one in flight so this req. should be satisfied when it completes.\n            }\n        }\n\n        private void recalculateOverflowSize()\n        {\n            rateLimiter.acquire();\n            calculateSize();\n            CommitLogSegment allocatingFrom = segmentManager.allocatingFrom();\n            if (allocatingFrom.getCDCState() == CDCState.FORBIDDEN)\n                processNewSegment(allocatingFrom);\n        }\n\n        private int defaultSegmentSize()\n        {\n            return DatabaseDescriptor.getCommitLogSegmentSize();\n        }\n\n        private void calculateSize()\n        {\n            try\n            {\n                // The Arrays.stream approach is considerably slower on Windows than linux\n                sizeInProgress = 0;\n                Files.walkFileTree(path.toPath(), this);\n                size = sizeInProgress;\n            }\n            catch (IOException ie)\n            {\n                CommitLog.instance.handleCommitError(\"Failed CDC Size Calculation\", ie);\n            }\n        }\n\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException\n        {\n            sizeInProgress += attrs.size();\n            return FileVisitResult.CONTINUE;\n        }\n\n\n        public void shutdown()\n        {\n            if (cdcSizeCalculationExecutor != null && !cdcSizeCalculationExecutor.isShutdown())\n            {\n                cdcSizeCalculationExecutor.shutdown();\n            }\n        }\n\n        private void addSize(long toAdd)\n        {\n            size += toAdd;\n        }\n\n        private long totalCDCSizeOnDisk()\n        {\n            return size;\n        }\n    }\n\n    /**\n     * Only use for testing / validation that size tracker is working. Not for production use.\n     */\n    @VisibleForTesting\n    public long updateCDCTotalSize()\n    {\n        cdcSizeTracker.submitOverflowSizeRecalculation();\n\n        // Give the update time to run\n        try\n        {\n            Thread.sleep(DatabaseDescriptor.getCDCDiskCheckInterval() + 10);\n        }\n        catch (InterruptedException e) {}\n\n        return cdcSizeTracker.totalCDCSizeOnDisk();\n    }\n}\n\npublic CommitLogSegmentManagerCDC(final CommitLog commitLog, String storageDirectory)\n    {\n        super(commitLog, storageDirectory);\n        cdcSizeTracker = new CDCSizeTracker(this, new File(DatabaseDescriptor.getCDCLogLocation()));\n    }\n\n    \n/**\n     * Only use for testing / validation that size tracker is working. Not for production use.\n     */\n@VisibleForTesting\n    public long updateCDCTotalSize()\n    {\n        cdcSizeTracker.submitOverflowSizeRecalculation();\n\n        // Give the update time to run\n        try\n        {\n            Thread.sleep(DatabaseDescriptor.getCDCDiskCheckInterval() + 10);\n        }\n        catch (InterruptedException e) {}\n\n        return cdcSizeTracker.totalCDCSizeOnDisk();\n    }\n}"
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: The `cdc_free_space_check_interval_ms` directly influences the frequency of disk space checks for the CDC subsystem, which can lead to significant performance variations. The `CDCSizeTracker` class performs potentially time-intensive operations such as directory walks to calculate sizes, and if the interval is set too low, it could lead to excessive recalculations and delays in segment allocations. This can result in increased latency for write operations, especially under heavy load, making it a critical configuration for overall system performance."
        }
    ]
}