{
    "performance_sensitive": "Yes",
    "config_name": "streaming_connections_per_host",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "public ListenableFuture<StreamState> bootstrap(StreamStateStore stateStore, boolean useStrictConsistency)\n    {\n        logger.trace(\"Beginning bootstrap process\");\n\n        RangeStreamer streamer = new RangeStreamer(tokenMetadata,\n                                                   tokens,\n                                                   address,\n                                                   StreamOperation.BOOTSTRAP,\n                                                   useStrictConsistency,\n                                                   DatabaseDescriptor.getEndpointSnitch(),\n                                                   stateStore,\n                                                   true,\n                                                   DatabaseDescriptor.getStreamingConnectionsPerHost());\n        final List<String> nonLocalStrategyKeyspaces = Schema.instance.getNonLocalStrategyKeyspaces();\n        if (nonLocalStrategyKeyspaces.isEmpty())\n            logger.debug(\"Schema does not contain any non-local keyspaces to stream on bootstrap\");\n        for (String keyspaceName : nonLocalStrategyKeyspaces)\n        {\n            AbstractReplicationStrategy strategy = Keyspace.open(keyspaceName).getReplicationStrategy();\n            streamer.addRanges(keyspaceName, strategy.getPendingAddressRanges(tokenMetadata, tokens, address));\n        }\n\n        StreamResultFuture bootstrapStreamResult = streamer.fetchAsync();\n        bootstrapStreamResult.addEventListener(new StreamEventHandler()\n        {\n            private final AtomicInteger receivedFiles = new AtomicInteger();\n            private final AtomicInteger totalFilesToReceive = new AtomicInteger();\n\n            @Override\n            public void handleStreamEvent(StreamEvent event)\n            {\n                switch (event.eventType)\n                {\n                    case STREAM_PREPARED:\n                        StreamEvent.SessionPreparedEvent prepared = (StreamEvent.SessionPreparedEvent) event;\n                        int currentTotal = totalFilesToReceive.addAndGet((int) prepared.session.getTotalFilesToReceive());\n                        ProgressEvent prepareProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), currentTotal, \"prepare with \" + prepared.session.peer + \" complete\");\n                        fireProgressEvent(\"bootstrap\", prepareProgress);\n                        break;\n\n                    case FILE_PROGRESS:\n                        StreamEvent.ProgressEvent progress = (StreamEvent.ProgressEvent) event;\n                        if (progress.progress.isCompleted())\n                        {\n                            int received = receivedFiles.incrementAndGet();\n                            ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.PROGRESS, received, totalFilesToReceive.get(), \"received file \" + progress.progress.fileName);\n                            fireProgressEvent(\"bootstrap\", currentProgress);\n                        }\n                        break;\n\n                    case STREAM_COMPLETE:\n                        StreamEvent.SessionCompleteEvent completeEvent = (StreamEvent.SessionCompleteEvent) event;\n                        ProgressEvent completeProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), totalFilesToReceive.get(), \"session with \" + completeEvent.peer + \" complete\");\n                        fireProgressEvent(\"bootstrap\", completeProgress);\n                        break;\n                }\n            }\n\n            @Override\n            public void onSuccess(StreamState streamState)\n            {\n                ProgressEventType type;\n                String message;\n\n                if (streamState.hasFailedSession())\n                {\n                    type = ProgressEventType.ERROR;\n                    message = \"Some bootstrap stream failed\";\n                }\n                else\n                {\n                    type = ProgressEventType.SUCCESS;\n                    message = \"Bootstrap streaming success\";\n                }\n                ProgressEvent currentProgress = new ProgressEvent(type, receivedFiles.get(), totalFilesToReceive.get(), message);\n                fireProgressEvent(\"bootstrap\", currentProgress);\n            }\n\n            @Override\n            public void onFailure(Throwable throwable)\n            {\n                ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.ERROR, receivedFiles.get(), totalFilesToReceive.get(), throwable.getMessage());\n                fireProgressEvent(\"bootstrap\", currentProgress);\n            }\n        });\n        return bootstrapStreamResult;\n    }\n\n    \npublic void rebuild(String sourceDc)\n    {\n        rebuild(sourceDc, null, null, null);\n    }\n\n    \npublic void rebuild(String sourceDc, String keyspace, String tokens, String specificSources)\n    {\n        // check ongoing rebuild\n        if (!isRebuilding.compareAndSet(false, true))\n        {\n            throw new IllegalStateException(\"Node is still rebuilding. Check nodetool netstats.\");\n        }\n\n        // check the arguments\n        if (keyspace == null && tokens != null)\n        {\n            throw new IllegalArgumentException(\"Cannot specify tokens without keyspace.\");\n        }\n\n        logger.info(\"rebuild from dc: {}, {}, {}\", sourceDc == null ? \"(any dc)\" : sourceDc,\n                    keyspace == null ? \"(All keyspaces)\" : keyspace,\n                    tokens == null ? \"(All tokens)\" : tokens);\n\n        try\n        {\n            RangeStreamer streamer = new RangeStreamer(tokenMetadata,\n                                                       null,\n                                                       FBUtilities.getBroadcastAddressAndPort(),\n                                                       StreamOperation.REBUILD,\n                                                       useStrictConsistency && !replacing,\n                                                       DatabaseDescriptor.getEndpointSnitch(),\n                                                       streamStateStore,\n                                                       false,\n                                                       DatabaseDescriptor.getStreamingConnectionsPerHost());\n            if (sourceDc != null)\n                streamer.addSourceFilter(new RangeStreamer.SingleDatacenterFilter(DatabaseDescriptor.getEndpointSnitch(), sourceDc));\n\n            if (keyspace == null)\n            {\n                for (String keyspaceName : Schema.instance.getNonLocalStrategyKeyspaces())\n                    streamer.addRanges(keyspaceName, getLocalReplicas(keyspaceName));\n            }\n            else if (tokens == null)\n            {\n                streamer.addRanges(keyspace, getLocalReplicas(keyspace));\n            }\n            else\n            {\n                Token.TokenFactory factory = getTokenFactory();\n                List<Range<Token>> ranges = new ArrayList<>();\n                Pattern rangePattern = Pattern.compile(\"\\\\(\\\\s*(-?\\\\w+)\\\\s*,\\\\s*(-?\\\\w+)\\\\s*\\\\]\");\n                try (Scanner tokenScanner = new Scanner(tokens))\n                {\n                    while (tokenScanner.findInLine(rangePattern) != null)\n                    {\n                        MatchResult range = tokenScanner.match();\n                        Token startToken = factory.fromString(range.group(1));\n                        Token endToken = factory.fromString(range.group(2));\n                        logger.info(\"adding range: ({},{}]\", startToken, endToken);\n                        ranges.add(new Range<>(startToken, endToken));\n                    }\n                    if (tokenScanner.hasNext())\n                        throw new IllegalArgumentException(\"Unexpected string: \" + tokenScanner.next());\n                }\n\n                // Ensure all specified ranges are actually ranges owned by this host\n                RangesAtEndpoint localReplicas = getLocalReplicas(keyspace);\n                RangesAtEndpoint.Builder streamRanges = new RangesAtEndpoint.Builder(FBUtilities.getBroadcastAddressAndPort(), ranges.size());\n                for (Range<Token> specifiedRange : ranges)\n                {\n                    boolean foundParentRange = false;\n                    for (Replica localReplica : localReplicas)\n                    {\n                        if (localReplica.contains(specifiedRange))\n                        {\n                            streamRanges.add(localReplica.decorateSubrange(specifiedRange));\n                            foundParentRange = true;\n                            break;\n                        }\n                    }\n                    if (!foundParentRange)\n                    {\n                        throw new IllegalArgumentException(String.format(\"The specified range %s is not a range that is owned by this node. Please ensure that all token ranges specified to be rebuilt belong to this node.\", specifiedRange.toString()));\n                    }\n                }\n\n                if (specificSources != null)\n                {\n                    String[] stringHosts = specificSources.split(\",\");\n                    Set<InetAddressAndPort> sources = new HashSet<>(stringHosts.length);\n                    for (String stringHost : stringHosts)\n                    {\n                        try\n                        {\n                            InetAddressAndPort endpoint = InetAddressAndPort.getByName(stringHost);\n                            if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))\n                            {\n                                throw new IllegalArgumentException(\"This host was specified as a source for rebuilding. Sources for a rebuild can only be other nodes in the cluster.\");\n                            }\n                            sources.add(endpoint);\n                        }\n                        catch (UnknownHostException ex)\n                        {\n                            throw new IllegalArgumentException(\"Unknown host specified \" + stringHost, ex);\n                        }\n                    }\n                    streamer.addSourceFilter(new RangeStreamer.AllowedSourcesFilter(sources));\n                }\n\n                streamer.addRanges(keyspace, streamRanges.build());\n            }\n\n            StreamResultFuture resultFuture = streamer.fetchAsync();\n            // wait for result\n            resultFuture.get();\n        }\n        catch (InterruptedException e)\n        {\n            throw new RuntimeException(\"Interrupted while waiting on rebuild streaming\");\n        }\n        catch (ExecutionException e)\n        {\n            // This is used exclusively through JMX, so log the full trace but only throw a simple RTE\n            logger.error(\"Error while rebuilding node\", e.getCause());\n            throw new RuntimeException(\"Error while rebuilding node: \" + e.getCause().getMessage());\n        }\n        finally\n        {\n            // rebuild is done (successfully or not)\n            isRebuilding.set(false);\n        }\n    }\n\n    "
        },
        {
            "sender": "Developer Filter",
            "content": "Filter of the code context that is related to configuration: ```java\npublic ListenableFuture<StreamState> bootstrap(StreamStateStore stateStore, boolean useStrictConsistency)\n{\n    logger.trace(\"Beginning bootstrap process\");\n\n    RangeStreamer streamer = new RangeStreamer(tokenMetadata,\n                                               tokens,\n                                               address,\n                                               StreamOperation.BOOTSTRAP,\n                                               useStrictConsistency,\n                                               DatabaseDescriptor.getEndpointSnitch(),\n                                               stateStore,\n                                               true,\n                                               DatabaseDescriptor.getStreamingConnectionsPerHost());\n    final List<String> nonLocalStrategyKeyspaces = Schema.instance.getNonLocalStrategyKeyspaces();\n    if (nonLocalStrategyKeyspaces.isEmpty())\n        logger.debug(\"Schema does not contain any non-local keyspaces to stream on bootstrap\");\n    for (String keyspaceName : nonLocalStrategyKeyspaces)\n    {\n        AbstractReplicationStrategy strategy = Keyspace.open(keyspaceName).getReplicationStrategy();\n        streamer.addRanges(keyspaceName, strategy.getPendingAddressRanges(tokenMetadata, tokens, address));\n    }\n\n    StreamResultFuture bootstrapStreamResult = streamer.fetchAsync();\n    bootstrapStreamResult.addEventListener(new StreamEventHandler()\n    {\n        private final AtomicInteger receivedFiles = new AtomicInteger();\n        private final AtomicInteger totalFilesToReceive = new AtomicInteger();\n\n        @Override\n        public void handleStreamEvent(StreamEvent event)\n        {\n            switch (event.eventType)\n            {\n                case STREAM_PREPARED:\n                    StreamEvent.SessionPreparedEvent prepared = (StreamEvent.SessionPreparedEvent) event;\n                    int currentTotal = totalFilesToReceive.addAndGet((int) prepared.session.getTotalFilesToReceive());\n                    ProgressEvent prepareProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), currentTotal, \"prepare with \" + prepared.session.peer + \" complete\");\n                    fireProgressEvent(\"bootstrap\", prepareProgress);\n                    break;\n\n                case FILE_PROGRESS:\n                    StreamEvent.ProgressEvent progress = (StreamEvent.ProgressEvent) event;\n                    if (progress.progress.isCompleted())\n                    {\n                        int received = receivedFiles.incrementAndGet();\n                        ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.PROGRESS, received, totalFilesToReceive.get(), \"received file \" + progress.progress.fileName);\n                        fireProgressEvent(\"bootstrap\", currentProgress);\n                    }\n                    break;\n\n                case STREAM_COMPLETE:\n                    StreamEvent.SessionCompleteEvent completeEvent = (StreamEvent.SessionCompleteEvent) event;\n                    ProgressEvent completeProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), totalFilesToReceive.get(), \"session with \" + completeEvent.peer + \" complete\");\n                    fireProgressEvent(\"bootstrap\", completeProgress);\n                    break;\n            }\n        }\n\n        @Override\n        public void onSuccess(StreamState streamState)\n        {\n            ProgressEventType type;\n            String message;\n\n            if (streamState.hasFailedSession())\n            {\n                type = ProgressEventType.ERROR;\n                message = \"Some bootstrap stream failed\";\n            }\n            else\n            {\n                type = ProgressEventType.SUCCESS;\n                message = \"Bootstrap streaming success\";\n            }\n            ProgressEvent currentProgress = new ProgressEvent(type, receivedFiles.get(), totalFilesToReceive.get(), message);\n            fireProgressEvent(\"bootstrap\", currentProgress);\n        }\n\n        @Override\n        public void onFailure(Throwable throwable)\n        {\n            ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.ERROR, receivedFiles.get(), totalFilesToReceive.get(), throwable.getMessage());\n            fireProgressEvent(\"bootstrap\", currentProgress);\n        }\n    });\n    return bootstrapStreamResult;\n}\n\npublic void rebuild(String sourceDc, String keyspace, String tokens, String specificSources)\n{\n    // check ongoing rebuild\n    if (!isRebuilding.compareAndSet(false, true))\n    {\n        throw new IllegalStateException(\"Node is still rebuilding. Check nodetool netstats.\");\n    }\n\n    // check the arguments\n    if (keyspace == null && tokens != null)\n    {\n        throw new IllegalArgumentException(\"Cannot specify tokens without keyspace.\");\n    }\n\n    logger.info(\"rebuild from dc: {}, {}, {}\", sourceDc == null ? \"(any dc)\" : sourceDc,\n                keyspace == null ? \"(All keyspaces)\" : keyspace,\n                tokens == null ? \"(All tokens)\" : tokens);\n\n    try\n    {\n        RangeStreamer streamer = new RangeStreamer(tokenMetadata,\n                                                   null,\n                                                   FBUtilities.getBroadcastAddressAndPort(),\n                                                   StreamOperation.REBUILD,\n                                                   useStrictConsistency && !replacing,\n                                                   DatabaseDescriptor.getEndpointSnitch(),\n                                                   streamStateStore,\n                                                   false,\n                                                   DatabaseDescriptor.getStreamingConnectionsPerHost());\n        if (sourceDc != null)\n            streamer.addSourceFilter(new RangeStreamer.SingleDatacenterFilter(DatabaseDescriptor.getEndpointSnitch(), sourceDc));\n\n        if (keyspace == null)\n        {\n            for (String keyspaceName : Schema.instance.getNonLocalStrategyKeyspaces())\n                streamer.addRanges(keyspaceName, getLocalReplicas(keyspaceName));\n        }\n        else if (tokens == null)\n        {\n            streamer.addRanges(keyspace, getLocalReplicas(keyspace));\n        }\n        else\n        {\n            Token.TokenFactory factory = getTokenFactory();\n            List<Range<Token>> ranges = new ArrayList<>();\n            Pattern rangePattern = Pattern.compile(\"\\\\(\\\\s*(-?\\\\w+)\\\\s*,\\\\s*(-?\\\\w+)\\\\s*\\\\]\");\n            try (Scanner tokenScanner = new Scanner(tokens))\n            {\n                while (tokenScanner.findInLine(rangePattern) != null)\n                {\n                    MatchResult range = tokenScanner.match();\n                    Token startToken = factory.fromString(range.group(1));\n                    Token endToken = factory.fromString(range.group(2));\n                    logger.info(\"adding range: ({},{}]\", startToken, endToken);\n                    ranges.add(new Range<>(startToken, endToken));\n                }\n                if (tokenScanner.hasNext())\n                    throw new IllegalArgumentException(\"Unexpected string: \" + tokenScanner.next());\n            }\n\n            // Ensure all specified ranges are actually ranges owned by this host\n            RangesAtEndpoint localReplicas = getLocalReplicas(keyspace);\n            RangesAtEndpoint.Builder streamRanges = new RangesAtEndpoint.Builder(FBUtilities.getBroadcastAddressAndPort(), ranges.size());\n            for (Range<Token> specifiedRange : ranges)\n            {\n                boolean foundParentRange = false;\n                for (Replica localReplica : localReplicas)\n                {\n                    if (localReplica.contains(specifiedRange))\n                    {\n                        streamRanges.add(localReplica.decorateSubrange(specifiedRange));\n                        foundParentRange = true;\n                        break;\n                    }\n                }\n                if (!foundParentRange)\n                {\n                    throw new IllegalArgumentException(String.format(\"The specified range %s is not a range that is owned by this node. Please ensure that all token ranges specified to be rebuilt belong to this node.\", specifiedRange.toString()));\n                }\n            }\n\n            if (specificSources != null)\n            {\n                String[] stringHosts = specificSources.split(\",\");\n                Set<InetAddressAndPort> sources = new HashSet<>(stringHosts.length);\n                for (String stringHost : stringHosts)\n                {\n                    try\n                    {\n                        InetAddressAndPort endpoint = InetAddressAndPort.getByName(stringHost);\n                        if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))\n                        {\n                            throw new IllegalArgumentException(\"This host was specified as a source for rebuilding. Sources for a rebuild can only be other nodes in the cluster.\");\n                        }\n                        sources.add(endpoint);\n                    }\n                    catch (UnknownHostException ex)\n                    {\n                        throw new IllegalArgumentException(\"Unknown host specified \" + stringHost, ex);\n                    }\n                }\n                streamer.addSourceFilter(new RangeStreamer.AllowedSourcesFilter(sources));\n            }\n\n            streamer.addRanges(keyspace, streamRanges.build());\n        }\n\n        StreamResultFuture resultFuture = streamer.fetchAsync();\n        // wait for result\n        resultFuture.get();\n    }\n    catch (InterruptedException e)\n    {\n        throw new RuntimeException(\"Interrupted while waiting on rebuild streaming\");\n    }\n    catch (ExecutionException e)\n    {\n        // This is used exclusively through JMX, so log the full trace but only throw a simple RTE\n        logger.error(\"Error while rebuilding node\", e.getCause());\n        throw new RuntimeException(\"Error while rebuilding node: \" + e.getCause().getMessage());\n    }\n    finally\n    {\n        // rebuild is done (successfully or not)\n        isRebuilding.set(false);\n    }\n}\n```"
        },
        {
            "sender": "Developer summary",
            "content": "Summary of the extracted code context: ### Configuration Summary: `streaming_connections_per_host`\n\nThe `streaming_connections_per_host` configuration parameter plays a crucial role in managing the number of concurrent streaming connections that can be established per host during data streaming operations within the system. This configuration is utilized in both the `bootstrap` and `rebuild` methods, which are responsible for initializing and reconstructing data streams across nodes in a distributed database environment.\n\n#### Purpose and Functionality\n- **Data Streaming Management**: The primary purpose of `streaming_connections_per_host` is to define the limit on how many simultaneous connections can be made to a single host when streaming data. This is essential for efficiently managing network resources and ensuring that the streaming process does not overwhelm any single node.\n\n- **Integration with RangeStreamer**: The configuration is passed as an argument to the `RangeStreamer` constructor. The `RangeStreamer` is a key component responsible for orchestrating the data streaming process, including the initiation of connections, handling data transfer, and managing the state of the streaming session.\n\n#### Key Components Involved\n- **RangeStreamer**: This class is central to the streaming process, utilizing the `streaming_connections_per_host` value to control the number of connections established for data transfer. It interacts with other components such as `StreamStateStore` and `DatabaseDescriptor` to manage the streaming operations effectively.\n\n- **DatabaseDescriptor**: This component provides access to various configuration settings, including `streaming_connections_per_host`. It serves as a centralized point for retrieving configuration values that influence the behavior of the streaming operations.\n\n#### Interactions with Other Parts of the System\n- **Bootstrap and Rebuild Operations**: The `streaming_connections_per_host` configuration is utilized in both the `bootstrap` and `rebuild` methods. During the bootstrap process, it helps in establishing connections to non-local keyspaces, while in the rebuild process, it facilitates connections to specified data centers and keyspaces.\n\n- **Event Handling**: The streaming process is monitored through event listeners that respond to different stages of the streaming operation (e.g., preparation, progress, completion). The configuration indirectly influences how these events are processed by determining the number of concurrent connections available for streaming.\n\nIn summary, the `streaming_connections_per_host` configuration is a vital parameter that governs the concurrency of streaming connections in a distributed database system, ensuring efficient data transfer while interacting closely with the `RangeStreamer` and other system components."
        },
        {
            "sender": "performance agent sensitivity",
            "content": "{\"Role\": \"You are a Performance Sensitivity Agent responsible for determining if a configuration is performance-sensitive within a software system.\", \"Requirement\": \"Using developer-provided information as a secondary reference, analyze the configuration-related code to determine if it is performance-sensitive. Focus exclusively on configurations with substantial system-level performance impact due to time-intensive or memory-intensive operations. Only configurations that directly cause significant performance variations through extremely time-consuming or memory-heavy operations should be classified as performance-sensitive. Minor or moderate impacts should not be considered.\", \"Output Format\": \"Respond strictly in one of the following formats: 'The configuration is Performance Sensitive: reason' or 'The configuration is Performance Insensitive: reason'. No other response format is acceptable. Provide a concise yet clear and detailed reason for your classification.\", \"configuration_name\": \"streaming_connections_per_host\", \"code_context\": \"```java\\npublic ListenableFuture<StreamState> bootstrap(StreamStateStore stateStore, boolean useStrictConsistency)\\n{\\n    logger.trace(\\\"Beginning bootstrap process\\\");\\n\\n    RangeStreamer streamer = new RangeStreamer(tokenMetadata,\\n                                               tokens,\\n                                               address,\\n                                               StreamOperation.BOOTSTRAP,\\n                                               useStrictConsistency,\\n                                               DatabaseDescriptor.getEndpointSnitch(),\\n                                               stateStore,\\n                                               true,\\n                                               DatabaseDescriptor.getStreamingConnectionsPerHost());\\n    final List<String> nonLocalStrategyKeyspaces = Schema.instance.getNonLocalStrategyKeyspaces();\\n    if (nonLocalStrategyKeyspaces.isEmpty())\\n        logger.debug(\\\"Schema does not contain any non-local keyspaces to stream on bootstrap\\\");\\n    for (String keyspaceName : nonLocalStrategyKeyspaces)\\n    {\\n        AbstractReplicationStrategy strategy = Keyspace.open(keyspaceName).getReplicationStrategy();\\n        streamer.addRanges(keyspaceName, strategy.getPendingAddressRanges(tokenMetadata, tokens, address));\\n    }\\n\\n    StreamResultFuture bootstrapStreamResult = streamer.fetchAsync();\\n    bootstrapStreamResult.addEventListener(new StreamEventHandler()\\n    {\\n        private final AtomicInteger receivedFiles = new AtomicInteger();\\n        private final AtomicInteger totalFilesToReceive = new AtomicInteger();\\n\\n        @Override\\n        public void handleStreamEvent(StreamEvent event)\\n        {\\n            switch (event.eventType)\\n            {\\n                case STREAM_PREPARED:\\n                    StreamEvent.SessionPreparedEvent prepared = (StreamEvent.SessionPreparedEvent) event;\\n                    int currentTotal = totalFilesToReceive.addAndGet((int) prepared.session.getTotalFilesToReceive());\\n                    ProgressEvent prepareProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), currentTotal, \\\"prepare with \\\" + prepared.session.peer + \\\" complete\\\");\\n                    fireProgressEvent(\\\"bootstrap\\\", prepareProgress);\\n                    break;\\n\\n                case FILE_PROGRESS:\\n                    StreamEvent.ProgressEvent progress = (StreamEvent.ProgressEvent) event;\\n                    if (progress.progress.isCompleted())\\n                    {\\n                        int received = receivedFiles.incrementAndGet();\\n                        ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.PROGRESS, received, totalFilesToReceive.get(), \\\"received file \\\" + progress.progress.fileName);\\n                        fireProgressEvent(\\\"bootstrap\\\", currentProgress);\\n                    }\\n                    break;\\n\\n                case STREAM_COMPLETE:\\n                    StreamEvent.SessionCompleteEvent completeEvent = (StreamEvent.SessionCompleteEvent) event;\\n                    ProgressEvent completeProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), totalFilesToReceive.get(), \\\"session with \\\" + completeEvent.peer + \\\" complete\\\");\\n                    fireProgressEvent(\\\"bootstrap\\\", completeProgress);\\n                    break;\\n            }\\n        }\\n\\n        @Override\\n        public void onSuccess(StreamState streamState)\\n        {\\n            ProgressEventType type;\\n            String message;\\n\\n            if (streamState.hasFailedSession())\\n            {\\n                type = ProgressEventType.ERROR;\\n                message = \\\"Some bootstrap stream failed\\\";\\n            }\\n            else\\n            {\\n                type = ProgressEventType.SUCCESS;\\n                message = \\\"Bootstrap streaming success\\\";\\n            }\\n            ProgressEvent currentProgress = new ProgressEvent(type, receivedFiles.get(), totalFilesToReceive.get(), message);\\n            fireProgressEvent(\\\"bootstrap\\\", currentProgress);\\n        }\\n\\n        @Override\\n        public void onFailure(Throwable throwable)\\n        {\\n            ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.ERROR, receivedFiles.get(), totalFilesToReceive.get(), throwable.getMessage());\\n            fireProgressEvent(\\\"bootstrap\\\", currentProgress);\\n        }\\n    });\\n    return bootstrapStreamResult;\\n}\\n\\npublic void rebuild(String sourceDc, String keyspace, String tokens, String specificSources)\\n{\\n    // check ongoing rebuild\\n    if (!isRebuilding.compareAndSet(false, true))\\n    {\\n        throw new IllegalStateException(\\\"Node is still rebuilding. Check nodetool netstats.\\\");\\n    }\\n\\n    // check the arguments\\n    if (keyspace == null && tokens != null)\\n    {\\n        throw new IllegalArgumentException(\\\"Cannot specify tokens without keyspace.\\\");\\n    }\\n\\n    logger.info(\\\"rebuild from dc: {}, {}, {}\\\", sourceDc == null ? \\\"(any dc)\\\" : sourceDc,\\n                keyspace == null ? \\\"(All keyspaces)\\\" : keyspace,\\n                tokens == null ? \\\"(All tokens)\\\" : tokens);\\n\\n    try\\n    {\\n        RangeStreamer streamer = new RangeStreamer(tokenMetadata,\\n                                                   null,\\n                                                   FBUtilities.getBroadcastAddressAndPort(),\\n                                                   StreamOperation.REBUILD,\\n                                                   useStrictConsistency && !replacing,\\n                                                   DatabaseDescriptor.getEndpointSnitch(),\\n                                                   streamStateStore,\\n                                                   false,\\n                                                   DatabaseDescriptor.getStreamingConnectionsPerHost());\\n        if (sourceDc != null)\\n            streamer.addSourceFilter(new RangeStreamer.SingleDatacenterFilter(DatabaseDescriptor.getEndpointSnitch(), sourceDc));\\n\\n        if (keyspace == null)\\n        {\\n            for (String keyspaceName : Schema.instance.getNonLocalStrategyKeyspaces())\\n                streamer.addRanges(keyspaceName, getLocalReplicas(keyspaceName));\\n        }\\n        else if (tokens == null)\\n        {\\n            streamer.addRanges(keyspace, getLocalReplicas(keyspace));\\n        }\\n        else\\n        {\\n            Token.TokenFactory factory = getTokenFactory();\\n            List<Range<Token>> ranges = new ArrayList<>();\\n            Pattern rangePattern = Pattern.compile(\\\"\\\\\\\\(\\\\\\\\s*(-?\\\\\\\\w+)\\\\\\\\s*,\\\\\\\\s*(-?\\\\\\\\w+)\\\\\\\\s*\\\\\\\\]\\\");\\n            try (Scanner tokenScanner = new Scanner(tokens))\\n            {\\n                while (tokenScanner.findInLine(rangePattern) != null)\\n                {\\n                    MatchResult range = tokenScanner.match();\\n                    Token startToken = factory.fromString(range.group(1));\\n                    Token endToken = factory.fromString(range.group(2));\\n                    logger.info(\\\"adding range: ({},{}]\\\", startToken, endToken);\\n                    ranges.add(new Range<>(startToken, endToken));\\n                }\\n                if (tokenScanner.hasNext())\\n                    throw new IllegalArgumentException(\\\"Unexpected string: \\\" + tokenScanner.next());\\n            }\\n\\n            // Ensure all specified ranges are actually ranges owned by this host\\n            RangesAtEndpoint localReplicas = getLocalReplicas(keyspace);\\n            RangesAtEndpoint.Builder streamRanges = new RangesAtEndpoint.Builder(FBUtilities.getBroadcastAddressAndPort(), ranges.size());\\n            for (Range<Token> specifiedRange : ranges)\\n            {\\n                boolean foundParentRange = false;\\n                for (Replica localReplica : localReplicas)\\n                {\\n                    if (localReplica.contains(specifiedRange))\\n                    {\\n                        streamRanges.add(localReplica.decorateSubrange(specifiedRange));\\n                        foundParentRange = true;\\n                        break;\\n                    }\\n                }\\n                if (!foundParentRange)\\n                {\\n                    throw new IllegalArgumentException(String.format(\\\"The specified range %s is not a range that is owned by this node. Please ensure that all token ranges specified to be rebuilt belong to this node.\\\", specifiedRange.toString()));\\n                }\\n            }\\n\\n            if (specificSources != null)\\n            {\\n                String[] stringHosts = specificSources.split(\\\",\\\");\\n                Set<InetAddressAndPort> sources = new HashSet<>(stringHosts.length);\\n                for (String stringHost : stringHosts)\\n                {\\n                    try\\n                    {\\n                        InetAddressAndPort endpoint = InetAddressAndPort.getByName(stringHost);\\n                        if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))\\n                        {\\n                            throw new IllegalArgumentException(\\\"This host was specified as a source for rebuilding. Sources for a rebuild can only be other nodes in the cluster.\\\");\\n                        }\\n                        sources.add(endpoint);\\n                    }\\n                    catch (UnknownHostException ex)\\n                    {\\n                        throw new IllegalArgumentException(\\\"Unknown host specified \\\" + stringHost, ex);\\n                    }\\n                }\\n                streamer.addSourceFilter(new RangeStreamer.AllowedSourcesFilter(sources));\\n            }\\n\\n            streamer.addRanges(keyspace, streamRanges.build());\\n        }\\n\\n        StreamResultFuture resultFuture = streamer.fetchAsync();\\n        // wait for result\\n        resultFuture.get();\\n    }\\n    catch (InterruptedException e)\\n    {\\n        throw new RuntimeException(\\\"Interrupted while waiting on rebuild streaming\\\");\\n    }\\n    catch (ExecutionException e)\\n    {\\n        // This is used exclusively through JMX, so log the full trace but only throw a simple RTE\\n        logger.error(\\\"Error while rebuilding node\\\", e.getCause());\\n        throw new RuntimeException(\\\"Error while rebuilding node: \\\" + e.getCause().getMessage());\\n    }\\n    finally\\n    {\\n        // rebuild is done (successfully or not)\\n        isRebuilding.set(false);\\n    }\\n}\\n```\\n\\n--- Summary by Developer ---\\n### Configuration Summary: `streaming_connections_per_host`\\n\\nThe `streaming_connections_per_host` configuration parameter plays a crucial role in managing the number of concurrent streaming connections that can be established per host during data streaming operations within the system. This configuration is utilized in both the `bootstrap` and `rebuild` methods, which are responsible for initializing and reconstructing data streams across nodes in a distributed database environment.\\n\\n#### Purpose and Functionality\\n- **Data Streaming Management**: The primary purpose of `streaming_connections_per_host` is to define the limit on how many simultaneous connections can be made to a single host when streaming data. This is essential for efficiently managing network resources and ensuring that the streaming process does not overwhelm any single node.\\n\\n- **Integration with RangeStreamer**: The configuration is passed as an argument to the `RangeStreamer` constructor. The `RangeStreamer` is a key component responsible for orchestrating the data streaming process, including the initiation of connections, handling data transfer, and managing the state of the streaming session.\\n\\n#### Key Components Involved\\n- **RangeStreamer**: This class is central to the streaming process, utilizing the `streaming_connections_per_host` value to control the number of connections established for data transfer. It interacts with other components such as `StreamStateStore` and `DatabaseDescriptor` to manage the streaming operations effectively.\\n\\n- **DatabaseDescriptor**: This component provides access to various configuration settings, including `streaming_connections_per_host`. It serves as a centralized point for retrieving configuration values that influence the behavior of the streaming operations.\\n\\n#### Interactions with Other Parts of the System\\n- **Bootstrap and Rebuild Operations**: The `streaming_connections_per_host` configuration is utilized in both the `bootstrap` and `rebuild` methods. During the bootstrap process, it helps in establishing connections to non-local keyspaces, while in the rebuild process, it facilitates connections to specified data centers and keyspaces.\\n\\n- **Event Handling**: The streaming process is monitored through event listeners that respond to different stages of the streaming operation (e.g., preparation, progress, completion). The configuration indirectly influences how these events are processed by determining the number of concurrent connections available for streaming.\\n\\nIn summary, the `streaming_connections_per_host` configuration is a vital parameter that governs the concurrency of streaming connections in a distributed database system, ensuring efficient data transfer while interacting closely with the `RangeStreamer` and other system components.\"}"
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: The `streaming_connections_per_host` parameter directly affects the number of concurrent streaming connections to a host, which can significantly impact the performance of data streaming operations. If set too low, it can lead to underutilization of network resources and slow data transfer rates, while a high value could overwhelm a host, causing increased latency and potential failures. This configuration plays a crucial role in managing network load and ensuring efficient data transfer during time-intensive operations like bootstrapping and rebuilding, making it critical for overall system performance."
        }
    ]
}