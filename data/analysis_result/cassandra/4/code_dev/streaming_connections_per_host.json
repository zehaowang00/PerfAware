{
    "performance_sensitive": "Yes",
    "config_name": "streaming_connections_per_host",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "public ListenableFuture<StreamState> bootstrap(StreamStateStore stateStore, boolean useStrictConsistency)\n    {\n        logger.trace(\"Beginning bootstrap process\");\n\n        RangeStreamer streamer = new RangeStreamer(tokenMetadata,\n                                                   tokens,\n                                                   address,\n                                                   StreamOperation.BOOTSTRAP,\n                                                   useStrictConsistency,\n                                                   DatabaseDescriptor.getEndpointSnitch(),\n                                                   stateStore,\n                                                   true,\n                                                   DatabaseDescriptor.getStreamingConnectionsPerHost());\n        final List<String> nonLocalStrategyKeyspaces = Schema.instance.getNonLocalStrategyKeyspaces();\n        if (nonLocalStrategyKeyspaces.isEmpty())\n            logger.debug(\"Schema does not contain any non-local keyspaces to stream on bootstrap\");\n        for (String keyspaceName : nonLocalStrategyKeyspaces)\n        {\n            AbstractReplicationStrategy strategy = Keyspace.open(keyspaceName).getReplicationStrategy();\n            streamer.addRanges(keyspaceName, strategy.getPendingAddressRanges(tokenMetadata, tokens, address));\n        }\n\n        StreamResultFuture bootstrapStreamResult = streamer.fetchAsync();\n        bootstrapStreamResult.addEventListener(new StreamEventHandler()\n        {\n            private final AtomicInteger receivedFiles = new AtomicInteger();\n            private final AtomicInteger totalFilesToReceive = new AtomicInteger();\n\n            @Override\n            public void handleStreamEvent(StreamEvent event)\n            {\n                switch (event.eventType)\n                {\n                    case STREAM_PREPARED:\n                        StreamEvent.SessionPreparedEvent prepared = (StreamEvent.SessionPreparedEvent) event;\n                        int currentTotal = totalFilesToReceive.addAndGet((int) prepared.session.getTotalFilesToReceive());\n                        ProgressEvent prepareProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), currentTotal, \"prepare with \" + prepared.session.peer + \" complete\");\n                        fireProgressEvent(\"bootstrap\", prepareProgress);\n                        break;\n\n                    case FILE_PROGRESS:\n                        StreamEvent.ProgressEvent progress = (StreamEvent.ProgressEvent) event;\n                        if (progress.progress.isCompleted())\n                        {\n                            int received = receivedFiles.incrementAndGet();\n                            ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.PROGRESS, received, totalFilesToReceive.get(), \"received file \" + progress.progress.fileName);\n                            fireProgressEvent(\"bootstrap\", currentProgress);\n                        }\n                        break;\n\n                    case STREAM_COMPLETE:\n                        StreamEvent.SessionCompleteEvent completeEvent = (StreamEvent.SessionCompleteEvent) event;\n                        ProgressEvent completeProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), totalFilesToReceive.get(), \"session with \" + completeEvent.peer + \" complete\");\n                        fireProgressEvent(\"bootstrap\", completeProgress);\n                        break;\n                }\n            }\n\n            @Override\n            public void onSuccess(StreamState streamState)\n            {\n                ProgressEventType type;\n                String message;\n\n                if (streamState.hasFailedSession())\n                {\n                    type = ProgressEventType.ERROR;\n                    message = \"Some bootstrap stream failed\";\n                }\n                else\n                {\n                    type = ProgressEventType.SUCCESS;\n                    message = \"Bootstrap streaming success\";\n                }\n                ProgressEvent currentProgress = new ProgressEvent(type, receivedFiles.get(), totalFilesToReceive.get(), message);\n                fireProgressEvent(\"bootstrap\", currentProgress);\n            }\n\n            @Override\n            public void onFailure(Throwable throwable)\n            {\n                ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.ERROR, receivedFiles.get(), totalFilesToReceive.get(), throwable.getMessage());\n                fireProgressEvent(\"bootstrap\", currentProgress);\n            }\n        });\n        return bootstrapStreamResult;\n    }\n\n    \npublic void rebuild(String sourceDc)\n    {\n        rebuild(sourceDc, null, null, null);\n    }\n\n    \npublic void rebuild(String sourceDc, String keyspace, String tokens, String specificSources)\n    {\n        // check ongoing rebuild\n        if (!isRebuilding.compareAndSet(false, true))\n        {\n            throw new IllegalStateException(\"Node is still rebuilding. Check nodetool netstats.\");\n        }\n\n        // check the arguments\n        if (keyspace == null && tokens != null)\n        {\n            throw new IllegalArgumentException(\"Cannot specify tokens without keyspace.\");\n        }\n\n        logger.info(\"rebuild from dc: {}, {}, {}\", sourceDc == null ? \"(any dc)\" : sourceDc,\n                    keyspace == null ? \"(All keyspaces)\" : keyspace,\n                    tokens == null ? \"(All tokens)\" : tokens);\n\n        try\n        {\n            RangeStreamer streamer = new RangeStreamer(tokenMetadata,\n                                                       null,\n                                                       FBUtilities.getBroadcastAddressAndPort(),\n                                                       StreamOperation.REBUILD,\n                                                       useStrictConsistency && !replacing,\n                                                       DatabaseDescriptor.getEndpointSnitch(),\n                                                       streamStateStore,\n                                                       false,\n                                                       DatabaseDescriptor.getStreamingConnectionsPerHost());\n            if (sourceDc != null)\n                streamer.addSourceFilter(new RangeStreamer.SingleDatacenterFilter(DatabaseDescriptor.getEndpointSnitch(), sourceDc));\n\n            if (keyspace == null)\n            {\n                for (String keyspaceName : Schema.instance.getNonLocalStrategyKeyspaces())\n                    streamer.addRanges(keyspaceName, getLocalReplicas(keyspaceName));\n            }\n            else if (tokens == null)\n            {\n                streamer.addRanges(keyspace, getLocalReplicas(keyspace));\n            }\n            else\n            {\n                Token.TokenFactory factory = getTokenFactory();\n                List<Range<Token>> ranges = new ArrayList<>();\n                Pattern rangePattern = Pattern.compile(\"\\\\(\\\\s*(-?\\\\w+)\\\\s*,\\\\s*(-?\\\\w+)\\\\s*\\\\]\");\n                try (Scanner tokenScanner = new Scanner(tokens))\n                {\n                    while (tokenScanner.findInLine(rangePattern) != null)\n                    {\n                        MatchResult range = tokenScanner.match();\n                        Token startToken = factory.fromString(range.group(1));\n                        Token endToken = factory.fromString(range.group(2));\n                        logger.info(\"adding range: ({},{}]\", startToken, endToken);\n                        ranges.add(new Range<>(startToken, endToken));\n                    }\n                    if (tokenScanner.hasNext())\n                        throw new IllegalArgumentException(\"Unexpected string: \" + tokenScanner.next());\n                }\n\n                // Ensure all specified ranges are actually ranges owned by this host\n                RangesAtEndpoint localReplicas = getLocalReplicas(keyspace);\n                RangesAtEndpoint.Builder streamRanges = new RangesAtEndpoint.Builder(FBUtilities.getBroadcastAddressAndPort(), ranges.size());\n                for (Range<Token> specifiedRange : ranges)\n                {\n                    boolean foundParentRange = false;\n                    for (Replica localReplica : localReplicas)\n                    {\n                        if (localReplica.contains(specifiedRange))\n                        {\n                            streamRanges.add(localReplica.decorateSubrange(specifiedRange));\n                            foundParentRange = true;\n                            break;\n                        }\n                    }\n                    if (!foundParentRange)\n                    {\n                        throw new IllegalArgumentException(String.format(\"The specified range %s is not a range that is owned by this node. Please ensure that all token ranges specified to be rebuilt belong to this node.\", specifiedRange.toString()));\n                    }\n                }\n\n                if (specificSources != null)\n                {\n                    String[] stringHosts = specificSources.split(\",\");\n                    Set<InetAddressAndPort> sources = new HashSet<>(stringHosts.length);\n                    for (String stringHost : stringHosts)\n                    {\n                        try\n                        {\n                            InetAddressAndPort endpoint = InetAddressAndPort.getByName(stringHost);\n                            if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))\n                            {\n                                throw new IllegalArgumentException(\"This host was specified as a source for rebuilding. Sources for a rebuild can only be other nodes in the cluster.\");\n                            }\n                            sources.add(endpoint);\n                        }\n                        catch (UnknownHostException ex)\n                        {\n                            throw new IllegalArgumentException(\"Unknown host specified \" + stringHost, ex);\n                        }\n                    }\n                    streamer.addSourceFilter(new RangeStreamer.AllowedSourcesFilter(sources));\n                }\n\n                streamer.addRanges(keyspace, streamRanges.build());\n            }\n\n            StreamResultFuture resultFuture = streamer.fetchAsync();\n            // wait for result\n            resultFuture.get();\n        }\n        catch (InterruptedException e)\n        {\n            throw new RuntimeException(\"Interrupted while waiting on rebuild streaming\");\n        }\n        catch (ExecutionException e)\n        {\n            // This is used exclusively through JMX, so log the full trace but only throw a simple RTE\n            logger.error(\"Error while rebuilding node\", e.getCause());\n            throw new RuntimeException(\"Error while rebuilding node: \" + e.getCause().getMessage());\n        }\n        finally\n        {\n            // rebuild is done (successfully or not)\n            isRebuilding.set(false);\n        }\n    }\n\n    "
        },
        {
            "sender": "Developer Filter",
            "content": "Filter of the code context that is related to configuration: ```java\npublic ListenableFuture<StreamState> bootstrap(StreamStateStore stateStore, boolean useStrictConsistency)\n{\n    logger.trace(\"Beginning bootstrap process\");\n\n    RangeStreamer streamer = new RangeStreamer(tokenMetadata,\n                                               tokens,\n                                               address,\n                                               StreamOperation.BOOTSTRAP,\n                                               useStrictConsistency,\n                                               DatabaseDescriptor.getEndpointSnitch(),\n                                               stateStore,\n                                               true,\n                                               DatabaseDescriptor.getStreamingConnectionsPerHost());\n    final List<String> nonLocalStrategyKeyspaces = Schema.instance.getNonLocalStrategyKeyspaces();\n    if (nonLocalStrategyKeyspaces.isEmpty())\n        logger.debug(\"Schema does not contain any non-local keyspaces to stream on bootstrap\");\n    for (String keyspaceName : nonLocalStrategyKeyspaces)\n    {\n        AbstractReplicationStrategy strategy = Keyspace.open(keyspaceName).getReplicationStrategy();\n        streamer.addRanges(keyspaceName, strategy.getPendingAddressRanges(tokenMetadata, tokens, address));\n    }\n\n    StreamResultFuture bootstrapStreamResult = streamer.fetchAsync();\n    bootstrapStreamResult.addEventListener(new StreamEventHandler()\n    {\n        private final AtomicInteger receivedFiles = new AtomicInteger();\n        private final AtomicInteger totalFilesToReceive = new AtomicInteger();\n\n        @Override\n        public void handleStreamEvent(StreamEvent event)\n        {\n            switch (event.eventType)\n            {\n                case STREAM_PREPARED:\n                    StreamEvent.SessionPreparedEvent prepared = (StreamEvent.SessionPreparedEvent) event;\n                    int currentTotal = totalFilesToReceive.addAndGet((int) prepared.session.getTotalFilesToReceive());\n                    ProgressEvent prepareProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), currentTotal, \"prepare with \" + prepared.session.peer + \" complete\");\n                    fireProgressEvent(\"bootstrap\", prepareProgress);\n                    break;\n\n                case FILE_PROGRESS:\n                    StreamEvent.ProgressEvent progress = (StreamEvent.ProgressEvent) event;\n                    if (progress.progress.isCompleted())\n                    {\n                        int received = receivedFiles.incrementAndGet();\n                        ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.PROGRESS, received, totalFilesToReceive.get(), \"received file \" + progress.progress.fileName);\n                        fireProgressEvent(\"bootstrap\", currentProgress);\n                    }\n                    break;\n\n                case STREAM_COMPLETE:\n                    StreamEvent.SessionCompleteEvent completeEvent = (StreamEvent.SessionCompleteEvent) event;\n                    ProgressEvent completeProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), totalFilesToReceive.get(), \"session with \" + completeEvent.peer + \" complete\");\n                    fireProgressEvent(\"bootstrap\", completeProgress);\n                    break;\n            }\n        }\n\n        @Override\n        public void onSuccess(StreamState streamState)\n        {\n            ProgressEventType type;\n            String message;\n\n            if (streamState.hasFailedSession())\n            {\n                type = ProgressEventType.ERROR;\n                message = \"Some bootstrap stream failed\";\n            }\n            else\n            {\n                type = ProgressEventType.SUCCESS;\n                message = \"Bootstrap streaming success\";\n            }\n            ProgressEvent currentProgress = new ProgressEvent(type, receivedFiles.get(), totalFilesToReceive.get(), message);\n            fireProgressEvent(\"bootstrap\", currentProgress);\n        }\n\n        @Override\n        public void onFailure(Throwable throwable)\n        {\n            ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.ERROR, receivedFiles.get(), totalFilesToReceive.get(), throwable.getMessage());\n            fireProgressEvent(\"bootstrap\", currentProgress);\n        }\n    });\n    return bootstrapStreamResult;\n}\n\npublic void rebuild(String sourceDc, String keyspace, String tokens, String specificSources)\n{\n    // check ongoing rebuild\n    if (!isRebuilding.compareAndSet(false, true))\n    {\n        throw new IllegalStateException(\"Node is still rebuilding. Check nodetool netstats.\");\n    }\n\n    // check the arguments\n    if (keyspace == null && tokens != null)\n    {\n        throw new IllegalArgumentException(\"Cannot specify tokens without keyspace.\");\n    }\n\n    logger.info(\"rebuild from dc: {}, {}, {}\", sourceDc == null ? \"(any dc)\" : sourceDc,\n                keyspace == null ? \"(All keyspaces)\" : keyspace,\n                tokens == null ? \"(All tokens)\" : tokens);\n\n    try\n    {\n        RangeStreamer streamer = new RangeStreamer(tokenMetadata,\n                                                   null,\n                                                   FBUtilities.getBroadcastAddressAndPort(),\n                                                   StreamOperation.REBUILD,\n                                                   useStrictConsistency && !replacing,\n                                                   DatabaseDescriptor.getEndpointSnitch(),\n                                                   streamStateStore,\n                                                   false,\n                                                   DatabaseDescriptor.getStreamingConnectionsPerHost());\n        if (sourceDc != null)\n            streamer.addSourceFilter(new RangeStreamer.SingleDatacenterFilter(DatabaseDescriptor.getEndpointSnitch(), sourceDc));\n\n        if (keyspace == null)\n        {\n            for (String keyspaceName : Schema.instance.getNonLocalStrategyKeyspaces())\n                streamer.addRanges(keyspaceName, getLocalReplicas(keyspaceName));\n        }\n        else if (tokens == null)\n        {\n            streamer.addRanges(keyspace, getLocalReplicas(keyspace));\n        }\n        else\n        {\n            Token.TokenFactory factory = getTokenFactory();\n            List<Range<Token>> ranges = new ArrayList<>();\n            Pattern rangePattern = Pattern.compile(\"\\\\(\\\\s*(-?\\\\w+)\\\\s*,\\\\s*(-?\\\\w+)\\\\s*\\\\]\");\n            try (Scanner tokenScanner = new Scanner(tokens))\n            {\n                while (tokenScanner.findInLine(rangePattern) != null)\n                {\n                    MatchResult range = tokenScanner.match();\n                    Token startToken = factory.fromString(range.group(1));\n                    Token endToken = factory.fromString(range.group(2));\n                    logger.info(\"adding range: ({},{}]\", startToken, endToken);\n                    ranges.add(new Range<>(startToken, endToken));\n                }\n                if (tokenScanner.hasNext())\n                    throw new IllegalArgumentException(\"Unexpected string: \" + tokenScanner.next());\n            }\n\n            // Ensure all specified ranges are actually ranges owned by this host\n            RangesAtEndpoint localReplicas = getLocalReplicas(keyspace);\n            RangesAtEndpoint.Builder streamRanges = new RangesAtEndpoint.Builder(FBUtilities.getBroadcastAddressAndPort(), ranges.size());\n            for (Range<Token> specifiedRange : ranges)\n            {\n                boolean foundParentRange = false;\n                for (Replica localReplica : localReplicas)\n                {\n                    if (localReplica.contains(specifiedRange))\n                    {\n                        streamRanges.add(localReplica.decorateSubrange(specifiedRange));\n                        foundParentRange = true;\n                        break;\n                    }\n                }\n                if (!foundParentRange)\n                {\n                    throw new IllegalArgumentException(String.format(\"The specified range %s is not a range that is owned by this node. Please ensure that all token ranges specified to be rebuilt belong to this node.\", specifiedRange.toString()));\n                }\n            }\n\n            if (specificSources != null)\n            {\n                String[] stringHosts = specificSources.split(\",\");\n                Set<InetAddressAndPort> sources = new HashSet<>(stringHosts.length);\n                for (String stringHost : stringHosts)\n                {\n                    try\n                    {\n                        InetAddressAndPort endpoint = InetAddressAndPort.getByName(stringHost);\n                        if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))\n                        {\n                            throw new IllegalArgumentException(\"This host was specified as a source for rebuilding. Sources for a rebuild can only be other nodes in the cluster.\");\n                        }\n                        sources.add(endpoint);\n                    }\n                    catch (UnknownHostException ex)\n                    {\n                        throw new IllegalArgumentException(\"Unknown host specified \" + stringHost, ex);\n                    }\n                }\n                streamer.addSourceFilter(new RangeStreamer.AllowedSourcesFilter(sources));\n            }\n\n            streamer.addRanges(keyspace, streamRanges.build());\n        }\n\n        StreamResultFuture resultFuture = streamer.fetchAsync();\n        // wait for result\n        resultFuture.get();\n    }\n    catch (InterruptedException e)\n    {\n        throw new RuntimeException(\"Interrupted while waiting on rebuild streaming\");\n    }\n    catch (ExecutionException e)\n    {\n        // This is used exclusively through JMX, so log the full trace but only throw a simple RTE\n        logger.error(\"Error while rebuilding node\", e.getCause());\n        throw new RuntimeException(\"Error while rebuilding node: \" + e.getCause().getMessage());\n    }\n    finally\n    {\n        // rebuild is done (successfully or not)\n        isRebuilding.set(false);\n    }\n}\n```"
        },
        {
            "sender": "Developer summary",
            "content": "Summary of the extracted code context: ### Summary of Configuration: `streaming_connections_per_host`\n\nThe `streaming_connections_per_host` configuration plays a critical role in the data streaming process within the system. It specifies the maximum number of concurrent streaming connections that can be established to other nodes in the cluster during bootstrap and rebuild operations.\n\n#### Purpose and Functionality\n- **Bootstrap Process**: During the bootstrap phase, the system initializes a `RangeStreamer` instance, which is responsible for streaming data from other nodes. The `streaming_connections_per_host` parameter is passed to the `RangeStreamer` constructor, determining how many simultaneous connections can be made to other nodes for data transfer. This allows for efficient data retrieval and ensures that the node can receive data from multiple sources concurrently.\n\n- **Rebuild Process**: Similarly, in the rebuild operation, the `streaming_connections_per_host` configuration is utilized to control the number of connections when a node is rebuilding its data from specified sources. This is crucial for ensuring that the node can effectively gather data from multiple replicas, which may be distributed across different data centers.\n\n#### Dependencies and Key Components\n- **RangeStreamer**: The primary component that utilizes this configuration. It manages the streaming of data between nodes and relies on the `streaming_connections_per_host` setting to optimize the number of concurrent connections.\n  \n- **DatabaseDescriptor**: This class is responsible for retrieving the `streaming_connections_per_host` value. It acts as a centralized configuration management component that provides various settings related to the database's operational parameters.\n\n- **StreamStateStore**: This is another component involved in the streaming process, as it maintains the state of the streaming operation, ensuring that data is streamed correctly and efficiently.\n\n#### Interaction with Other Parts of the System\n- The `streaming_connections_per_host` configuration interacts with the overall streaming mechanism by influencing how data is transferred during critical operations like bootstrapping and rebuilding. It ensures that the system can handle multiple connections effectively, which is essential for maintaining data consistency and availability across the cluster.\n\n- The configuration also indirectly affects the logging and monitoring mechanisms, as the number of connections can impact the volume of data being processed and the events being logged during streaming operations.\n\nIn summary, the `streaming_connections_per_host` configuration is essential for managing the concurrency of data streaming operations, directly influencing the efficiency and effectiveness of data transfers during node initialization and rebuilding processes."
        },
        {
            "sender": "performance agent sensitivity",
            "content": "{\"Role\": \"You are a Performance Sensitivity Agent responsible for determining if a configuration is performance-sensitive within a software system.\", \"Requirement\": \"Using developer-provided information as a secondary reference, analyze the configuration-related code to determine if it is performance-sensitive. Focus exclusively on configurations with substantial system-level performance impact due to time-intensive or memory-intensive operations. Only configurations that directly cause significant performance variations through extremely time-consuming or memory-heavy operations should be classified as performance-sensitive. Minor or moderate impacts should not be considered.\", \"Output Format\": \"Respond strictly in one of the following formats: 'The configuration is Performance Sensitive: reason' or 'The configuration is Performance Insensitive: reason'. No other response format is acceptable. Provide a concise yet clear and detailed reason for your classification.\", \"configuration_name\": \"streaming_connections_per_host\", \"code_context\": \"```java\\npublic ListenableFuture<StreamState> bootstrap(StreamStateStore stateStore, boolean useStrictConsistency)\\n{\\n    logger.trace(\\\"Beginning bootstrap process\\\");\\n\\n    RangeStreamer streamer = new RangeStreamer(tokenMetadata,\\n                                               tokens,\\n                                               address,\\n                                               StreamOperation.BOOTSTRAP,\\n                                               useStrictConsistency,\\n                                               DatabaseDescriptor.getEndpointSnitch(),\\n                                               stateStore,\\n                                               true,\\n                                               DatabaseDescriptor.getStreamingConnectionsPerHost());\\n    final List<String> nonLocalStrategyKeyspaces = Schema.instance.getNonLocalStrategyKeyspaces();\\n    if (nonLocalStrategyKeyspaces.isEmpty())\\n        logger.debug(\\\"Schema does not contain any non-local keyspaces to stream on bootstrap\\\");\\n    for (String keyspaceName : nonLocalStrategyKeyspaces)\\n    {\\n        AbstractReplicationStrategy strategy = Keyspace.open(keyspaceName).getReplicationStrategy();\\n        streamer.addRanges(keyspaceName, strategy.getPendingAddressRanges(tokenMetadata, tokens, address));\\n    }\\n\\n    StreamResultFuture bootstrapStreamResult = streamer.fetchAsync();\\n    bootstrapStreamResult.addEventListener(new StreamEventHandler()\\n    {\\n        private final AtomicInteger receivedFiles = new AtomicInteger();\\n        private final AtomicInteger totalFilesToReceive = new AtomicInteger();\\n\\n        @Override\\n        public void handleStreamEvent(StreamEvent event)\\n        {\\n            switch (event.eventType)\\n            {\\n                case STREAM_PREPARED:\\n                    StreamEvent.SessionPreparedEvent prepared = (StreamEvent.SessionPreparedEvent) event;\\n                    int currentTotal = totalFilesToReceive.addAndGet((int) prepared.session.getTotalFilesToReceive());\\n                    ProgressEvent prepareProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), currentTotal, \\\"prepare with \\\" + prepared.session.peer + \\\" complete\\\");\\n                    fireProgressEvent(\\\"bootstrap\\\", prepareProgress);\\n                    break;\\n\\n                case FILE_PROGRESS:\\n                    StreamEvent.ProgressEvent progress = (StreamEvent.ProgressEvent) event;\\n                    if (progress.progress.isCompleted())\\n                    {\\n                        int received = receivedFiles.incrementAndGet();\\n                        ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.PROGRESS, received, totalFilesToReceive.get(), \\\"received file \\\" + progress.progress.fileName);\\n                        fireProgressEvent(\\\"bootstrap\\\", currentProgress);\\n                    }\\n                    break;\\n\\n                case STREAM_COMPLETE:\\n                    StreamEvent.SessionCompleteEvent completeEvent = (StreamEvent.SessionCompleteEvent) event;\\n                    ProgressEvent completeProgress = new ProgressEvent(ProgressEventType.PROGRESS, receivedFiles.get(), totalFilesToReceive.get(), \\\"session with \\\" + completeEvent.peer + \\\" complete\\\");\\n                    fireProgressEvent(\\\"bootstrap\\\", completeProgress);\\n                    break;\\n            }\\n        }\\n\\n        @Override\\n        public void onSuccess(StreamState streamState)\\n        {\\n            ProgressEventType type;\\n            String message;\\n\\n            if (streamState.hasFailedSession())\\n            {\\n                type = ProgressEventType.ERROR;\\n                message = \\\"Some bootstrap stream failed\\\";\\n            }\\n            else\\n            {\\n                type = ProgressEventType.SUCCESS;\\n                message = \\\"Bootstrap streaming success\\\";\\n            }\\n            ProgressEvent currentProgress = new ProgressEvent(type, receivedFiles.get(), totalFilesToReceive.get(), message);\\n            fireProgressEvent(\\\"bootstrap\\\", currentProgress);\\n        }\\n\\n        @Override\\n        public void onFailure(Throwable throwable)\\n        {\\n            ProgressEvent currentProgress = new ProgressEvent(ProgressEventType.ERROR, receivedFiles.get(), totalFilesToReceive.get(), throwable.getMessage());\\n            fireProgressEvent(\\\"bootstrap\\\", currentProgress);\\n        }\\n    });\\n    return bootstrapStreamResult;\\n}\\n\\npublic void rebuild(String sourceDc, String keyspace, String tokens, String specificSources)\\n{\\n    // check ongoing rebuild\\n    if (!isRebuilding.compareAndSet(false, true))\\n    {\\n        throw new IllegalStateException(\\\"Node is still rebuilding. Check nodetool netstats.\\\");\\n    }\\n\\n    // check the arguments\\n    if (keyspace == null && tokens != null)\\n    {\\n        throw new IllegalArgumentException(\\\"Cannot specify tokens without keyspace.\\\");\\n    }\\n\\n    logger.info(\\\"rebuild from dc: {}, {}, {}\\\", sourceDc == null ? \\\"(any dc)\\\" : sourceDc,\\n                keyspace == null ? \\\"(All keyspaces)\\\" : keyspace,\\n                tokens == null ? \\\"(All tokens)\\\" : tokens);\\n\\n    try\\n    {\\n        RangeStreamer streamer = new RangeStreamer(tokenMetadata,\\n                                                   null,\\n                                                   FBUtilities.getBroadcastAddressAndPort(),\\n                                                   StreamOperation.REBUILD,\\n                                                   useStrictConsistency && !replacing,\\n                                                   DatabaseDescriptor.getEndpointSnitch(),\\n                                                   streamStateStore,\\n                                                   false,\\n                                                   DatabaseDescriptor.getStreamingConnectionsPerHost());\\n        if (sourceDc != null)\\n            streamer.addSourceFilter(new RangeStreamer.SingleDatacenterFilter(DatabaseDescriptor.getEndpointSnitch(), sourceDc));\\n\\n        if (keyspace == null)\\n        {\\n            for (String keyspaceName : Schema.instance.getNonLocalStrategyKeyspaces())\\n                streamer.addRanges(keyspaceName, getLocalReplicas(keyspaceName));\\n        }\\n        else if (tokens == null)\\n        {\\n            streamer.addRanges(keyspace, getLocalReplicas(keyspace));\\n        }\\n        else\\n        {\\n            Token.TokenFactory factory = getTokenFactory();\\n            List<Range<Token>> ranges = new ArrayList<>();\\n            Pattern rangePattern = Pattern.compile(\\\"\\\\\\\\(\\\\\\\\s*(-?\\\\\\\\w+)\\\\\\\\s*,\\\\\\\\s*(-?\\\\\\\\w+)\\\\\\\\s*\\\\\\\\]\\\");\\n            try (Scanner tokenScanner = new Scanner(tokens))\\n            {\\n                while (tokenScanner.findInLine(rangePattern) != null)\\n                {\\n                    MatchResult range = tokenScanner.match();\\n                    Token startToken = factory.fromString(range.group(1));\\n                    Token endToken = factory.fromString(range.group(2));\\n                    logger.info(\\\"adding range: ({},{}]\\\", startToken, endToken);\\n                    ranges.add(new Range<>(startToken, endToken));\\n                }\\n                if (tokenScanner.hasNext())\\n                    throw new IllegalArgumentException(\\\"Unexpected string: \\\" + tokenScanner.next());\\n            }\\n\\n            // Ensure all specified ranges are actually ranges owned by this host\\n            RangesAtEndpoint localReplicas = getLocalReplicas(keyspace);\\n            RangesAtEndpoint.Builder streamRanges = new RangesAtEndpoint.Builder(FBUtilities.getBroadcastAddressAndPort(), ranges.size());\\n            for (Range<Token> specifiedRange : ranges)\\n            {\\n                boolean foundParentRange = false;\\n                for (Replica localReplica : localReplicas)\\n                {\\n                    if (localReplica.contains(specifiedRange))\\n                    {\\n                        streamRanges.add(localReplica.decorateSubrange(specifiedRange));\\n                        foundParentRange = true;\\n                        break;\\n                    }\\n                }\\n                if (!foundParentRange)\\n                {\\n                    throw new IllegalArgumentException(String.format(\\\"The specified range %s is not a range that is owned by this node. Please ensure that all token ranges specified to be rebuilt belong to this node.\\\", specifiedRange.toString()));\\n                }\\n            }\\n\\n            if (specificSources != null)\\n            {\\n                String[] stringHosts = specificSources.split(\\\",\\\");\\n                Set<InetAddressAndPort> sources = new HashSet<>(stringHosts.length);\\n                for (String stringHost : stringHosts)\\n                {\\n                    try\\n                    {\\n                        InetAddressAndPort endpoint = InetAddressAndPort.getByName(stringHost);\\n                        if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))\\n                        {\\n                            throw new IllegalArgumentException(\\\"This host was specified as a source for rebuilding. Sources for a rebuild can only be other nodes in the cluster.\\\");\\n                        }\\n                        sources.add(endpoint);\\n                    }\\n                    catch (UnknownHostException ex)\\n                    {\\n                        throw new IllegalArgumentException(\\\"Unknown host specified \\\" + stringHost, ex);\\n                    }\\n                }\\n                streamer.addSourceFilter(new RangeStreamer.AllowedSourcesFilter(sources));\\n            }\\n\\n            streamer.addRanges(keyspace, streamRanges.build());\\n        }\\n\\n        StreamResultFuture resultFuture = streamer.fetchAsync();\\n        // wait for result\\n        resultFuture.get();\\n    }\\n    catch (InterruptedException e)\\n    {\\n        throw new RuntimeException(\\\"Interrupted while waiting on rebuild streaming\\\");\\n    }\\n    catch (ExecutionException e)\\n    {\\n        // This is used exclusively through JMX, so log the full trace but only throw a simple RTE\\n        logger.error(\\\"Error while rebuilding node\\\", e.getCause());\\n        throw new RuntimeException(\\\"Error while rebuilding node: \\\" + e.getCause().getMessage());\\n    }\\n    finally\\n    {\\n        // rebuild is done (successfully or not)\\n        isRebuilding.set(false);\\n    }\\n}\\n```\\n\\n--- Summary by Developer ---\\n### Summary of Configuration: `streaming_connections_per_host`\\n\\nThe `streaming_connections_per_host` configuration plays a critical role in the data streaming process within the system. It specifies the maximum number of concurrent streaming connections that can be established to other nodes in the cluster during bootstrap and rebuild operations.\\n\\n#### Purpose and Functionality\\n- **Bootstrap Process**: During the bootstrap phase, the system initializes a `RangeStreamer` instance, which is responsible for streaming data from other nodes. The `streaming_connections_per_host` parameter is passed to the `RangeStreamer` constructor, determining how many simultaneous connections can be made to other nodes for data transfer. This allows for efficient data retrieval and ensures that the node can receive data from multiple sources concurrently.\\n\\n- **Rebuild Process**: Similarly, in the rebuild operation, the `streaming_connections_per_host` configuration is utilized to control the number of connections when a node is rebuilding its data from specified sources. This is crucial for ensuring that the node can effectively gather data from multiple replicas, which may be distributed across different data centers.\\n\\n#### Dependencies and Key Components\\n- **RangeStreamer**: The primary component that utilizes this configuration. It manages the streaming of data between nodes and relies on the `streaming_connections_per_host` setting to optimize the number of concurrent connections.\\n  \\n- **DatabaseDescriptor**: This class is responsible for retrieving the `streaming_connections_per_host` value. It acts as a centralized configuration management component that provides various settings related to the database's operational parameters.\\n\\n- **StreamStateStore**: This is another component involved in the streaming process, as it maintains the state of the streaming operation, ensuring that data is streamed correctly and efficiently.\\n\\n#### Interaction with Other Parts of the System\\n- The `streaming_connections_per_host` configuration interacts with the overall streaming mechanism by influencing how data is transferred during critical operations like bootstrapping and rebuilding. It ensures that the system can handle multiple connections effectively, which is essential for maintaining data consistency and availability across the cluster.\\n\\n- The configuration also indirectly affects the logging and monitoring mechanisms, as the number of connections can impact the volume of data being processed and the events being logged during streaming operations.\\n\\nIn summary, the `streaming_connections_per_host` configuration is essential for managing the concurrency of data streaming operations, directly influencing the efficiency and effectiveness of data transfers during node initialization and rebuilding processes.\"}"
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: The `streaming_connections_per_host` setting directly impacts the number of concurrent streaming connections during critical operations such as bootstrap and rebuild. This can lead to significant variations in performance, as increasing the number of connections can drastically reduce the time required to transfer large volumes of data, while a lower number may result in bottlenecks and increased latency. Given that these operations are time-intensive and essential for maintaining data consistency and availability across the cluster, the configuration's influence on performance is substantial."
        }
    ]
}