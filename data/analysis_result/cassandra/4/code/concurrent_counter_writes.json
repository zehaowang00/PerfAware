{
    "performance_sensitive": "Yes",
    "config_name": "concurrent_counter_writes",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "public class CounterMutation implements IMutation\n{\n    public static final CounterMutationSerializer serializer = new CounterMutationSerializer();\n\n    private static final Striped<Lock> LOCKS = Striped.lazyWeakLock(DatabaseDescriptor.getConcurrentCounterWriters() * 1024);\n\n    private final Mutation mutation;\n    private final ConsistencyLevel consistency;\n\n    public CounterMutation(Mutation mutation, ConsistencyLevel consistency)\n    {\n        this.mutation = mutation;\n        this.consistency = consistency;\n    }\n\n    public String getKeyspaceName()\n    {\n        return mutation.getKeyspaceName();\n    }\n\n    public Collection<TableId> getTableIds()\n    {\n        return mutation.getTableIds();\n    }\n\n    public Collection<PartitionUpdate> getPartitionUpdates()\n    {\n        return mutation.getPartitionUpdates();\n    }\n\n    public void validateSize(int version, int overhead)\n    {\n        long totalSize = serializedSize(version) + overhead;\n        if(totalSize > MAX_MUTATION_SIZE)\n        {\n            throw new MutationExceededMaxSizeException(this, version, totalSize);\n        }\n    }\n\n    public Mutation getMutation()\n    {\n        return mutation;\n    }\n\n    public DecoratedKey key()\n    {\n        return mutation.key();\n    }\n\n    public ConsistencyLevel consistency()\n    {\n        return consistency;\n    }\n\n    /**\n     * Applies the counter mutation, returns the result Mutation (for replication to other nodes).\n     *\n     * 1. Grabs the striped cell-level locks in the proper order\n     * 2. Gets the current values of the counters-to-be-modified from the counter cache\n     * 3. Reads the rest of the current values (cache misses) from the CF\n     * 4. Writes the updated counter values\n     * 5. Updates the counter cache\n     * 6. Releases the lock(s)\n     *\n     * See CASSANDRA-4775 and CASSANDRA-6504 for further details.\n     *\n     * @return the applied resulting Mutation\n     */\n    public Mutation applyCounterMutation() throws WriteTimeoutException\n    {\n        Mutation.PartitionUpdateCollector resultBuilder = new Mutation.PartitionUpdateCollector(getKeyspaceName(), key());\n        Keyspace keyspace = Keyspace.open(getKeyspaceName());\n\n        List<Lock> locks = new ArrayList<>();\n        Tracing.trace(\"Acquiring counter locks\");\n        try\n        {\n            grabCounterLocks(keyspace, locks);\n            for (PartitionUpdate upd : getPartitionUpdates())\n                resultBuilder.add(processModifications(upd));\n\n            Mutation result = resultBuilder.build();\n            result.apply();\n            return result;\n        }\n        finally\n        {\n            for (Lock lock : locks)\n                lock.unlock();\n        }\n    }\n\n    public void apply()\n    {\n        applyCounterMutation();\n    }\n\n    private void grabCounterLocks(Keyspace keyspace, List<Lock> locks) throws WriteTimeoutException\n    {\n        long startTime = System.nanoTime();\n\n        AbstractReplicationStrategy replicationStrategy = keyspace.getReplicationStrategy();\n        for (Lock lock : LOCKS.bulkGet(getCounterLockKeys()))\n        {\n            long timeout = getTimeout(NANOSECONDS) - (System.nanoTime() - startTime);\n            try\n            {\n                if (!lock.tryLock(timeout, NANOSECONDS))\n                    throw new WriteTimeoutException(WriteType.COUNTER, consistency(), 0, consistency().blockFor(replicationStrategy));\n                locks.add(lock);\n            }\n            catch (InterruptedException e)\n            {\n                throw new WriteTimeoutException(WriteType.COUNTER, consistency(), 0, consistency().blockFor(replicationStrategy));\n            }\n        }\n    }\n\n    /**\n     * Returns a wrapper for the Striped#bulkGet() call (via Keyspace#counterLocksFor())\n     * Striped#bulkGet() depends on Object#hashCode(), so here we make sure that the cf id and the partition key\n     * all get to be part of the hashCode() calculation.\n     */\n    private Iterable<Object> getCounterLockKeys()\n    {\n        return Iterables.concat(Iterables.transform(getPartitionUpdates(), new Function<PartitionUpdate, Iterable<Object>>()\n        {\n            public Iterable<Object> apply(final PartitionUpdate update)\n            {\n                return Iterables.concat(Iterables.transform(update, new Function<Row, Iterable<Object>>()\n                {\n                    public Iterable<Object> apply(final Row row)\n                    {\n                        return Iterables.concat(Iterables.transform(row, new Function<ColumnData, Object>()\n                        {\n                            public Object apply(final ColumnData data)\n                            {\n                                return Objects.hashCode(update.metadata().id, key(), row.clustering(), data.column());\n                            }\n                        }));\n                    }\n                }));\n            }\n        }));\n    }\n\n    private PartitionUpdate processModifications(PartitionUpdate changes)\n    {\n        ColumnFamilyStore cfs = Keyspace.open(getKeyspaceName()).getColumnFamilyStore(changes.metadata().id);\n\n        List<PartitionUpdate.CounterMark> marks = changes.collectCounterMarks();\n\n        if (CacheService.instance.counterCache.getCapacity() != 0)\n        {\n            Tracing.trace(\"Fetching {} counter values from cache\", marks.size());\n            updateWithCurrentValuesFromCache(marks, cfs);\n            if (marks.isEmpty())\n                return changes;\n        }\n\n        Tracing.trace(\"Reading {} counter values from the CF\", marks.size());\n        updateWithCurrentValuesFromCFS(marks, cfs);\n\n        // What's remain is new counters\n        for (PartitionUpdate.CounterMark mark : marks)\n            updateWithCurrentValue(mark, ClockAndCount.BLANK, cfs);\n\n        return changes;\n    }\n\n    private void updateWithCurrentValue(PartitionUpdate.CounterMark mark, ClockAndCount currentValue, ColumnFamilyStore cfs)\n    {\n        long clock = Math.max(FBUtilities.timestampMicros(), currentValue.clock + 1L);\n        long count = currentValue.count + CounterContext.instance().total(mark.value(), ByteBufferAccessor.instance);\n\n        mark.setValue(CounterContext.instance().createGlobal(CounterId.getLocalId(), clock, count));\n\n        // Cache the newly updated value\n        cfs.putCachedCounter(key().getKey(), mark.clustering(), mark.column(), mark.path(), ClockAndCount.create(clock, count));\n    }\n\n    // Returns the count of cache misses.\n    private void updateWithCurrentValuesFromCache(List<PartitionUpdate.CounterMark> marks, ColumnFamilyStore cfs)\n    {\n        Iterator<PartitionUpdate.CounterMark> iter = marks.iterator();\n        while (iter.hasNext())\n        {\n            PartitionUpdate.CounterMark mark = iter.next();\n            ClockAndCount cached = cfs.getCachedCounter(key().getKey(), mark.clustering(), mark.column(), mark.path());\n            if (cached != null)\n            {\n                updateWithCurrentValue(mark, cached, cfs);\n                iter.remove();\n            }\n        }\n    }\n\n    // Reads the missing current values from the CFS.\n    private void updateWithCurrentValuesFromCFS(List<PartitionUpdate.CounterMark> marks, ColumnFamilyStore cfs)\n    {\n        ColumnFilter.Builder builder = ColumnFilter.selectionBuilder();\n        BTreeSet.Builder<Clustering<?>> names = BTreeSet.builder(cfs.metadata().comparator);\n        for (PartitionUpdate.CounterMark mark : marks)\n        {\n            if (mark.clustering() != Clustering.STATIC_CLUSTERING)\n                names.add(mark.clustering());\n            if (mark.path() == null)\n                builder.add(mark.column());\n            else\n                builder.select(mark.column(), mark.path());\n        }\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        ClusteringIndexNamesFilter filter = new ClusteringIndexNamesFilter(names.build(), false);\n        SinglePartitionReadCommand cmd = SinglePartitionReadCommand.create(cfs.metadata(), nowInSec, key(), builder.build(), filter);\n        PeekingIterator<PartitionUpdate.CounterMark> markIter = Iterators.peekingIterator(marks.iterator());\n        try (ReadExecutionController controller = cmd.executionController();\n             RowIterator partition = UnfilteredRowIterators.filter(cmd.queryMemtableAndDisk(cfs, controller), nowInSec))\n        {\n            updateForRow(markIter, partition.staticRow(), cfs);\n\n            while (partition.hasNext())\n            {\n                if (!markIter.hasNext())\n                    return;\n\n                updateForRow(markIter, partition.next(), cfs);\n            }\n        }\n    }\n\n    private int compare(Clustering<?> c1, Clustering<?> c2, ColumnFamilyStore cfs)\n    {\n        if (c1 == Clustering.STATIC_CLUSTERING)\n            return c2 == Clustering.STATIC_CLUSTERING ? 0 : -1;\n        if (c2 == Clustering.STATIC_CLUSTERING)\n            return 1;\n\n        return cfs.getComparator().compare(c1, c2);\n    }\n\n    private void updateForRow(PeekingIterator<PartitionUpdate.CounterMark> markIter, Row row, ColumnFamilyStore cfs)\n    {\n        int cmp = 0;\n        // If the mark is before the row, we have no value for this mark, just consume it\n        while (markIter.hasNext() && (cmp = compare(markIter.peek().clustering(), row.clustering(), cfs)) < 0)\n            markIter.next();\n\n        if (!markIter.hasNext())\n            return;\n\n        while (cmp == 0)\n        {\n            PartitionUpdate.CounterMark mark = markIter.next();\n            Cell<?> cell = mark.path() == null ? row.getCell(mark.column()) : row.getCell(mark.column(), mark.path());\n            if (cell != null)\n            {\n                updateWithCurrentValue(mark, CounterContext.instance().getLocalClockAndCount(cell.buffer()), cfs);\n                markIter.remove();\n            }\n            if (!markIter.hasNext())\n                return;\n\n            cmp = compare(markIter.peek().clustering(), row.clustering(), cfs);\n        }\n    }\n\n    public long getTimeout(TimeUnit unit)\n    {\n        return DatabaseDescriptor.getCounterWriteRpcTimeout(unit);\n    }\n\n    private int serializedSize30;\n    private int serializedSize3014;\n    private int serializedSize40;\n\n    public int serializedSize(int version)\n    {\n        switch (version)\n        {\n            case VERSION_30:\n                if (serializedSize30 == 0)\n                    serializedSize30 = (int) serializer.serializedSize(this, VERSION_30);\n                return serializedSize30;\n            case VERSION_3014:\n                if (serializedSize3014 == 0)\n                    serializedSize3014 = (int) serializer.serializedSize(this, VERSION_3014);\n                return serializedSize3014;\n            case VERSION_40:\n                if (serializedSize40 == 0)\n                    serializedSize40 = (int) serializer.serializedSize(this, VERSION_40);\n                return serializedSize40;\n            default:\n                throw new IllegalStateException(\"Unknown serialization version: \" + version);\n        }\n    }\n\n    @Override\n    public String toString()\n    {\n        return toString(false);\n    }\n\n    public String toString(boolean shallow)\n    {\n        return String.format(\"CounterMutation(%s, %s)\", mutation.toString(shallow), consistency);\n    }\n\n    public static class CounterMutationSerializer implements IVersionedSerializer<CounterMutation>\n    {\n        public void serialize(CounterMutation cm, DataOutputPlus out, int version) throws IOException\n        {\n            Mutation.serializer.serialize(cm.mutation, out, version);\n            out.writeUTF(cm.consistency.name());\n        }\n\n        public CounterMutation deserialize(DataInputPlus in, int version) throws IOException\n        {\n            Mutation m = Mutation.serializer.deserialize(in, version);\n            ConsistencyLevel consistency = Enum.valueOf(ConsistencyLevel.class, in.readUTF());\n            return new CounterMutation(m, consistency);\n        }\n\n        public long serializedSize(CounterMutation cm, int version)\n        {\n            return cm.mutation.serializedSize(version)\n                 + TypeSizes.sizeof(cm.consistency.name());\n        }\n    }\n}\n"
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: The `concurrent_counter_writes` configuration directly influences the number of striped locks created, which impacts the locking mechanism used during counter mutations. This can lead to significant contention and delays in write operations, especially under high concurrency scenarios. The performance implications arise from the potential for increased lock contention and the time taken to acquire these locks, which can severely affect the system's throughput and latency during counter updates. Thus, any misconfiguration or inadequate sizing of this parameter can lead to substantial performance degradation in a system that heavily relies on counter mutations."
        }
    ]
}