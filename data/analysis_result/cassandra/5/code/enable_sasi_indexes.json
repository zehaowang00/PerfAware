{
    "performance_sensitive": "Yes",
    "config_name": "enable_sasi_indexes",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "public Keyspaces apply(Keyspaces schema)\n    {\n        attrs.validate();\n\n        if (attrs.isCustom && attrs.customClass.equals(SASIIndex.class.getName()) && !DatabaseDescriptor.getEnableSASIIndexes())\n            throw new InvalidRequestException(\"SASI indexes are disabled. Enable in cassandra.yaml to use.\");\n\n        KeyspaceMetadata keyspace = schema.getNullable(keyspaceName);\n        if (null == keyspace)\n            throw ire(\"Keyspace '%s' doesn't exist\", keyspaceName);\n\n        TableMetadata table = keyspace.getTableOrViewNullable(tableName);\n        if (null == table)\n            throw ire(\"Table '%s' doesn't exist\", tableName);\n\n        if (null != indexName && keyspace.hasIndex(indexName))\n        {\n            if (ifNotExists)\n                return schema;\n\n            throw ire(\"Index '%s' already exists\", indexName);\n        }\n\n        if (table.isCounter())\n            throw ire(\"Secondary indexes on counter tables aren't supported\");\n\n        if (table.isView())\n            throw ire(\"Secondary indexes on materialized views aren't supported\");\n\n        if (Keyspace.open(table.keyspace).getReplicationStrategy().hasTransientReplicas())\n            throw new InvalidRequestException(\"Secondary indexes are not supported on transiently replicated keyspaces\");\n\n        List<IndexTarget> indexTargets = Lists.newArrayList(transform(rawIndexTargets, t -> t.prepare(table)));\n\n        if (indexTargets.isEmpty() && !attrs.isCustom)\n            throw ire(\"Only CUSTOM indexes can be created without specifying a target column\");\n\n        if (indexTargets.size() > 1)\n        {\n            if (!attrs.isCustom)\n                throw ire(\"Only CUSTOM indexes support multiple columns\");\n\n            Set<ColumnIdentifier> columns = new HashSet<>();\n            for (IndexTarget target : indexTargets)\n                if (!columns.add(target.column))\n                    throw ire(\"Duplicate column '%s' in index target list\", target.column);\n        }\n\n        indexTargets.forEach(t -> validateIndexTarget(table, t));\n\n        String name = null == indexName ? generateIndexName(keyspace, indexTargets) : indexName;\n\n        IndexMetadata.Kind kind = attrs.isCustom ? IndexMetadata.Kind.CUSTOM : IndexMetadata.Kind.COMPOSITES;\n\n        Map<String, String> options = attrs.isCustom ? attrs.getOptions() : Collections.emptyMap();\n\n        IndexMetadata index = IndexMetadata.fromIndexTargets(indexTargets, name, kind, options);\n\n        // check to disallow creation of an index which duplicates an existing one in all but name\n        IndexMetadata equalIndex = tryFind(table.indexes, i -> i.equalsWithoutName(index)).orNull();\n        if (null != equalIndex)\n        {\n            if (ifNotExists)\n                return schema;\n\n            throw ire(\"Index %s is a duplicate of existing index %s\", index.name, equalIndex.name);\n        }\n\n        TableMetadata newTable = table.withSwapped(table.indexes.with(index));\n        newTable.validate();\n\n        return schema.withAddedOrUpdated(keyspace.withSwapped(keyspace.tables.withSwapped(newTable)));\n    }\n\n    "
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: enabling SASI indexes can lead to significant performance variations in the database operations. SASI indexes are designed to optimize queries on large datasets, and their performance impact can be substantial, particularly in terms of query execution time and memory usage. If SASI indexes are disabled, it can lead to inefficient query plans and increased resource consumption, making the configuration critical for maintaining optimal performance in the system."
        }
    ]
}