{
    "performance_sensitive": "No",
    "config_name": "diagnostic_events_enabled",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "/**\n     * Makes provided event available to all subscribers.\n     */\npublic void publish(DiagnosticEvent event)\n    {\n        if (!DatabaseDescriptor.diagnosticEventsEnabled())\n            return;\n\n        logger.trace(\"Publishing: {}={}\", event.getClass().getName(), event.toMap());\n\n        // event class + type\n        ImmutableMultimap<Enum<?>, Consumer<DiagnosticEvent>> consumersByType = subscribersByClassAndType.get(event.getClass());\n        if (consumersByType != null)\n        {\n            ImmutableCollection<Consumer<DiagnosticEvent>> consumers = consumersByType.get(event.getType());\n            if (consumers != null)\n            {\n                for (Consumer<DiagnosticEvent> consumer : consumers)\n                    consumer.accept(event);\n            }\n        }\n\n        // event class\n        Set<Consumer<DiagnosticEvent>> consumersByEvents = subscribersByClass.get(event.getClass());\n        if (consumersByEvents != null)\n        {\n            for (Consumer<DiagnosticEvent> consumer : consumersByEvents)\n                consumer.accept(event);\n        }\n\n        // all events\n        for (Consumer<DiagnosticEvent> consumer : subscribersAll)\n            consumer.accept(event);\n    }\n\n    \n/**\n     * Indicates if events are enabled for specified event class based on {@link DatabaseDescriptor#diagnosticEventsEnabled()}\n     * and {@link #hasSubscribers(Class)}.\n     * @param event DiagnosticEvent class implementation\n     */\npublic <E extends DiagnosticEvent> boolean isEnabled(Class<E> event)\n    {\n        return DatabaseDescriptor.diagnosticEventsEnabled() && hasSubscribers(event);\n    }\n\n    \n/**\n     * Indicates if events are enabled for specified event class based on {@link DatabaseDescriptor#diagnosticEventsEnabled()}\n     * and {@link #hasSubscribers(Class, Enum)}.\n     * @param event DiagnosticEvent class implementation\n     * @param eventType Subscribed event type matched against {@link DiagnosticEvent#getType()}\n     */\npublic <E extends DiagnosticEvent, T extends Enum<T>> boolean isEnabled(Class<E> event, T eventType)\n    {\n        return DatabaseDescriptor.diagnosticEventsEnabled() && hasSubscribers(event, eventType);\n    }\n\n    \n/**\n     * Indicates if events are enabled for specified event class based on {@link DatabaseDescriptor#diagnosticEventsEnabled()}\n     * and {@link #hasSubscribers(Class, Enum)}.\n     * @param event DiagnosticEvent class implementation\n     * @param eventType Subscribed event type matched against {@link DiagnosticEvent#getType()}\n     */\npublic <E extends DiagnosticEvent, T extends Enum<T>> boolean isEnabled(Class<E> event, T eventType)\n    {\n        return DatabaseDescriptor.diagnosticEventsEnabled() && hasSubscribers(event, eventType);\n    }\n\n    \npublic boolean isDiagnosticsEnabled()\n    {\n        return DatabaseDescriptor.diagnosticEventsEnabled();\n    }\n\n    "
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Insensitive: The check for `DatabaseDescriptor.diagnosticEventsEnabled()` is a simple boolean condition that does not involve any time-intensive or memory-intensive operations. It merely determines whether event publishing should proceed, without causing significant performance variations. The operations that follow depend on the presence of subscribers, which may vary in complexity, but the configuration itself does not directly lead to substantial system-level performance impacts."
        }
    ]
}