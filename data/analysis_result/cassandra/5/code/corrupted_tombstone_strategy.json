{
    "performance_sensitive": "Yes",
    "config_name": "corrupted_tombstone_strategy",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "public static void maybeValidateUnfiltered(Unfiltered unfiltered, TableMetadata metadata, DecoratedKey key, SSTableReader sstable)\n    {\n        Config.CorruptedTombstoneStrategy strat = DatabaseDescriptor.getCorruptedTombstoneStrategy();\n        if (strat != Config.CorruptedTombstoneStrategy.disabled && unfiltered != null && !unfiltered.isEmpty())\n        {\n            boolean hasInvalidDeletions = false;\n            try\n            {\n                hasInvalidDeletions = unfiltered.hasInvalidDeletions();\n            }\n            catch (Throwable t) // make sure no unknown exceptions fail the read/compaction\n            {\n                nospam1m.error(\"Could not check if Unfiltered in {} had any invalid deletions\", sstable, t);\n            }\n\n            if (hasInvalidDeletions)\n            {\n                String content;\n                try\n                {\n                    content = unfiltered.toString(metadata, true);\n                }\n                catch (Throwable t)\n                {\n                    content = \"Could not get string representation: \" + t.getMessage();\n                }\n                handleInvalid(metadata, key, sstable, content);\n            }\n        }\n    }\n\n    \npublic static void handleInvalid(TableMetadata metadata, DecoratedKey key, SSTableReader sstable, String invalidContent)\n    {\n        Config.CorruptedTombstoneStrategy strat = DatabaseDescriptor.getCorruptedTombstoneStrategy();\n        String keyString;\n        try\n        {\n            keyString = metadata.partitionKeyType.getString(key.getKey());\n        }\n        catch (Throwable t)\n        {\n            keyString = \"[corrupt token=\"+key.getToken()+\"]\";\n        }\n\n        if (strat == Config.CorruptedTombstoneStrategy.exception)\n        {\n            String msg = String.format(\"Key %s in %s.%s is invalid in %s: %s\",\n                                       keyString,\n                                       metadata.keyspace,\n                                       metadata.name,\n                                       sstable,\n                                       invalidContent);\n            // we mark suspect to make sure this sstable is not included in future compactions - it would just keep\n            // throwing exceptions\n            sstable.markSuspect();\n            throw new CorruptSSTableException(new MarshalException(msg), sstable.getFilename());\n        }\n        else if (strat == Config.CorruptedTombstoneStrategy.warn)\n        {\n            String msgTemplate = String.format(\"Key {} in %s.%s is invalid in %s: {}\",\n                                               metadata.keyspace,\n                                               metadata.name,\n                                               sstable);\n            nospam1m.warn(msgTemplate, keyString, invalidContent);\n        }\n    }\n}\npublic String getCorruptedTombstoneStrategy()\n    {\n        return DatabaseDescriptor.getCorruptedTombstoneStrategy().toString();\n    }\n\n    "
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: The `corrupted_tombstone_strategy` directly influences how the system handles invalid deletions in SSTables, which can lead to time-intensive operations during read and compaction processes. If the strategy is set to \"exception,\" it results in throwing exceptions and marking SSTables as suspect, potentially causing significant delays and resource consumption during data processing. Additionally, the handling of invalid content and the potential for repeated checks on `unfiltered` objects can lead to increased memory usage and processing time, especially if the `unfiltered` data is large or complex."
        }
    ]
}