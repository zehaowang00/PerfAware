{
    "performance_sensitive": "Yes",
    "config_name": "iosCreateImagesetFolders",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "@Override\n    public File createMainSubFolder(File destinationFolder, String targetImageFileName, Arguments arguments) {\n        if (arguments.platform.size() > 1) {\n            destinationFolder = MiscUtil.createAndCheckFolder(new File(destinationFolder, IOS_FOLDER_NAME).getAbsolutePath(), arguments.dryRun);\n        }\n        if (arguments.iosCreateImagesetFolders) {\n            return MiscUtil.createAndCheckFolder(new File(destinationFolder, targetImageFileName + \".imageset\").getAbsolutePath(), arguments.dryRun);\n        } else {\n            return MiscUtil.createAndCheckFolder(new File(destinationFolder, ROOT_FOLDER).getAbsolutePath(), arguments.dryRun);\n        }\n    }\n\n    \n@Override\n    public void onPreExecute(File dstFolder, String targetFileName, List<PostfixDescriptor> densityDescriptions, ImageType imageType, Arguments arguments) throws Exception {\n        if (!arguments.dryRun && arguments.iosCreateImagesetFolders) {\n            writeContentsJson(dstFolder, targetFileName, densityDescriptions, Arguments.getOutCompressionForType(arguments.outputCompressionMode, imageType));\n        }\n    }\n\n    \n@Override\n    public void clean(Arguments arguments) {\n        if (arguments.platform.size() == 1) {\n            if (arguments.iosCreateImagesetFolders) {\n                for (File filesToProcess : arguments.filesToProcess) {\n                    MiscUtil.deleteFolder(new File(arguments.dst, MiscUtil.getFileNameWithoutExtension(filesToProcess) + \".imageset\"));\n                }\n            } else {\n                MiscUtil.deleteFolder(new File(arguments.dst, ROOT_FOLDER));\n            }\n        } else {\n            MiscUtil.deleteFolder(new File(arguments.dst, IOS_FOLDER_NAME));\n        }\n    }\n}\nprivate void loadPrefs() {\n        Arguments args = preferenceStore.get();\n        if (args != null) {\n            textFieldSrcPath.setText(args.src != null ? args.src.getAbsolutePath() : \"\");\n            textFieldDstPath.setText(args.dst != null ? args.dst.getAbsolutePath() : \"\");\n\n            scaleSlider.setValue(Arguments.DEFAULT_SCALE);\n            textFieldDp.setText(String.valueOf((int) args.scale));\n\n            if (args.scaleMode == EScaleMode.FACTOR) {\n                rbFactor.setSelected(true);\n                scaleSlider.setValue(args.scale);\n                textFieldDp.setText(\"\");\n            } else if (args.scaleMode == EScaleMode.DP_WIDTH) {\n                rbDpWidth.setSelected(true);\n            } else if (args.scaleMode == EScaleMode.DP_HEIGHT) {\n                rbDpHeight.setSelected(true);\n            }\n\n            setPlatformToogles(args.platform);\n            choiceCompression.getSelectionModel().select(args.outputCompressionMode);\n            choiceCompressionQuality.getSelectionModel().select(toJpgQ(args.compressionQuality));\n            choiceRounding.getSelectionModel().select(args.roundingHandler);\n            choiceThreads.getSelectionModel().select(Integer.valueOf(args.threadCount));\n            choiceDownScale.getSelectionModel().select(args.downScalingAlgorithm);\n            choiceUpScale.getSelectionModel().select(args.upScalingAlgorithm);\n\n            cbSkipExisting.setSelected(args.skipExistingFiles);\n            cbSkipUpscaling.setSelected(args.skipUpscaling);\n            cbAndroidIncludeLdpiTvdpi.setSelected(args.includeAndroidLdpiTvdpi);\n            cbAntiAliasing.setSelected(args.enableAntiAliasing);\n            cbMipmapInsteadDrawable.setSelected(args.createMipMapInsteadOfDrawableDir);\n            cbHaltOnError.setSelected(args.haltOnError);\n            cbDryRun.setSelected(args.dryRun);\n            cbEnablePngCrush.setSelected(args.enablePngCrush);\n            cbPostConvertWebp.setSelected(args.postConvertWebp);\n            cbEnableMozJpeg.setSelected(args.enableMozJpeg);\n            cbKeepUnoptimized.setSelected(args.keepUnoptimizedFilesPostProcessor);\n            cbIosCreateImageset.setSelected(args.iosCreateImagesetFolders);\n            cbCleanBeforeConvert.setSelected(args.clearDirBeforeConvert);\n            rbOptAdvanced.setSelected(args.guiAdvancedOptions);\n            rbOptSimple.setSelected(!args.guiAdvancedOptions);\n\n        }\n    }\n\n    "
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: The `iosCreateImagesetFolders` configuration directly influences the creation of image set folders, which can involve significant file system operations such as creating multiple directories and potentially writing large amounts of data if many images are processed. If enabled, this configuration can lead to time-intensive operations, especially when handling numerous files, which could substantially impact overall system performance."
        }
    ]
}