{
    "performance_sensitive": "No",
    "config_name": "GET_SORTED_SETTINGS",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "private void settings(SessionLocal session, ArrayList<Row> rows) {\n        for (Setting s : database.getAllSettings()) {\n            String value = s.getStringValue();\n            if (value == null) {\n                value = Integer.toString(s.getIntValue());\n            }\n            add(session, rows, identifier(s.getName()), value);\n        }\n        add(session, rows, \"info.BUILD_ID\", \"\" + Constants.BUILD_ID);\n        add(session, rows, \"info.VERSION_MAJOR\", \"\" + Constants.VERSION_MAJOR);\n        add(session, rows, \"info.VERSION_MINOR\", \"\" + Constants.VERSION_MINOR);\n        add(session, rows, \"info.VERSION\", Constants.FULL_VERSION);\n        if (session.getUser().isAdmin()) {\n            String[] settings = {\n                    \"java.runtime.version\", \"java.vm.name\",\n                    \"java.vendor\", \"os.name\", \"os.arch\", \"os.version\",\n                    \"sun.os.patch.level\", \"file.separator\",\n                    \"path.separator\", \"line.separator\", \"user.country\",\n                    \"user.language\", \"user.variant\", \"file.encoding\" };\n            for (String s : settings) {\n                add(session, rows, \"property.\" + s, Utils.getProperty(s, \"\"));\n            }\n        }\n        add(session, rows, \"DEFAULT_NULL_ORDERING\", database.getDefaultNullOrdering().name());\n        add(session, rows, \"EXCLUSIVE\", database.getExclusiveSession() == null ? \"FALSE\" : \"TRUE\");\n        add(session, rows, \"MODE\", database.getMode().getName());\n        add(session, rows, \"QUERY_TIMEOUT\", Integer.toString(session.getQueryTimeout()));\n        add(session, rows, \"TIME ZONE\", session.currentTimeZone().getId());\n        add(session, rows, \"TRUNCATE_LARGE_LENGTH\", session.isTruncateLargeLength() ? \"TRUE\" : \"FALSE\");\n        add(session, rows, \"VARIABLE_BINARY\", session.isVariableBinary() ? \"TRUE\" : \"FALSE\");\n        add(session, rows, \"OLD_INFORMATION_SCHEMA\", session.isOldInformationSchema() ? \"TRUE\" : \"FALSE\");\n        BitSet nonKeywords = session.getNonKeywords();\n        if (nonKeywords != null) {\n            add(session, rows, \"NON_KEYWORDS\", Parser.formatNonKeywords(nonKeywords));\n        }\n        add(session, rows, \"RETENTION_TIME\", Integer.toString(database.getRetentionTime()));\n        // database settings\n        for (Map.Entry<String, String> entry : database.getSettings().getSortedSettings()) {\n            add(session, rows, entry.getKey(), entry.getValue());\n        }\n        Store store = database.getStore();\n        MVStore mvStore = store.getMvStore();\n        FileStore fs = mvStore.getFileStore();\n        if (fs != null) {\n            add(session, rows,\n                    \"info.FILE_WRITE\", Long.toString(fs.getWriteCount()));\n            add(session, rows,\n                    \"info.FILE_WRITE_BYTES\", Long.toString(fs.getWriteBytes()));\n            add(session, rows,\n                    \"info.FILE_READ\", Long.toString(fs.getReadCount()));\n            add(session, rows,\n                    \"info.FILE_READ_BYTES\", Long.toString(fs.getReadBytes()));\n            add(session, rows,\n                    \"info.UPDATE_FAILURE_PERCENT\",\n                    String.format(Locale.ENGLISH, \"%.2f%%\", 100 * mvStore.getUpdateFailureRatio()));\n            add(session, rows,\n                    \"info.FILL_RATE\", Integer.toString(mvStore.getFillRate()));\n            add(session, rows,\n                    \"info.CHUNKS_FILL_RATE\", Integer.toString(mvStore.getChunksFillRate()));\n            add(session, rows,\n                    \"info.CHUNKS_FILL_RATE_RW\", Integer.toString(mvStore.getRewritableChunksFillRate()));\n            try {\n                add(session, rows,\n                        \"info.FILE_SIZE\", Long.toString(fs.getFile().size()));\n            } catch (IOException ignore) {/**/}\n            add(session, rows,\n                    \"info.CHUNK_COUNT\", Long.toString(mvStore.getChunkCount()));\n            add(session, rows,\n                    \"info.PAGE_COUNT\", Long.toString(mvStore.getPageCount()));\n            add(session, rows,\n                    \"info.PAGE_COUNT_LIVE\", Long.toString(mvStore.getLivePageCount()));\n            add(session, rows,\n                    \"info.PAGE_SIZE\", Integer.toString(mvStore.getPageSplitSize()));\n            add(session, rows,\n                    \"info.CACHE_MAX_SIZE\", Integer.toString(mvStore.getCacheSize()));\n            add(session, rows,\n                    \"info.CACHE_SIZE\", Integer.toString(mvStore.getCacheSizeUsed()));\n            add(session, rows,\n                    \"info.CACHE_HIT_RATIO\", Integer.toString(mvStore.getCacheHitRatio()));\n            add(session, rows, \"info.TOC_CACHE_HIT_RATIO\",\n                    Integer.toString(mvStore.getTocCacheHitRatio()));\n            add(session, rows,\n                    \"info.LEAF_RATIO\", Integer.toString(mvStore.getLeafRatio()));\n        }\n    }\n\n    \n@Override\n    public ArrayList<Row> generateRows(SessionLocal session, SearchRow first, SearchRow last) {\n        Value indexFrom = null, indexTo = null;\n\n        if (indexColumn >= 0) {\n            if (first != null) {\n                indexFrom = first.getValue(indexColumn);\n            }\n            if (last != null) {\n                indexTo = last.getValue(indexColumn);\n            }\n        }\n\n        ArrayList<Row> rows = Utils.newSmallArrayList();\n        String catalog = database.getShortName();\n        boolean admin = session.getUser().isAdmin();\n        switch (type) {\n        case TABLES: {\n            for (Table table : getAllTables(session)) {\n                String tableName = table.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                if (hideTable(table, session)) {\n                    continue;\n                }\n                String storageType;\n                if (table.isTemporary()) {\n                    if (table.isGlobalTemporary()) {\n                        storageType = \"GLOBAL TEMPORARY\";\n                    } else {\n                        storageType = \"LOCAL TEMPORARY\";\n                    }\n                } else {\n                    storageType = table.isPersistIndexes() ?\n                            \"CACHED\" : \"MEMORY\";\n                }\n                String sql = table.getCreateSQL();\n                if (!admin) {\n                    if (sql != null && sql.contains(DbException.HIDE_SQL)) {\n                        // hide the password of linked tables\n                        sql = \"-\";\n                    }\n                }\n                add(session,\n                        rows,\n                        // TABLE_CATALOG\n                        catalog,\n                        // TABLE_SCHEMA\n                        table.getSchema().getName(),\n                        // TABLE_NAME\n                        tableName,\n                        // TABLE_TYPE\n                        table.getTableType().toString(),\n                        // STORAGE_TYPE\n                        storageType,\n                        // SQL\n                        sql,\n                        // REMARKS\n                        replaceNullWithEmpty(table.getComment()),\n                        // LAST_MODIFICATION\n                        ValueBigint.get(table.getMaxDataModificationId()),\n                        // ID\n                        ValueInteger.get(table.getId()),\n                        // TYPE_NAME\n                        null,\n                        // TABLE_CLASS\n                        table.getClass().getName(),\n                        // ROW_COUNT_ESTIMATE\n                        ValueBigint.get(table.getRowCountApproximation(session))\n                );\n            }\n            break;\n        }\n        case COLUMNS: {\n            // reduce the number of tables to scan - makes some metadata queries\n            // 10x faster\n            final ArrayList<Table> tablesToList;\n            if (indexFrom != null && indexFrom.equals(indexTo)) {\n                String tableName = indexFrom.getString();\n                if (tableName == null) {\n                    break;\n                }\n                tablesToList = getTablesByName(session, tableName);\n            } else {\n                tablesToList = getAllTables(session);\n            }\n            for (Table table : tablesToList) {\n                String tableName = table.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                if (hideTable(table, session)) {\n                    continue;\n                }\n                Column[] cols = table.getColumns();\n                String collation = database.getCompareMode().getName();\n                for (int j = 0; j < cols.length; j++) {\n                    Column c = cols[j];\n                    Domain domain = c.getDomain();\n                    TypeInfo typeInfo = c.getType();\n                    ValueInteger precision = ValueInteger.get(MathUtils.convertLongToInt(typeInfo.getPrecision()));\n                    ValueInteger scale = ValueInteger.get(typeInfo.getScale());\n                    Sequence sequence = c.getSequence();\n                    boolean hasDateTimePrecision;\n                    int type = typeInfo.getValueType();\n                    switch (type) {\n                    case Value.TIME:\n                    case Value.TIME_TZ:\n                    case Value.DATE:\n                    case Value.TIMESTAMP:\n                    case Value.TIMESTAMP_TZ:\n                    case Value.INTERVAL_SECOND:\n                    case Value.INTERVAL_DAY_TO_SECOND:\n                    case Value.INTERVAL_HOUR_TO_SECOND:\n                    case Value.INTERVAL_MINUTE_TO_SECOND:\n                        hasDateTimePrecision = true;\n                        break;\n                    default:\n                        hasDateTimePrecision = false;\n                    }\n                    boolean isGenerated = c.isGenerated();\n                    boolean isInterval = DataType.isIntervalType(type);\n                    String createSQLWithoutName = c.getCreateSQLWithoutName();\n                    add(session,\n                            rows,\n                            // TABLE_CATALOG\n                            catalog,\n                            // TABLE_SCHEMA\n                            table.getSchema().getName(),\n                            // TABLE_NAME\n                            tableName,\n                            // COLUMN_NAME\n                            c.getName(),\n                            // ORDINAL_POSITION\n                            ValueInteger.get(j + 1),\n                            // COLUMN_DEFAULT\n                            isGenerated ? null : c.getDefaultSQL(),\n                            // IS_NULLABLE\n                            c.isNullable() ? \"YES\" : \"NO\",\n                            // DATA_TYPE\n                            ValueInteger.get(DataType.convertTypeToSQLType(typeInfo)),\n                            // CHARACTER_MAXIMUM_LENGTH\n                            precision,\n                            // CHARACTER_OCTET_LENGTH\n                            precision,\n                            // NUMERIC_PRECISION\n                            precision,\n                            // NUMERIC_PRECISION_RADIX\n                            ValueInteger.get(10),\n                            // NUMERIC_SCALE\n                            scale,\n                            // DATETIME_PRECISION\n                            hasDateTimePrecision ? scale : null,\n                            // INTERVAL_TYPE\n                            isInterval ? createSQLWithoutName.substring(9) : null,\n                            // INTERVAL_PRECISION\n                            isInterval ? precision : null,\n                            // CHARACTER_SET_NAME\n                            CHARACTER_SET_NAME,\n                            // COLLATION_NAME\n                            collation,\n                            // DOMAIN_CATALOG\n                            domain != null ? catalog : null,\n                            // DOMAIN_SCHEMA\n                            domain != null ? domain.getSchema().getName() : null,\n                            // DOMAIN_NAME\n                            domain != null ? domain.getName() : null,\n                            // IS_GENERATED\n                            isGenerated ? \"ALWAYS\" : \"NEVER\",\n                            // GENERATION_EXPRESSION\n                            isGenerated ? c.getDefaultSQL() : null,\n                            // TYPE_NAME\n                            identifier(isInterval ? \"INTERVAL\" : typeInfo.getDeclaredTypeName()),\n                            // NULLABLE\n                            ValueInteger.get(c.isNullable()\n                                    ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls),\n                            // IS_COMPUTED\n                            ValueBoolean.get(isGenerated),\n                            // SELECTIVITY\n                            ValueInteger.get(c.getSelectivity()),\n                            // SEQUENCE_NAME\n                            sequence == null ? null : sequence.getName(),\n                            // REMARKS\n                            replaceNullWithEmpty(c.getComment()),\n                            // SOURCE_DATA_TYPE\n                            // SMALLINT\n                            null,\n                            // COLUMN_TYPE\n                            createSQLWithoutName,\n                            // COLUMN_ON_UPDATE\n                            c.getOnUpdateSQL(),\n                            // IS_VISIBLE\n                            ValueBoolean.get(c.getVisible()),\n                            // CHECK_CONSTRAINT\n                            null\n                    );\n                }\n            }\n            break;\n        }\n        case INDEXES: {\n            // reduce the number of tables to scan - makes some metadata queries\n            // 10x faster\n            final ArrayList<Table> tablesToList;\n            if (indexFrom != null && indexFrom.equals(indexTo)) {\n                String tableName = indexFrom.getString();\n                if (tableName == null) {\n                    break;\n                }\n                tablesToList = getTablesByName(session, tableName);\n            } else {\n                tablesToList = getAllTables(session);\n            }\n            for (Table table : tablesToList) {\n                String tableName = table.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                if (hideTable(table, session)) {\n                    continue;\n                }\n                ArrayList<Index> indexes = table.getIndexes();\n                ArrayList<Constraint> constraints = table.getConstraints();\n                for (int j = 0; indexes != null && j < indexes.size(); j++) {\n                    Index index = indexes.get(j);\n                    if (index.getCreateSQL() == null) {\n                        continue;\n                    }\n                    String constraintName = null;\n                    for (int k = 0; constraints != null && k < constraints.size(); k++) {\n                        Constraint constraint = constraints.get(k);\n                        if (constraint.usesIndex(index)) {\n                            if (index.getIndexType().isPrimaryKey()) {\n                                if (constraint.getConstraintType() == Constraint.Type.PRIMARY_KEY) {\n                                    constraintName = constraint.getName();\n                                }\n                            } else {\n                                constraintName = constraint.getName();\n                            }\n                        }\n                    }\n                    IndexColumn[] cols = index.getIndexColumns();\n                    int uniqueColumnCount = index.getUniqueColumnCount();\n                    String indexClass = index.getClass().getName();\n                    for (int k = 0; k < cols.length; k++) {\n                        IndexColumn idxCol = cols[k];\n                        Column column = idxCol.column;\n                        add(session,\n                                rows,\n                                // TABLE_CATALOG\n                                catalog,\n                                // TABLE_SCHEMA\n                                table.getSchema().getName(),\n                                // TABLE_NAME\n                                tableName,\n                                // NON_UNIQUE\n                                ValueBoolean.get(k >= uniqueColumnCount),\n                                // INDEX_NAME\n                                index.getName(),\n                                // ORDINAL_POSITION\n                                ValueSmallint.get((short) (k + 1)),\n                                // COLUMN_NAME\n                                column.getName(),\n                                // CARDINALITY\n                                ValueInteger.get(0),\n                                // PRIMARY_KEY\n                                ValueBoolean.get(index.getIndexType().isPrimaryKey()),\n                                // INDEX_TYPE_NAME\n                                index.getIndexType().getSQL(),\n                                // IS_GENERATED\n                                ValueBoolean.get(index.getIndexType().getBelongsToConstraint()),\n                                // INDEX_TYPE\n                                ValueSmallint.get(DatabaseMetaData.tableIndexOther),\n                                // ASC_OR_DESC\n                                (idxCol.sortType & SortOrder.DESCENDING) != 0 ? \"D\" : \"A\",\n                                // PAGES\n                                ValueInteger.get(0),\n                                // FILTER_CONDITION\n                                \"\",\n                                // REMARKS\n                                replaceNullWithEmpty(index.getComment()),\n                                // SQL\n                                index.getCreateSQL(),\n                                // ID\n                                ValueInteger.get(index.getId()),\n                                // SORT_TYPE\n                                ValueInteger.get(idxCol.sortType),\n                                // CONSTRAINT_NAME\n                                constraintName,\n                                // INDEX_CLASS\n                                indexClass\n                            );\n                    }\n                }\n            }\n            break;\n        }\n        case TABLE_TYPES: {\n            add(session, rows, TableType.TABLE.toString());\n            add(session, rows, TableType.TABLE_LINK.toString());\n            add(session, rows, TableType.SYSTEM_TABLE.toString());\n            add(session, rows, TableType.VIEW.toString());\n            add(session, rows, TableType.EXTERNAL_TABLE_ENGINE.toString());\n            break;\n        }\n        case TYPE_INFO: {\n            for (int i = 1, l = Value.TYPE_COUNT; i < l; i++) {\n                DataType t = DataType.getDataType(i);\n                add(session,\n                        rows,\n                        // TYPE_NAME\n                        Value.getTypeName(t.type),\n                        // DATA_TYPE\n                        ValueInteger.get(t.sqlType),\n                        // PRECISION\n                        ValueInteger.get(MathUtils.convertLongToInt(t.maxPrecision)),\n                        // PREFIX\n                        t.prefix,\n                        // SUFFIX\n                        t.suffix,\n                        // PARAMS\n                        t.params,\n                        // AUTO_INCREMENT\n                        ValueBoolean.FALSE,\n                        // MINIMUM_SCALE\n                        ValueSmallint.get(MathUtils.convertIntToShort(t.minScale)),\n                        // MAXIMUM_SCALE\n                        ValueSmallint.get(MathUtils.convertIntToShort(t.maxScale)),\n                        // RADIX\n                        DataType.isNumericType(i) ? ValueInteger.get(10) : null,\n                        // POS\n                        ValueInteger.get(t.type),\n                        // CASE_SENSITIVE\n                        ValueBoolean.get(t.caseSensitive),\n                        // NULLABLE\n                        ValueSmallint.get((short) DatabaseMetaData.typeNullable),\n                        // SEARCHABLE\n                        ValueSmallint.get((short) DatabaseMetaData.typeSearchable)\n                );\n            }\n            break;\n        }\n        case CATALOGS: {\n            add(session, rows, catalog);\n            break;\n        }\n        case SETTINGS: {\n            for (Setting s : database.getAllSettings()) {\n                String value = s.getStringValue();\n                if (value == null) {\n                    value = Integer.toString(s.getIntValue());\n                }\n                add(session,\n                        rows,\n                        identifier(s.getName()), value\n                );\n            }\n            add(session, rows, \"info.BUILD_ID\", \"\" + Constants.BUILD_ID);\n            add(session, rows, \"info.VERSION_MAJOR\", \"\" + Constants.VERSION_MAJOR);\n            add(session, rows, \"info.VERSION_MINOR\", \"\" + Constants.VERSION_MINOR);\n            add(session, rows, \"info.VERSION\", Constants.FULL_VERSION);\n            if (admin) {\n                String[] settings = {\n                        \"java.runtime.version\", \"java.vm.name\",\n                        \"java.vendor\", \"os.name\", \"os.arch\", \"os.version\",\n                        \"sun.os.patch.level\", \"file.separator\",\n                        \"path.separator\", \"line.separator\", \"user.country\",\n                        \"user.language\", \"user.variant\", \"file.encoding\" };\n                for (String s : settings) {\n                    add(session, rows, \"property.\" + s, Utils.getProperty(s, \"\"));\n                }\n            }\n            add(session, rows, \"DEFAULT_NULL_ORDERING\", database.getDefaultNullOrdering().name());\n            add(session, rows, \"EXCLUSIVE\", database.getExclusiveSession() == null ?\n                    \"FALSE\" : \"TRUE\");\n            add(session, rows, \"MODE\", database.getMode().getName());\n            add(session, rows, \"QUERY_TIMEOUT\", Integer.toString(session.getQueryTimeout()));\n            add(session, rows, \"TIME ZONE\", session.currentTimeZone().getId());\n            add(session, rows, \"TRUNCATE_LARGE_LENGTH\", session.isTruncateLargeLength() ? \"TRUE\" : \"FALSE\");\n            add(session, rows, \"VARIABLE_BINARY\", session.isVariableBinary() ? \"TRUE\" : \"FALSE\");\n            add(session, rows, \"OLD_INFORMATION_SCHEMA\", session.isOldInformationSchema() ? \"TRUE\" : \"FALSE\");\n            BitSet nonKeywords = session.getNonKeywords();\n            if (nonKeywords != null) {\n                add(session, rows, \"NON_KEYWORDS\", Parser.formatNonKeywords(nonKeywords));\n            }\n            add(session, rows, \"RETENTION_TIME\", Integer.toString(database.getRetentionTime()));\n            // database settings\n            for (Map.Entry<String, String> entry : database.getSettings().getSortedSettings()) {\n                add(session, rows, entry.getKey(), entry.getValue());\n            }\n            Store store = database.getStore();\n            MVStore mvStore = store.getMvStore();\n            FileStore fs = mvStore.getFileStore();\n            if (fs != null) {\n                add(session, rows,\n                        \"info.FILE_WRITE\", Long.toString(fs.getWriteCount()));\n                add(session, rows,\n                        \"info.FILE_WRITE_BYTES\", Long.toString(fs.getWriteBytes()));\n                add(session, rows,\n                        \"info.FILE_READ\", Long.toString(fs.getReadCount()));\n                add(session, rows,\n                        \"info.FILE_READ_BYTES\", Long.toString(fs.getReadBytes()));\n                add(session, rows,\n                        \"info.UPDATE_FAILURE_PERCENT\",\n                        String.format(Locale.ENGLISH, \"%.2f%%\", 100 * mvStore.getUpdateFailureRatio()));\n                add(session, rows,\n                        \"info.FILL_RATE\", Integer.toString(mvStore.getFillRate()));\n                add(session, rows,\n                        \"info.CHUNKS_FILL_RATE\", Integer.toString(mvStore.getChunksFillRate()));\n                add(session, rows,\n                        \"info.CHUNKS_FILL_RATE_RW\", Integer.toString(mvStore.getRewritableChunksFillRate()));\n                try {\n                    add(session, rows,\n                            \"info.FILE_SIZE\", Long.toString(fs.getFile().size()));\n                } catch (IOException ignore) {/**/}\n                add(session, rows,\n                        \"info.CHUNK_COUNT\", Long.toString(mvStore.getChunkCount()));\n                add(session, rows,\n                        \"info.PAGE_COUNT\", Long.toString(mvStore.getPageCount()));\n                add(session, rows,\n                        \"info.PAGE_COUNT_LIVE\", Long.toString(mvStore.getLivePageCount()));\n                add(session, rows,\n                        \"info.PAGE_SIZE\", Integer.toString(mvStore.getPageSplitSize()));\n                add(session, rows,\n                        \"info.CACHE_MAX_SIZE\", Integer.toString(mvStore.getCacheSize()));\n                add(session, rows,\n                        \"info.CACHE_SIZE\", Integer.toString(mvStore.getCacheSizeUsed()));\n                add(session, rows,\n                        \"info.CACHE_HIT_RATIO\", Integer.toString(mvStore.getCacheHitRatio()));\n                add(session, rows, \"info.TOC_CACHE_HIT_RATIO\",\n                        Integer.toString(mvStore.getTocCacheHitRatio()));\n                add(session, rows,\n                        \"info.LEAF_RATIO\", Integer.toString(mvStore.getLeafRatio()));\n            }\n            break;\n        }\n        case HELP: {\n            String resource = \"/org/h2/res/help.csv\";\n            try {\n                final byte[] data = Utils.getResource(resource);\n                final Reader reader = new InputStreamReader(\n                        new ByteArrayInputStream(data));\n                final Csv csv = new Csv();\n                csv.setLineCommentCharacter('#');\n                final ResultSet rs = csv.read(reader, null);\n                final int columnCount = rs.getMetaData().getColumnCount() - 1;\n                final String[] values = new String[5];\n                for (int i = 0; rs.next(); i++) {\n                    for (int j = 0; j < columnCount; j++) {\n                        String s = rs.getString(1 + j);\n                        switch (j) {\n                        case 2: // SYNTAX column\n                            // Strip out the special annotations we use to help build\n                            // the railroad/BNF diagrams\n                            s = Help.stripAnnotationsFromSyntax(s);\n                            break;\n                        case 3: // TEXT column\n                            s = Help.processHelpText(s);\n                        }\n                        values[j] = s.trim();\n                    }\n                    add(session,\n                        rows,\n                        // ID\n                        ValueInteger.get(i),\n                        // SECTION\n                        values[0],\n                        // TOPIC\n                        values[1],\n                        // SYNTAX\n                        values[2],\n                        // TEXT\n                        values[3]\n                    );\n                }\n            } catch (Exception e) {\n                throw DbException.convert(e);\n            }\n            break;\n        }\n        case SEQUENCES: {\n            for (SchemaObject obj : getAllSchemaObjects(DbObject.SEQUENCE)) {\n                Sequence s = (Sequence) obj;\n                TypeInfo dataType = s.getDataType();\n                String dataTypeName = Value.getTypeName(dataType.getValueType());\n                ValueInteger declaredScale = ValueInteger.get(dataType.getScale());\n                add(session,\n                        rows,\n                        // SEQUENCE_CATALOG\n                        catalog,\n                        // SEQUENCE_SCHEMA\n                        s.getSchema().getName(),\n                        // SEQUENCE_NAME\n                        s.getName(),\n                        // DATA_TYPE\n                        dataTypeName,\n                        // NUMERIC_PRECISION\n                        ValueInteger.get(s.getEffectivePrecision()),\n                        // NUMERIC_PRECISION_RADIX\n                        ValueInteger.get(10),\n                        // NUMERIC_SCALE\n                        declaredScale,\n                        // START_VALUE\n                        ValueBigint.get(s.getStartValue()),\n                        // MINIMUM_VALUE\n                        ValueBigint.get(s.getMinValue()),\n                        // MAXIMUM_VALUE\n                        ValueBigint.get(s.getMaxValue()),\n                        // INCREMENT\n                        ValueBigint.get(s.getIncrement()),\n                        // CYCLE_OPTION\n                        s.getCycle().isCycle() ? \"YES\" : \"NO\",\n                        // DECLARED_DATA_TYPE\n                        dataTypeName,\n                        // DECLARED_NUMERIC_PRECISION\n                        ValueInteger.get((int) dataType.getPrecision()),\n                        // DECLARED_NUMERIC_SCALE\n                        declaredScale,\n                        // CURRENT_VALUE\n                        ValueBigint.get(s.getCurrentValue()),\n                        // IS_GENERATED\n                        ValueBoolean.get(s.getBelongsToTable()),\n                        // REMARKS\n                        replaceNullWithEmpty(s.getComment()),\n                        // CACHE\n                        ValueBigint.get(s.getCacheSize()),\n                        // ID\n                        ValueInteger.get(s.getId()),\n                        // MIN_VALUE\n                        ValueBigint.get(s.getMinValue()),\n                        // MAX_VALUE\n                        ValueBigint.get(s.getMaxValue()),\n                        // IS_CYCLE\n                        ValueBoolean.get(s.getCycle().isCycle())\n                    );\n            }\n            break;\n        }\n        case USERS: {\n            for (RightOwner rightOwner : database.getAllUsersAndRoles()) {\n                if (rightOwner instanceof User) {\n                    User u = (User) rightOwner;\n                    if (admin || session.getUser() == u) {\n                        add(session,\n                                rows,\n                                // NAME\n                                identifier(u.getName()),\n                                // ADMIN\n                                String.valueOf(u.isAdmin()),\n                                // REMARKS\n                                replaceNullWithEmpty(u.getComment()),\n                                // ID\n                                ValueInteger.get(u.getId())\n                        );\n                    }\n                }\n            }\n            break;\n        }\n        case ROLES: {\n            for (RightOwner rightOwner : database.getAllUsersAndRoles()) {\n                if (rightOwner instanceof Role) {\n                    Role r = (Role) rightOwner;\n                    if (admin || session.getUser().isRoleGranted(r)) {\n                        add(session,\n                                rows,\n                                // NAME\n                                identifier(r.getName()),\n                                // REMARKS\n                                replaceNullWithEmpty(r.getComment()),\n                                // ID\n                                ValueInteger.get(r.getId())\n                        );\n                    }\n                }\n            }\n            break;\n        }\n        case RIGHTS: {\n            if (admin) {\n                for (Right r : database.getAllRights()) {\n                    Role role = r.getGrantedRole();\n                    DbObject grantee = r.getGrantee();\n                    String rightType = grantee.getType() == DbObject.USER ? \"USER\" : \"ROLE\";\n                    if (role == null) {\n                        DbObject object = r.getGrantedObject();\n                        Schema schema = null;\n                        Table table = null;\n                        if (object != null) {\n                            if (object instanceof Schema) {\n                                schema = (Schema) object;\n                            } else if (object instanceof Table) {\n                                table = (Table) object;\n                                schema = table.getSchema();\n                            }\n                        }\n                        String tableName = (table != null) ? table.getName() : \"\";\n                        String schemaName = (schema != null) ? schema.getName() : \"\";\n                        if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                            continue;\n                        }\n                        add(session,\n                                rows,\n                                // GRANTEE\n                                identifier(grantee.getName()),\n                                // GRANTEETYPE\n                                rightType,\n                                // GRANTEDROLE\n                                \"\",\n                                // RIGHTS\n                                r.getRights(),\n                                // TABLE_SCHEMA\n                                schemaName,\n                                // TABLE_NAME\n                                tableName,\n                                // ID\n                                ValueInteger.get(r.getId())\n                        );\n                    } else {\n                        add(session,\n                                rows,\n                                // GRANTEE\n                                identifier(grantee.getName()),\n                                // GRANTEETYPE\n                                rightType,\n                                // GRANTEDROLE\n                                identifier(role.getName()),\n                                // RIGHTS\n                                \"\",\n                                // TABLE_SCHEMA\n                                \"\",\n                                // TABLE_NAME\n                                \"\",\n                                // ID\n                                ValueInteger.get(r.getId())\n                        );\n                    }\n                }\n            }\n            break;\n        }\n        case FUNCTION_ALIASES:\n            for (Schema schema : database.getAllSchemas()) {\n                for (UserDefinedFunction userDefinedFunction : schema.getAllFunctionsAndAggregates()) {\n                    if (userDefinedFunction instanceof FunctionAlias) {\n                        FunctionAlias alias = (FunctionAlias) userDefinedFunction;\n                        JavaMethod[] methods;\n                        try {\n                            methods = alias.getJavaMethods();\n                        } catch (DbException e) {\n                            continue;\n                        }\n                        for (FunctionAlias.JavaMethod method : methods) {\n                            TypeInfo typeInfo = method.getDataType();\n                            if (typeInfo == null) {\n                                typeInfo = TypeInfo.TYPE_NULL;\n                            }\n                            add(session,\n                                    rows,\n                                    // ALIAS_CATALOG\n                                    catalog,\n                                    // ALIAS_SCHEMA\n                                    alias.getSchema().getName(),\n                                    // ALIAS_NAME\n                                    alias.getName(),\n                                    // JAVA_CLASS\n                                    alias.getJavaClassName(),\n                                    // JAVA_METHOD\n                                    alias.getJavaMethodName(),\n                                    // DATA_TYPE\n                                    ValueInteger.get(DataType.convertTypeToSQLType(typeInfo)),\n                                    // TYPE_NAME\n                                    typeInfo.getDeclaredTypeName(),\n                                    // COLUMN_COUNT\n                                    ValueInteger.get(method.getParameterCount()),\n                                    // RETURNS_RESULT\n                                    ValueSmallint.get(typeInfo.getValueType() == Value.NULL\n                                            ? (short) DatabaseMetaData.procedureNoResult\n                                            : (short) DatabaseMetaData.procedureReturnsResult),\n                                    // REMARKS\n                                    replaceNullWithEmpty(alias.getComment()),\n                                    // ID\n                                    ValueInteger.get(alias.getId()),\n                                    // SOURCE\n                                    alias.getSource()\n                                    // when adding more columns, see also below\n                            );\n                        }\n                    } else {\n                        add(session,\n                                rows,\n                                // ALIAS_CATALOG\n                                catalog,\n                                // ALIAS_SCHEMA\n                                database.getMainSchema().getName(),\n                                // ALIAS_NAME\n                                userDefinedFunction.getName(),\n                                // JAVA_CLASS\n                                userDefinedFunction.getJavaClassName(),\n                                // JAVA_METHOD\n                                \"\",\n                                // DATA_TYPE\n                                ValueInteger.get(Types.NULL),\n                                // TYPE_NAME\n                                \"NULL\",\n                                // COLUMN_COUNT\n                                ValueInteger.get(1),\n                                // RETURNS_RESULT\n                                ValueSmallint.get((short) DatabaseMetaData.procedureReturnsResult),\n                                // REMARKS\n                                replaceNullWithEmpty(userDefinedFunction.getComment()),\n                                // ID\n                                ValueInteger.get(userDefinedFunction.getId()),\n                                // SOURCE\n                                \"\"\n                                // when adding more columns, see also below\n                        );\n                    }\n                }\n            }\n            break;\n        case FUNCTION_COLUMNS:\n            for (Schema schema : database.getAllSchemas()) {\n                for (UserDefinedFunction userDefinedFunction : schema.getAllFunctionsAndAggregates()) {\n                    if (userDefinedFunction instanceof FunctionAlias) {\n                        FunctionAlias alias = (FunctionAlias) userDefinedFunction;\n                        JavaMethod[] methods;\n                        try {\n                            methods = alias.getJavaMethods();\n                        } catch (DbException e) {\n                            continue;\n                        }\n                        for (FunctionAlias.JavaMethod method : methods) {\n                            // Add return column index 0\n                            TypeInfo typeInfo = method.getDataType();\n                            if (typeInfo != null && typeInfo.getValueType() != Value.NULL) {\n                                DataType dt = DataType.getDataType(typeInfo.getValueType());\n                                add(session,\n                                        rows,\n                                        // ALIAS_CATALOG\n                                        catalog,\n                                        // ALIAS_SCHEMA\n                                        alias.getSchema().getName(),\n                                        // ALIAS_NAME\n                                        alias.getName(),\n                                        // JAVA_CLASS\n                                        alias.getJavaClassName(),\n                                        // JAVA_METHOD\n                                        alias.getJavaMethodName(),\n                                        // COLUMN_COUNT\n                                        ValueInteger.get(method.getParameterCount()),\n                                        // POS\n                                        ValueInteger.get(0),\n                                        // COLUMN_NAME\n                                        \"P0\",\n                                        // DATA_TYPE\n                                        ValueInteger.get(DataType.convertTypeToSQLType(typeInfo)),\n                                        // TYPE_NAME\n                                        typeInfo.getDeclaredTypeName(),\n                                        // PRECISION\n                                        ValueInteger.get(MathUtils.convertLongToInt(dt.defaultPrecision)),\n                                        // SCALE\n                                        ValueSmallint.get(MathUtils.convertIntToShort(dt.defaultScale)),\n                                        // RADIX\n                                        ValueSmallint.get((short) 10),\n                                        // NULLABLE\n                                        ValueSmallint.get((short) DatabaseMetaData.columnNullableUnknown),\n                                        // COLUMN_TYPE\n                                        ValueSmallint.get((short) DatabaseMetaData.procedureColumnReturn),\n                                        // REMARKS\n                                        \"\",\n                                        // COLUMN_DEFAULT\n                                        null\n                                );\n                            }\n                            Class<?>[] columnList = method.getColumnClasses();\n                            for (int k = 0; k < columnList.length; k++) {\n                                if (method.hasConnectionParam() && k == 0) {\n                                    continue;\n                                }\n                                Class<?> clazz = columnList[k];\n                                TypeInfo columnTypeInfo = ValueToObjectConverter2.classToType(clazz);\n                                DataType dt = DataType.getDataType(columnTypeInfo.getValueType());\n                                add(session,\n                                        rows,\n                                        // ALIAS_CATALOG\n                                        catalog,\n                                        // ALIAS_SCHEMA\n                                        alias.getSchema().getName(),\n                                        // ALIAS_NAME\n                                        alias.getName(),\n                                        // JAVA_CLASS\n                                        alias.getJavaClassName(),\n                                        // JAVA_METHOD\n                                        alias.getJavaMethodName(),\n                                        // COLUMN_COUNT\n                                        ValueInteger.get(method.getParameterCount()),\n                                        // POS\n                                        ValueInteger.get(k + (method.hasConnectionParam() ? 0 : 1)),\n                                        // COLUMN_NAME\n                                        \"P\" + (k + 1),\n                                        // DATA_TYPE\n                                        ValueInteger.get(DataType.convertTypeToSQLType(columnTypeInfo)),\n                                        // TYPE_NAME\n                                        columnTypeInfo.getDeclaredTypeName(),\n                                        // PRECISION\n                                        ValueInteger.get(MathUtils.convertLongToInt(dt.defaultPrecision)),\n                                        // SCALE\n                                        ValueSmallint.get(MathUtils.convertIntToShort(dt.defaultScale)),\n                                        // RADIX\n                                        ValueSmallint.get((short) 10),\n                                        // NULLABLE\n                                        ValueSmallint.get(clazz.isPrimitive()\n                                                ? (short) DatabaseMetaData.columnNoNulls\n                                                : (short) DatabaseMetaData.columnNullable),\n                                        // COLUMN_TYPE\n                                        ValueSmallint.get((short) DatabaseMetaData.procedureColumnIn),\n                                        // REMARKS\n                                        \"\",\n                                        // COLUMN_DEFAULT\n                                        null\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n            break;\n        case SCHEMATA: {\n            String collation = database.getCompareMode().getName();\n            for (Schema schema : database.getAllSchemas()) {\n                add(session,\n                        rows,\n                        // CATALOG_NAME\n                        catalog,\n                        // SCHEMA_NAME\n                        schema.getName(),\n                        // SCHEMA_OWNER\n                        identifier(schema.getOwner().getName()),\n                        // DEFAULT_CHARACTER_SET_NAME\n                        CHARACTER_SET_NAME,\n                        // DEFAULT_COLLATION_NAME\n                        collation,\n                        // IS_DEFAULT\n                        ValueBoolean.get(schema.getId() == Constants.MAIN_SCHEMA_ID),\n                        // REMARKS\n                        replaceNullWithEmpty(schema.getComment()),\n                        // ID\n                        ValueInteger.get(schema.getId())\n                );\n            }\n            break;\n        }\n        case TABLE_PRIVILEGES: {\n            for (Right r : database.getAllRights()) {\n                DbObject object = r.getGrantedObject();\n                if (!(object instanceof Table)) {\n                    continue;\n                }\n                Table table = (Table) object;\n                if (hideTable(table, session)) {\n                    continue;\n                }\n                String tableName = table.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                addPrivileges(session, rows, r.getGrantee(), catalog, table, null, r.getRightMask());\n            }\n            break;\n        }\n        case COLUMN_PRIVILEGES: {\n            for (Right r : database.getAllRights()) {\n                DbObject object = r.getGrantedObject();\n                if (!(object instanceof Table)) {\n                    continue;\n                }\n                Table table = (Table) object;\n                if (hideTable(table, session)) {\n                    continue;\n                }\n                String tableName = table.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                DbObject grantee = r.getGrantee();\n                int mask = r.getRightMask();\n                for (Column column : table.getColumns()) {\n                    addPrivileges(session, rows, grantee, catalog, table, column.getName(), mask);\n                }\n            }\n            break;\n        }\n        case COLLATIONS: {\n            for (Locale l : CompareMode.getCollationLocales(false)) {\n                add(session,\n                        rows,\n                        // NAME\n                        CompareMode.getName(l), // KEY\n                        l.toString()\n                );\n            }\n            break;\n        }\n        case VIEWS: {\n            for (Table table : getAllTables(session)) {\n                if (table.getTableType() != TableType.VIEW) {\n                    continue;\n                }\n                String tableName = table.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                TableView view = (TableView) table;\n                add(session,\n                        rows,\n                        // TABLE_CATALOG\n                        catalog,\n                        // TABLE_SCHEMA\n                        table.getSchema().getName(),\n                        // TABLE_NAME\n                        tableName,\n                        // VIEW_DEFINITION\n                        table.getCreateSQL(),\n                        // CHECK_OPTION\n                        \"NONE\",\n                        // IS_UPDATABLE\n                        \"NO\",\n                        // STATUS\n                        view.isInvalid() ? \"INVALID\" : \"VALID\",\n                        // REMARKS\n                        replaceNullWithEmpty(view.getComment()),\n                        // ID\n                        ValueInteger.get(view.getId())\n                );\n            }\n            break;\n        }\n        case IN_DOUBT: {\n            ArrayList<InDoubtTransaction> prepared = database.getInDoubtTransactions();\n            if (prepared != null && admin) {\n                for (InDoubtTransaction prep : prepared) {\n                    add(session,\n                            rows,\n                            // TRANSACTION\n                            prep.getTransactionName(), // STATE\n                            prep.getStateDescription()\n                    );\n                }\n            }\n            break;\n        }\n        case CROSS_REFERENCES: {\n            for (SchemaObject obj : getAllSchemaObjects(\n                    DbObject.CONSTRAINT)) {\n                Constraint constraint = (Constraint) obj;\n                if (constraint.getConstraintType() != Constraint.Type.REFERENTIAL) {\n                    continue;\n                }\n                ConstraintReferential ref = (ConstraintReferential) constraint;\n                IndexColumn[] cols = ref.getColumns();\n                IndexColumn[] refCols = ref.getRefColumns();\n                Table tab = ref.getTable();\n                Table refTab = ref.getRefTable();\n                String tableName = refTab.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                ValueSmallint update = ValueSmallint.get(getRefAction(ref.getUpdateAction()));\n                ValueSmallint delete = ValueSmallint.get(getRefAction(ref.getDeleteAction()));\n                for (int j = 0; j < cols.length; j++) {\n                    add(session,\n                            rows,\n                            // PKTABLE_CATALOG\n                            catalog,\n                            // PKTABLE_SCHEMA\n                            refTab.getSchema().getName(),\n                            // PKTABLE_NAME\n                            refTab.getName(),\n                            // PKCOLUMN_NAME\n                            refCols[j].column.getName(),\n                            // FKTABLE_CATALOG\n                            catalog,\n                            // FKTABLE_SCHEMA\n                            tab.getSchema().getName(),\n                            // FKTABLE_NAME\n                            tab.getName(),\n                            // FKCOLUMN_NAME\n                            cols[j].column.getName(),\n                            // ORDINAL_POSITION\n                            ValueSmallint.get((short) (j + 1)),\n                            // UPDATE_RULE\n                            update,\n                            // DELETE_RULE\n                            delete,\n                            // FK_NAME\n                            ref.getName(),\n                            // PK_NAME\n                            ref.getReferencedConstraint().getName(),\n                            // DEFERRABILITY\n                            ValueSmallint.get((short) DatabaseMetaData.importedKeyNotDeferrable)\n                    );\n                }\n            }\n            break;\n        }\n        case CONSTRAINTS: {\n            for (SchemaObject obj : getAllSchemaObjects(\n                    DbObject.CONSTRAINT)) {\n                Constraint constraint = (Constraint) obj;\n                Constraint.Type constraintType = constraint.getConstraintType();\n                String checkExpression = null;\n                IndexColumn[] indexColumns = null;\n                Table table = constraint.getTable();\n                if (hideTable(table, session)) {\n                    continue;\n                }\n                Index index = constraint.getIndex();\n                String uniqueIndexName = null;\n                if (index != null) {\n                    uniqueIndexName = index.getName();\n                }\n                String tableName = table.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                if (constraintType == Constraint.Type.CHECK) {\n                    checkExpression = ((ConstraintCheck) constraint).getExpression().getSQL(HasSQL.DEFAULT_SQL_FLAGS);\n                } else if (constraintType == Constraint.Type.UNIQUE ||\n                        constraintType == Constraint.Type.PRIMARY_KEY) {\n                    indexColumns = ((ConstraintUnique) constraint).getColumns();\n                } else if (constraintType == Constraint.Type.REFERENTIAL) {\n                    indexColumns = ((ConstraintReferential) constraint).getColumns();\n                }\n                String columnList = null;\n                if (indexColumns != null) {\n                    StringBuilder builder = new StringBuilder();\n                    for (int i = 0, length = indexColumns.length; i < length; i++) {\n                        if (i > 0) {\n                            builder.append(',');\n                        }\n                        builder.append(indexColumns[i].column.getName());\n                    }\n                    columnList = builder.toString();\n                }\n                add(session,\n                        rows,\n                        // CONSTRAINT_CATALOG\n                        catalog,\n                        // CONSTRAINT_SCHEMA\n                        constraint.getSchema().getName(),\n                        // CONSTRAINT_NAME\n                        constraint.getName(),\n                        // CONSTRAINT_TYPE\n                        constraintType == Constraint.Type.PRIMARY_KEY ?\n                                constraintType.getSqlName() : constraintType.name(),\n                        // TABLE_CATALOG\n                        catalog,\n                        // TABLE_SCHEMA\n                        table.getSchema().getName(),\n                        // TABLE_NAME\n                        tableName,\n                        // UNIQUE_INDEX_NAME\n                        uniqueIndexName,\n                        // CHECK_EXPRESSION\n                        checkExpression,\n                        // COLUMN_LIST\n                        columnList,\n                        // REMARKS\n                        replaceNullWithEmpty(constraint.getComment()),\n                        // SQL\n                        constraint.getCreateSQL(),\n                        // ID\n                        ValueInteger.get(constraint.getId())\n                    );\n            }\n            break;\n        }\n        case CONSTANTS: {\n            for (SchemaObject obj : getAllSchemaObjects(\n                    DbObject.CONSTANT)) {\n                Constant constant = (Constant) obj;\n                ValueExpression expr = constant.getValue();\n                add(session,\n                        rows,\n                        // CONSTANT_CATALOG\n                        catalog,\n                        // CONSTANT_SCHEMA\n                        constant.getSchema().getName(),\n                        // CONSTANT_NAME\n                        constant.getName(),\n                        // DATA_TYPE\n                        ValueInteger.get(DataType.convertTypeToSQLType(expr.getType())),\n                        // REMARKS\n                        replaceNullWithEmpty(constant.getComment()),\n                        // SQL\n                        expr.getSQL(DEFAULT_SQL_FLAGS),\n                        // ID\n                        ValueInteger.get(constant.getId())\n                    );\n            }\n            break;\n        }\n        case DOMAINS: {\n            for (SchemaObject obj : getAllSchemaObjects(DbObject.DOMAIN)) {\n                Domain domain = (Domain) obj;\n                Domain parentDomain = domain.getDomain();\n                TypeInfo typeInfo = domain.getDataType();\n                add(session,\n                        rows,\n                        // DOMAIN_CATALOG\n                        catalog,\n                        // DOMAIN_SCHEMA\n                        domain.getSchema().getName(),\n                        // DOMAIN_NAME\n                        domain.getName(),\n                        // DOMAIN_DEFAULT\n                        domain.getDefaultSQL(),\n                        // DOMAIN_ON_UPDATE\n                        domain.getOnUpdateSQL(),\n                        // DATA_TYPE\n                        ValueInteger.get(DataType.convertTypeToSQLType(typeInfo)),\n                        // PRECISION\n                        ValueInteger.get(MathUtils.convertLongToInt(typeInfo.getPrecision())),\n                        // SCALE\n                        ValueInteger.get(typeInfo.getScale()),\n                        // TYPE_NAME\n                        typeInfo.getDeclaredTypeName(),\n                        // PARENT_DOMAIN_CATALOG\n                        parentDomain != null ? catalog : null,\n                        // PARENT_DOMAIN_SCHEMA\n                        parentDomain != null ? parentDomain.getSchema().getName() : null,\n                        // PARENT_DOMAIN_NAME\n                        parentDomain != null ? parentDomain.getName() : null,\n                        // SELECTIVITY INT\n                        ValueInteger.get(Constants.SELECTIVITY_DEFAULT),\n                        // REMARKS\n                        replaceNullWithEmpty(domain.getComment()),\n                        // SQL\n                        domain.getCreateSQL(),\n                        // ID\n                        ValueInteger.get(domain.getId()),\n                        // COLUMN_DEFAULT\n                        domain.getDefaultSQL(),\n                        // IS_NULLABLE\n                        \"YES\",\n                        // CHECK_CONSTRAINT\n                        null\n                );\n            }\n            break;\n        }\n        case TRIGGERS: {\n            for (SchemaObject obj : getAllSchemaObjects(\n                    DbObject.TRIGGER)) {\n                TriggerObject trigger = (TriggerObject) obj;\n                Table table = trigger.getTable();\n                add(session,\n                        rows,\n                        // TRIGGER_CATALOG\n                        catalog,\n                        // TRIGGER_SCHEMA\n                        trigger.getSchema().getName(),\n                        // TRIGGER_NAME\n                        trigger.getName(),\n                        // TRIGGER_TYPE\n                        trigger.getTypeNameList(new StringBuilder()).toString(),\n                        // TABLE_CATALOG\n                        catalog,\n                        // TABLE_SCHEMA\n                        table.getSchema().getName(),\n                        // TABLE_NAME\n                        table.getName(),\n                        // BEFORE\n                        ValueBoolean.get(trigger.isBefore()),\n                        // JAVA_CLASS\n                        trigger.getTriggerClassName(),\n                        // QUEUE_SIZE\n                        ValueInteger.get(trigger.getQueueSize()),\n                        // NO_WAIT\n                        ValueBoolean.get(trigger.isNoWait()),\n                        // REMARKS\n                        replaceNullWithEmpty(trigger.getComment()),\n                        // SQL\n                        trigger.getCreateSQL(),\n                        // ID\n                        ValueInteger.get(trigger.getId())\n                );\n            }\n            break;\n        }\n        case SESSIONS: {\n            for (SessionLocal s : database.getSessions(false)) {\n                if (admin || s == session) {\n                    NetworkConnectionInfo networkConnectionInfo = s.getNetworkConnectionInfo();\n                    Command command = s.getCurrentCommand();\n                    int blockingSessionId = s.getBlockingSessionId();\n                    add(session,\n                            rows,\n                            // ID\n                            ValueInteger.get(s.getId()),\n                            // USER_NAME\n                            s.getUser().getName(),\n                            // SERVER\n                            networkConnectionInfo == null ? null : networkConnectionInfo.getServer(),\n                            // CLIENT_ADDR\n                            networkConnectionInfo == null ? null : networkConnectionInfo.getClient(),\n                            // CLIENT_INFO\n                            networkConnectionInfo == null ? null : networkConnectionInfo.getClientInfo(),\n                            // SESSION_START\n                            s.getSessionStart(),\n                            // ISOLATION_LEVEL\n                            session.getIsolationLevel().getSQL(),\n                            // STATEMENT\n                            command == null ? null : command.toString(),\n                            // STATEMENT_START\n                            command == null ? null : s.getCommandStartOrEnd(),\n                            // CONTAINS_UNCOMMITTED\n                            ValueBoolean.get(s.hasPendingTransaction()),\n                            // STATE\n                            String.valueOf(s.getState()),\n                            // BLOCKER_ID\n                            blockingSessionId == 0 ? null : ValueInteger.get(blockingSessionId),\n                            // SLEEP_SINCE\n                            s.getState() == State.SLEEP ? s.getCommandStartOrEnd() : null\n                    );\n                }\n            }\n            break;\n        }\n        case LOCKS: {\n            for (SessionLocal s : database.getSessions(false)) {\n                if (admin || s == session) {\n                    for (Table table : s.getLocks()) {\n                        add(session,\n                                rows,\n                                // TABLE_SCHEMA\n                                table.getSchema().getName(),\n                                // TABLE_NAME\n                                table.getName(),\n                                // SESSION_ID\n                                ValueInteger.get(s.getId()),\n                                // LOCK_TYPE\n                                table.isLockedExclusivelyBy(s) ? \"WRITE\" : \"READ\"\n                        );\n                    }\n                }\n            }\n            break;\n        }\n        case SESSION_STATE: {\n            for (String name : session.getVariableNames()) {\n                Value v = session.getVariable(name);\n                StringBuilder builder = new StringBuilder().append(\"SET @\").append(name).append(' ');\n                v.getSQL(builder, DEFAULT_SQL_FLAGS);\n                add(session,\n                        rows,\n                        // KEY\n                        \"@\" + name,\n                        // SQL\n                        builder.toString()\n                );\n            }\n            for (Table table : session.getLocalTempTables()) {\n                add(session,\n                        rows,\n                        // KEY\n                        \"TABLE \" + table.getName(),\n                        // SQL\n                        table.getCreateSQL()\n                );\n            }\n            String[] path = session.getSchemaSearchPath();\n            if (path != null && path.length > 0) {\n                StringBuilder builder = new StringBuilder(\"SET SCHEMA_SEARCH_PATH \");\n                for (int i = 0, l = path.length; i < l; i++) {\n                    if (i > 0) {\n                        builder.append(\", \");\n                    }\n                    StringUtils.quoteIdentifier(builder, path[i]);\n                }\n                add(session,\n                        rows,\n                        // KEY\n                        \"SCHEMA_SEARCH_PATH\",\n                        // SQL\n                        builder.toString()\n                );\n            }\n            String schema = session.getCurrentSchemaName();\n            if (schema != null) {\n                add(session,\n                        rows,\n                        // KEY\n                        \"SCHEMA\",\n                        // SQL\n                        StringUtils.quoteIdentifier(new StringBuilder(\"SET SCHEMA \"), schema).toString()\n                );\n            }\n            TimeZoneProvider currentTimeZone = session.currentTimeZone();\n            if (!currentTimeZone.equals(DateTimeUtils.getTimeZone())) {\n                add(session,\n                        rows,\n                        // KEY\n                        \"TIME ZONE\",\n                        // SQL\n                        StringUtils.quoteStringSQL(new StringBuilder(\"SET TIME ZONE \"), currentTimeZone.getId())\n                                .toString()\n                );\n            }\n            break;\n        }\n        case QUERY_STATISTICS: {\n            QueryStatisticsData control = database.getQueryStatisticsData();\n            if (control != null) {\n                for (QueryStatisticsData.QueryEntry entry : control.getQueries()) {\n                    add(session,\n                            rows,\n                            // SQL_STATEMENT\n                            entry.sqlStatement,\n                            // EXECUTION_COUNT\n                            ValueInteger.get(entry.count),\n                            // MIN_EXECUTION_TIME\n                            ValueDouble.get(entry.executionTimeMinNanos / 1_000_000d),\n                            // MAX_EXECUTION_TIME\n                            ValueDouble.get(entry.executionTimeMaxNanos / 1_000_000d),\n                            // CUMULATIVE_EXECUTION_TIME\n                            ValueDouble.get(entry.executionTimeCumulativeNanos / 1_000_000d),\n                            // AVERAGE_EXECUTION_TIME\n                            ValueDouble.get(entry.executionTimeMeanNanos / 1_000_000d),\n                            // STD_DEV_EXECUTION_TIME\n                            ValueDouble.get(entry.getExecutionTimeStandardDeviation() / 1_000_000d),\n                            // MIN_ROW_COUNT\n                            ValueBigint.get(entry.rowCountMin),\n                            // MAX_ROW_COUNT\n                            ValueBigint.get(entry.rowCountMax),\n                            // CUMULATIVE_ROW_COUNT\n                            ValueBigint.get(entry.rowCountCumulative),\n                            // AVERAGE_ROW_COUNT\n                            ValueDouble.get(entry.rowCountMean),\n                            // STD_DEV_ROW_COUNT\n                            ValueDouble.get(entry.getRowCountStandardDeviation())\n                    );\n                }\n            }\n            break;\n        }\n        case SYNONYMS: {\n            for (TableSynonym synonym : database.getAllSynonyms()) {\n                add(session,\n                        rows,\n                        // SYNONYM_CATALOG\n                        catalog,\n                        // SYNONYM_SCHEMA\n                        synonym.getSchema().getName(),\n                        // SYNONYM_NAME\n                        synonym.getName(),\n                        // SYNONYM_FOR\n                        synonym.getSynonymForName(),\n                        // SYNONYM_FOR_SCHEMA\n                        synonym.getSynonymForSchema().getName(),\n                        // TYPE NAME\n                        \"SYNONYM\",\n                        // STATUS\n                        \"VALID\",\n                        // REMARKS\n                        replaceNullWithEmpty(synonym.getComment()),\n                        // ID\n                        ValueInteger.get(synonym.getId())\n                );\n            }\n            break;\n        }\n        case TABLE_CONSTRAINTS: {\n            for (SchemaObject obj : getAllSchemaObjects(DbObject.CONSTRAINT)) {\n                Constraint constraint = (Constraint) obj;\n                Constraint.Type constraintType = constraint.getConstraintType();\n                if (constraintType == Constraint.Type.DOMAIN) {\n                    continue;\n                }\n                Table table = constraint.getTable();\n                if (hideTable(table, session)) {\n                    continue;\n                }\n                String tableName = table.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                add(session,\n                        rows,\n                        // CONSTRAINT_CATALOG\n                        catalog,\n                        // CONSTRAINT_SCHEMA\n                        constraint.getSchema().getName(),\n                        // CONSTRAINT_NAME\n                        constraint.getName(),\n                        // CONSTRAINT_TYPE\n                        constraintType.getSqlName(),\n                        // TABLE_CATALOG\n                        catalog,\n                        // TABLE_SCHEMA\n                        table.getSchema().getName(),\n                        // TABLE_NAME\n                        tableName,\n                        // IS_DEFERRABLE\n                        \"NO\",\n                        // INITIALLY_DEFERRED\n                        \"NO\",\n                        // REMARKS\n                        replaceNullWithEmpty(constraint.getComment()),\n                        // SQL\n                        constraint.getCreateSQL(),\n                        // ID\n                        ValueInteger.get(constraint.getId())\n                );\n            }\n            break;\n        }\n        case DOMAIN_CONSTRAINTS: {\n            for (SchemaObject obj : getAllSchemaObjects(DbObject.CONSTRAINT)) {\n                if (((Constraint) obj).getConstraintType() != Constraint.Type.DOMAIN) {\n                    continue;\n                }\n                ConstraintDomain constraint = (ConstraintDomain) obj;\n                Domain domain = constraint.getDomain();\n                add(session,\n                        rows,\n                        // CONSTRAINT_CATALOG\n                        catalog,\n                        // CONSTRAINT_SCHEMA\n                        constraint.getSchema().getName(),\n                        // CONSTRAINT_NAME\n                        constraint.getName(),\n                        // DOMAIN_CATALOG\n                        catalog,\n                        // DOMAIN_SCHEMA\n                        domain.getSchema().getName(),\n                        // DOMAIN_NAME\n                        domain.getName(),\n                        // IS_DEFERRABLE\n                        \"NO\",\n                        // INITIALLY_DEFERRED\n                        \"NO\",\n                        // REMARKS\n                        replaceNullWithEmpty(constraint.getComment()),\n                        // SQL\n                        constraint.getCreateSQL(),\n                        // ID\n                        ValueInteger.get(constraint.getId())\n                );\n            }\n            break;\n        }\n        case KEY_COLUMN_USAGE: {\n            for (SchemaObject obj : getAllSchemaObjects(DbObject.CONSTRAINT)) {\n                Constraint constraint = (Constraint) obj;\n                Constraint.Type constraintType = constraint.getConstraintType();\n                IndexColumn[] indexColumns = null;\n                if (constraintType == Constraint.Type.UNIQUE || constraintType == Constraint.Type.PRIMARY_KEY) {\n                    indexColumns = ((ConstraintUnique) constraint).getColumns();\n                } else if (constraintType == Constraint.Type.REFERENTIAL) {\n                    indexColumns = ((ConstraintReferential) constraint).getColumns();\n                }\n                if (indexColumns == null) {\n                    continue;\n                }\n                Table table = constraint.getTable();\n                if (hideTable(table, session)) {\n                    continue;\n                }\n                String tableName = table.getName();\n                if (!checkIndex(session, tableName, indexFrom, indexTo)) {\n                    continue;\n                }\n                ConstraintUnique referenced;\n                if (constraintType == Constraint.Type.REFERENTIAL) {\n                    referenced = ((ConstraintReferential) constraint).getReferencedConstraint();\n                } else {\n                    referenced = null;\n                }\n                Index index = constraint.getIndex();\n                for (int i = 0; i < indexColumns.length; i++) {\n                    IndexColumn indexColumn = indexColumns[i];\n                    ValueInteger ordinalPosition = ValueInteger.get(i + 1);\n                    ValueInteger positionInUniqueConstraint = null;\n                    if (referenced != null) {\n                        Column c = ((ConstraintReferential) constraint).getRefColumns()[i].column;\n                        IndexColumn[] refColumns = referenced.getColumns();\n                        for (int j = 0; j < refColumns.length; j++) {\n                            if (refColumns[j].column.equals(c)) {\n                                positionInUniqueConstraint = ValueInteger.get(j + 1);\n                                break;\n                            }\n                        }\n                    }\n                    add(session,\n                            rows,\n                            // CONSTRAINT_CATALOG\n                            catalog,\n                            // CONSTRAINT_SCHEMA\n                            constraint.getSchema().getName(),\n                            // CONSTRAINT_NAME\n                            constraint.getName(),\n                            // TABLE_CATALOG\n                            catalog,\n                            // TABLE_SCHEMA\n                            table.getSchema().getName(),\n                            // TABLE_NAME\n                            tableName,\n                            // COLUMN_NAME\n                            indexColumn.columnName,\n                            // ORDINAL_POSITION\n                            ordinalPosition,\n                            // POSITION_IN_UNIQUE_CONSTRAINT\n                            positionInUniqueConstraint,\n                            // INDEX_CATALOG\n                            index != null ? catalog : null,\n                            // INDEX_SCHEMA\n                            index != null ? index.getSchema().getName() : null,\n                            // INDEX_NAME\n                            index != null ? index.getName() : null\n                    );\n                }\n            }\n            break;\n        }\n        case REFERENTIAL_CONSTRAINTS: {\n            for (SchemaObject obj : getAllSchemaObjects(DbObject.CONSTRAINT)) {\n                if (((Constraint) obj).getConstraintType() != Constraint.Type.REFERENTIAL) {\n                    continue;\n                }\n                ConstraintReferential constraint = (ConstraintReferential) obj;\n                Table table = constraint.getTable();\n                if (hideTable(table, session)) {\n                    continue;\n                }\n                ConstraintUnique unique = constraint.getReferencedConstraint();\n                add(session,\n                        rows,\n                        // CONSTRAINT_CATALOG\n                        catalog,\n                        // CONSTRAINT_SCHEMA\n                        constraint.getSchema().getName(),\n                        // CONSTRAINT_NAME\n                        constraint.getName(),\n                        // UNIQUE_CONSTRAINT_CATALOG\n                        catalog,\n                        // UNIQUE_CONSTRAINT_SCHEMA\n                        unique.getSchema().getName(),\n                        // UNIQUE_CONSTRAINT_NAME\n                        unique.getName(),\n                        // MATCH_OPTION\n                        \"NONE\",\n                        // UPDATE_RULE\n                        constraint.getUpdateAction().getSqlName(),\n                        // DELETE_RULE\n                        constraint.getDeleteAction().getSqlName()\n                );\n            }\n            break;\n        }\n        case CHECK_CONSTRAINTS: {\n            for (SchemaObject obj : getAllSchemaObjects(DbObject.CONSTRAINT)) {\n                Constraint constraint = (Constraint) obj;\n                Type constraintType = constraint.getConstraintType();\n                if (constraintType == Constraint.Type.CHECK) {\n                    ConstraintCheck check = (ConstraintCheck) obj;\n                    Table table = check.getTable();\n                    if (hideTable(table, session)) {\n                        continue;\n                    }\n                } else if (constraintType != Constraint.Type.DOMAIN) {\n                    continue;\n                }\n                add(session,\n                        rows,\n                        // CONSTRAINT_CATALOG\n                        catalog,\n                        // CONSTRAINT_SCHEMA\n                        obj.getSchema().getName(),\n                        // CONSTRAINT_NAME\n                        obj.getName(),\n                        // CHECK_CLAUSE\n                        constraint.getExpression().getSQL(DEFAULT_SQL_FLAGS, Expression.WITHOUT_PARENTHESES)\n                );\n            }\n            break;\n        }\n        case CONSTRAINT_COLUMN_USAGE: {\n            for (SchemaObject obj : getAllSchemaObjects(DbObject.CONSTRAINT)) {\n                Constraint constraint = (Constraint) obj;\n                switch (constraint.getConstraintType()) {\n                case CHECK:\n                case DOMAIN: {\n                    HashSet<Column> columns = new HashSet<>();\n                    constraint.getExpression().isEverything(ExpressionVisitor.getColumnsVisitor(columns, null));\n                    for (Column column: columns) {\n                        Table table = column.getTable();\n                        if (checkIndex(session, table.getName(), indexFrom, indexTo) && !hideTable(table, session)) {\n                            addConstraintColumnUsage(session, rows, catalog, constraint, column);\n                        }\n                    }\n                    break;\n                }\n                case REFERENTIAL: {\n                    Table table = constraint.getRefTable();\n                    if (checkIndex(session, table.getName(), indexFrom, indexTo) && !hideTable(table, session)) {\n                        for (Column column : constraint.getReferencedColumns(table)) {\n                            addConstraintColumnUsage(session, rows, catalog, constraint, column);\n                        }\n                    }\n                }\n                //$FALL-THROUGH$\n                case PRIMARY_KEY:\n                case UNIQUE: {\n                    Table table = constraint.getTable();\n                    if (checkIndex(session, table.getName(), indexFrom, indexTo) && !hideTable(table, session)) {\n                        for (Column column : constraint.getReferencedColumns(table)) {\n                            addConstraintColumnUsage(session, rows, catalog, constraint, column);\n                        }\n                    }\n                }\n                }\n            }\n            break;\n        }\n        default:\n            throw DbException.getInternalError(\"type=\" + type);\n        }\n        return rows;\n    }\n\n    \n@Override\n    public String listSettings() {\n        StringBuilder builder = new StringBuilder();\n        for (Entry<String, String> e : database.getSettings().getSortedSettings()) {\n            builder.append(e.getKey()).append(\" = \").append(e.getValue()).append('\\n');\n        }\n        return builder.toString();\n    }\n\n    "
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Insensitive: The method `getSortedSettings` retrieves settings from the database and formats them into a string representation. While it iterates through settings, this operation is not inherently time-intensive or memory-intensive. The retrieval of settings is typically a lightweight operation, and the impact on performance is minimal unless the number of settings is extraordinarily large, which is not indicated in the provided context. Therefore, it does not directly cause significant performance variations."
        }
    ]
}