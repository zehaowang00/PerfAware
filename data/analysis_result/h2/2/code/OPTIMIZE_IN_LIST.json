{
    "performance_sensitive": "Yes",
    "config_name": "OPTIMIZE_IN_LIST",
    "messages": [
        {
            "sender": "System",
            "content": "Initialize the analysis for the target system and configuration."
        },
        {
            "sender": "Developer",
            "content": "@Override\n    public void createIndexConditions(SessionLocal session, TableFilter filter) {\n        if (not || whenOperand || !(left instanceof ExpressionColumn)) {\n            return;\n        }\n        ExpressionColumn l = (ExpressionColumn) left;\n        if (filter != l.getTableFilter()) {\n            return;\n        }\n        if (session.getDatabase().getSettings().optimizeInList) {\n            TypeInfo colType = l.getType();\n            if (TypeInfo.haveSameOrdering(colType, TypeInfo.getHigherType(colType, type))) {\n                filter.addIndexCondition(IndexCondition.getInList(l, valueList));\n            }\n        }\n    }\n\n    \n@Override\n    public void createIndexConditions(SessionLocal session, TableFilter filter) {\n        if (!session.getDatabase().getSettings().optimizeInList) {\n            return;\n        }\n        if (not || compareType != Comparison.EQUAL) {\n            return;\n        }\n        if (query.getColumnCount() != 1) {\n            return;\n        }\n        if (!(left instanceof ExpressionColumn)) {\n            return;\n        }\n        TypeInfo colType = left.getType();\n        TypeInfo queryType = query.getExpressions().get(0).getType();\n        if (!TypeInfo.haveSameOrdering(colType, TypeInfo.getHigherType(colType, queryType))) {\n            return;\n        }\n        int leftType = colType.getValueType();\n        if (!DataType.hasTotalOrdering(leftType) && leftType != queryType.getValueType()) {\n            return;\n        }\n        ExpressionColumn l = (ExpressionColumn) left;\n        if (filter != l.getTableFilter()) {\n            return;\n        }\n        ExpressionVisitor visitor = ExpressionVisitor.getNotFromResolverVisitor(filter);\n        if (!query.isEverything(visitor)) {\n            return;\n        }\n        filter.addIndexCondition(IndexCondition.getInQuery(l, query));\n    }\n\n}\n\n@Override\n    public void createIndexConditions(SessionLocal session, TableFilter filter) {\n        if (not || whenOperand || !(left instanceof ExpressionColumn)) {\n            return;\n        }\n        ExpressionColumn l = (ExpressionColumn) left;\n        if (filter != l.getTableFilter()) {\n            return;\n        }\n        if (session.getDatabase().getSettings().optimizeInList) {\n            ExpressionVisitor visitor = ExpressionVisitor.getNotFromResolverVisitor(filter);\n            TypeInfo colType = l.getType();\n            for (Expression e : valueList) {\n                if (!e.isEverything(visitor)\n                        || !TypeInfo.haveSameOrdering(colType, TypeInfo.getHigherType(colType, e.getType()))) {\n                    return;\n                }\n            }\n            filter.addIndexCondition(IndexCondition.getInList(l, valueList));\n        }\n    }\n\n    "
        },
        {
            "sender": "PerformanceSensitivity",
            "content": "The configuration is Performance Sensitive: The `OPTIMIZE_IN_LIST` setting directly influences the execution of index conditions, which can significantly affect query performance. When enabled, it allows for optimized handling of IN list queries, potentially reducing the time complexity of operations that would otherwise involve scanning large datasets. The checks for type ordering and the presence of specific conditions (like `not` or `whenOperand`) indicate that the configuration is critical for determining whether an efficient index condition can be applied, which can lead to substantial variations in performance during query execution."
        }
    ]
}